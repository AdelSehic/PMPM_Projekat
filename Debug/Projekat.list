
Projekat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c778  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800c908  0800c908  0000d908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cecc  0800cecc  0000e23c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cecc  0800cecc  0000decc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ced4  0800ced4  0000e23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced4  0800ced4  0000ded4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ced8  0800ced8  0000ded8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800cedc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e23c  2**0
                  CONTENTS
 10 .bss          00000bbc  2000023c  2000023c  0000e23c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000df8  20000df8  0000e23c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e23c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128ef  00000000  00000000  0000e26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f20  00000000  00000000  00020b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00023a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e51  00000000  00000000  00024cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002353b  00000000  00000000  00025b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144cf  00000000  00000000  00049064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d370d  00000000  00000000  0005d533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130c40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061b8  00000000  00000000  00130c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00136e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8f0 	.word	0x0800c8f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	0800c8f0 	.word	0x0800c8f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4909      	ldr	r1, [pc, #36]	@ (8001010 <default_ip_assign+0x2c>)
 8000fec:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000ff0:	f002 ffb2 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4907      	ldr	r1, [pc, #28]	@ (8001014 <default_ip_assign+0x30>)
 8000ff8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8000ffc:	f002 ffac 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8001000:	2204      	movs	r2, #4
 8001002:	4905      	ldr	r1, [pc, #20]	@ (8001018 <default_ip_assign+0x34>)
 8001004:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001008:	f002 ffa6 	bl	8003f58 <WIZCHIP_WRITE_BUF>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000268 	.word	0x20000268
 8001014:	20000270 	.word	0x20000270
 8001018:	2000026c 	.word	0x2000026c

0800101c <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	2000      	movs	r0, #0
 8001024:	f002 feea 	bl	8003dfc <WIZCHIP_WRITE>
   getMR(); // for delay
 8001028:	2000      	movs	r0, #0
 800102a:	f002 fe9b 	bl	8003d64 <WIZCHIP_READ>
   default_ip_assign();
 800102e:	f7ff ffd9 	bl	8000fe4 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8001032:	2206      	movs	r2, #6
 8001034:	4903      	ldr	r1, [pc, #12]	@ (8001044 <default_ip_update+0x28>)
 8001036:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800103a:	f002 ff8d 	bl	8003f58 <WIZCHIP_WRITE_BUF>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000288 	.word	0x20000288

08001048 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	2000      	movs	r0, #0
 8001050:	f002 fed4 	bl	8003dfc <WIZCHIP_WRITE>
	getMR(); // for delay
 8001054:	2000      	movs	r0, #0
 8001056:	f002 fe85 	bl	8003d64 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800105a:	2206      	movs	r2, #6
 800105c:	4903      	ldr	r1, [pc, #12]	@ (800106c <default_ip_conflict+0x24>)
 800105e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001062:	f002 ff79 	bl	8003f58 <WIZCHIP_WRITE_BUF>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000288 	.word	0x20000288

08001070 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <reg_dhcp_cbfunc+0x50>)
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <reg_dhcp_cbfunc+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <reg_dhcp_cbfunc+0x58>)
 8001084:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <reg_dhcp_cbfunc+0x5c>)
 8001086:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <reg_dhcp_cbfunc+0x60>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <reg_dhcp_cbfunc+0x64>)
 800108c:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <reg_dhcp_cbfunc+0x2a>
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <reg_dhcp_cbfunc+0x50>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <reg_dhcp_cbfunc+0x36>
 80010a0:	4a09      	ldr	r2, [pc, #36]	@ (80010c8 <reg_dhcp_cbfunc+0x58>)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <reg_dhcp_cbfunc+0x42>
 80010ac:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <reg_dhcp_cbfunc+0x60>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000010 	.word	0x20000010
 80010c4:	08000fe5 	.word	0x08000fe5
 80010c8:	20000014 	.word	0x20000014
 80010cc:	0800101d 	.word	0x0800101d
 80010d0:	20000018 	.word	0x20000018
 80010d4:	08001049 	.word	0x08001049

080010d8 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80010de:	463b      	mov	r3, r7
 80010e0:	2206      	movs	r2, #6
 80010e2:	4619      	mov	r1, r3
 80010e4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80010e8:	f002 fed6 	bl	8003e98 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 80010ec:	4b72      	ldr	r3, [pc, #456]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80010f4:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2201      	movs	r2, #1
 80010fa:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80010fc:	4b6e      	ldr	r3, [pc, #440]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2206      	movs	r2, #6
 8001102:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001104:	4b6c      	ldr	r3, [pc, #432]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 800110c:	4b6a      	ldr	r3, [pc, #424]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001114:	4b69      	ldr	r3, [pc, #420]	@ (80012bc <makeDHCPMSG+0x1e4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0e1b      	lsrs	r3, r3, #24
 800111a:	b2da      	uxtb	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001120:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <makeDHCPMSG+0x1e4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0c1a      	lsrs	r2, r3, #16
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 800112e:	4b63      	ldr	r3, [pc, #396]	@ (80012bc <makeDHCPMSG+0x1e4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	0a1a      	lsrs	r2, r3, #8
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3302      	adds	r3, #2
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800113c:	4b5f      	ldr	r3, [pc, #380]	@ (80012bc <makeDHCPMSG+0x1e4>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3303      	adds	r3, #3
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001148:	4b5b      	ldr	r3, [pc, #364]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001150:	4b59      	ldr	r3, [pc, #356]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	330a      	adds	r3, #10
 8001156:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3301      	adds	r3, #1
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001166:	4b54      	ldr	r3, [pc, #336]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800116e:	4b52      	ldr	r3, [pc, #328]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001176:	4b50      	ldr	r3, [pc, #320]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800117e:	4b4e      	ldr	r3, [pc, #312]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001186:	4b4c      	ldr	r3, [pc, #304]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800118e:	4b4a      	ldr	r3, [pc, #296]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001196:	4b48      	ldr	r3, [pc, #288]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800119e:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80011ae:	4b42      	ldr	r3, [pc, #264]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80011b6:	4b40      	ldr	r3, [pc, #256]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80011be:	4b3e      	ldr	r3, [pc, #248]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80011ce:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80011d6:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80011de:	4b36      	ldr	r3, [pc, #216]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a35      	ldr	r2, [pc, #212]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a32      	ldr	r2, [pc, #200]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 80011f6:	7852      	ldrb	r2, [r2, #1]
 80011f8:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80011fa:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a30      	ldr	r2, [pc, #192]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 8001200:	7892      	ldrb	r2, [r2, #2]
 8001202:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001204:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a2d      	ldr	r2, [pc, #180]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 800120a:	78d2      	ldrb	r2, [r2, #3]
 800120c:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2b      	ldr	r2, [pc, #172]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 8001214:	7912      	ldrb	r2, [r2, #4]
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 8001220:	7952      	ldrb	r2, [r2, #5]
 8001222:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001226:	2306      	movs	r3, #6
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e008      	b.n	800123e <makeDHCPMSG+0x166>
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	4413      	add	r3, r2
 8001234:	2200      	movs	r2, #0
 8001236:	771a      	strb	r2, [r3, #28]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d9f3      	bls.n	800122c <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e009      	b.n	800125e <makeDHCPMSG+0x186>
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4413      	add	r3, r2
 8001252:	2200      	movs	r2, #0
 8001254:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b3f      	cmp	r3, #63	@ 0x3f
 8001262:	d9f2      	bls.n	800124a <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e009      	b.n	800127e <makeDHCPMSG+0x1a6>
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	2b00      	cmp	r3, #0
 8001284:	daf1      	bge.n	800126a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2263      	movs	r2, #99	@ 0x63
 800128c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2282      	movs	r2, #130	@ 0x82
 8001296:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2253      	movs	r2, #83	@ 0x53
 80012a0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2263      	movs	r2, #99	@ 0x63
 80012aa:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000284 	.word	0x20000284
 80012bc:	20000280 	.word	0x20000280
 80012c0:	20000288 	.word	0x20000288

080012c4 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80012ce:	f7ff ff03 	bl	80010d8 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80012d2:	4b56      	ldr	r3, [pc, #344]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80012d8:	4b54      	ldr	r3, [pc, #336]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012da:	2200      	movs	r2, #0
 80012dc:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80012de:	4b53      	ldr	r3, [pc, #332]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80012e4:	4b51      	ldr	r3, [pc, #324]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80012ea:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80012f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80012f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80012fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001302:	2304      	movs	r3, #4
 8001304:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001306:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	1c59      	adds	r1, r3, #1
 800130e:	80b9      	strh	r1, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	2235      	movs	r2, #53	@ 0x35
 8001314:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001318:	4b46      	ldr	r3, [pc, #280]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	1c59      	adds	r1, r3, #1
 8001320:	80b9      	strh	r1, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800132a:	4b42      	ldr	r3, [pc, #264]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	1c59      	adds	r1, r3, #1
 8001332:	80b9      	strh	r1, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	2201      	movs	r2, #1
 8001338:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800133c:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	1c59      	adds	r1, r3, #1
 8001344:	80b9      	strh	r1, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	223d      	movs	r2, #61	@ 0x3d
 800134a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800134e:	4b39      	ldr	r3, [pc, #228]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	1c59      	adds	r1, r3, #1
 8001356:	80b9      	strh	r1, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	2207      	movs	r2, #7
 800135c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	80b9      	strh	r1, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	2201      	movs	r2, #1
 800136e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001372:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	1c59      	adds	r1, r3, #1
 800137a:	80b9      	strh	r1, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 8001380:	7819      	ldrb	r1, [r3, #0]
 8001382:	1813      	adds	r3, r2, r0
 8001384:	460a      	mov	r2, r1
 8001386:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	1c59      	adds	r1, r3, #1
 8001392:	80b9      	strh	r1, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 8001398:	7859      	ldrb	r1, [r3, #1]
 800139a:	1813      	adds	r3, r2, r0
 800139c:	460a      	mov	r2, r1
 800139e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	1c59      	adds	r1, r3, #1
 80013aa:	80b9      	strh	r1, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013b0:	7899      	ldrb	r1, [r3, #2]
 80013b2:	1813      	adds	r3, r2, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	88bb      	ldrh	r3, [r7, #4]
 80013c0:	1c59      	adds	r1, r3, #1
 80013c2:	80b9      	strh	r1, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013c8:	78d9      	ldrb	r1, [r3, #3]
 80013ca:	1813      	adds	r3, r2, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	1c59      	adds	r1, r3, #1
 80013da:	80b9      	strh	r1, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013e0:	7919      	ldrb	r1, [r3, #4]
 80013e2:	1813      	adds	r3, r2, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	88bb      	ldrh	r3, [r7, #4]
 80013f0:	1c59      	adds	r1, r3, #1
 80013f2:	80b9      	strh	r1, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013f8:	7959      	ldrb	r1, [r3, #5]
 80013fa:	1813      	adds	r3, r2, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	80b9      	strh	r1, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	220c      	movs	r2, #12
 8001410:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	80b9      	strh	r1, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	e017      	b.n	800145c <send_DHCP_DISCOVER+0x198>
 800142c:	2000025c 	.word	0x2000025c
 8001430:	20000260 	.word	0x20000260
 8001434:	20000284 	.word	0x20000284
 8001438:	20000288 	.word	0x20000288
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800143c:	88f9      	ldrh	r1, [r7, #6]
 800143e:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	1c58      	adds	r0, r3, #1
 8001446:	80b8      	strh	r0, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	4b7e      	ldr	r3, [pc, #504]	@ (8001644 <send_DHCP_DISCOVER+0x380>)
 800144c:	5c59      	ldrb	r1, [r3, r1]
 800144e:	1813      	adds	r3, r2, r0
 8001450:	460a      	mov	r2, r1
 8001452:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	3301      	adds	r3, #1
 800145a:	80fb      	strh	r3, [r7, #6]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4a79      	ldr	r2, [pc, #484]	@ (8001644 <send_DHCP_DISCOVER+0x380>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ea      	bne.n	800143c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001466:	4b78      	ldr	r3, [pc, #480]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 8001468:	78db      	ldrb	r3, [r3, #3]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001470:	681c      	ldr	r4, [r3, #0]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	80b9      	strh	r1, [r7, #4]
 8001478:	461d      	mov	r5, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f001 f9a4 	bl	80027c8 <NibbleToHex>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	1963      	adds	r3, r4, r5
 8001486:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800148a:	4b6f      	ldr	r3, [pc, #444]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 800148c:	78da      	ldrb	r2, [r3, #3]
 800148e:	4b6c      	ldr	r3, [pc, #432]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001490:	681c      	ldr	r4, [r3, #0]
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	1c59      	adds	r1, r3, #1
 8001496:	80b9      	strh	r1, [r7, #4]
 8001498:	461d      	mov	r5, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f001 f994 	bl	80027c8 <NibbleToHex>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	1963      	adds	r3, r4, r5
 80014a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80014aa:	4b67      	ldr	r3, [pc, #412]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 80014ac:	791b      	ldrb	r3, [r3, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80014b4:	681c      	ldr	r4, [r3, #0]
 80014b6:	88bb      	ldrh	r3, [r7, #4]
 80014b8:	1c59      	adds	r1, r3, #1
 80014ba:	80b9      	strh	r1, [r7, #4]
 80014bc:	461d      	mov	r5, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f001 f982 	bl	80027c8 <NibbleToHex>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	1963      	adds	r3, r4, r5
 80014ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80014ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 80014d0:	791a      	ldrb	r2, [r3, #4]
 80014d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	1c59      	adds	r1, r3, #1
 80014da:	80b9      	strh	r1, [r7, #4]
 80014dc:	461d      	mov	r5, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f001 f972 	bl	80027c8 <NibbleToHex>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	1963      	adds	r3, r4, r5
 80014ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80014ee:	4b56      	ldr	r3, [pc, #344]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 80014f0:	795b      	ldrb	r3, [r3, #5]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b52      	ldr	r3, [pc, #328]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80014f8:	681c      	ldr	r4, [r3, #0]
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	1c59      	adds	r1, r3, #1
 80014fe:	80b9      	strh	r1, [r7, #4]
 8001500:	461d      	mov	r5, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f001 f960 	bl	80027c8 <NibbleToHex>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	1963      	adds	r3, r4, r5
 800150e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 8001514:	795a      	ldrb	r2, [r3, #5]
 8001516:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	80b9      	strh	r1, [r7, #4]
 8001520:	461d      	mov	r5, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f001 f950 	bl	80027c8 <NibbleToHex>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	1963      	adds	r3, r4, r5
 800152e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	b2d9      	uxtb	r1, r3
 8001536:	4b42      	ldr	r3, [pc, #264]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	88b8      	ldrh	r0, [r7, #4]
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	3307      	adds	r3, #7
 8001540:	1ac3      	subs	r3, r0, r3
 8001542:	3106      	adds	r1, #6
 8001544:	b2c9      	uxtb	r1, r1
 8001546:	4413      	add	r3, r2
 8001548:	460a      	mov	r2, r1
 800154a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	1c59      	adds	r1, r3, #1
 8001556:	80b9      	strh	r1, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	2237      	movs	r2, #55	@ 0x37
 800155c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001560:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	80b9      	strh	r1, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	2206      	movs	r2, #6
 800156e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	1c59      	adds	r1, r3, #1
 800157a:	80b9      	strh	r1, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	2201      	movs	r2, #1
 8001580:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001584:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	1c59      	adds	r1, r3, #1
 800158c:	80b9      	strh	r1, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	2203      	movs	r2, #3
 8001592:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	1c59      	adds	r1, r3, #1
 800159e:	80b9      	strh	r1, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	2206      	movs	r2, #6
 80015a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	88bb      	ldrh	r3, [r7, #4]
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	80b9      	strh	r1, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	220f      	movs	r2, #15
 80015b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	80b9      	strh	r1, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	223a      	movs	r2, #58	@ 0x3a
 80015c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	88bb      	ldrh	r3, [r7, #4]
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	80b9      	strh	r1, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	223b      	movs	r2, #59	@ 0x3b
 80015da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	1c59      	adds	r1, r3, #1
 80015e6:	80b9      	strh	r1, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	22ff      	movs	r2, #255	@ 0xff
 80015ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	80fb      	strh	r3, [r7, #6]
 80015f4:	e009      	b.n	800160a <send_DHCP_DISCOVER+0x346>
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	4413      	add	r3, r2
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	3301      	adds	r3, #1
 8001608:	80fb      	strh	r3, [r7, #6]
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001610:	d3f1      	bcc.n	80015f6 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001612:	23ff      	movs	r3, #255	@ 0xff
 8001614:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001616:	23ff      	movs	r3, #255	@ 0xff
 8001618:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800161a:	23ff      	movs	r3, #255	@ 0xff
 800161c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800161e:	23ff      	movs	r3, #255	@ 0xff
 8001620:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <send_DHCP_DISCOVER+0x388>)
 8001624:	7818      	ldrb	r0, [r3, #0]
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	463b      	mov	r3, r7
 800162c:	2243      	movs	r2, #67	@ 0x43
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001634:	f001 fe48 	bl	80032c8 <sendto>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bdb0      	pop	{r4, r5, r7, pc}
 8001640:	20000284 	.word	0x20000284
 8001644:	20000008 	.word	0x20000008
 8001648:	20000288 	.word	0x20000288
 800164c:	20000258 	.word	0x20000258

08001650 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800165a:	f7ff fd3d 	bl	80010d8 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <send_DHCP_REQUEST+0x7c>)
 8001660:	f993 3000 	ldrsb.w	r3, [r3]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d004      	beq.n	8001672 <send_DHCP_REQUEST+0x22>
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <send_DHCP_REQUEST+0x7c>)
 800166a:	f993 3000 	ldrsb.w	r3, [r3]
 800166e:	2b04      	cmp	r3, #4
 8001670:	d134      	bne.n	80016dc <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	330a      	adds	r3, #10
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	330a      	adds	r3, #10
 8001682:	3301      	adds	r3, #1
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 800168e:	7812      	ldrb	r2, [r2, #0]
 8001690:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 8001698:	7852      	ldrb	r2, [r2, #1]
 800169a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 80016a2:	7892      	ldrb	r2, [r2, #2]
 80016a4:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 80016ac:	78d2      	ldrb	r2, [r2, #3]
 80016ae:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	e010      	b.n	80016ec <send_DHCP_REQUEST+0x9c>
 80016ca:	bf00      	nop
 80016cc:	20000278 	.word	0x20000278
 80016d0:	20000284 	.word	0x20000284
 80016d4:	20000268 	.word	0x20000268
 80016d8:	2000025c 	.word	0x2000025c
   }
   else
   {
   	ip[0] = 255;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80016e0:	23ff      	movs	r3, #255	@ 0xff
 80016e2:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80016e4:	23ff      	movs	r3, #255	@ 0xff
 80016e6:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80016e8:	23ff      	movs	r3, #255	@ 0xff
 80016ea:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80016ec:	2304      	movs	r3, #4
 80016ee:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80016f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	897b      	ldrh	r3, [r7, #10]
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	8179      	strh	r1, [r7, #10]
 80016fa:	4413      	add	r3, r2
 80016fc:	2235      	movs	r2, #53	@ 0x35
 80016fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	1c59      	adds	r1, r3, #1
 800170a:	8179      	strh	r1, [r7, #10]
 800170c:	4413      	add	r3, r2
 800170e:	2201      	movs	r2, #1
 8001710:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001714:	4b84      	ldr	r3, [pc, #528]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	8179      	strh	r1, [r7, #10]
 800171e:	4413      	add	r3, r2
 8001720:	2203      	movs	r2, #3
 8001722:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001726:	4b80      	ldr	r3, [pc, #512]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	897b      	ldrh	r3, [r7, #10]
 800172c:	1c59      	adds	r1, r3, #1
 800172e:	8179      	strh	r1, [r7, #10]
 8001730:	4413      	add	r3, r2
 8001732:	223d      	movs	r2, #61	@ 0x3d
 8001734:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001738:	4b7b      	ldr	r3, [pc, #492]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	897b      	ldrh	r3, [r7, #10]
 800173e:	1c59      	adds	r1, r3, #1
 8001740:	8179      	strh	r1, [r7, #10]
 8001742:	4413      	add	r3, r2
 8001744:	2207      	movs	r2, #7
 8001746:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800174a:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	897b      	ldrh	r3, [r7, #10]
 8001750:	1c59      	adds	r1, r3, #1
 8001752:	8179      	strh	r1, [r7, #10]
 8001754:	4413      	add	r3, r2
 8001756:	2201      	movs	r2, #1
 8001758:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800175c:	4b72      	ldr	r3, [pc, #456]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	897b      	ldrh	r3, [r7, #10]
 8001762:	1c59      	adds	r1, r3, #1
 8001764:	8179      	strh	r1, [r7, #10]
 8001766:	4618      	mov	r0, r3
 8001768:	4b70      	ldr	r3, [pc, #448]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 800176a:	7819      	ldrb	r1, [r3, #0]
 800176c:	1813      	adds	r3, r2, r0
 800176e:	460a      	mov	r2, r1
 8001770:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001774:	4b6c      	ldr	r3, [pc, #432]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	1c59      	adds	r1, r3, #1
 800177c:	8179      	strh	r1, [r7, #10]
 800177e:	4618      	mov	r0, r3
 8001780:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 8001782:	7859      	ldrb	r1, [r3, #1]
 8001784:	1813      	adds	r3, r2, r0
 8001786:	460a      	mov	r2, r1
 8001788:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800178c:	4b66      	ldr	r3, [pc, #408]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	897b      	ldrh	r3, [r7, #10]
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	8179      	strh	r1, [r7, #10]
 8001796:	4618      	mov	r0, r3
 8001798:	4b64      	ldr	r3, [pc, #400]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 800179a:	7899      	ldrb	r1, [r3, #2]
 800179c:	1813      	adds	r3, r2, r0
 800179e:	460a      	mov	r2, r1
 80017a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80017a4:	4b60      	ldr	r3, [pc, #384]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	897b      	ldrh	r3, [r7, #10]
 80017aa:	1c59      	adds	r1, r3, #1
 80017ac:	8179      	strh	r1, [r7, #10]
 80017ae:	4618      	mov	r0, r3
 80017b0:	4b5e      	ldr	r3, [pc, #376]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 80017b2:	78d9      	ldrb	r1, [r3, #3]
 80017b4:	1813      	adds	r3, r2, r0
 80017b6:	460a      	mov	r2, r1
 80017b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80017bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	897b      	ldrh	r3, [r7, #10]
 80017c2:	1c59      	adds	r1, r3, #1
 80017c4:	8179      	strh	r1, [r7, #10]
 80017c6:	4618      	mov	r0, r3
 80017c8:	4b58      	ldr	r3, [pc, #352]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 80017ca:	7919      	ldrb	r1, [r3, #4]
 80017cc:	1813      	adds	r3, r2, r0
 80017ce:	460a      	mov	r2, r1
 80017d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80017d4:	4b54      	ldr	r3, [pc, #336]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	1c59      	adds	r1, r3, #1
 80017dc:	8179      	strh	r1, [r7, #10]
 80017de:	4618      	mov	r0, r3
 80017e0:	4b52      	ldr	r3, [pc, #328]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 80017e2:	7959      	ldrb	r1, [r3, #5]
 80017e4:	1813      	adds	r3, r2, r0
 80017e6:	460a      	mov	r2, r1
 80017e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2bff      	cmp	r3, #255	@ 0xff
 80017f0:	f040 8084 	bne.w	80018fc <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80017f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	1c59      	adds	r1, r3, #1
 80017fc:	8179      	strh	r1, [r7, #10]
 80017fe:	4413      	add	r3, r2
 8001800:	2232      	movs	r2, #50	@ 0x32
 8001802:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001806:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	897b      	ldrh	r3, [r7, #10]
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	8179      	strh	r1, [r7, #10]
 8001810:	4413      	add	r3, r2
 8001812:	2204      	movs	r2, #4
 8001814:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	897b      	ldrh	r3, [r7, #10]
 800181e:	1c59      	adds	r1, r3, #1
 8001820:	8179      	strh	r1, [r7, #10]
 8001822:	4618      	mov	r0, r3
 8001824:	4b42      	ldr	r3, [pc, #264]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 8001826:	7819      	ldrb	r1, [r3, #0]
 8001828:	1813      	adds	r3, r2, r0
 800182a:	460a      	mov	r2, r1
 800182c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001830:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	897b      	ldrh	r3, [r7, #10]
 8001836:	1c59      	adds	r1, r3, #1
 8001838:	8179      	strh	r1, [r7, #10]
 800183a:	4618      	mov	r0, r3
 800183c:	4b3c      	ldr	r3, [pc, #240]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 800183e:	7859      	ldrb	r1, [r3, #1]
 8001840:	1813      	adds	r3, r2, r0
 8001842:	460a      	mov	r2, r1
 8001844:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001848:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	897b      	ldrh	r3, [r7, #10]
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	8179      	strh	r1, [r7, #10]
 8001852:	4618      	mov	r0, r3
 8001854:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 8001856:	7899      	ldrb	r1, [r3, #2]
 8001858:	1813      	adds	r3, r2, r0
 800185a:	460a      	mov	r2, r1
 800185c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	897b      	ldrh	r3, [r7, #10]
 8001866:	1c59      	adds	r1, r3, #1
 8001868:	8179      	strh	r1, [r7, #10]
 800186a:	4618      	mov	r0, r3
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 800186e:	78d9      	ldrb	r1, [r3, #3]
 8001870:	1813      	adds	r3, r2, r0
 8001872:	460a      	mov	r2, r1
 8001874:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001878:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	897b      	ldrh	r3, [r7, #10]
 800187e:	1c59      	adds	r1, r3, #1
 8001880:	8179      	strh	r1, [r7, #10]
 8001882:	4413      	add	r3, r2
 8001884:	2236      	movs	r2, #54	@ 0x36
 8001886:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800188a:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	897b      	ldrh	r3, [r7, #10]
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	8179      	strh	r1, [r7, #10]
 8001894:	4413      	add	r3, r2
 8001896:	2204      	movs	r2, #4
 8001898:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	897b      	ldrh	r3, [r7, #10]
 80018a2:	1c59      	adds	r1, r3, #1
 80018a4:	8179      	strh	r1, [r7, #10]
 80018a6:	4618      	mov	r0, r3
 80018a8:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018aa:	7819      	ldrb	r1, [r3, #0]
 80018ac:	1813      	adds	r3, r2, r0
 80018ae:	460a      	mov	r2, r1
 80018b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80018b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	897b      	ldrh	r3, [r7, #10]
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	8179      	strh	r1, [r7, #10]
 80018be:	4618      	mov	r0, r3
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018c2:	7859      	ldrb	r1, [r3, #1]
 80018c4:	1813      	adds	r3, r2, r0
 80018c6:	460a      	mov	r2, r1
 80018c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80018cc:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	897b      	ldrh	r3, [r7, #10]
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	8179      	strh	r1, [r7, #10]
 80018d6:	4618      	mov	r0, r3
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018da:	7899      	ldrb	r1, [r3, #2]
 80018dc:	1813      	adds	r3, r2, r0
 80018de:	460a      	mov	r2, r1
 80018e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	1c59      	adds	r1, r3, #1
 80018ec:	8179      	strh	r1, [r7, #10]
 80018ee:	4618      	mov	r0, r3
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018f2:	78d9      	ldrb	r1, [r3, #3]
 80018f4:	1813      	adds	r3, r2, r0
 80018f6:	460a      	mov	r2, r1
 80018f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	897b      	ldrh	r3, [r7, #10]
 8001902:	1c59      	adds	r1, r3, #1
 8001904:	8179      	strh	r1, [r7, #10]
 8001906:	4413      	add	r3, r2
 8001908:	220c      	movs	r2, #12
 800190a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	897b      	ldrh	r3, [r7, #10]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	8179      	strh	r1, [r7, #10]
 8001918:	4413      	add	r3, r2
 800191a:	2200      	movs	r2, #0
 800191c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e019      	b.n	800195a <send_DHCP_REQUEST+0x30a>
 8001926:	bf00      	nop
 8001928:	20000284 	.word	0x20000284
 800192c:	20000288 	.word	0x20000288
 8001930:	20000268 	.word	0x20000268
 8001934:	2000025c 	.word	0x2000025c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001938:	4b86      	ldr	r3, [pc, #536]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	897b      	ldrh	r3, [r7, #10]
 800193e:	1c59      	adds	r1, r3, #1
 8001940:	8179      	strh	r1, [r7, #10]
 8001942:	4618      	mov	r0, r3
 8001944:	4984      	ldr	r1, [pc, #528]	@ (8001b58 <send_DHCP_REQUEST+0x508>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	440b      	add	r3, r1
 800194a:	7819      	ldrb	r1, [r3, #0]
 800194c:	1813      	adds	r3, r2, r0
 800194e:	460a      	mov	r2, r1
 8001950:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b58 <send_DHCP_REQUEST+0x508>)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e8      	bne.n	8001938 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001966:	4b7d      	ldr	r3, [pc, #500]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b79      	ldr	r3, [pc, #484]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001970:	681c      	ldr	r4, [r3, #0]
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	1c59      	adds	r1, r3, #1
 8001976:	8179      	strh	r1, [r7, #10]
 8001978:	461d      	mov	r5, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f000 ff24 	bl	80027c8 <NibbleToHex>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	1963      	adds	r3, r4, r5
 8001986:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800198a:	4b74      	ldr	r3, [pc, #464]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 800198c:	78da      	ldrb	r2, [r3, #3]
 800198e:	4b71      	ldr	r3, [pc, #452]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	8179      	strh	r1, [r7, #10]
 8001998:	461d      	mov	r5, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 ff14 	bl	80027c8 <NibbleToHex>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	1963      	adds	r3, r4, r5
 80019a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80019aa:	4b6c      	ldr	r3, [pc, #432]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b68      	ldr	r3, [pc, #416]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 80019b4:	681c      	ldr	r4, [r3, #0]
 80019b6:	897b      	ldrh	r3, [r7, #10]
 80019b8:	1c59      	adds	r1, r3, #1
 80019ba:	8179      	strh	r1, [r7, #10]
 80019bc:	461d      	mov	r5, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 ff02 	bl	80027c8 <NibbleToHex>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	1963      	adds	r3, r4, r5
 80019ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80019ce:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 80019d0:	791a      	ldrb	r2, [r3, #4]
 80019d2:	4b60      	ldr	r3, [pc, #384]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 80019d4:	681c      	ldr	r4, [r3, #0]
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	1c59      	adds	r1, r3, #1
 80019da:	8179      	strh	r1, [r7, #10]
 80019dc:	461d      	mov	r5, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 fef2 	bl	80027c8 <NibbleToHex>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	1963      	adds	r3, r4, r5
 80019ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80019ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 80019f0:	795b      	ldrb	r3, [r3, #5]
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b57      	ldr	r3, [pc, #348]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	897b      	ldrh	r3, [r7, #10]
 80019fc:	1c59      	adds	r1, r3, #1
 80019fe:	8179      	strh	r1, [r7, #10]
 8001a00:	461d      	mov	r5, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f000 fee0 	bl	80027c8 <NibbleToHex>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	1963      	adds	r3, r4, r5
 8001a0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001a12:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 8001a14:	795a      	ldrb	r2, [r3, #5]
 8001a16:	4b4f      	ldr	r3, [pc, #316]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a18:	681c      	ldr	r4, [r3, #0]
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	8179      	strh	r1, [r7, #10]
 8001a20:	461d      	mov	r5, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 fed0 	bl	80027c8 <NibbleToHex>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	1963      	adds	r3, r4, r5
 8001a2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	8978      	ldrh	r0, [r7, #10]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3307      	adds	r3, #7
 8001a40:	1ac3      	subs	r3, r0, r3
 8001a42:	3106      	adds	r1, #6
 8001a44:	b2c9      	uxtb	r1, r1
 8001a46:	4413      	add	r3, r2
 8001a48:	460a      	mov	r2, r1
 8001a4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001a4e:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	897b      	ldrh	r3, [r7, #10]
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	8179      	strh	r1, [r7, #10]
 8001a58:	4413      	add	r3, r2
 8001a5a:	2237      	movs	r2, #55	@ 0x37
 8001a5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001a60:	4b3c      	ldr	r3, [pc, #240]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	897b      	ldrh	r3, [r7, #10]
 8001a66:	1c59      	adds	r1, r3, #1
 8001a68:	8179      	strh	r1, [r7, #10]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001a72:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	1c59      	adds	r1, r3, #1
 8001a7a:	8179      	strh	r1, [r7, #10]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a84:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	1c59      	adds	r1, r3, #1
 8001a8c:	8179      	strh	r1, [r7, #10]
 8001a8e:	4413      	add	r3, r2
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001a96:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	897b      	ldrh	r3, [r7, #10]
 8001a9c:	1c59      	adds	r1, r3, #1
 8001a9e:	8179      	strh	r1, [r7, #10]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2206      	movs	r2, #6
 8001aa4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	897b      	ldrh	r3, [r7, #10]
 8001aae:	1c59      	adds	r1, r3, #1
 8001ab0:	8179      	strh	r1, [r7, #10]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001aba:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	897b      	ldrh	r3, [r7, #10]
 8001ac0:	1c59      	adds	r1, r3, #1
 8001ac2:	8179      	strh	r1, [r7, #10]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	223a      	movs	r2, #58	@ 0x3a
 8001ac8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001acc:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	1c59      	adds	r1, r3, #1
 8001ad4:	8179      	strh	r1, [r7, #10]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	223b      	movs	r2, #59	@ 0x3b
 8001ada:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	1c59      	adds	r1, r3, #1
 8001ae6:	8179      	strh	r1, [r7, #10]
 8001ae8:	4413      	add	r3, r2
 8001aea:	221f      	movs	r2, #31
 8001aec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	8179      	strh	r1, [r7, #10]
 8001afa:	4413      	add	r3, r2
 8001afc:	2221      	movs	r2, #33	@ 0x21
 8001afe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	8179      	strh	r1, [r7, #10]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	22ff      	movs	r2, #255	@ 0xff
 8001b10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e009      	b.n	8001b2e <send_DHCP_REQUEST+0x4de>
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	33ec      	adds	r3, #236	@ 0xec
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001b34:	dbf1      	blt.n	8001b1a <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <send_DHCP_REQUEST+0x510>)
 8001b38:	7818      	ldrb	r0, [r3, #0]
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2243      	movs	r2, #67	@ 0x43
 8001b42:	9200      	str	r2, [sp, #0]
 8001b44:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001b48:	f001 fbbe 	bl	80032c8 <sendto>

}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}
 8001b54:	20000284 	.word	0x20000284
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000288 	.word	0x20000288
 8001b60:	20000258 	.word	0x20000258

08001b64 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001b6e:	f7ff fab3 	bl	80010d8 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001b72:	2304      	movs	r3, #4
 8001b74:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001b76:	4b9f      	ldr	r3, [pc, #636]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001b80:	4b9c      	ldr	r3, [pc, #624]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330a      	adds	r3, #10
 8001b86:	3301      	adds	r3, #1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001b8c:	4b99      	ldr	r3, [pc, #612]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	8179      	strh	r1, [r7, #10]
 8001b96:	4413      	add	r3, r2
 8001b98:	2235      	movs	r2, #53	@ 0x35
 8001b9a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001b9e:	4b95      	ldr	r3, [pc, #596]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	8179      	strh	r1, [r7, #10]
 8001ba8:	4413      	add	r3, r2
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001bb0:	4b90      	ldr	r3, [pc, #576]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	8179      	strh	r1, [r7, #10]
 8001bba:	4413      	add	r3, r2
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001bc2:	4b8c      	ldr	r3, [pc, #560]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	1c59      	adds	r1, r3, #1
 8001bca:	8179      	strh	r1, [r7, #10]
 8001bcc:	4413      	add	r3, r2
 8001bce:	223d      	movs	r2, #61	@ 0x3d
 8001bd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001bd4:	4b87      	ldr	r3, [pc, #540]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	1c59      	adds	r1, r3, #1
 8001bdc:	8179      	strh	r1, [r7, #10]
 8001bde:	4413      	add	r3, r2
 8001be0:	2207      	movs	r2, #7
 8001be2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001be6:	4b83      	ldr	r3, [pc, #524]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	1c59      	adds	r1, r3, #1
 8001bee:	8179      	strh	r1, [r7, #10]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	8179      	strh	r1, [r7, #10]
 8001c02:	4618      	mov	r0, r3
 8001c04:	4b7c      	ldr	r3, [pc, #496]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c06:	7819      	ldrb	r1, [r3, #0]
 8001c08:	1813      	adds	r3, r2, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001c10:	4b78      	ldr	r3, [pc, #480]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	8179      	strh	r1, [r7, #10]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4b76      	ldr	r3, [pc, #472]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c1e:	7859      	ldrb	r1, [r3, #1]
 8001c20:	1813      	adds	r3, r2, r0
 8001c22:	460a      	mov	r2, r1
 8001c24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001c28:	4b72      	ldr	r3, [pc, #456]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	8179      	strh	r1, [r7, #10]
 8001c32:	4618      	mov	r0, r3
 8001c34:	4b70      	ldr	r3, [pc, #448]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c36:	7899      	ldrb	r1, [r3, #2]
 8001c38:	1813      	adds	r3, r2, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001c40:	4b6c      	ldr	r3, [pc, #432]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	8179      	strh	r1, [r7, #10]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c4e:	78d9      	ldrb	r1, [r3, #3]
 8001c50:	1813      	adds	r3, r2, r0
 8001c52:	460a      	mov	r2, r1
 8001c54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001c58:	4b66      	ldr	r3, [pc, #408]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	8179      	strh	r1, [r7, #10]
 8001c62:	4618      	mov	r0, r3
 8001c64:	4b64      	ldr	r3, [pc, #400]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c66:	7919      	ldrb	r1, [r3, #4]
 8001c68:	1813      	adds	r3, r2, r0
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001c70:	4b60      	ldr	r3, [pc, #384]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	897b      	ldrh	r3, [r7, #10]
 8001c76:	1c59      	adds	r1, r3, #1
 8001c78:	8179      	strh	r1, [r7, #10]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c7e:	7959      	ldrb	r1, [r3, #5]
 8001c80:	1813      	adds	r3, r2, r0
 8001c82:	460a      	mov	r2, r1
 8001c84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001c88:	4b5a      	ldr	r3, [pc, #360]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	8179      	strh	r1, [r7, #10]
 8001c92:	4413      	add	r3, r2
 8001c94:	2232      	movs	r2, #50	@ 0x32
 8001c96:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001c9a:	4b56      	ldr	r3, [pc, #344]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	897b      	ldrh	r3, [r7, #10]
 8001ca0:	1c59      	adds	r1, r3, #1
 8001ca2:	8179      	strh	r1, [r7, #10]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001cac:	4b51      	ldr	r3, [pc, #324]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	897b      	ldrh	r3, [r7, #10]
 8001cb2:	1c59      	adds	r1, r3, #1
 8001cb4:	8179      	strh	r1, [r7, #10]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4b50      	ldr	r3, [pc, #320]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	1813      	adds	r3, r2, r0
 8001cbe:	460a      	mov	r2, r1
 8001cc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	1c59      	adds	r1, r3, #1
 8001ccc:	8179      	strh	r1, [r7, #10]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001cd2:	7859      	ldrb	r1, [r3, #1]
 8001cd4:	1813      	adds	r3, r2, r0
 8001cd6:	460a      	mov	r2, r1
 8001cd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001cdc:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	897b      	ldrh	r3, [r7, #10]
 8001ce2:	1c59      	adds	r1, r3, #1
 8001ce4:	8179      	strh	r1, [r7, #10]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001cea:	7899      	ldrb	r1, [r3, #2]
 8001cec:	1813      	adds	r3, r2, r0
 8001cee:	460a      	mov	r2, r1
 8001cf0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	8179      	strh	r1, [r7, #10]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001d02:	78d9      	ldrb	r1, [r3, #3]
 8001d04:	1813      	adds	r3, r2, r0
 8001d06:	460a      	mov	r2, r1
 8001d08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001d0c:	4b39      	ldr	r3, [pc, #228]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	897b      	ldrh	r3, [r7, #10]
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	8179      	strh	r1, [r7, #10]
 8001d16:	4413      	add	r3, r2
 8001d18:	2236      	movs	r2, #54	@ 0x36
 8001d1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	1c59      	adds	r1, r3, #1
 8001d26:	8179      	strh	r1, [r7, #10]
 8001d28:	4413      	add	r3, r2
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001d30:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	1c59      	adds	r1, r3, #1
 8001d38:	8179      	strh	r1, [r7, #10]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d3e:	7819      	ldrb	r1, [r3, #0]
 8001d40:	1813      	adds	r3, r2, r0
 8001d42:	460a      	mov	r2, r1
 8001d44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001d48:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	8179      	strh	r1, [r7, #10]
 8001d52:	4618      	mov	r0, r3
 8001d54:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d56:	7859      	ldrb	r1, [r3, #1]
 8001d58:	1813      	adds	r3, r2, r0
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	897b      	ldrh	r3, [r7, #10]
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	8179      	strh	r1, [r7, #10]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d6e:	7899      	ldrb	r1, [r3, #2]
 8001d70:	1813      	adds	r3, r2, r0
 8001d72:	460a      	mov	r2, r1
 8001d74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	897b      	ldrh	r3, [r7, #10]
 8001d7e:	1c59      	adds	r1, r3, #1
 8001d80:	8179      	strh	r1, [r7, #10]
 8001d82:	4618      	mov	r0, r3
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d86:	78d9      	ldrb	r1, [r3, #3]
 8001d88:	1813      	adds	r3, r2, r0
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	8179      	strh	r1, [r7, #10]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	22ff      	movs	r2, #255	@ 0xff
 8001d9e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e009      	b.n	8001dbc <send_DHCP_DECLINE+0x258>
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	33ec      	adds	r3, #236	@ 0xec
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001dc2:	dbf1      	blt.n	8001da8 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001dc4:	23ff      	movs	r3, #255	@ 0xff
 8001dc6:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001dc8:	23ff      	movs	r3, #255	@ 0xff
 8001dca:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001dcc:	23ff      	movs	r3, #255	@ 0xff
 8001dce:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001dd0:	23ff      	movs	r3, #255	@ 0xff
 8001dd2:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <send_DHCP_DECLINE+0x2a0>)
 8001dd6:	7818      	ldrb	r0, [r3, #0]
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2243      	movs	r2, #67	@ 0x43
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001de6:	f001 fa6f 	bl	80032c8 <sendto>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000284 	.word	0x20000284
 8001df8:	20000288 	.word	0x20000288
 8001dfc:	20000268 	.word	0x20000268
 8001e00:	2000025c 	.word	0x2000025c
 8001e04:	20000258 	.word	0x20000258

08001e08 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001e12:	4ba1      	ldr	r3, [pc, #644]	@ (8002098 <parseDHCPMSG+0x290>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 f947 	bl	80040aa <getSn_RX_RSR>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	823b      	strh	r3, [r7, #16]
 8001e20:	8a3b      	ldrh	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d011      	beq.n	8001e4a <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001e26:	4b9c      	ldr	r3, [pc, #624]	@ (8002098 <parseDHCPMSG+0x290>)
 8001e28:	7818      	ldrb	r0, [r3, #0]
 8001e2a:	4b9c      	ldr	r3, [pc, #624]	@ (800209c <parseDHCPMSG+0x294>)
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	1d3c      	adds	r4, r7, #4
 8001e30:	8a3a      	ldrh	r2, [r7, #16]
 8001e32:	1cbb      	adds	r3, r7, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4623      	mov	r3, r4
 8001e38:	f001 fb7a 	bl	8003530 <recvfrom>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	2b43      	cmp	r3, #67	@ 0x43
 8001e44:	f040 81ed 	bne.w	8002222 <parseDHCPMSG+0x41a>
 8001e48:	e001      	b.n	8001e4e <parseDHCPMSG+0x46>
   else return 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e1eb      	b.n	8002226 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001e4e:	4b93      	ldr	r3, [pc, #588]	@ (800209c <parseDHCPMSG+0x294>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	7f1a      	ldrb	r2, [r3, #28]
 8001e54:	4b92      	ldr	r3, [pc, #584]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d124      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
 8001e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800209c <parseDHCPMSG+0x294>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	7f5a      	ldrb	r2, [r3, #29]
 8001e62:	4b8f      	ldr	r3, [pc, #572]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11d      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800209c <parseDHCPMSG+0x294>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	7f9a      	ldrb	r2, [r3, #30]
 8001e70:	4b8b      	ldr	r3, [pc, #556]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e72:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d116      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e78:	4b88      	ldr	r3, [pc, #544]	@ (800209c <parseDHCPMSG+0x294>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	7fda      	ldrb	r2, [r3, #31]
 8001e7e:	4b88      	ldr	r3, [pc, #544]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d10f      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001e86:	4b85      	ldr	r3, [pc, #532]	@ (800209c <parseDHCPMSG+0x294>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001e8e:	4b84      	ldr	r3, [pc, #528]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e90:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d107      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001e96:	4b81      	ldr	r3, [pc, #516]	@ (800209c <parseDHCPMSG+0x294>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001e9e:	4b80      	ldr	r3, [pc, #512]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001ea0:	795b      	ldrb	r3, [r3, #5]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e1bd      	b.n	8002226 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10b      	bne.n	8001eca <parseDHCPMSG+0xc2>
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d107      	bne.n	8001eca <parseDHCPMSG+0xc2>
 8001eba:	4b7a      	ldr	r3, [pc, #488]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ebc:	789b      	ldrb	r3, [r3, #2]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <parseDHCPMSG+0xc2>
 8001ec2:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ec4:	78db      	ldrb	r3, [r3, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d029      	beq.n	8001f1e <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001eca:	793a      	ldrb	r2, [r7, #4]
 8001ecc:	4b75      	ldr	r3, [pc, #468]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10e      	bne.n	8001ef2 <parseDHCPMSG+0xea>
 8001ed4:	797a      	ldrb	r2, [r7, #5]
 8001ed6:	4b73      	ldr	r3, [pc, #460]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ed8:	785b      	ldrb	r3, [r3, #1]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d109      	bne.n	8001ef2 <parseDHCPMSG+0xea>
 8001ede:	79ba      	ldrb	r2, [r7, #6]
 8001ee0:	4b70      	ldr	r3, [pc, #448]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ee2:	789b      	ldrb	r3, [r3, #2]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d104      	bne.n	8001ef2 <parseDHCPMSG+0xea>
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	4b6e      	ldr	r3, [pc, #440]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d015      	beq.n	8001f1e <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001ef2:	793a      	ldrb	r2, [r7, #4]
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d10e      	bne.n	8001f1a <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001efc:	797a      	ldrb	r2, [r7, #5]
 8001efe:	4b6a      	ldr	r3, [pc, #424]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d109      	bne.n	8001f1a <parseDHCPMSG+0x112>
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	4b67      	ldr	r3, [pc, #412]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d104      	bne.n	8001f1a <parseDHCPMSG+0x112>
 8001f10:	79fa      	ldrb	r2, [r7, #7]
 8001f12:	4b65      	ldr	r3, [pc, #404]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001f14:	78db      	ldrb	r3, [r3, #3]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e183      	b.n	8002226 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800209c <parseDHCPMSG+0x294>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	33f0      	adds	r3, #240	@ 0xf0
 8001f28:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001f2a:	8a3b      	ldrh	r3, [r7, #16]
 8001f2c:	3bf0      	subs	r3, #240	@ 0xf0
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4413      	add	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001f34:	e170      	b.n	8002218 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b36      	cmp	r3, #54	@ 0x36
 8001f3c:	dc76      	bgt.n	800202c <parseDHCPMSG+0x224>
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f2c0 815d 	blt.w	80021fe <parseDHCPMSG+0x3f6>
 8001f44:	2b36      	cmp	r3, #54	@ 0x36
 8001f46:	f200 815a 	bhi.w	80021fe <parseDHCPMSG+0x3f6>
 8001f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f50 <parseDHCPMSG+0x148>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08002039 	.word	0x08002039
 8001f54:	08002059 	.word	0x08002059
 8001f58:	080021ff 	.word	0x080021ff
 8001f5c:	080020b1 	.word	0x080020b1
 8001f60:	080021ff 	.word	0x080021ff
 8001f64:	080021ff 	.word	0x080021ff
 8001f68:	080020fd 	.word	0x080020fd
 8001f6c:	080021ff 	.word	0x080021ff
 8001f70:	080021ff 	.word	0x080021ff
 8001f74:	080021ff 	.word	0x080021ff
 8001f78:	080021ff 	.word	0x080021ff
 8001f7c:	080021ff 	.word	0x080021ff
 8001f80:	080021ff 	.word	0x080021ff
 8001f84:	080021ff 	.word	0x080021ff
 8001f88:	080021ff 	.word	0x080021ff
 8001f8c:	080021ff 	.word	0x080021ff
 8001f90:	080021ff 	.word	0x080021ff
 8001f94:	080021ff 	.word	0x080021ff
 8001f98:	080021ff 	.word	0x080021ff
 8001f9c:	080021ff 	.word	0x080021ff
 8001fa0:	080021ff 	.word	0x080021ff
 8001fa4:	080021ff 	.word	0x080021ff
 8001fa8:	080021ff 	.word	0x080021ff
 8001fac:	080021ff 	.word	0x080021ff
 8001fb0:	080021ff 	.word	0x080021ff
 8001fb4:	080021ff 	.word	0x080021ff
 8001fb8:	080021ff 	.word	0x080021ff
 8001fbc:	080021ff 	.word	0x080021ff
 8001fc0:	080021ff 	.word	0x080021ff
 8001fc4:	080021ff 	.word	0x080021ff
 8001fc8:	080021ff 	.word	0x080021ff
 8001fcc:	080021ff 	.word	0x080021ff
 8001fd0:	080021ff 	.word	0x080021ff
 8001fd4:	080021ff 	.word	0x080021ff
 8001fd8:	080021ff 	.word	0x080021ff
 8001fdc:	080021ff 	.word	0x080021ff
 8001fe0:	080021ff 	.word	0x080021ff
 8001fe4:	080021ff 	.word	0x080021ff
 8001fe8:	080021ff 	.word	0x080021ff
 8001fec:	080021ff 	.word	0x080021ff
 8001ff0:	080021ff 	.word	0x080021ff
 8001ff4:	080021ff 	.word	0x080021ff
 8001ff8:	080021ff 	.word	0x080021ff
 8001ffc:	080021ff 	.word	0x080021ff
 8002000:	080021ff 	.word	0x080021ff
 8002004:	080021ff 	.word	0x080021ff
 8002008:	080021ff 	.word	0x080021ff
 800200c:	080021ff 	.word	0x080021ff
 8002010:	080021ff 	.word	0x080021ff
 8002014:	080021ff 	.word	0x080021ff
 8002018:	080021ff 	.word	0x080021ff
 800201c:	08002149 	.word	0x08002149
 8002020:	080021ff 	.word	0x080021ff
 8002024:	08002041 	.word	0x08002041
 8002028:	080021a5 	.word	0x080021a5
 800202c:	2bff      	cmp	r3, #255	@ 0xff
 800202e:	f040 80e6 	bne.w	80021fe <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	617b      	str	r3, [r7, #20]
   				break;
 8002036:	e0ef      	b.n	8002218 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
   				break;
 800203e:	e0eb      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
   				p++;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
   				type = *p++;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	617a      	str	r2, [r7, #20]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	74fb      	strb	r3, [r7, #19]
   				break;
 8002056:	e0df      	b.n	8002218 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
   				p++;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	617a      	str	r2, [r7, #20]
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	4b0f      	ldr	r3, [pc, #60]	@ (80020ac <parseDHCPMSG+0x2a4>)
 800206e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	617a      	str	r2, [r7, #20]
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <parseDHCPMSG+0x2a4>)
 800207a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	617a      	str	r2, [r7, #20]
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <parseDHCPMSG+0x2a4>)
 8002086:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	617a      	str	r2, [r7, #20]
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <parseDHCPMSG+0x2a4>)
 8002092:	70da      	strb	r2, [r3, #3]
   				break;
 8002094:	e0c0      	b.n	8002218 <parseDHCPMSG+0x410>
 8002096:	bf00      	nop
 8002098:	20000258 	.word	0x20000258
 800209c:	20000284 	.word	0x20000284
 80020a0:	20000288 	.word	0x20000288
 80020a4:	2000025c 	.word	0x2000025c
 80020a8:	20000260 	.word	0x20000260
 80020ac:	20000270 	.word	0x20000270
   			case routersOnSubnet :
   				p++;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	617a      	str	r2, [r7, #20]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	617a      	str	r2, [r7, #20]
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <parseDHCPMSG+0x428>)
 80020ca:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	617a      	str	r2, [r7, #20]
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	4b56      	ldr	r3, [pc, #344]	@ (8002230 <parseDHCPMSG+0x428>)
 80020d6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	617a      	str	r2, [r7, #20]
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <parseDHCPMSG+0x428>)
 80020e2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	617a      	str	r2, [r7, #20]
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <parseDHCPMSG+0x428>)
 80020ee:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	3b04      	subs	r3, #4
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4413      	add	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
   				break;
 80020fa:	e08d      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	617a      	str	r2, [r7, #20]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	617a      	str	r2, [r7, #20]
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <parseDHCPMSG+0x42c>)
 8002116:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	617a      	str	r2, [r7, #20]
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <parseDHCPMSG+0x42c>)
 8002122:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	617a      	str	r2, [r7, #20]
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <parseDHCPMSG+0x42c>)
 800212e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	617a      	str	r2, [r7, #20]
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b3e      	ldr	r3, [pc, #248]	@ (8002234 <parseDHCPMSG+0x42c>)
 800213a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	3b04      	subs	r3, #4
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4413      	add	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
   				break;
 8002146:	e067      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	617a      	str	r2, [r7, #20]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	617a      	str	r2, [r7, #20]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b35      	ldr	r3, [pc, #212]	@ (8002238 <parseDHCPMSG+0x430>)
 8002164:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002166:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <parseDHCPMSG+0x430>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	021a      	lsls	r2, r3, #8
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	6179      	str	r1, [r7, #20]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4413      	add	r3, r2
 8002176:	4a30      	ldr	r2, [pc, #192]	@ (8002238 <parseDHCPMSG+0x430>)
 8002178:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800217a:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <parseDHCPMSG+0x430>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	021a      	lsls	r2, r3, #8
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	1c59      	adds	r1, r3, #1
 8002184:	6179      	str	r1, [r7, #20]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4413      	add	r3, r2
 800218a:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <parseDHCPMSG+0x430>)
 800218c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800218e:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <parseDHCPMSG+0x430>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	021a      	lsls	r2, r3, #8
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	6179      	str	r1, [r7, #20]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4413      	add	r3, r2
 800219e:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <parseDHCPMSG+0x430>)
 80021a0:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 80021a2:	e039      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	617a      	str	r2, [r7, #20]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	617a      	str	r2, [r7, #20]
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <parseDHCPMSG+0x434>)
 80021be:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	617a      	str	r2, [r7, #20]
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <parseDHCPMSG+0x434>)
 80021ca:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	617a      	str	r2, [r7, #20]
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <parseDHCPMSG+0x434>)
 80021d6:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	617a      	str	r2, [r7, #20]
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <parseDHCPMSG+0x434>)
 80021e2:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80021e4:	793a      	ldrb	r2, [r7, #4]
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <parseDHCPMSG+0x438>)
 80021e8:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80021ea:	797a      	ldrb	r2, [r7, #5]
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <parseDHCPMSG+0x438>)
 80021ee:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80021f0:	79ba      	ldrb	r2, [r7, #6]
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <parseDHCPMSG+0x438>)
 80021f4:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80021f6:	79fa      	ldrb	r2, [r7, #7]
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <parseDHCPMSG+0x438>)
 80021fa:	70da      	strb	r2, [r3, #3]
   				break;
 80021fc:	e00c      	b.n	8002218 <parseDHCPMSG+0x410>
   			default :
   				p++;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	617a      	str	r2, [r7, #20]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
   				break;
 8002216:	bf00      	nop
		while ( p < e ) {
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	f4ff ae8a 	bcc.w	8001f36 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8002222:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	2000026c 	.word	0x2000026c
 8002234:	20000274 	.word	0x20000274
 8002238:	20000000 	.word	0x20000000
 800223c:	2000025c 	.word	0x2000025c
 8002240:	20000260 	.word	0x20000260

08002244 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800224a:	4b7f      	ldr	r3, [pc, #508]	@ (8002448 <DHCP_run+0x204>)
 800224c:	f993 3000 	ldrsb.w	r3, [r3]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d101      	bne.n	8002258 <DHCP_run+0x14>
 8002254:	2305      	movs	r3, #5
 8002256:	e0f3      	b.n	8002440 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002258:	4b7c      	ldr	r3, [pc, #496]	@ (800244c <DHCP_run+0x208>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3301      	adds	r3, #1
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002266:	4618      	mov	r0, r3
 8002268:	f001 fd7c 	bl	8003d64 <WIZCHIP_READ>
 800226c:	4603      	mov	r3, r0
 800226e:	2b22      	cmp	r3, #34	@ 0x22
 8002270:	d006      	beq.n	8002280 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8002272:	4b76      	ldr	r3, [pc, #472]	@ (800244c <DHCP_run+0x208>)
 8002274:	7818      	ldrb	r0, [r3, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	2244      	movs	r2, #68	@ 0x44
 800227a:	2102      	movs	r1, #2
 800227c:	f000 fea2 	bl	8002fc4 <socket>

	ret = DHCP_RUNNING;
 8002280:	2301      	movs	r3, #1
 8002282:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002284:	f7ff fdc0 	bl	8001e08 <parseDHCPMSG>
 8002288:	4603      	mov	r3, r0
 800228a:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 800228c:	4b6e      	ldr	r3, [pc, #440]	@ (8002448 <DHCP_run+0x204>)
 800228e:	f993 3000 	ldrsb.w	r3, [r3]
 8002292:	2b04      	cmp	r3, #4
 8002294:	f200 80d0 	bhi.w	8002438 <DHCP_run+0x1f4>
 8002298:	a201      	add	r2, pc, #4	@ (adr r2, 80022a0 <DHCP_run+0x5c>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022b5 	.word	0x080022b5
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	0800231d 	.word	0x0800231d
 80022ac:	0800236d 	.word	0x0800236d
 80022b0:	080023c7 	.word	0x080023c7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80022b4:	4b66      	ldr	r3, [pc, #408]	@ (8002450 <DHCP_run+0x20c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80022ba:	4b65      	ldr	r3, [pc, #404]	@ (8002450 <DHCP_run+0x20c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80022c0:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <DHCP_run+0x20c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80022c6:	4b62      	ldr	r3, [pc, #392]	@ (8002450 <DHCP_run+0x20c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80022cc:	f7fe fffa 	bl	80012c4 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80022d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002448 <DHCP_run+0x204>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
   		break;
 80022d6:	e0b2      	b.n	800243e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80022d8:	79bb      	ldrb	r3, [r7, #6]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d119      	bne.n	8002312 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80022de:	4b5d      	ldr	r3, [pc, #372]	@ (8002454 <DHCP_run+0x210>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	7c1a      	ldrb	r2, [r3, #16]
 80022e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <DHCP_run+0x20c>)
 80022e6:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80022e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002454 <DHCP_run+0x210>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	7c5a      	ldrb	r2, [r3, #17]
 80022ee:	4b58      	ldr	r3, [pc, #352]	@ (8002450 <DHCP_run+0x20c>)
 80022f0:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80022f2:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <DHCP_run+0x210>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	7c9a      	ldrb	r2, [r3, #18]
 80022f8:	4b55      	ldr	r3, [pc, #340]	@ (8002450 <DHCP_run+0x20c>)
 80022fa:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80022fc:	4b55      	ldr	r3, [pc, #340]	@ (8002454 <DHCP_run+0x210>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	7cda      	ldrb	r2, [r3, #19]
 8002302:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <DHCP_run+0x20c>)
 8002304:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002306:	f7ff f9a3 	bl	8001650 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800230a:	4b4f      	ldr	r3, [pc, #316]	@ (8002448 <DHCP_run+0x204>)
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002310:	e095      	b.n	800243e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002312:	f000 f8b1 	bl	8002478 <check_DHCP_timeout>
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
         break;
 800231a:	e090      	b.n	800243e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d116      	bne.n	8002350 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002322:	f000 f909 	bl	8002538 <check_DHCP_leasedIP>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800232c:	4b4a      	ldr	r3, [pc, #296]	@ (8002458 <DHCP_run+0x214>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4798      	blx	r3
					reset_DHCP_timeout();
 8002332:	f000 f9d3 	bl	80026dc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002336:	4b44      	ldr	r3, [pc, #272]	@ (8002448 <DHCP_run+0x204>)
 8002338:	2203      	movs	r2, #3
 800233a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800233c:	e07f      	b.n	800243e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800233e:	f000 f9cd 	bl	80026dc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002342:	4b46      	ldr	r3, [pc, #280]	@ (800245c <DHCP_run+0x218>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002348:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <DHCP_run+0x204>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
		break;
 800234e:	e076      	b.n	800243e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d105      	bne.n	8002362 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002356:	f000 f9c1 	bl	80026dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800235a:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <DHCP_run+0x204>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
		break;
 8002360:	e06d      	b.n	800243e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002362:	f000 f889 	bl	8002478 <check_DHCP_timeout>
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
		break;
 800236a:	e068      	b.n	800243e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800236c:	2304      	movs	r3, #4
 800236e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002370:	4b3b      	ldr	r3, [pc, #236]	@ (8002460 <DHCP_run+0x21c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002378:	d060      	beq.n	800243c <DHCP_run+0x1f8>
 800237a:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <DHCP_run+0x21c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	085a      	lsrs	r2, r3, #1
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <DHCP_run+0x220>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d259      	bcs.n	800243c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800238c:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <DHCP_run+0x20c>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b35      	ldr	r3, [pc, #212]	@ (8002468 <DHCP_run+0x224>)
 8002392:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002394:	4b2e      	ldr	r3, [pc, #184]	@ (8002450 <DHCP_run+0x20c>)
 8002396:	785a      	ldrb	r2, [r3, #1]
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <DHCP_run+0x224>)
 800239a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800239c:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <DHCP_run+0x20c>)
 800239e:	789a      	ldrb	r2, [r3, #2]
 80023a0:	4b31      	ldr	r3, [pc, #196]	@ (8002468 <DHCP_run+0x224>)
 80023a2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <DHCP_run+0x20c>)
 80023a6:	78da      	ldrb	r2, [r3, #3]
 80023a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <DHCP_run+0x224>)
 80023aa:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80023ac:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <DHCP_run+0x228>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a2e      	ldr	r2, [pc, #184]	@ (800246c <DHCP_run+0x228>)
 80023b4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80023b6:	f7ff f94b 	bl	8001650 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80023ba:	f000 f98f 	bl	80026dc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80023be:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <DHCP_run+0x204>)
 80023c0:	2204      	movs	r2, #4
 80023c2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80023c4:	e03a      	b.n	800243c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80023c6:	2304      	movs	r3, #4
 80023c8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80023ca:	79bb      	ldrb	r3, [r7, #6]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d125      	bne.n	800241c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80023d0:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <DHCP_run+0x22c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80023d6:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <DHCP_run+0x224>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <DHCP_run+0x20c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d111      	bne.n	8002406 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <DHCP_run+0x224>)
 80023e4:	785a      	ldrb	r2, [r3, #1]
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <DHCP_run+0x20c>)
 80023e8:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d10b      	bne.n	8002406 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <DHCP_run+0x224>)
 80023f0:	789a      	ldrb	r2, [r3, #2]
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <DHCP_run+0x20c>)
 80023f4:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d105      	bne.n	8002406 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80023fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <DHCP_run+0x224>)
 80023fc:	78da      	ldrb	r2, [r3, #3]
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <DHCP_run+0x20c>)
 8002400:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d004      	beq.n	8002410 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002406:	2303      	movs	r3, #3
 8002408:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <DHCP_run+0x230>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002410:	f000 f964 	bl	80026dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <DHCP_run+0x204>)
 8002416:	2203      	movs	r2, #3
 8002418:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800241a:	e010      	b.n	800243e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d105      	bne.n	800242e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002422:	f000 f95b 	bl	80026dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <DHCP_run+0x204>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
	   	break;
 800242c:	e007      	b.n	800243e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800242e:	f000 f823 	bl	8002478 <check_DHCP_timeout>
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002436:	e002      	b.n	800243e <DHCP_run+0x1fa>
		default :
   		break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <DHCP_run+0x1fa>
		break;
 800243c:	bf00      	nop
	}

	return ret;
 800243e:	79fb      	ldrb	r3, [r7, #7]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000278 	.word	0x20000278
 800244c:	20000258 	.word	0x20000258
 8002450:	20000268 	.word	0x20000268
 8002454:	20000284 	.word	0x20000284
 8002458:	20000010 	.word	0x20000010
 800245c:	20000018 	.word	0x20000018
 8002460:	20000000 	.word	0x20000000
 8002464:	2000027c 	.word	0x2000027c
 8002468:	20000264 	.word	0x20000264
 800246c:	20000280 	.word	0x20000280
 8002470:	20000279 	.word	0x20000279
 8002474:	20000014 	.word	0x20000014

08002478 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800247e:	2301      	movs	r3, #1
 8002480:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002482:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <check_DHCP_timeout+0xb0>)
 8002484:	f993 3000 	ldrsb.w	r3, [r3]
 8002488:	2b01      	cmp	r3, #1
 800248a:	dc2d      	bgt.n	80024e8 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800248c:	4b27      	ldr	r3, [pc, #156]	@ (800252c <check_DHCP_timeout+0xb4>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <check_DHCP_timeout+0xb8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d242      	bcs.n	800251e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002498:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <check_DHCP_timeout+0xbc>)
 800249a:	f993 3000 	ldrsb.w	r3, [r3]
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d00c      	beq.n	80024bc <check_DHCP_timeout+0x44>
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	dc0d      	bgt.n	80024c2 <check_DHCP_timeout+0x4a>
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d002      	beq.n	80024b0 <check_DHCP_timeout+0x38>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80024ae:	e008      	b.n	80024c2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80024b0:	f7fe ff08 	bl	80012c4 <send_DHCP_DISCOVER>
				break;
 80024b4:	e006      	b.n	80024c4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80024b6:	f7ff f8cb 	bl	8001650 <send_DHCP_REQUEST>
				break;
 80024ba:	e003      	b.n	80024c4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80024bc:	f7ff f8c8 	bl	8001650 <send_DHCP_REQUEST>
				break;
 80024c0:	e000      	b.n	80024c4 <check_DHCP_timeout+0x4c>
				break;
 80024c2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <check_DHCP_timeout+0xb8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <check_DHCP_timeout+0xb8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330a      	adds	r3, #10
 80024d0:	4a16      	ldr	r2, [pc, #88]	@ (800252c <check_DHCP_timeout+0xb4>)
 80024d2:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <check_DHCP_timeout+0xb0>)
 80024d6:	f993 3000 	ldrsb.w	r3, [r3]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	b25a      	sxtb	r2, r3
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <check_DHCP_timeout+0xb0>)
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e01a      	b.n	800251e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <check_DHCP_timeout+0xbc>)
 80024ea:	f993 3000 	ldrsb.w	r3, [r3]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <check_DHCP_timeout+0x94>
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	dc10      	bgt.n	8002518 <check_DHCP_timeout+0xa0>
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d002      	beq.n	8002500 <check_DHCP_timeout+0x88>
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d006      	beq.n	800250c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80024fe:	e00b      	b.n	8002518 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <check_DHCP_timeout+0xbc>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002506:	2300      	movs	r3, #0
 8002508:	71fb      	strb	r3, [r7, #7]
				break;
 800250a:	e006      	b.n	800251a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800250c:	f7fe feda 	bl	80012c4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <check_DHCP_timeout+0xbc>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
				break;
 8002516:	e000      	b.n	800251a <check_DHCP_timeout+0xa2>
				break;
 8002518:	bf00      	nop
		}
		reset_DHCP_timeout();
 800251a:	f000 f8df 	bl	80026dc <reset_DHCP_timeout>
	}
	return ret;
 800251e:	79fb      	ldrb	r3, [r7, #7]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000279 	.word	0x20000279
 800252c:	20000004 	.word	0x20000004
 8002530:	2000027c 	.word	0x2000027c
 8002534:	20000278 	.word	0x20000278

08002538 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800253e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002542:	f001 fc0f 	bl	8003d64 <WIZCHIP_READ>
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800254a:	2103      	movs	r1, #3
 800254c:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002550:	f001 fc54 	bl	8003dfc <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <check_DHCP_leasedIP+0x6c>)
 8002556:	7818      	ldrb	r0, [r3, #0]
 8002558:	f241 3388 	movw	r3, #5000	@ 0x1388
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <check_DHCP_leasedIP+0x70>)
 8002560:	2211      	movs	r2, #17
 8002562:	4912      	ldr	r1, [pc, #72]	@ (80025ac <check_DHCP_leasedIP+0x74>)
 8002564:	f000 feb0 	bl	80032c8 <sendto>
 8002568:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002572:	f001 fc43 	bl	8003dfc <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f113 0f0d 	cmn.w	r3, #13
 800257c:	d101      	bne.n	8002582 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800257e:	2301      	movs	r3, #1
 8002580:	e00c      	b.n	800259c <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002582:	f7ff faef 	bl	8001b64 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <check_DHCP_leasedIP+0x78>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 800258c:	bf00      	nop
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <check_DHCP_leasedIP+0x78>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d9f9      	bls.n	800258e <check_DHCP_leasedIP+0x56>

		return 0;
 800259a:	2300      	movs	r3, #0
	}
}	
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000258 	.word	0x20000258
 80025a8:	20000268 	.word	0x20000268
 80025ac:	0800c908 	.word	0x0800c908
 80025b0:	2000027c 	.word	0x2000027c

080025b4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80025c4:	2206      	movs	r2, #6
 80025c6:	493f      	ldr	r1, [pc, #252]	@ (80026c4 <DHCP_init+0x110>)
 80025c8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80025cc:	f001 fc64 	bl	8003e98 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80025d0:	4b3c      	ldr	r3, [pc, #240]	@ (80026c4 <DHCP_init+0x110>)
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <DHCP_init+0x110>)
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b39      	ldr	r3, [pc, #228]	@ (80026c4 <DHCP_init+0x110>)
 80025de:	789b      	ldrb	r3, [r3, #2]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b37      	ldr	r3, [pc, #220]	@ (80026c4 <DHCP_init+0x110>)
 80025e6:	78db      	ldrb	r3, [r3, #3]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <DHCP_init+0x110>)
 80025ee:	791b      	ldrb	r3, [r3, #4]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <DHCP_init+0x110>)
 80025f6:	795b      	ldrb	r3, [r3, #5]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d117      	bne.n	8002630 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002600:	4b30      	ldr	r3, [pc, #192]	@ (80026c4 <DHCP_init+0x110>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002606:	4b2f      	ldr	r3, [pc, #188]	@ (80026c4 <DHCP_init+0x110>)
 8002608:	2208      	movs	r2, #8
 800260a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800260c:	4b2d      	ldr	r3, [pc, #180]	@ (80026c4 <DHCP_init+0x110>)
 800260e:	22dc      	movs	r2, #220	@ 0xdc
 8002610:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002612:	4b2c      	ldr	r3, [pc, #176]	@ (80026c4 <DHCP_init+0x110>)
 8002614:	2200      	movs	r2, #0
 8002616:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002618:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <DHCP_init+0x110>)
 800261a:	2200      	movs	r2, #0
 800261c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800261e:	4b29      	ldr	r3, [pc, #164]	@ (80026c4 <DHCP_init+0x110>)
 8002620:	2200      	movs	r2, #0
 8002622:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002624:	2206      	movs	r2, #6
 8002626:	4927      	ldr	r1, [pc, #156]	@ (80026c4 <DHCP_init+0x110>)
 8002628:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800262c:	f001 fc94 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002630:	4a25      	ldr	r2, [pc, #148]	@ (80026c8 <DHCP_init+0x114>)
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002636:	4a25      	ldr	r2, [pc, #148]	@ (80026cc <DHCP_init+0x118>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800263c:	4b24      	ldr	r3, [pc, #144]	@ (80026d0 <DHCP_init+0x11c>)
 800263e:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <DHCP_init+0x120>)
 8002640:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002642:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <DHCP_init+0x110>)
 8002644:	78db      	ldrb	r3, [r3, #3]
 8002646:	461a      	mov	r2, r3
 8002648:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <DHCP_init+0x11c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4413      	add	r3, r2
 800264e:	4a20      	ldr	r2, [pc, #128]	@ (80026d0 <DHCP_init+0x11c>)
 8002650:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002652:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <DHCP_init+0x110>)
 8002654:	791b      	ldrb	r3, [r3, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <DHCP_init+0x11c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4413      	add	r3, r2
 800265e:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <DHCP_init+0x11c>)
 8002660:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002662:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <DHCP_init+0x110>)
 8002664:	795b      	ldrb	r3, [r3, #5]
 8002666:	461a      	mov	r2, r3
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <DHCP_init+0x11c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <DHCP_init+0x11c>)
 8002670:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <DHCP_init+0x110>)
 8002674:	78da      	ldrb	r2, [r3, #3]
 8002676:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <DHCP_init+0x110>)
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	4053      	eors	r3, r2
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <DHCP_init+0x110>)
 8002680:	795b      	ldrb	r3, [r3, #5]
 8002682:	4053      	eors	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <DHCP_init+0x11c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4413      	add	r3, r2
 800268e:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <DHCP_init+0x11c>)
 8002690:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2204      	movs	r2, #4
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800269e:	f001 fc5b 	bl	8003f58 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	2204      	movs	r2, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80026ae:	f001 fc53 	bl	8003f58 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80026b2:	f000 f813 	bl	80026dc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <DHCP_init+0x124>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000288 	.word	0x20000288
 80026c8:	20000258 	.word	0x20000258
 80026cc:	20000284 	.word	0x20000284
 80026d0:	20000280 	.word	0x20000280
 80026d4:	12345678 	.word	0x12345678
 80026d8:	20000278 	.word	0x20000278

080026dc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <reset_DHCP_timeout+0x20>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <reset_DHCP_timeout+0x24>)
 80026e8:	220a      	movs	r2, #10
 80026ea:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <reset_DHCP_timeout+0x28>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	2000027c 	.word	0x2000027c
 8002700:	20000004 	.word	0x20000004
 8002704:	20000279 	.word	0x20000279

08002708 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <getIPfromDHCP+0x3c>)
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3301      	adds	r3, #1
 800271c:	4a09      	ldr	r2, [pc, #36]	@ (8002744 <getIPfromDHCP+0x3c>)
 800271e:	7852      	ldrb	r2, [r2, #1]
 8002720:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3302      	adds	r3, #2
 8002726:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <getIPfromDHCP+0x3c>)
 8002728:	7892      	ldrb	r2, [r2, #2]
 800272a:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3303      	adds	r3, #3
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <getIPfromDHCP+0x3c>)
 8002732:	78d2      	ldrb	r2, [r2, #3]
 8002734:	701a      	strb	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000268 	.word	0x20000268

08002748 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <getGWfromDHCP+0x3c>)
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <getGWfromDHCP+0x3c>)
 800275e:	7852      	ldrb	r2, [r2, #1]
 8002760:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3302      	adds	r3, #2
 8002766:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <getGWfromDHCP+0x3c>)
 8002768:	7892      	ldrb	r2, [r2, #2]
 800276a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3303      	adds	r3, #3
 8002770:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <getGWfromDHCP+0x3c>)
 8002772:	78d2      	ldrb	r2, [r2, #3]
 8002774:	701a      	strb	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	2000026c 	.word	0x2000026c

08002788 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <getSNfromDHCP+0x3c>)
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3301      	adds	r3, #1
 800279c:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <getSNfromDHCP+0x3c>)
 800279e:	7852      	ldrb	r2, [r2, #1]
 80027a0:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3302      	adds	r3, #2
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <getSNfromDHCP+0x3c>)
 80027a8:	7892      	ldrb	r2, [r2, #2]
 80027aa:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3303      	adds	r3, #3
 80027b0:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <getSNfromDHCP+0x3c>)
 80027b2:	78d2      	ldrb	r2, [r2, #3]
 80027b4:	701a      	strb	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000270 	.word	0x20000270

080027c8 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d803      	bhi.n	80027e8 <NibbleToHex+0x20>
    return nibble + '0';
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	3330      	adds	r3, #48	@ 0x30
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e002      	b.n	80027ee <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	3337      	adds	r3, #55	@ 0x37
 80027ec:	b2db      	uxtb	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <wizchipSelect>:
uint8_t RX_BUF[1024];
uint8_t TX_BUF[1024];
wiz_NetInfo net_info = { .mac = { 0x0A, 0xAD, 0xBE, 0xEF, 0xFE, 0xE2 }, .dhcp =
		NETINFO_DHCP };

void wizchipSelect(void) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2110      	movs	r1, #16
 8002804:	4802      	ldr	r0, [pc, #8]	@ (8002810 <wizchipSelect+0x14>)
 8002806:	f002 fbcd 	bl	8004fa4 <HAL_GPIO_WritePin>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40020000 	.word	0x40020000

08002814 <wizchipUnselect>:

void wizchipUnselect(void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002818:	2201      	movs	r2, #1
 800281a:	2110      	movs	r1, #16
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <wizchipUnselect+0x14>)
 800281e:	f002 fbc1 	bl	8004fa4 <HAL_GPIO_WritePin>
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40020000 	.word	0x40020000

0800282c <wizchipReadBurst>:

void wizchipReadBurst(uint8_t *buff, uint16_t len) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8002838:	887a      	ldrh	r2, [r7, #2]
 800283a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4803      	ldr	r0, [pc, #12]	@ (8002850 <wizchipReadBurst+0x24>)
 8002842:	f003 fa2d 	bl	8005ca0 <HAL_SPI_Receive>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000690 	.word	0x20000690

08002854 <wizchipWriteBurst>:

void wizchipWriteBurst(uint8_t *buff, uint16_t len) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4803      	ldr	r0, [pc, #12]	@ (8002878 <wizchipWriteBurst+0x24>)
 800286a:	f003 f8d6 	bl	8005a1a <HAL_SPI_Transmit>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000690 	.word	0x20000690

0800287c <wizchipReadByte>:

uint8_t wizchipReadByte(void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchipReadBurst(&byte, sizeof(byte));
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffd0 	bl	800282c <wizchipReadBurst>
	return byte;
 800288c:	79fb      	ldrb	r3, [r7, #7]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <wizchipWriteByte>:

void wizchipWriteByte(uint8_t byte) {
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
	wizchipWriteBurst(&byte, sizeof(byte));
 80028a0:	1dfb      	adds	r3, r7, #7
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ffd5 	bl	8002854 <wizchipWriteBurst>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <Callback_IPAssigned>:

volatile uint8_t ip_assigned = false;

void Callback_IPAssigned(void) {
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	ip_assigned = true;
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <Callback_IPAssigned+0x14>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	2000028e 	.word	0x2000028e

080028cc <Callback_IPConflict>:

void Callback_IPConflict(void) {
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
	ip_assigned = false;
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <Callback_IPConflict+0x14>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	2000028e 	.word	0x2000028e

080028e4 <ETH_Init>:

uint8_t dhcp_buffer[1024];
uint8_t dns_buffer[1024];

void ETH_Init() {
 80028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e6:	b093      	sub	sp, #76	@ 0x4c
 80028e8:	af0a      	add	r7, sp, #40	@ 0x28

	// Register W5500 callbacks
	reg_wizchip_cs_cbfunc(wizchipSelect, wizchipUnselect);
 80028ea:	495f      	ldr	r1, [pc, #380]	@ (8002a68 <ETH_Init+0x184>)
 80028ec:	485f      	ldr	r0, [pc, #380]	@ (8002a6c <ETH_Init+0x188>)
 80028ee:	f001 fd83 	bl	80043f8 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchipReadByte, wizchipWriteByte);
 80028f2:	495f      	ldr	r1, [pc, #380]	@ (8002a70 <ETH_Init+0x18c>)
 80028f4:	485f      	ldr	r0, [pc, #380]	@ (8002a74 <ETH_Init+0x190>)
 80028f6:	f001 fda5 	bl	8004444 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchipReadBurst, wizchipWriteBurst);
 80028fa:	495f      	ldr	r1, [pc, #380]	@ (8002a78 <ETH_Init+0x194>)
 80028fc:	485f      	ldr	r0, [pc, #380]	@ (8002a7c <ETH_Init+0x198>)
 80028fe:	f001 fdcd 	bl	800449c <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 8002902:	4a5f      	ldr	r2, [pc, #380]	@ (8002a80 <ETH_Init+0x19c>)
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290c:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002910:	f107 0214 	add.w	r2, r7, #20
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fe36 	bl	800458c <wizchip_init>

	// set MAC address before using DHCP
	setSHAR(net_info.mac);
 8002920:	2206      	movs	r2, #6
 8002922:	4958      	ldr	r1, [pc, #352]	@ (8002a84 <ETH_Init+0x1a0>)
 8002924:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002928:	f001 fb16 	bl	8003f58 <WIZCHIP_WRITE_BUF>
	DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800292c:	4956      	ldr	r1, [pc, #344]	@ (8002a88 <ETH_Init+0x1a4>)
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff fe40 	bl	80025b4 <DHCP_init>

	reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned,
 8002934:	4a55      	ldr	r2, [pc, #340]	@ (8002a8c <ETH_Init+0x1a8>)
 8002936:	4956      	ldr	r1, [pc, #344]	@ (8002a90 <ETH_Init+0x1ac>)
 8002938:	4855      	ldr	r0, [pc, #340]	@ (8002a90 <ETH_Init+0x1ac>)
 800293a:	f7fe fb99 	bl	8001070 <reg_dhcp_cbfunc>
			Callback_IPConflict);

	sprintf(msgbuf, "Obtaining network configuration from DHCP ... \r\n");
 800293e:	4955      	ldr	r1, [pc, #340]	@ (8002a94 <ETH_Init+0x1b0>)
 8002940:	4855      	ldr	r0, [pc, #340]	@ (8002a98 <ETH_Init+0x1b4>)
 8002942:	f006 fc17 	bl	8009174 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msgbuf, strlen(msgbuf), 100);
 8002946:	4854      	ldr	r0, [pc, #336]	@ (8002a98 <ETH_Init+0x1b4>)
 8002948:	f7fd fc92 	bl	8000270 <strlen>
 800294c:	4603      	mov	r3, r0
 800294e:	b29a      	uxth	r2, r3
 8002950:	2364      	movs	r3, #100	@ 0x64
 8002952:	4951      	ldr	r1, [pc, #324]	@ (8002a98 <ETH_Init+0x1b4>)
 8002954:	4851      	ldr	r0, [pc, #324]	@ (8002a9c <ETH_Init+0x1b8>)
 8002956:	f004 fc5d 	bl	8007214 <HAL_UART_Transmit>
	uint32_t ctr = 100;
 800295a:	2364      	movs	r3, #100	@ 0x64
 800295c:	61fb      	str	r3, [r7, #28]
	while ((!ip_assigned) && ctr) {
 800295e:	e007      	b.n	8002970 <ETH_Init+0x8c>
		DHCP_run();
 8002960:	f7ff fc70 	bl	8002244 <DHCP_run>
		--ctr;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	3b01      	subs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
		HAL_Delay(50);
 800296a:	2032      	movs	r0, #50	@ 0x32
 800296c:	f001 ffb6 	bl	80048dc <HAL_Delay>
	while ((!ip_assigned) && ctr) {
 8002970:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <ETH_Init+0x9c>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ef      	bne.n	8002960 <ETH_Init+0x7c>
	}
	if (!ip_assigned) {
 8002980:	4b47      	ldr	r3, [pc, #284]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10e      	bne.n	80029a8 <ETH_Init+0xc4>
		sprintf(msgbuf, "Failed to obtain IP, returning ... \r\n");
 800298a:	4946      	ldr	r1, [pc, #280]	@ (8002aa4 <ETH_Init+0x1c0>)
 800298c:	4842      	ldr	r0, [pc, #264]	@ (8002a98 <ETH_Init+0x1b4>)
 800298e:	f006 fbf1 	bl	8009174 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002992:	4841      	ldr	r0, [pc, #260]	@ (8002a98 <ETH_Init+0x1b4>)
 8002994:	f7fd fc6c 	bl	8000270 <strlen>
 8002998:	4603      	mov	r3, r0
 800299a:	b29a      	uxth	r2, r3
 800299c:	2364      	movs	r3, #100	@ 0x64
 800299e:	493e      	ldr	r1, [pc, #248]	@ (8002a98 <ETH_Init+0x1b4>)
 80029a0:	483e      	ldr	r0, [pc, #248]	@ (8002a9c <ETH_Init+0x1b8>)
 80029a2:	f004 fc37 	bl	8007214 <HAL_UART_Transmit>
 80029a6:	e05c      	b.n	8002a62 <ETH_Init+0x17e>
		return;
	}
	sprintf(msgbuf, "Network configuration obtained!\r\n-----------------------\r\n");
 80029a8:	493f      	ldr	r1, [pc, #252]	@ (8002aa8 <ETH_Init+0x1c4>)
 80029aa:	483b      	ldr	r0, [pc, #236]	@ (8002a98 <ETH_Init+0x1b4>)
 80029ac:	f006 fbe2 	bl	8009174 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msgbuf, strlen(msgbuf), 100);
 80029b0:	4839      	ldr	r0, [pc, #228]	@ (8002a98 <ETH_Init+0x1b4>)
 80029b2:	f7fd fc5d 	bl	8000270 <strlen>
 80029b6:	4603      	mov	r3, r0
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	2364      	movs	r3, #100	@ 0x64
 80029bc:	4936      	ldr	r1, [pc, #216]	@ (8002a98 <ETH_Init+0x1b4>)
 80029be:	4837      	ldr	r0, [pc, #220]	@ (8002a9c <ETH_Init+0x1b8>)
 80029c0:	f004 fc28 	bl	8007214 <HAL_UART_Transmit>

	getIPfromDHCP(net_info.ip);
 80029c4:	4839      	ldr	r0, [pc, #228]	@ (8002aac <ETH_Init+0x1c8>)
 80029c6:	f7ff fe9f 	bl	8002708 <getIPfromDHCP>
	getGWfromDHCP(net_info.gw);
 80029ca:	4839      	ldr	r0, [pc, #228]	@ (8002ab0 <ETH_Init+0x1cc>)
 80029cc:	f7ff febc 	bl	8002748 <getGWfromDHCP>
	getSNfromDHCP(net_info.sn);
 80029d0:	4838      	ldr	r0, [pc, #224]	@ (8002ab4 <ETH_Init+0x1d0>)
 80029d2:	f7ff fed9 	bl	8002788 <getSNfromDHCP>
//        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
//        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
//    );
//    HAL_UART_Transmit(&huart1,(uint8_t *)charData,strlen(charData),1000);

	wizchip_setnetinfo(&net_info);
 80029d6:	482b      	ldr	r0, [pc, #172]	@ (8002a84 <ETH_Init+0x1a0>)
 80029d8:	f001 fe64 	bl	80046a4 <wizchip_setnetinfo>
	wizchip_getnetinfo(&net_info);
 80029dc:	4829      	ldr	r0, [pc, #164]	@ (8002a84 <ETH_Init+0x1a0>)
 80029de:	f001 fea1 	bl	8004724 <wizchip_getnetinfo>

	sprintf(msgbuf,
			"IP:\t%d.%d.%d.%d\r\nSN:\t%d.%d.%d.%d\r\nGW:\t%d.%d.%d.%d\r\n-----------------------\r\n",
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029e2:	4b28      	ldr	r3, [pc, #160]	@ (8002a84 <ETH_Init+0x1a0>)
 80029e4:	799b      	ldrb	r3, [r3, #6]
	sprintf(msgbuf,
 80029e6:	469c      	mov	ip, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029e8:	4b26      	ldr	r3, [pc, #152]	@ (8002a84 <ETH_Init+0x1a0>)
 80029ea:	79db      	ldrb	r3, [r3, #7]
	sprintf(msgbuf,
 80029ec:	469e      	mov	lr, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029ee:	4b25      	ldr	r3, [pc, #148]	@ (8002a84 <ETH_Init+0x1a0>)
 80029f0:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(msgbuf,
 80029f2:	461a      	mov	r2, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029f4:	4b23      	ldr	r3, [pc, #140]	@ (8002a84 <ETH_Init+0x1a0>)
 80029f6:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(msgbuf,
 80029f8:	4619      	mov	r1, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80029fa:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <ETH_Init+0x1a0>)
 80029fc:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(msgbuf,
 80029fe:	4618      	mov	r0, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a00:	4b20      	ldr	r3, [pc, #128]	@ (8002a84 <ETH_Init+0x1a0>)
 8002a02:	7adb      	ldrb	r3, [r3, #11]
	sprintf(msgbuf,
 8002a04:	461c      	mov	r4, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a06:	4b1f      	ldr	r3, [pc, #124]	@ (8002a84 <ETH_Init+0x1a0>)
 8002a08:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(msgbuf,
 8002a0a:	461d      	mov	r5, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <ETH_Init+0x1a0>)
 8002a0e:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(msgbuf,
 8002a10:	461e      	mov	r6, r3
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a12:	4b1c      	ldr	r3, [pc, #112]	@ (8002a84 <ETH_Init+0x1a0>)
 8002a14:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(msgbuf,
 8002a16:	60fb      	str	r3, [r7, #12]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a18:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <ETH_Init+0x1a0>)
 8002a1a:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(msgbuf,
 8002a1c:	60bb      	str	r3, [r7, #8]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a1e:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <ETH_Init+0x1a0>)
 8002a20:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(msgbuf,
 8002a22:	607b      	str	r3, [r7, #4]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a24:	4b17      	ldr	r3, [pc, #92]	@ (8002a84 <ETH_Init+0x1a0>)
 8002a26:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(msgbuf,
 8002a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	9308      	str	r3, [sp, #32]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	9307      	str	r3, [sp, #28]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	9306      	str	r3, [sp, #24]
 8002a36:	9605      	str	r6, [sp, #20]
 8002a38:	9504      	str	r5, [sp, #16]
 8002a3a:	9403      	str	r4, [sp, #12]
 8002a3c:	9002      	str	r0, [sp, #8]
 8002a3e:	9101      	str	r1, [sp, #4]
 8002a40:	9200      	str	r2, [sp, #0]
 8002a42:	4673      	mov	r3, lr
 8002a44:	4662      	mov	r2, ip
 8002a46:	491c      	ldr	r1, [pc, #112]	@ (8002ab8 <ETH_Init+0x1d4>)
 8002a48:	4813      	ldr	r0, [pc, #76]	@ (8002a98 <ETH_Init+0x1b4>)
 8002a4a:	f006 fb93 	bl	8009174 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002a4e:	4812      	ldr	r0, [pc, #72]	@ (8002a98 <ETH_Init+0x1b4>)
 8002a50:	f7fd fc0e 	bl	8000270 <strlen>
 8002a54:	4603      	mov	r3, r0
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	2364      	movs	r3, #100	@ 0x64
 8002a5a:	490f      	ldr	r1, [pc, #60]	@ (8002a98 <ETH_Init+0x1b4>)
 8002a5c:	480f      	ldr	r0, [pc, #60]	@ (8002a9c <ETH_Init+0x1b8>)
 8002a5e:	f004 fbd9 	bl	8007214 <HAL_UART_Transmit>
}
 8002a62:	3724      	adds	r7, #36	@ 0x24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a68:	08002815 	.word	0x08002815
 8002a6c:	080027fd 	.word	0x080027fd
 8002a70:	08002897 	.word	0x08002897
 8002a74:	0800287d 	.word	0x0800287d
 8002a78:	08002855 	.word	0x08002855
 8002a7c:	0800282d 	.word	0x0800282d
 8002a80:	0800ca04 	.word	0x0800ca04
 8002a84:	2000001c 	.word	0x2000001c
 8002a88:	20000290 	.word	0x20000290
 8002a8c:	080028cd 	.word	0x080028cd
 8002a90:	080028b5 	.word	0x080028b5
 8002a94:	0800c91c 	.word	0x0800c91c
 8002a98:	20000880 	.word	0x20000880
 8002a9c:	20000730 	.word	0x20000730
 8002aa0:	2000028e 	.word	0x2000028e
 8002aa4:	0800c950 	.word	0x0800c950
 8002aa8:	0800c978 	.word	0x0800c978
 8002aac:	20000022 	.word	0x20000022
 8002ab0:	2000002a 	.word	0x2000002a
 8002ab4:	20000026 	.word	0x20000026
 8002ab8:	0800c9b4 	.word	0x0800c9b4

08002abc <UART_Message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Message(char *msg) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	sprintf(msgbuf, msg);
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4804      	ldr	r0, [pc, #16]	@ (8002ad8 <UART_Message+0x1c>)
 8002ac8:	f006 fb54 	bl	8009174 <siprintf>
	UART_Send();
 8002acc:	f000 f806 	bl	8002adc <UART_Send>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000880 	.word	0x20000880

08002adc <UART_Send>:

void UART_Send() {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002ae0:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <UART_Send+0x1c>)
 8002ae2:	f7fd fbc5 	bl	8000270 <strlen>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	2364      	movs	r3, #100	@ 0x64
 8002aec:	4902      	ldr	r1, [pc, #8]	@ (8002af8 <UART_Send+0x1c>)
 8002aee:	4803      	ldr	r0, [pc, #12]	@ (8002afc <UART_Send+0x20>)
 8002af0:	f004 fb90 	bl	8007214 <HAL_UART_Transmit>
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000880 	.word	0x20000880
 8002afc:	20000730 	.word	0x20000730

08002b00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	if (rx_input[0] == (uint8_t) '\r' || rx_input[0] == (uint8_t) '\n') {
 8002b08:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b0d      	cmp	r3, #13
 8002b0e:	d003      	beq.n	8002b18 <HAL_UART_RxCpltCallback+0x18>
 8002b10:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b0a      	cmp	r3, #10
 8002b16:	d132      	bne.n	8002b7e <HAL_UART_RxCpltCallback+0x7e>
		char newline[] = "\r\n";
 8002b18:	4a27      	ldr	r2, [pc, #156]	@ (8002bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4611      	mov	r1, r2
 8002b22:	8019      	strh	r1, [r3, #0]
 8002b24:	3302      	adds	r3, #2
 8002b26:	0c12      	lsrs	r2, r2, #16
 8002b28:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t*) newline, strlen(newline), 100);
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fb9e 	bl	8000270 <strlen>
 8002b34:	4603      	mov	r3, r0
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	f107 010c 	add.w	r1, r7, #12
 8002b3c:	2364      	movs	r3, #100	@ 0x64
 8002b3e:	481f      	ldr	r0, [pc, #124]	@ (8002bbc <HAL_UART_RxCpltCallback+0xbc>)
 8002b40:	f004 fb68 	bl	8007214 <HAL_UART_Transmit>
		memcpy(&rx_buffer[rx_index + 1], newline, sizeof newline);
 8002b44:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8002b4c:	4413      	add	r3, r2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	8819      	ldrh	r1, [r3, #0]
 8002b56:	789b      	ldrb	r3, [r3, #2]
 8002b58:	8011      	strh	r1, [r2, #0]
 8002b5a:	7093      	strb	r3, [r2, #2]

		HAL_UART_Transmit(&huart6, rx_buffer,
 8002b5c:	2364      	movs	r3, #100	@ 0x64
 8002b5e:	f240 1201 	movw	r2, #257	@ 0x101
 8002b62:	4918      	ldr	r1, [pc, #96]	@ (8002bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8002b64:	4815      	ldr	r0, [pc, #84]	@ (8002bbc <HAL_UART_RxCpltCallback+0xbc>)
 8002b66:	f004 fb55 	bl	8007214 <HAL_UART_Transmit>
				sizeof(rx_buffer) / sizeof(uint8_t), 100);
		rx_index = 0;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002b70:	f240 1201 	movw	r2, #257	@ 0x101
 8002b74:	2100      	movs	r1, #0
 8002b76:	4813      	ldr	r0, [pc, #76]	@ (8002bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8002b78:	f006 fb5f 	bl	800923a <memset>
	if (rx_input[0] == (uint8_t) '\r' || rx_input[0] == (uint8_t) '\n') {
 8002b7c:	e010      	b.n	8002ba0 <HAL_UART_RxCpltCallback+0xa0>
	} else {
		HAL_UART_Transmit(&huart6, rx_input, 1, 100);
 8002b7e:	2364      	movs	r3, #100	@ 0x64
 8002b80:	2201      	movs	r2, #1
 8002b82:	490c      	ldr	r1, [pc, #48]	@ (8002bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8002b84:	480d      	ldr	r0, [pc, #52]	@ (8002bbc <HAL_UART_RxCpltCallback+0xbc>)
 8002b86:	f004 fb45 	bl	8007214 <HAL_UART_Transmit>
		rx_buffer[rx_index++] = rx_input[0];
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	b2d1      	uxtb	r1, r2
 8002b92:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8002b94:	7011      	strb	r1, [r2, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8002b9a:	7819      	ldrb	r1, [r3, #0]
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8002b9e:	5499      	strb	r1, [r3, r2]
	}
	HAL_UART_Receive_IT(&huart6, rx_input, 1);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4904      	ldr	r1, [pc, #16]	@ (8002bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8002ba4:	4805      	ldr	r0, [pc, #20]	@ (8002bbc <HAL_UART_RxCpltCallback+0xbc>)
 8002ba6:	f004 fbc0 	bl	800732a <HAL_UART_Receive_IT>
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000087c 	.word	0x2000087c
 8002bb8:	0800ca64 	.word	0x0800ca64
 8002bbc:	20000730 	.word	0x20000730
 8002bc0:	2000087d 	.word	0x2000087d
 8002bc4:	20000778 	.word	0x20000778

08002bc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002bcc:	f001 fe14 	bl	80047f8 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002bd0:	f000 f81c 	bl	8002c0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002bd4:	f000 f986 	bl	8002ee4 <MX_GPIO_Init>
	MX_USART6_UART_Init();
 8002bd8:	f000 f95a 	bl	8002e90 <MX_USART6_UART_Init>
	MX_TIM1_Init();
 8002bdc:	f000 f8b6 	bl	8002d4c <MX_TIM1_Init>
	MX_SPI1_Init();
 8002be0:	f000 f87e 	bl	8002ce0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	SERVO_Init();
 8002be4:	f000 f9e2 	bl	8002fac <SERVO_Init>
	ETH_Init();
 8002be8:	f7ff fe7c 	bl	80028e4 <ETH_Init>
	UART_Message("Starting the program ...\r\n");
 8002bec:	4804      	ldr	r0, [pc, #16]	@ (8002c00 <main+0x38>)
 8002bee:	f7ff ff65 	bl	8002abc <UART_Message>
	HAL_UART_Receive_IT(&huart6, rx_input, 1);
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4903      	ldr	r1, [pc, #12]	@ (8002c04 <main+0x3c>)
 8002bf6:	4804      	ldr	r0, [pc, #16]	@ (8002c08 <main+0x40>)
 8002bf8:	f004 fb97 	bl	800732a <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <main+0x34>
 8002c00:	0800ca68 	.word	0x0800ca68
 8002c04:	2000087c 	.word	0x2000087c
 8002c08:	20000730 	.word	0x20000730

08002c0c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b094      	sub	sp, #80	@ 0x50
 8002c10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002c12:	f107 0320 	add.w	r3, r7, #32
 8002c16:	2230      	movs	r2, #48	@ 0x30
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f006 fb0d 	bl	800923a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	4b28      	ldr	r3, [pc, #160]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	4a27      	ldr	r2, [pc, #156]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c40:	4b25      	ldr	r3, [pc, #148]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <SystemClock_Config+0xd0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a21      	ldr	r2, [pc, #132]	@ (8002cdc <SystemClock_Config+0xd0>)
 8002c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <SystemClock_Config+0xd0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c72:	2302      	movs	r3, #2
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002c80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002c84:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c86:	2302      	movs	r3, #2
 8002c88:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c8e:	f107 0320 	add.w	r3, r7, #32
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 f9a0 	bl	8004fd8 <HAL_RCC_OscConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <SystemClock_Config+0x96>
		Error_Handler();
 8002c9e:	f000 f97f 	bl	8002fa0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002cb2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002cba:	f107 030c 	add.w	r3, r7, #12
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fc01 	bl	80054c8 <HAL_RCC_ClockConfig>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <SystemClock_Config+0xc4>
		Error_Handler();
 8002ccc:	f000 f968 	bl	8002fa0 <Error_Handler>
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	3750      	adds	r7, #80	@ 0x50
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002ce4:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <MX_SPI1_Init+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cea:	4b16      	ldr	r3, [pc, #88]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002cec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cf0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cf2:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d10:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d12:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d24:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d2c:	220a      	movs	r2, #10
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002d30:	4804      	ldr	r0, [pc, #16]	@ (8002d44 <MX_SPI1_Init+0x64>)
 8002d32:	f002 fde9 	bl	8005908 <HAL_SPI_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002d3c:	f000 f930 	bl	8002fa0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000690 	.word	0x20000690
 8002d48:	40013000 	.word	0x40013000

08002d4c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b096      	sub	sp, #88	@ 0x58
 8002d50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	611a      	str	r2, [r3, #16]
 8002d7a:	615a      	str	r2, [r3, #20]
 8002d7c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	2220      	movs	r2, #32
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f006 fa58 	bl	800923a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002d8c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e8c <MX_TIM1_Init+0x140>)
 8002d8e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3360 + 1;
 8002d90:	4b3d      	ldr	r3, [pc, #244]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002d92:	f640 5221 	movw	r2, #3361	@ 0xd21
 8002d96:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d98:	4b3b      	ldr	r3, [pc, #236]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 + 1;
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002da0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8002da4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da6:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002dac:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db2:	4b35      	ldr	r3, [pc, #212]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002db8:	4833      	ldr	r0, [pc, #204]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002dba:	f003 fb7b 	bl	80064b4 <HAL_TIM_Base_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002dc4:	f000 f8ec 	bl	8002fa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002dce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	482c      	ldr	r0, [pc, #176]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002dd6:	f003 fd41 	bl	800685c <HAL_TIM_ConfigClockSource>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM1_Init+0x98>
		Error_Handler();
 8002de0:	f000 f8de 	bl	8002fa0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002de4:	4828      	ldr	r0, [pc, #160]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002de6:	f003 fc1d 	bl	8006624 <HAL_TIM_PWM_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8002df0:	f000 f8d6 	bl	8002fa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002dfc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e00:	4619      	mov	r1, r3
 8002e02:	4821      	ldr	r0, [pc, #132]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002e04:	f004 f8e8 	bl	8006fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8002e0e:	f000 f8c7 	bl	8002fa0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e12:	2360      	movs	r3, #96	@ 0x60
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 50;
 8002e16:	2332      	movs	r3, #50	@ 0x32
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e22:	2304      	movs	r3, #4
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e32:	2200      	movs	r2, #0
 8002e34:	4619      	mov	r1, r3
 8002e36:	4814      	ldr	r0, [pc, #80]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002e38:	f003 fc4e 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8002e42:	f000 f8ad 	bl	8002fa0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e5e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4807      	ldr	r0, [pc, #28]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002e6a:	f004 f931 	bl	80070d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8002e74:	f000 f894 	bl	8002fa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002e78:	4803      	ldr	r0, [pc, #12]	@ (8002e88 <MX_TIM1_Init+0x13c>)
 8002e7a:	f000 fdd7 	bl	8003a2c <HAL_TIM_MspPostInit>

}
 8002e7e:	bf00      	nop
 8002e80:	3758      	adds	r7, #88	@ 0x58
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200006e8 	.word	0x200006e8
 8002e8c:	40010000 	.word	0x40010000

08002e90 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <MX_USART6_UART_Init+0x50>)
 8002e98:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ec8:	f004 f954 	bl	8007174 <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8002ed2:	f000 f865 	bl	8002fa0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000730 	.word	0x20000730
 8002ee0:	40011400 	.word	0x40011400

08002ee4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a25      	ldr	r2, [pc, #148]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f26:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b18      	ldr	r3, [pc, #96]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f3c:	f043 0310 	orr.w	r3, r3, #16
 8002f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f42:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	4a10      	ldr	r2, [pc, #64]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <MX_GPIO_Init+0xb4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2110      	movs	r1, #16
 8002f6e:	480b      	ldr	r0, [pc, #44]	@ (8002f9c <MX_GPIO_Init+0xb8>)
 8002f70:	f002 f818 	bl	8004fa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : ETH_CS_Pin */
	GPIO_InitStruct.Pin = ETH_CS_Pin;
 8002f74:	2310      	movs	r3, #16
 8002f76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4804      	ldr	r0, [pc, #16]	@ (8002f9c <MX_GPIO_Init+0xb8>)
 8002f8c:	f001 fe6e 	bl	8004c6c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002f90:	bf00      	nop
 8002f92:	3728      	adds	r7, #40	@ 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020000 	.word	0x40020000

08002fa0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa4:	b672      	cpsid	i
}
 8002fa6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <Error_Handler+0x8>

08002fac <SERVO_Init>:

void SERVO_Off() {
	HAL_TIM_PWM_Stop(PWM_Timer, TIM_CHANNEL_1);
}

void SERVO_Init(){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(PWM_Timer);
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <SERVO_Init+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 facd 	bl	8006554 <HAL_TIM_Base_Start>
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000034 	.word	0x20000034

08002fc4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	71fb      	strb	r3, [r7, #7]
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71bb      	strb	r3, [r7, #6]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	80bb      	strh	r3, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d902      	bls.n	8002fee <socket+0x2a>
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fec:	e0f0      	b.n	80031d0 <socket+0x20c>
	switch(protocol)
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d005      	beq.n	8003000 <socket+0x3c>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	dd11      	ble.n	800301c <socket+0x58>
 8002ff8:	3b02      	subs	r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d80e      	bhi.n	800301c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002ffe:	e011      	b.n	8003024 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003000:	f107 030c 	add.w	r3, r7, #12
 8003004:	2204      	movs	r2, #4
 8003006:	4619      	mov	r1, r3
 8003008:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800300c:	f000 ff44 	bl	8003e98 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <socket+0x5e>
 8003016:	f06f 0302 	mvn.w	r3, #2
 800301a:	e0d9      	b.n	80031d0 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800301c:	f06f 0304 	mvn.w	r3, #4
 8003020:	e0d6      	b.n	80031d0 <socket+0x20c>
	    break;
 8003022:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <socket+0x70>
 800302e:	f06f 0305 	mvn.w	r3, #5
 8003032:	e0cd      	b.n	80031d0 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d028      	beq.n	800308c <socket+0xc8>
	{
   	switch(protocol)
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <socket+0x82>
 8003040:	2b02      	cmp	r3, #2
 8003042:	d008      	beq.n	8003056 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003044:	e022      	b.n	800308c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11a      	bne.n	8003086 <socket+0xc2>
 8003050:	f06f 0305 	mvn.w	r3, #5
 8003054:	e0bc      	b.n	80031d0 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db02      	blt.n	800306e <socket+0xaa>
 8003068:	f06f 0305 	mvn.w	r3, #5
 800306c:	e0b0      	b.n	80031d0 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db04      	blt.n	800308a <socket+0xc6>
 8003080:	f06f 0305 	mvn.w	r3, #5
 8003084:	e0a4      	b.n	80031d0 <socket+0x20c>
   	      break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <socket+0xc8>
   	      break;
 800308a:	bf00      	nop
   	}
   }
	close(sn);
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f8ac 	bl	80031ec <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3301      	adds	r3, #1
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4618      	mov	r0, r3
 800309e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a2:	f023 030f 	bic.w	r3, r3, #15
 80030a6:	b25a      	sxtb	r2, r3
 80030a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4619      	mov	r1, r3
 80030b4:	f000 fea2 	bl	8003dfc <WIZCHIP_WRITE>
    #endif
	if(!port)
 80030b8:	88bb      	ldrh	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d110      	bne.n	80030e0 <socket+0x11c>
	{
	   port = sock_any_port++;
 80030be:	4b46      	ldr	r3, [pc, #280]	@ (80031d8 <socket+0x214>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	b291      	uxth	r1, r2
 80030c6:	4a44      	ldr	r2, [pc, #272]	@ (80031d8 <socket+0x214>)
 80030c8:	8011      	strh	r1, [r2, #0]
 80030ca:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80030cc:	4b42      	ldr	r3, [pc, #264]	@ (80031d8 <socket+0x214>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <socket+0x11c>
 80030d8:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <socket+0x214>)
 80030da:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80030de:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3301      	adds	r3, #1
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030ec:	461a      	mov	r2, r3
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 fe7f 	bl	8003dfc <WIZCHIP_WRITE>
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	3301      	adds	r3, #1
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	88bb      	ldrh	r3, [r7, #4]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 fe72 	bl	8003dfc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	3301      	adds	r3, #1
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003124:	2101      	movs	r1, #1
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fe68 	bl	8003dfc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800312c:	bf00      	nop
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3301      	adds	r3, #1
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fe12 	bl	8003d64 <WIZCHIP_READ>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f3      	bne.n	800312e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2201      	movs	r2, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	b21b      	sxth	r3, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	b21a      	sxth	r2, r3
 8003154:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <socket+0x218>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b21b      	sxth	r3, r3
 800315a:	4013      	ands	r3, r2
 800315c:	b21b      	sxth	r3, r3
 800315e:	b29a      	uxth	r2, r3
 8003160:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <socket+0x218>)
 8003162:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 0201 	and.w	r2, r3, #1
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	b21a      	sxth	r2, r3
 8003172:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <socket+0x218>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b21b      	sxth	r3, r3
 8003178:	4313      	orrs	r3, r2
 800317a:	b21b      	sxth	r3, r3
 800317c:	b29a      	uxth	r2, r3
 800317e:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <socket+0x218>)
 8003180:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	2201      	movs	r2, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	b21b      	sxth	r3, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	b21a      	sxth	r2, r3
 8003190:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <socket+0x21c>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b21b      	sxth	r3, r3
 8003196:	4013      	ands	r3, r2
 8003198:	b21b      	sxth	r3, r3
 800319a:	b29a      	uxth	r2, r3
 800319c:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <socket+0x21c>)
 800319e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	4a10      	ldr	r2, [pc, #64]	@ (80031e4 <socket+0x220>)
 80031a4:	2100      	movs	r1, #0
 80031a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	4a0e      	ldr	r2, [pc, #56]	@ (80031e8 <socket+0x224>)
 80031ae:	2100      	movs	r1, #0
 80031b0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80031b2:	bf00      	nop
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	3301      	adds	r3, #1
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fdcf 	bl	8003d64 <WIZCHIP_READ>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f3      	beq.n	80031b4 <socket+0x1f0>
   return (int8_t)sn;
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd90      	pop	{r4, r7, pc}
 80031d8:	20000038 	.word	0x20000038
 80031dc:	20000c80 	.word	0x20000c80
 80031e0:	20000c82 	.word	0x20000c82
 80031e4:	20000c84 	.word	0x20000c84
 80031e8:	20000c94 	.word	0x20000c94

080031ec <close>:

int8_t close(uint8_t sn)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d902      	bls.n	8003202 <close+0x16>
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003200:	e055      	b.n	80032ae <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3301      	adds	r3, #1
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800320e:	2110      	movs	r1, #16
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fdf3 	bl	8003dfc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003216:	bf00      	nop
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3301      	adds	r3, #1
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fd9d 	bl	8003d64 <WIZCHIP_READ>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f3      	bne.n	8003218 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	3301      	adds	r3, #1
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800323c:	211f      	movs	r1, #31
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fddc 	bl	8003dfc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	2201      	movs	r2, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	b21b      	sxth	r3, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	b21a      	sxth	r2, r3
 8003252:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <close+0xcc>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b21b      	sxth	r3, r3
 8003258:	4013      	ands	r3, r2
 800325a:	b21b      	sxth	r3, r3
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <close+0xcc>)
 8003260:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2201      	movs	r2, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	b21b      	sxth	r3, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	b21a      	sxth	r2, r3
 8003270:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <close+0xd0>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b21b      	sxth	r3, r3
 8003276:	4013      	ands	r3, r2
 8003278:	b21b      	sxth	r3, r3
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <close+0xd0>)
 800327e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	4a0f      	ldr	r2, [pc, #60]	@ (80032c0 <close+0xd4>)
 8003284:	2100      	movs	r1, #0
 8003286:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	4a0d      	ldr	r2, [pc, #52]	@ (80032c4 <close+0xd8>)
 800328e:	2100      	movs	r1, #0
 8003290:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003292:	bf00      	nop
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3301      	adds	r3, #1
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fd5f 	bl	8003d64 <WIZCHIP_READ>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f3      	bne.n	8003294 <close+0xa8>
	return SOCK_OK;
 80032ac:	2301      	movs	r3, #1
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000c80 	.word	0x20000c80
 80032bc:	20000c82 	.word	0x20000c82
 80032c0:	20000c84 	.word	0x20000c84
 80032c4:	20000c94 	.word	0x20000c94

080032c8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
 80032d6:	4613      	mov	r3, r2
 80032d8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d902      	bls.n	80032ee <sendto+0x26>
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032ec:	e11a      	b.n	8003524 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	3301      	adds	r3, #1
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fd34 	bl	8003d64 <WIZCHIP_READ>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b02      	subs	r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d902      	bls.n	800330e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003308:	f06f 0304 	mvn.w	r3, #4
 800330c:	e10a      	b.n	8003524 <sendto+0x25c>
         break;
 800330e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003310:	89bb      	ldrh	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <sendto+0x54>
 8003316:	f06f 030d 	mvn.w	r3, #13
 800331a:	e103      	b.n	8003524 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	3201      	adds	r2, #1
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	4413      	add	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	3202      	adds	r2, #2
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	4413      	add	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	3203      	adds	r2, #3
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	4413      	add	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <sendto+0xa8>
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	3301      	adds	r3, #1
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fd02 	bl	8003d64 <WIZCHIP_READ>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d002      	beq.n	8003370 <sendto+0xa8>
 800336a:	f06f 030b 	mvn.w	r3, #11
 800336e:	e0d9      	b.n	8003524 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003370:	8c3b      	ldrh	r3, [r7, #32]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <sendto+0xcc>
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	3301      	adds	r3, #1
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fcf0 	bl	8003d64 <WIZCHIP_READ>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d002      	beq.n	8003394 <sendto+0xcc>
 800338e:	f06f 030a 	mvn.w	r3, #10
 8003392:	e0c7      	b.n	8003524 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	3301      	adds	r3, #1
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fcdf 	bl	8003d64 <WIZCHIP_READ>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b42      	cmp	r3, #66	@ 0x42
 80033ae:	d008      	beq.n	80033c2 <sendto+0xfa>
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b22      	cmp	r3, #34	@ 0x22
 80033b4:	d005      	beq.n	80033c2 <sendto+0xfa>
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b32      	cmp	r3, #50	@ 0x32
 80033ba:	d002      	beq.n	80033c2 <sendto+0xfa>
 80033bc:	f06f 0306 	mvn.w	r3, #6
 80033c0:	e0b0      	b.n	8003524 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3301      	adds	r3, #1
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80033ce:	2204      	movs	r2, #4
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fdc0 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	3301      	adds	r3, #1
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e4:	461a      	mov	r2, r3
 80033e6:	8c3b      	ldrh	r3, [r7, #32]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f000 fd03 	bl	8003dfc <WIZCHIP_WRITE>
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3301      	adds	r3, #1
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8003402:	461a      	mov	r2, r3
 8003404:	8c3b      	ldrh	r3, [r7, #32]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 fcf6 	bl	8003dfc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3301      	adds	r3, #1
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fca1 	bl	8003d64 <WIZCHIP_READ>
 8003422:	4603      	mov	r3, r0
 8003424:	029b      	lsls	r3, r3, #10
 8003426:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003428:	89ba      	ldrh	r2, [r7, #12]
 800342a:	8abb      	ldrh	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	d901      	bls.n	8003434 <sendto+0x16c>
 8003430:	8abb      	ldrh	r3, [r7, #20]
 8003432:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fdee 	bl	8004018 <getSn_TX_FSR>
 800343c:	4603      	mov	r3, r0
 800343e:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3301      	adds	r3, #1
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fc89 	bl	8003d64 <WIZCHIP_READ>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <sendto+0x196>
 8003458:	f06f 0303 	mvn.w	r3, #3
 800345c:	e062      	b.n	8003524 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800345e:	4b33      	ldr	r3, [pc, #204]	@ (800352c <sendto+0x264>)
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	fa42 f303 	asr.w	r3, r2, r3
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <sendto+0x1b6>
 8003472:	89ba      	ldrh	r2, [r7, #12]
 8003474:	8abb      	ldrh	r3, [r7, #20]
 8003476:	429a      	cmp	r2, r3
 8003478:	d901      	bls.n	800347e <sendto+0x1b6>
 800347a:	2300      	movs	r3, #0
 800347c:	e052      	b.n	8003524 <sendto+0x25c>
      if(len <= freesize) break;
 800347e:	89ba      	ldrh	r2, [r7, #12]
 8003480:	8abb      	ldrh	r3, [r7, #20]
 8003482:	429a      	cmp	r2, r3
 8003484:	d900      	bls.n	8003488 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8003486:	e7d5      	b.n	8003434 <sendto+0x16c>
      if(len <= freesize) break;
 8003488:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800348a:	89ba      	ldrh	r2, [r7, #12]
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fe53 	bl	800413c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	3301      	adds	r3, #1
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034a2:	2120      	movs	r1, #32
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fca9 	bl	8003dfc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80034aa:	bf00      	nop
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3301      	adds	r3, #1
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fc53 	bl	8003d64 <WIZCHIP_READ>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f3      	bne.n	80034ac <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3301      	adds	r3, #1
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fc47 	bl	8003d64 <WIZCHIP_READ>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00c      	beq.n	8003502 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	3301      	adds	r3, #1
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034f4:	2110      	movs	r1, #16
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fc80 	bl	8003dfc <WIZCHIP_WRITE>
         break;
 80034fc:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80034fe:	89bb      	ldrh	r3, [r7, #12]
 8003500:	e010      	b.n	8003524 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0db      	beq.n	80034c4 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	3301      	adds	r3, #1
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003518:	2108      	movs	r1, #8
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fc6e 	bl	8003dfc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003520:	f06f 030c 	mvn.w	r3, #12
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000c80 	.word	0x20000c80

08003530 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	4603      	mov	r3, r0
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	4613      	mov	r3, r2
 8003540:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003542:	2300      	movs	r3, #0
 8003544:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d902      	bls.n	8003552 <recvfrom+0x22>
 800354c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003550:	e1d2      	b.n	80038f8 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	3301      	adds	r3, #1
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fc02 	bl	8003d64 <WIZCHIP_READ>
 8003560:	4603      	mov	r3, r0
 8003562:	777b      	strb	r3, [r7, #29]
 8003564:	7f7b      	ldrb	r3, [r7, #29]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b02      	subs	r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d902      	bls.n	8003576 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003570:	f06f 0304 	mvn.w	r3, #4
 8003574:	e1c0      	b.n	80038f8 <recvfrom+0x3c8>
         break;
 8003576:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003578:	89bb      	ldrh	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <recvfrom+0x54>
 800357e:	f06f 030d 	mvn.w	r3, #13
 8003582:	e1b9      	b.n	80038f8 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	4a87      	ldr	r2, [pc, #540]	@ (80037a4 <recvfrom+0x274>)
 8003588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d128      	bne.n	80035e2 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fd89 	bl	80040aa <getSn_RX_RSR>
 8003598:	4603      	mov	r3, r0
 800359a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	3301      	adds	r3, #1
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fbdb 	bl	8003d64 <WIZCHIP_READ>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <recvfrom+0x8a>
 80035b4:	f06f 0303 	mvn.w	r3, #3
 80035b8:	e19e      	b.n	80038f8 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80035ba:	4b7b      	ldr	r3, [pc, #492]	@ (80037a8 <recvfrom+0x278>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	fa42 f303 	asr.w	r3, r2, r3
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <recvfrom+0xa8>
 80035ce:	8bfb      	ldrh	r3, [r7, #30]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <recvfrom+0xa8>
 80035d4:	2300      	movs	r3, #0
 80035d6:	e18f      	b.n	80038f8 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80035d8:	8bfb      	ldrh	r3, [r7, #30]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d100      	bne.n	80035e0 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80035de:	e7d7      	b.n	8003590 <recvfrom+0x60>
         if(pack_len != 0) break;
 80035e0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80035e2:	7f7b      	ldrb	r3, [r7, #29]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d078      	beq.n	80036de <recvfrom+0x1ae>
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	f300 8140 	bgt.w	8003872 <recvfrom+0x342>
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <recvfrom+0xce>
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	f000 80da 	beq.w	80037b0 <recvfrom+0x280>
 80035fc:	e139      	b.n	8003872 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	4a68      	ldr	r2, [pc, #416]	@ (80037a4 <recvfrom+0x274>)
 8003602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d151      	bne.n	80036ae <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 800360a:	f107 0114 	add.w	r1, r7, #20
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2208      	movs	r2, #8
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fdec 	bl	80041f0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	3301      	adds	r3, #1
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003624:	2140      	movs	r1, #64	@ 0x40
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fbe8 	bl	8003dfc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800362c:	bf00      	nop
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	3301      	adds	r3, #1
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fb92 	bl	8003d64 <WIZCHIP_READ>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f3      	bne.n	800362e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003646:	7d3a      	ldrb	r2, [r7, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3301      	adds	r3, #1
 8003650:	7d7a      	ldrb	r2, [r7, #21]
 8003652:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3302      	adds	r3, #2
 8003658:	7dba      	ldrb	r2, [r7, #22]
 800365a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3303      	adds	r3, #3
 8003660:	7dfa      	ldrb	r2, [r7, #23]
 8003662:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003664:	7e3b      	ldrb	r3, [r7, #24]
 8003666:	461a      	mov	r2, r3
 8003668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800366c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b29b      	uxth	r3, r3
 8003674:	7e7a      	ldrb	r2, [r7, #25]
 8003676:	4413      	add	r3, r2
 8003678:	b29a      	uxth	r2, r3
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800367e:	7eba      	ldrb	r2, [r7, #26]
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	4611      	mov	r1, r2
 8003684:	4a47      	ldr	r2, [pc, #284]	@ (80037a4 <recvfrom+0x274>)
 8003686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	4a45      	ldr	r2, [pc, #276]	@ (80037a4 <recvfrom+0x274>)
 800368e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	b29a      	uxth	r2, r3
 8003696:	7efb      	ldrb	r3, [r7, #27]
 8003698:	4619      	mov	r1, r3
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	440a      	add	r2, r1
 800369e:	b291      	uxth	r1, r2
 80036a0:	4a40      	ldr	r2, [pc, #256]	@ (80037a4 <recvfrom+0x274>)
 80036a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	4a40      	ldr	r2, [pc, #256]	@ (80037ac <recvfrom+0x27c>)
 80036aa:	2180      	movs	r1, #128	@ 0x80
 80036ac:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4a3c      	ldr	r2, [pc, #240]	@ (80037a4 <recvfrom+0x274>)
 80036b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036b6:	89ba      	ldrh	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d202      	bcs.n	80036c2 <recvfrom+0x192>
 80036bc:	89bb      	ldrh	r3, [r7, #12]
 80036be:	83fb      	strh	r3, [r7, #30]
 80036c0:	e004      	b.n	80036cc <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	4a37      	ldr	r2, [pc, #220]	@ (80037a4 <recvfrom+0x274>)
 80036c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ca:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80036cc:	8bfb      	ldrh	r3, [r7, #30]
 80036ce:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80036d0:	8bfa      	ldrh	r2, [r7, #30]
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fd8a 	bl	80041f0 <wiz_recv_data>
			break;
 80036dc:	e0d5      	b.n	800388a <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	4a30      	ldr	r2, [pc, #192]	@ (80037a4 <recvfrom+0x274>)
 80036e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d145      	bne.n	8003776 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80036ea:	f107 0114 	add.w	r1, r7, #20
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2202      	movs	r2, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fd7c 	bl	80041f0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	3301      	adds	r3, #1
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003704:	2140      	movs	r1, #64	@ 0x40
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fb78 	bl	8003dfc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800370c:	bf00      	nop
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	3301      	adds	r3, #1
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fb22 	bl	8003d64 <WIZCHIP_READ>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f3      	bne.n	800370e <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003726:	7d3a      	ldrb	r2, [r7, #20]
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	4611      	mov	r1, r2
 800372c:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <recvfrom+0x274>)
 800372e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	4a1b      	ldr	r2, [pc, #108]	@ (80037a4 <recvfrom+0x274>)
 8003736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	b29b      	uxth	r3, r3
 800373e:	7d7a      	ldrb	r2, [r7, #21]
 8003740:	4413      	add	r3, r2
 8003742:	b29a      	uxth	r2, r3
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	3a02      	subs	r2, #2
 8003748:	b291      	uxth	r1, r2
 800374a:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <recvfrom+0x274>)
 800374c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <recvfrom+0x274>)
 8003754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003758:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 800375c:	4293      	cmp	r3, r2
 800375e:	d906      	bls.n	800376e <recvfrom+0x23e>
   			{
   			   close(sn);
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fd42 	bl	80031ec <close>
   			   return SOCKFATAL_PACKLEN;
 8003768:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 800376c:	e0c4      	b.n	80038f8 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	4a0e      	ldr	r2, [pc, #56]	@ (80037ac <recvfrom+0x27c>)
 8003772:	2180      	movs	r1, #128	@ 0x80
 8003774:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	4a0a      	ldr	r2, [pc, #40]	@ (80037a4 <recvfrom+0x274>)
 800377a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800377e:	89ba      	ldrh	r2, [r7, #12]
 8003780:	429a      	cmp	r2, r3
 8003782:	d202      	bcs.n	800378a <recvfrom+0x25a>
 8003784:	89bb      	ldrh	r3, [r7, #12]
 8003786:	83fb      	strh	r3, [r7, #30]
 8003788:	e004      	b.n	8003794 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	4a05      	ldr	r2, [pc, #20]	@ (80037a4 <recvfrom+0x274>)
 800378e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003792:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003794:	8bfa      	ldrh	r2, [r7, #30]
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fd28 	bl	80041f0 <wiz_recv_data>
		   break;
 80037a0:	e073      	b.n	800388a <recvfrom+0x35a>
 80037a2:	bf00      	nop
 80037a4:	20000c84 	.word	0x20000c84
 80037a8:	20000c80 	.word	0x20000c80
 80037ac:	20000c94 	.word	0x20000c94
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	4a53      	ldr	r2, [pc, #332]	@ (8003900 <recvfrom+0x3d0>)
 80037b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d144      	bne.n	8003846 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 80037bc:	f107 0114 	add.w	r1, r7, #20
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2206      	movs	r2, #6
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fd13 	bl	80041f0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	3301      	adds	r3, #1
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80037d6:	2140      	movs	r1, #64	@ 0x40
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fb0f 	bl	8003dfc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80037de:	bf00      	nop
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	3301      	adds	r3, #1
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fab9 	bl	8003d64 <WIZCHIP_READ>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f3      	bne.n	80037e0 <recvfrom+0x2b0>
   			addr[0] = head[0];
 80037f8:	7d3a      	ldrb	r2, [r7, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3301      	adds	r3, #1
 8003802:	7d7a      	ldrb	r2, [r7, #21]
 8003804:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3302      	adds	r3, #2
 800380a:	7dba      	ldrb	r2, [r7, #22]
 800380c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3303      	adds	r3, #3
 8003812:	7dfa      	ldrb	r2, [r7, #23]
 8003814:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003816:	7e3a      	ldrb	r2, [r7, #24]
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	4611      	mov	r1, r2
 800381c:	4a38      	ldr	r2, [pc, #224]	@ (8003900 <recvfrom+0x3d0>)
 800381e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	4a36      	ldr	r2, [pc, #216]	@ (8003900 <recvfrom+0x3d0>)
 8003826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	b29a      	uxth	r2, r3
 800382e:	7e7b      	ldrb	r3, [r7, #25]
 8003830:	4619      	mov	r1, r3
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	440a      	add	r2, r1
 8003836:	b291      	uxth	r1, r2
 8003838:	4a31      	ldr	r2, [pc, #196]	@ (8003900 <recvfrom+0x3d0>)
 800383a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	4a30      	ldr	r2, [pc, #192]	@ (8003904 <recvfrom+0x3d4>)
 8003842:	2180      	movs	r1, #128	@ 0x80
 8003844:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	4a2d      	ldr	r2, [pc, #180]	@ (8003900 <recvfrom+0x3d0>)
 800384a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800384e:	89ba      	ldrh	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d202      	bcs.n	800385a <recvfrom+0x32a>
 8003854:	89bb      	ldrh	r3, [r7, #12]
 8003856:	83fb      	strh	r3, [r7, #30]
 8003858:	e004      	b.n	8003864 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	4a28      	ldr	r2, [pc, #160]	@ (8003900 <recvfrom+0x3d0>)
 800385e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003862:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003864:	8bfa      	ldrh	r2, [r7, #30]
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fcc0 	bl	80041f0 <wiz_recv_data>
			break;
 8003870:	e00b      	b.n	800388a <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003872:	8bfa      	ldrh	r2, [r7, #30]
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fd13 	bl	80042a4 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	491f      	ldr	r1, [pc, #124]	@ (8003900 <recvfrom+0x3d0>)
 8003882:	8bfa      	ldrh	r2, [r7, #30]
 8003884:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003888:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	3301      	adds	r3, #1
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003896:	2140      	movs	r1, #64	@ 0x40
 8003898:	4618      	mov	r0, r3
 800389a:	f000 faaf 	bl	8003dfc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800389e:	bf00      	nop
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	3301      	adds	r3, #1
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fa59 	bl	8003d64 <WIZCHIP_READ>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f3      	bne.n	80038a0 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	4a11      	ldr	r2, [pc, #68]	@ (8003900 <recvfrom+0x3d0>)
 80038bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	8bfa      	ldrh	r2, [r7, #30]
 80038c4:	1a8a      	subs	r2, r1, r2
 80038c6:	b291      	uxth	r1, r2
 80038c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003900 <recvfrom+0x3d0>)
 80038ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003900 <recvfrom+0x3d0>)
 80038d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	4a09      	ldr	r2, [pc, #36]	@ (8003904 <recvfrom+0x3d4>)
 80038de:	5cd2      	ldrb	r2, [r2, r3]
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	b2d1      	uxtb	r1, r2
 80038e8:	4a06      	ldr	r2, [pc, #24]	@ (8003904 <recvfrom+0x3d4>)
 80038ea:	54d1      	strb	r1, [r2, r3]
 80038ec:	e003      	b.n	80038f6 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <recvfrom+0x3d4>)
 80038f2:	2100      	movs	r1, #0
 80038f4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80038f6:	8bfb      	ldrh	r3, [r7, #30]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000c84 	.word	0x20000c84
 8003904:	20000c94 	.word	0x20000c94

08003908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_MspInit+0x4c>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	4a0f      	ldr	r2, [pc, #60]	@ (8003954 <HAL_MspInit+0x4c>)
 8003918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800391c:	6453      	str	r3, [r2, #68]	@ 0x44
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <HAL_MspInit+0x4c>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_MspInit+0x4c>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	4a08      	ldr	r2, [pc, #32]	@ (8003954 <HAL_MspInit+0x4c>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003938:	6413      	str	r3, [r2, #64]	@ 0x40
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_MspInit+0x4c>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003946:	2007      	movs	r0, #7
 8003948:	f001 f8bc 	bl	8004ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	@ 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a19      	ldr	r2, [pc, #100]	@ (80039dc <HAL_SPI_MspInit+0x84>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d12b      	bne.n	80039d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <HAL_SPI_MspInit+0x88>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	4a17      	ldr	r2, [pc, #92]	@ (80039e0 <HAL_SPI_MspInit+0x88>)
 8003984:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003988:	6453      	str	r3, [r2, #68]	@ 0x44
 800398a:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <HAL_SPI_MspInit+0x88>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <HAL_SPI_MspInit+0x88>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	4a10      	ldr	r2, [pc, #64]	@ (80039e0 <HAL_SPI_MspInit+0x88>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a6:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <HAL_SPI_MspInit+0x88>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039b2:	23e0      	movs	r3, #224	@ 0xe0
 80039b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b6:	2302      	movs	r3, #2
 80039b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039be:	2303      	movs	r3, #3
 80039c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039c2:	2305      	movs	r3, #5
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	4619      	mov	r1, r3
 80039cc:	4805      	ldr	r0, [pc, #20]	@ (80039e4 <HAL_SPI_MspInit+0x8c>)
 80039ce:	f001 f94d 	bl	8004c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039d2:	bf00      	nop
 80039d4:	3728      	adds	r7, #40	@ 0x28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40013000 	.word	0x40013000
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40020000 	.word	0x40020000

080039e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003a24 <HAL_TIM_Base_MspInit+0x3c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10d      	bne.n	8003a16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <HAL_TIM_Base_MspInit+0x40>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <HAL_TIM_Base_MspInit+0x40>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0a:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <HAL_TIM_Base_MspInit+0x40>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40023800 	.word	0x40023800

08003a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <HAL_TIM_MspPostInit+0x68>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d11e      	bne.n	8003a8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <HAL_TIM_MspPostInit+0x6c>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	4a10      	ldr	r2, [pc, #64]	@ (8003a98 <HAL_TIM_MspPostInit+0x6c>)
 8003a58:	f043 0310 	orr.w	r3, r3, #16
 8003a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <HAL_TIM_MspPostInit+0x6c>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a74:	2302      	movs	r3, #2
 8003a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	4619      	mov	r1, r3
 8003a86:	4805      	ldr	r0, [pc, #20]	@ (8003a9c <HAL_TIM_MspPostInit+0x70>)
 8003a88:	f001 f8f0 	bl	8004c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a8c:	bf00      	nop
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	@ 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b34 <HAL_UART_MspInit+0x94>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d133      	bne.n	8003b2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b38 <HAL_UART_MspInit+0x98>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <HAL_UART_MspInit+0x98>)
 8003acc:	f043 0320 	orr.w	r3, r3, #32
 8003ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ad2:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_UART_MspInit+0x98>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <HAL_UART_MspInit+0x98>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	4a14      	ldr	r2, [pc, #80]	@ (8003b38 <HAL_UART_MspInit+0x98>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aee:	4b12      	ldr	r3, [pc, #72]	@ (8003b38 <HAL_UART_MspInit+0x98>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003afa:	23c0      	movs	r3, #192	@ 0xc0
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b06:	2303      	movs	r3, #3
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	4619      	mov	r1, r3
 8003b14:	4809      	ldr	r0, [pc, #36]	@ (8003b3c <HAL_UART_MspInit+0x9c>)
 8003b16:	f001 f8a9 	bl	8004c6c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2047      	movs	r0, #71	@ 0x47
 8003b20:	f000 ffdb 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b24:	2047      	movs	r0, #71	@ 0x47
 8003b26:	f000 fff4 	bl	8004b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003b2a:	bf00      	nop
 8003b2c:	3728      	adds	r7, #40	@ 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40011400 	.word	0x40011400
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40020800 	.word	0x40020800

08003b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <NMI_Handler+0x4>

08003b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <HardFault_Handler+0x4>

08003b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <MemManage_Handler+0x4>

08003b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <BusFault_Handler+0x4>

08003b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <UsageFault_Handler+0x4>

08003b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b96:	f000 fe81 	bl	800489c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ba4:	4802      	ldr	r0, [pc, #8]	@ (8003bb0 <USART6_IRQHandler+0x10>)
 8003ba6:	f003 fbe5 	bl	8007374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000730 	.word	0x20000730

08003bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return 1;
 8003bb8:	2301      	movs	r3, #1
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_kill>:

int _kill(int pid, int sig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bce:	f005 fb87 	bl	80092e0 <__errno>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2216      	movs	r2, #22
 8003bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_exit>:

void _exit (int status)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ffe7 	bl	8003bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bf6:	bf00      	nop
 8003bf8:	e7fd      	b.n	8003bf6 <_exit+0x12>

08003bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e00a      	b.n	8003c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c0c:	f3af 8000 	nop.w
 8003c10:	4601      	mov	r1, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	60ba      	str	r2, [r7, #8]
 8003c18:	b2ca      	uxtb	r2, r1
 8003c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	dbf0      	blt.n	8003c0c <_read+0x12>
  }

  return len;
 8003c2a:	687b      	ldr	r3, [r7, #4]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e009      	b.n	8003c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	60ba      	str	r2, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3301      	adds	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	dbf1      	blt.n	8003c46 <_write+0x12>
  }
  return len;
 8003c62:	687b      	ldr	r3, [r7, #4]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_close>:

int _close(int file)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c94:	605a      	str	r2, [r3, #4]
  return 0;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_isatty>:

int _isatty(int file)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cac:	2301      	movs	r3, #1
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cdc:	4a14      	ldr	r2, [pc, #80]	@ (8003d30 <_sbrk+0x5c>)
 8003cde:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <_sbrk+0x60>)
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce8:	4b13      	ldr	r3, [pc, #76]	@ (8003d38 <_sbrk+0x64>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	@ (8003d38 <_sbrk+0x64>)
 8003cf2:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <_sbrk+0x68>)
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cf6:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <_sbrk+0x64>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d207      	bcs.n	8003d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d04:	f005 faec 	bl	80092e0 <__errno>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	220c      	movs	r2, #12
 8003d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d12:	e009      	b.n	8003d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d14:	4b08      	ldr	r3, [pc, #32]	@ (8003d38 <_sbrk+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d1a:	4b07      	ldr	r3, [pc, #28]	@ (8003d38 <_sbrk+0x64>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	4a05      	ldr	r2, [pc, #20]	@ (8003d38 <_sbrk+0x64>)
 8003d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20020000 	.word	0x20020000
 8003d34:	00000400 	.word	0x00000400
 8003d38:	20000c9c 	.word	0x20000c9c
 8003d3c:	20000df8 	.word	0x20000df8

08003d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d44:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <SystemInit+0x20>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	4a05      	ldr	r2, [pc, #20]	@ (8003d60 <SystemInit+0x20>)
 8003d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003d6c:	4b22      	ldr	r3, [pc, #136]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003d72:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003d78:	4b1f      	ldr	r3, [pc, #124]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <WIZCHIP_READ+0x24>
 8003d80:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d114      	bne.n	8003db2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	0c12      	lsrs	r2, r2, #16
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	4610      	mov	r0, r2
 8003d94:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003d96:	4b18      	ldr	r3, [pc, #96]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	0a12      	lsrs	r2, r2, #8
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	4610      	mov	r0, r2
 8003da2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003da4:	4b14      	ldr	r3, [pc, #80]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	4610      	mov	r0, r2
 8003dae:	4798      	blx	r3
 8003db0:	e011      	b.n	8003dd6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	f107 020c 	add.w	r2, r7, #12
 8003dd0:	2103      	movs	r1, #3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003dd6:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4798      	blx	r3
 8003ddc:	4603      	mov	r3, r0
 8003dde:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003de6:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <WIZCHIP_READ+0x94>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	4798      	blx	r3
   return ret;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000040 	.word	0x20000040

08003dfc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003e08:	4b22      	ldr	r3, [pc, #136]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003e0e:	4b21      	ldr	r3, [pc, #132]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d119      	bne.n	8003e58 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003e24:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	0c12      	lsrs	r2, r2, #16
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003e32:	4b18      	ldr	r3, [pc, #96]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	0a12      	lsrs	r2, r2, #8
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003e40:	4b14      	ldr	r3, [pc, #80]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003e4c:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	4610      	mov	r0, r2
 8003e54:	4798      	blx	r3
 8003e56:	e013      	b.n	8003e80 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	0c1b      	lsrs	r3, r3, #16
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003e72:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e76:	f107 020c 	add.w	r2, r7, #12
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003e80:	4b04      	ldr	r3, [pc, #16]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003e86:	4b03      	ldr	r3, [pc, #12]	@ (8003e94 <WIZCHIP_WRITE+0x98>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	4798      	blx	r3
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000040 	.word	0x20000040

08003e98 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003eac:	4b29      	ldr	r3, [pc, #164]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003eb2:	4b28      	ldr	r3, [pc, #160]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <WIZCHIP_READ_BUF+0x2a>
 8003eba:	4b26      	ldr	r3, [pc, #152]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d126      	bne.n	8003f10 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003ec2:	4b24      	ldr	r3, [pc, #144]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	0c12      	lsrs	r2, r2, #16
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003ed0:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	0a12      	lsrs	r2, r2, #8
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	4610      	mov	r0, r2
 8003edc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003ede:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	82fb      	strh	r3, [r7, #22]
 8003eee:	e00a      	b.n	8003f06 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003ef0:	4b18      	ldr	r3, [pc, #96]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	8afa      	ldrh	r2, [r7, #22]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	188c      	adds	r4, r1, r2
 8003efa:	4798      	blx	r3
 8003efc:	4603      	mov	r3, r0
 8003efe:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003f00:	8afb      	ldrh	r3, [r7, #22]
 8003f02:	3301      	adds	r3, #1
 8003f04:	82fb      	strh	r3, [r7, #22]
 8003f06:	8afa      	ldrh	r2, [r7, #22]
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d3f0      	bcc.n	8003ef0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003f0e:	e017      	b.n	8003f40 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	f107 0210 	add.w	r2, r7, #16
 8003f2e:	2103      	movs	r1, #3
 8003f30:	4610      	mov	r0, r2
 8003f32:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003f34:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	68b8      	ldr	r0, [r7, #8]
 8003f3e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003f40:	4b04      	ldr	r3, [pc, #16]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003f46:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <WIZCHIP_READ_BUF+0xbc>)
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	4798      	blx	r3
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}
 8003f54:	20000040 	.word	0x20000040

08003f58 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003f66:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003f6c:	4b29      	ldr	r3, [pc, #164]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d126      	bne.n	8003fd0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003f82:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	0c12      	lsrs	r2, r2, #16
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003f90:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	0a12      	lsrs	r2, r2, #8
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	82fb      	strh	r3, [r7, #22]
 8003fae:	e00a      	b.n	8003fc6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003fb0:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	8afa      	ldrh	r2, [r7, #22]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	440a      	add	r2, r1
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003fc0:	8afb      	ldrh	r3, [r7, #22]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	82fb      	strh	r3, [r7, #22]
 8003fc6:	8afa      	ldrh	r2, [r7, #22]
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3f0      	bcc.n	8003fb0 <WIZCHIP_WRITE_BUF+0x58>
 8003fce:	e017      	b.n	8004000 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	f107 0210 	add.w	r2, r7, #16
 8003fee:	2103      	movs	r1, #3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003ff4:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	68b8      	ldr	r0, [r7, #8]
 8003ffe:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004006:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <WIZCHIP_WRITE_BUF+0xbc>)
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4798      	blx	r3
}
 800400c:	bf00      	nop
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000040 	.word	0x20000040

08004018 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004022:	2300      	movs	r3, #0
 8004024:	81fb      	strh	r3, [r7, #14]
 8004026:	2300      	movs	r3, #0
 8004028:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	3301      	adds	r3, #1
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fe94 	bl	8003d64 <WIZCHIP_READ>
 800403c:	4603      	mov	r3, r0
 800403e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004040:	89bb      	ldrh	r3, [r7, #12]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	b29c      	uxth	r4, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	3301      	adds	r3, #1
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fe86 	bl	8003d64 <WIZCHIP_READ>
 8004058:	4603      	mov	r3, r0
 800405a:	4423      	add	r3, r4
 800405c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800405e:	89bb      	ldrh	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d019      	beq.n	8004098 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	3301      	adds	r3, #1
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fe77 	bl	8003d64 <WIZCHIP_READ>
 8004076:	4603      	mov	r3, r0
 8004078:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800407a:	89fb      	ldrh	r3, [r7, #14]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	b29c      	uxth	r4, r3
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	3301      	adds	r3, #1
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fe69 	bl	8003d64 <WIZCHIP_READ>
 8004092:	4603      	mov	r3, r0
 8004094:	4423      	add	r3, r4
 8004096:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004098:	89fa      	ldrh	r2, [r7, #14]
 800409a:	89bb      	ldrh	r3, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d1c4      	bne.n	800402a <getSn_TX_FSR+0x12>
   return val;
 80040a0:	89fb      	ldrh	r3, [r7, #14]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd90      	pop	{r4, r7, pc}

080040aa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80040aa:	b590      	push	{r4, r7, lr}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	4603      	mov	r3, r0
 80040b2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	81fb      	strh	r3, [r7, #14]
 80040b8:	2300      	movs	r3, #0
 80040ba:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	3301      	adds	r3, #1
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fe4b 	bl	8003d64 <WIZCHIP_READ>
 80040ce:	4603      	mov	r3, r0
 80040d0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80040d2:	89bb      	ldrh	r3, [r7, #12]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	b29c      	uxth	r4, r3
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	3301      	adds	r3, #1
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fe3d 	bl	8003d64 <WIZCHIP_READ>
 80040ea:	4603      	mov	r3, r0
 80040ec:	4423      	add	r3, r4
 80040ee:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80040f0:	89bb      	ldrh	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d019      	beq.n	800412a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	3301      	adds	r3, #1
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fe2e 	bl	8003d64 <WIZCHIP_READ>
 8004108:	4603      	mov	r3, r0
 800410a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800410c:	89fb      	ldrh	r3, [r7, #14]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	b29c      	uxth	r4, r3
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	3301      	adds	r3, #1
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fe20 	bl	8003d64 <WIZCHIP_READ>
 8004124:	4603      	mov	r3, r0
 8004126:	4423      	add	r3, r4
 8004128:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800412a:	89fa      	ldrh	r2, [r7, #14]
 800412c:	89bb      	ldrh	r3, [r7, #12]
 800412e:	429a      	cmp	r2, r3
 8004130:	d1c4      	bne.n	80040bc <getSn_RX_RSR+0x12>
   return val;
 8004132:	89fb      	ldrh	r3, [r7, #14]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}

0800413c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	71fb      	strb	r3, [r7, #7]
 8004148:	4613      	mov	r3, r2
 800414a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004154:	88bb      	ldrh	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d046      	beq.n	80041e8 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	3301      	adds	r3, #1
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fdfc 	bl	8003d64 <WIZCHIP_READ>
 800416c:	4603      	mov	r3, r0
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	b29c      	uxth	r4, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	3301      	adds	r3, #1
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fdf0 	bl	8003d64 <WIZCHIP_READ>
 8004184:	4603      	mov	r3, r0
 8004186:	4423      	add	r3, r4
 8004188:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	79fa      	ldrb	r2, [r7, #7]
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	3202      	adds	r2, #2
 8004194:	00d2      	lsls	r2, r2, #3
 8004196:	4413      	add	r3, r2
 8004198:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800419a:	88bb      	ldrh	r3, [r7, #4]
 800419c:	461a      	mov	r2, r3
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	68b8      	ldr	r0, [r7, #8]
 80041a2:	f7ff fed9 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80041a6:	89fa      	ldrh	r2, [r7, #14]
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	4413      	add	r3, r2
 80041ac:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	3301      	adds	r3, #1
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80041ba:	461a      	mov	r2, r3
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7ff fe18 	bl	8003dfc <WIZCHIP_WRITE>
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	3301      	adds	r3, #1
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80041d8:	461a      	mov	r2, r3
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7ff fe0b 	bl	8003dfc <WIZCHIP_WRITE>
 80041e6:	e000      	b.n	80041ea <wiz_send_data+0xae>
   if(len == 0)  return;
 80041e8:	bf00      	nop
}
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}

080041f0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
 80041fc:	4613      	mov	r3, r2
 80041fe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004208:	88bb      	ldrh	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d046      	beq.n	800429c <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3301      	adds	r3, #1
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fda2 	bl	8003d64 <WIZCHIP_READ>
 8004220:	4603      	mov	r3, r0
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	b29c      	uxth	r4, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	3301      	adds	r3, #1
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fd96 	bl	8003d64 <WIZCHIP_READ>
 8004238:	4603      	mov	r3, r0
 800423a:	4423      	add	r3, r4
 800423c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800423e:	89fb      	ldrh	r3, [r7, #14]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	79fa      	ldrb	r2, [r7, #7]
 8004244:	0092      	lsls	r2, r2, #2
 8004246:	3203      	adds	r2, #3
 8004248:	00d2      	lsls	r2, r2, #3
 800424a:	4413      	add	r3, r2
 800424c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800424e:	88bb      	ldrh	r3, [r7, #4]
 8004250:	461a      	mov	r2, r3
 8004252:	6839      	ldr	r1, [r7, #0]
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f7ff fe1f 	bl	8003e98 <WIZCHIP_READ_BUF>
   ptr += len;
 800425a:	89fa      	ldrh	r2, [r7, #14]
 800425c:	88bb      	ldrh	r3, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	3301      	adds	r3, #1
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800426e:	461a      	mov	r2, r3
 8004270:	89fb      	ldrh	r3, [r7, #14]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b29b      	uxth	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7ff fdbe 	bl	8003dfc <WIZCHIP_WRITE>
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	3301      	adds	r3, #1
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800428c:	461a      	mov	r2, r3
 800428e:	89fb      	ldrh	r3, [r7, #14]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f7ff fdb1 	bl	8003dfc <WIZCHIP_WRITE>
 800429a:	e000      	b.n	800429e <wiz_recv_data+0xae>
   if(len == 0) return;
 800429c:	bf00      	nop
}
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	460a      	mov	r2, r1
 80042ae:	71fb      	strb	r3, [r7, #7]
 80042b0:	4613      	mov	r3, r2
 80042b2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	3301      	adds	r3, #1
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fd4d 	bl	8003d64 <WIZCHIP_READ>
 80042ca:	4603      	mov	r3, r0
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	b29c      	uxth	r4, r3
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	3301      	adds	r3, #1
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fd41 	bl	8003d64 <WIZCHIP_READ>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4423      	add	r3, r4
 80042e6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80042e8:	89fa      	ldrh	r2, [r7, #14]
 80042ea:	88bb      	ldrh	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	3301      	adds	r3, #1
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80042fc:	461a      	mov	r2, r3
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	b29b      	uxth	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f7ff fd77 	bl	8003dfc <WIZCHIP_WRITE>
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	3301      	adds	r3, #1
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800431a:	461a      	mov	r2, r3
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f7ff fd6a 	bl	8003dfc <WIZCHIP_WRITE>
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	bd90      	pop	{r4, r7, pc}

08004330 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	2300      	movs	r3, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	807b      	strh	r3, [r7, #2]
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	807b      	strh	r3, [r7, #2]
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <reg_wizchip_cs_cbfunc+0x16>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <reg_wizchip_cs_cbfunc+0x40>)
 8004410:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <reg_wizchip_cs_cbfunc+0x44>)
 8004412:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004414:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <reg_wizchip_cs_cbfunc+0x40>)
 8004416:	4a0a      	ldr	r2, [pc, #40]	@ (8004440 <reg_wizchip_cs_cbfunc+0x48>)
 8004418:	619a      	str	r2, [r3, #24]
 800441a:	e006      	b.n	800442a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800441c:	4a06      	ldr	r2, [pc, #24]	@ (8004438 <reg_wizchip_cs_cbfunc+0x40>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004422:	4a05      	ldr	r2, [pc, #20]	@ (8004438 <reg_wizchip_cs_cbfunc+0x40>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6193      	str	r3, [r2, #24]
   }
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000040 	.word	0x20000040
 800443c:	0800434d 	.word	0x0800434d
 8004440:	0800435b 	.word	0x0800435b

08004444 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800444e:	bf00      	nop
 8004450:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <reg_wizchip_spi_cbfunc+0x4c>)
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f9      	beq.n	8004450 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <reg_wizchip_spi_cbfunc+0x24>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004468:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <reg_wizchip_spi_cbfunc+0x4c>)
 800446a:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <reg_wizchip_spi_cbfunc+0x50>)
 800446c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800446e:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <reg_wizchip_spi_cbfunc+0x4c>)
 8004470:	4a09      	ldr	r2, [pc, #36]	@ (8004498 <reg_wizchip_spi_cbfunc+0x54>)
 8004472:	621a      	str	r2, [r3, #32]
 8004474:	e006      	b.n	8004484 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004476:	4a06      	ldr	r2, [pc, #24]	@ (8004490 <reg_wizchip_spi_cbfunc+0x4c>)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800447c:	4a04      	ldr	r2, [pc, #16]	@ (8004490 <reg_wizchip_spi_cbfunc+0x4c>)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6213      	str	r3, [r2, #32]
   }
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000040 	.word	0x20000040
 8004494:	080043a1 	.word	0x080043a1
 8004498:	080043b1 	.word	0x080043b1

0800449c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80044a6:	bf00      	nop
 80044a8:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f9      	beq.n	80044a8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <reg_wizchip_spiburst_cbfunc+0x24>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80044c0:	4b09      	ldr	r3, [pc, #36]	@ (80044e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80044c2:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <reg_wizchip_spiburst_cbfunc+0x50>)
 80044c4:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80044c8:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <reg_wizchip_spiburst_cbfunc+0x54>)
 80044ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80044cc:	e006      	b.n	80044dc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80044ce:	4a06      	ldr	r2, [pc, #24]	@ (80044e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80044d4:	4a04      	ldr	r2, [pc, #16]	@ (80044e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	20000040 	.word	0x20000040
 80044ec:	080043c7 	.word	0x080043c7
 80044f0:	080043df 	.word	0x080043df

080044f4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	2206      	movs	r2, #6
 80044fe:	4619      	mov	r1, r3
 8004500:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004504:	f7ff fcc8 	bl	8003e98 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	2204      	movs	r2, #4
 800450e:	4619      	mov	r1, r3
 8004510:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004514:	f7ff fcc0 	bl	8003e98 <WIZCHIP_READ_BUF>
 8004518:	f107 0310 	add.w	r3, r7, #16
 800451c:	2204      	movs	r2, #4
 800451e:	4619      	mov	r1, r3
 8004520:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004524:	f7ff fcb8 	bl	8003e98 <WIZCHIP_READ_BUF>
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	2204      	movs	r2, #4
 800452e:	4619      	mov	r1, r3
 8004530:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004534:	f7ff fcb0 	bl	8003e98 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004538:	2180      	movs	r1, #128	@ 0x80
 800453a:	2000      	movs	r0, #0
 800453c:	f7ff fc5e 	bl	8003dfc <WIZCHIP_WRITE>
   getMR(); // for delay
 8004540:	2000      	movs	r0, #0
 8004542:	f7ff fc0f 	bl	8003d64 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	2206      	movs	r2, #6
 800454a:	4619      	mov	r1, r3
 800454c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004550:	f7ff fd02 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	2204      	movs	r2, #4
 800455a:	4619      	mov	r1, r3
 800455c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004560:	f7ff fcfa 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004564:	f107 0310 	add.w	r3, r7, #16
 8004568:	2204      	movs	r2, #4
 800456a:	4619      	mov	r1, r3
 800456c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004570:	f7ff fcf2 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	2204      	movs	r2, #4
 800457a:	4619      	mov	r1, r3
 800457c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004580:	f7ff fcea 	bl	8003f58 <WIZCHIP_WRITE_BUF>
}
 8004584:	bf00      	nop
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800459a:	f7ff ffab 	bl	80044f4 <wizchip_sw_reset>
   if(txsize)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03b      	beq.n	800461c <wizchip_init+0x90>
   {
      tmp = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	e015      	b.n	80045da <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80045ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	7bbb      	ldrb	r3, [r7, #14]
 80045ba:	4413      	add	r3, r2
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80045c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	dd02      	ble.n	80045ce <wizchip_init+0x42>
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045cc:	e066      	b.n	800469c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80045ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045de:	2b07      	cmp	r3, #7
 80045e0:	dde5      	ble.n	80045ae <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
 80045e6:	e015      	b.n	8004614 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80045e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	3301      	adds	r3, #1
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80045f6:	4618      	mov	r0, r3
 80045f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	f7ff fbfa 	bl	8003dfc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	3301      	adds	r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004618:	2b07      	cmp	r3, #7
 800461a:	dde5      	ble.n	80045e8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d03b      	beq.n	800469a <wizchip_init+0x10e>
   {
      tmp = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e015      	b.n	8004658 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800462c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	4413      	add	r3, r2
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	7bbb      	ldrb	r3, [r7, #14]
 8004638:	4413      	add	r3, r2
 800463a:	b2db      	uxtb	r3, r3
 800463c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800463e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004642:	2b10      	cmp	r3, #16
 8004644:	dd02      	ble.n	800464c <wizchip_init+0xc0>
 8004646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800464a:	e027      	b.n	800469c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800464c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	3301      	adds	r3, #1
 8004654:	b2db      	uxtb	r3, r3
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465c:	2b07      	cmp	r3, #7
 800465e:	dde5      	ble.n	800462c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e015      	b.n	8004692 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	3301      	adds	r3, #1
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004674:	4618      	mov	r0, r3
 8004676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4413      	add	r3, r2
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	f7ff fbbb 	bl	8003dfc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	2b07      	cmp	r3, #7
 8004698:	dde5      	ble.n	8004666 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2206      	movs	r2, #6
 80046b0:	4619      	mov	r1, r3
 80046b2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80046b6:	f7ff fc4f 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	330e      	adds	r3, #14
 80046be:	2204      	movs	r2, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80046c6:	f7ff fc47 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	330a      	adds	r3, #10
 80046ce:	2204      	movs	r2, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80046d6:	f7ff fc3f 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3306      	adds	r3, #6
 80046de:	2204      	movs	r2, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80046e6:	f7ff fc37 	bl	8003f58 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	7c9a      	ldrb	r2, [r3, #18]
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <wizchip_setnetinfo+0x78>)
 80046f0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7cda      	ldrb	r2, [r3, #19]
 80046f6:	4b09      	ldr	r3, [pc, #36]	@ (800471c <wizchip_setnetinfo+0x78>)
 80046f8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	7d1a      	ldrb	r2, [r3, #20]
 80046fe:	4b07      	ldr	r3, [pc, #28]	@ (800471c <wizchip_setnetinfo+0x78>)
 8004700:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7d5a      	ldrb	r2, [r3, #21]
 8004706:	4b05      	ldr	r3, [pc, #20]	@ (800471c <wizchip_setnetinfo+0x78>)
 8004708:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7d9a      	ldrb	r2, [r3, #22]
 800470e:	4b04      	ldr	r3, [pc, #16]	@ (8004720 <wizchip_setnetinfo+0x7c>)
 8004710:	701a      	strb	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000ca0 	.word	0x20000ca0
 8004720:	20000ca4 	.word	0x20000ca4

08004724 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2206      	movs	r2, #6
 8004730:	4619      	mov	r1, r3
 8004732:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004736:	f7ff fbaf 	bl	8003e98 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	330e      	adds	r3, #14
 800473e:	2204      	movs	r2, #4
 8004740:	4619      	mov	r1, r3
 8004742:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004746:	f7ff fba7 	bl	8003e98 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	330a      	adds	r3, #10
 800474e:	2204      	movs	r2, #4
 8004750:	4619      	mov	r1, r3
 8004752:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004756:	f7ff fb9f 	bl	8003e98 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3306      	adds	r3, #6
 800475e:	2204      	movs	r2, #4
 8004760:	4619      	mov	r1, r3
 8004762:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004766:	f7ff fb97 	bl	8003e98 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <wizchip_getnetinfo+0x78>)
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <wizchip_getnetinfo+0x78>)
 8004774:	785a      	ldrb	r2, [r3, #1]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800477a:	4b08      	ldr	r3, [pc, #32]	@ (800479c <wizchip_getnetinfo+0x78>)
 800477c:	789a      	ldrb	r2, [r3, #2]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <wizchip_getnetinfo+0x78>)
 8004784:	78da      	ldrb	r2, [r3, #3]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800478a:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <wizchip_getnetinfo+0x7c>)
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	759a      	strb	r2, [r3, #22]
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000ca0 	.word	0x20000ca0
 80047a0:	20000ca4 	.word	0x20000ca4

080047a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047a8:	f7ff faca 	bl	8003d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047ac:	480c      	ldr	r0, [pc, #48]	@ (80047e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047ae:	490d      	ldr	r1, [pc, #52]	@ (80047e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047b0:	4a0d      	ldr	r2, [pc, #52]	@ (80047e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047b4:	e002      	b.n	80047bc <LoopCopyDataInit>

080047b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ba:	3304      	adds	r3, #4

080047bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047c0:	d3f9      	bcc.n	80047b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047c2:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047c4:	4c0a      	ldr	r4, [pc, #40]	@ (80047f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047c8:	e001      	b.n	80047ce <LoopFillZerobss>

080047ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047cc:	3204      	adds	r2, #4

080047ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047d0:	d3fb      	bcc.n	80047ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047d2:	f004 fd8b 	bl	80092ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047d6:	f7fe f9f7 	bl	8002bc8 <main>
  bx  lr    
 80047da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047e4:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80047e8:	0800cedc 	.word	0x0800cedc
  ldr r2, =_sbss
 80047ec:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 80047f0:	20000df8 	.word	0x20000df8

080047f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047f4:	e7fe      	b.n	80047f4 <ADC_IRQHandler>
	...

080047f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004838 <HAL_Init+0x40>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0d      	ldr	r2, [pc, #52]	@ (8004838 <HAL_Init+0x40>)
 8004802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <HAL_Init+0x40>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0a      	ldr	r2, [pc, #40]	@ (8004838 <HAL_Init+0x40>)
 800480e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004814:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_Init+0x40>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a07      	ldr	r2, [pc, #28]	@ (8004838 <HAL_Init+0x40>)
 800481a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004820:	2003      	movs	r0, #3
 8004822:	f000 f94f 	bl	8004ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004826:	2000      	movs	r0, #0
 8004828:	f000 f808 	bl	800483c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800482c:	f7ff f86c 	bl	8003908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023c00 	.word	0x40023c00

0800483c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004844:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_InitTick+0x54>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <HAL_InitTick+0x58>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004852:	fbb3 f3f1 	udiv	r3, r3, r1
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f967 	bl	8004b2e <HAL_SYSTICK_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e00e      	b.n	8004888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b0f      	cmp	r3, #15
 800486e:	d80a      	bhi.n	8004886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004870:	2200      	movs	r2, #0
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004878:	f000 f92f 	bl	8004ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800487c:	4a06      	ldr	r2, [pc, #24]	@ (8004898 <HAL_InitTick+0x5c>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	2000003c 	.word	0x2000003c
 8004894:	20000070 	.word	0x20000070
 8004898:	2000006c 	.word	0x2000006c

0800489c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a0:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_IncTick+0x20>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <HAL_IncTick+0x24>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	4a04      	ldr	r2, [pc, #16]	@ (80048c0 <HAL_IncTick+0x24>)
 80048ae:	6013      	str	r3, [r2, #0]
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000070 	.word	0x20000070
 80048c0:	20000ca8 	.word	0x20000ca8

080048c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return uwTick;
 80048c8:	4b03      	ldr	r3, [pc, #12]	@ (80048d8 <HAL_GetTick+0x14>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000ca8 	.word	0x20000ca8

080048dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7ff ffee 	bl	80048c4 <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048f4:	d005      	beq.n	8004902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004920 <HAL_Delay+0x44>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004902:	bf00      	nop
 8004904:	f7ff ffde 	bl	80048c4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	429a      	cmp	r2, r3
 8004912:	d8f7      	bhi.n	8004904 <HAL_Delay+0x28>
  {
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000070 	.word	0x20000070

08004924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004934:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <__NVIC_SetPriorityGrouping+0x44>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004940:	4013      	ands	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800494c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004956:	4a04      	ldr	r2, [pc, #16]	@ (8004968 <__NVIC_SetPriorityGrouping+0x44>)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	60d3      	str	r3, [r2, #12]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <__NVIC_GetPriorityGrouping+0x18>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	f003 0307 	and.w	r3, r3, #7
}
 800497a:	4618      	mov	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	2b00      	cmp	r3, #0
 8004998:	db0b      	blt.n	80049b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	4907      	ldr	r1, [pc, #28]	@ (80049c0 <__NVIC_EnableIRQ+0x38>)
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2001      	movs	r0, #1
 80049aa:	fa00 f202 	lsl.w	r2, r0, r2
 80049ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000e100 	.word	0xe000e100

080049c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	6039      	str	r1, [r7, #0]
 80049ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db0a      	blt.n	80049ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	490c      	ldr	r1, [pc, #48]	@ (8004a10 <__NVIC_SetPriority+0x4c>)
 80049de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	440b      	add	r3, r1
 80049e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049ec:	e00a      	b.n	8004a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4908      	ldr	r1, [pc, #32]	@ (8004a14 <__NVIC_SetPriority+0x50>)
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	3b04      	subs	r3, #4
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	440b      	add	r3, r1
 8004a02:	761a      	strb	r2, [r3, #24]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000e100 	.word	0xe000e100
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	@ 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f1c3 0307 	rsb	r3, r3, #7
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	bf28      	it	cs
 8004a36:	2304      	movcs	r3, #4
 8004a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d902      	bls.n	8004a48 <NVIC_EncodePriority+0x30>
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3b03      	subs	r3, #3
 8004a46:	e000      	b.n	8004a4a <NVIC_EncodePriority+0x32>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	43d9      	mvns	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	4313      	orrs	r3, r2
         );
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3724      	adds	r7, #36	@ 0x24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a90:	d301      	bcc.n	8004a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00f      	b.n	8004ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <SysTick_Config+0x40>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a9e:	210f      	movs	r1, #15
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aa4:	f7ff ff8e 	bl	80049c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <SysTick_Config+0x40>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aae:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <SysTick_Config+0x40>)
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000e010 	.word	0xe000e010

08004ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ff29 	bl	8004924 <__NVIC_SetPriorityGrouping>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aec:	f7ff ff3e 	bl	800496c <__NVIC_GetPriorityGrouping>
 8004af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7ff ff8e 	bl	8004a18 <NVIC_EncodePriority>
 8004afc:	4602      	mov	r2, r0
 8004afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff5d 	bl	80049c4 <__NVIC_SetPriority>
}
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff31 	bl	8004988 <__NVIC_EnableIRQ>
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ffa2 	bl	8004a80 <SysTick_Config>
 8004b3c:	4603      	mov	r3, r0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b54:	f7ff feb6 	bl	80048c4 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d008      	beq.n	8004b78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2280      	movs	r2, #128	@ 0x80
 8004b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e052      	b.n	8004c1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0216 	bic.w	r2, r2, #22
 8004b86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d103      	bne.n	8004ba8 <HAL_DMA_Abort+0x62>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0208 	bic.w	r2, r2, #8
 8004bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc8:	e013      	b.n	8004bf2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bca:	f7ff fe7b 	bl	80048c4 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d90c      	bls.n	8004bf2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2203      	movs	r2, #3
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e015      	b.n	8004c1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e4      	bne.n	8004bca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c04:	223f      	movs	r2, #63	@ 0x3f
 8004c06:	409a      	lsls	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d004      	beq.n	8004c44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2280      	movs	r2, #128	@ 0x80
 8004c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e00c      	b.n	8004c5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2205      	movs	r2, #5
 8004c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	@ 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e16b      	b.n	8004f60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c88:	2201      	movs	r2, #1
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	f040 815a 	bne.w	8004f5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d005      	beq.n	8004cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d130      	bne.n	8004d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	2203      	movs	r2, #3
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 0201 	and.w	r2, r3, #1
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d017      	beq.n	8004d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d123      	bne.n	8004db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	08da      	lsrs	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3208      	adds	r2, #8
 8004d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	220f      	movs	r2, #15
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	08da      	lsrs	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3208      	adds	r2, #8
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80b4 	beq.w	8004f5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	4b60      	ldr	r3, [pc, #384]	@ (8004f78 <HAL_GPIO_Init+0x30c>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8004f78 <HAL_GPIO_Init+0x30c>)
 8004dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e02:	4b5d      	ldr	r3, [pc, #372]	@ (8004f78 <HAL_GPIO_Init+0x30c>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8004f7c <HAL_GPIO_Init+0x310>)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	3302      	adds	r3, #2
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	220f      	movs	r2, #15
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a52      	ldr	r2, [pc, #328]	@ (8004f80 <HAL_GPIO_Init+0x314>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02b      	beq.n	8004e92 <HAL_GPIO_Init+0x226>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a51      	ldr	r2, [pc, #324]	@ (8004f84 <HAL_GPIO_Init+0x318>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d025      	beq.n	8004e8e <HAL_GPIO_Init+0x222>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a50      	ldr	r2, [pc, #320]	@ (8004f88 <HAL_GPIO_Init+0x31c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01f      	beq.n	8004e8a <HAL_GPIO_Init+0x21e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8004f8c <HAL_GPIO_Init+0x320>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d019      	beq.n	8004e86 <HAL_GPIO_Init+0x21a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4e      	ldr	r2, [pc, #312]	@ (8004f90 <HAL_GPIO_Init+0x324>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <HAL_GPIO_Init+0x216>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8004f94 <HAL_GPIO_Init+0x328>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00d      	beq.n	8004e7e <HAL_GPIO_Init+0x212>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a4c      	ldr	r2, [pc, #304]	@ (8004f98 <HAL_GPIO_Init+0x32c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d007      	beq.n	8004e7a <HAL_GPIO_Init+0x20e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f9c <HAL_GPIO_Init+0x330>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <HAL_GPIO_Init+0x20a>
 8004e72:	2307      	movs	r3, #7
 8004e74:	e00e      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e76:	2308      	movs	r3, #8
 8004e78:	e00c      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e7a:	2306      	movs	r3, #6
 8004e7c:	e00a      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e7e:	2305      	movs	r3, #5
 8004e80:	e008      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e82:	2304      	movs	r3, #4
 8004e84:	e006      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e86:	2303      	movs	r3, #3
 8004e88:	e004      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e002      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_GPIO_Init+0x228>
 8004e92:	2300      	movs	r3, #0
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	f002 0203 	and.w	r2, r2, #3
 8004e9a:	0092      	lsls	r2, r2, #2
 8004e9c:	4093      	lsls	r3, r2
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ea4:	4935      	ldr	r1, [pc, #212]	@ (8004f7c <HAL_GPIO_Init+0x310>)
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	089b      	lsrs	r3, r3, #2
 8004eaa:	3302      	adds	r3, #2
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ed6:	4a32      	ldr	r2, [pc, #200]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004edc:	4b30      	ldr	r3, [pc, #192]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f00:	4a27      	ldr	r2, [pc, #156]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f06:	4b26      	ldr	r3, [pc, #152]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f30:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f54:	4a12      	ldr	r2, [pc, #72]	@ (8004fa0 <HAL_GPIO_Init+0x334>)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b0f      	cmp	r3, #15
 8004f64:	f67f ae90 	bls.w	8004c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3724      	adds	r7, #36	@ 0x24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40013800 	.word	0x40013800
 8004f80:	40020000 	.word	0x40020000
 8004f84:	40020400 	.word	0x40020400
 8004f88:	40020800 	.word	0x40020800
 8004f8c:	40020c00 	.word	0x40020c00
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40021400 	.word	0x40021400
 8004f98:	40021800 	.word	0x40021800
 8004f9c:	40021c00 	.word	0x40021c00
 8004fa0:	40013c00 	.word	0x40013c00

08004fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	807b      	strh	r3, [r7, #2]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fb4:	787b      	ldrb	r3, [r7, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fc0:	e003      	b.n	8004fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fc2:	887b      	ldrh	r3, [r7, #2]
 8004fc4:	041a      	lsls	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	619a      	str	r2, [r3, #24]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e267      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d075      	beq.n	80050e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ff6:	4b88      	ldr	r3, [pc, #544]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d00c      	beq.n	800501c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005002:	4b85      	ldr	r3, [pc, #532]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800500a:	2b08      	cmp	r3, #8
 800500c:	d112      	bne.n	8005034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800500e:	4b82      	ldr	r3, [pc, #520]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501a:	d10b      	bne.n	8005034 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501c:	4b7e      	ldr	r3, [pc, #504]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05b      	beq.n	80050e0 <HAL_RCC_OscConfig+0x108>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d157      	bne.n	80050e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e242      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503c:	d106      	bne.n	800504c <HAL_RCC_OscConfig+0x74>
 800503e:	4b76      	ldr	r3, [pc, #472]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a75      	ldr	r2, [pc, #468]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e01d      	b.n	8005088 <HAL_RCC_OscConfig+0xb0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x98>
 8005056:	4b70      	ldr	r3, [pc, #448]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6f      	ldr	r2, [pc, #444]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800505c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b6d      	ldr	r3, [pc, #436]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6c      	ldr	r2, [pc, #432]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0xb0>
 8005070:	4b69      	ldr	r3, [pc, #420]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a68      	ldr	r2, [pc, #416]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b66      	ldr	r3, [pc, #408]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a65      	ldr	r2, [pc, #404]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7ff fc18 	bl	80048c4 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005098:	f7ff fc14 	bl	80048c4 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	@ 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e207      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0xc0>
 80050b6:	e014      	b.n	80050e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7ff fc04 	bl	80048c4 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c0:	f7ff fc00 	bl	80048c4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	@ 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e1f3      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d2:	4b51      	ldr	r3, [pc, #324]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0xe8>
 80050de:	e000      	b.n	80050e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d063      	beq.n	80051b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fa:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005102:	2b08      	cmp	r3, #8
 8005104:	d11c      	bne.n	8005140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005106:	4b44      	ldr	r3, [pc, #272]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d116      	bne.n	8005140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	4b41      	ldr	r3, [pc, #260]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_RCC_OscConfig+0x152>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e1c7      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4937      	ldr	r1, [pc, #220]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513e:	e03a      	b.n	80051b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d020      	beq.n	800518a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005148:	4b34      	ldr	r3, [pc, #208]	@ (800521c <HAL_RCC_OscConfig+0x244>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7ff fbb9 	bl	80048c4 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005156:	f7ff fbb5 	bl	80048c4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e1a8      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005168:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005174:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4925      	ldr	r1, [pc, #148]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005184:	4313      	orrs	r3, r2
 8005186:	600b      	str	r3, [r1, #0]
 8005188:	e015      	b.n	80051b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800518a:	4b24      	ldr	r3, [pc, #144]	@ (800521c <HAL_RCC_OscConfig+0x244>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7ff fb98 	bl	80048c4 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005198:	f7ff fb94 	bl	80048c4 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e187      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d036      	beq.n	8005230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	4b15      	ldr	r3, [pc, #84]	@ (8005220 <HAL_RCC_OscConfig+0x248>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7ff fb78 	bl	80048c4 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d8:	f7ff fb74 	bl	80048c4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e167      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0x200>
 80051f6:	e01b      	b.n	8005230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f8:	4b09      	ldr	r3, [pc, #36]	@ (8005220 <HAL_RCC_OscConfig+0x248>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7ff fb61 	bl	80048c4 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005204:	e00e      	b.n	8005224 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005206:	f7ff fb5d 	bl	80048c4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d907      	bls.n	8005224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e150      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
 8005218:	40023800 	.word	0x40023800
 800521c:	42470000 	.word	0x42470000
 8005220:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005224:	4b88      	ldr	r3, [pc, #544]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ea      	bne.n	8005206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8097 	beq.w	800536c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523e:	2300      	movs	r3, #0
 8005240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005242:	4b81      	ldr	r3, [pc, #516]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	4b7d      	ldr	r3, [pc, #500]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	4a7c      	ldr	r2, [pc, #496]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800525c:	6413      	str	r3, [r2, #64]	@ 0x40
 800525e:	4b7a      	ldr	r3, [pc, #488]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526e:	4b77      	ldr	r3, [pc, #476]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d118      	bne.n	80052ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527a:	4b74      	ldr	r3, [pc, #464]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a73      	ldr	r2, [pc, #460]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005286:	f7ff fb1d 	bl	80048c4 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7ff fb19 	bl	80048c4 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e10c      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	4b6a      	ldr	r3, [pc, #424]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x2ea>
 80052b4:	4b64      	ldr	r3, [pc, #400]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b8:	4a63      	ldr	r2, [pc, #396]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c0:	e01c      	b.n	80052fc <HAL_RCC_OscConfig+0x324>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x30c>
 80052ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	4a5b      	ldr	r2, [pc, #364]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e2:	e00b      	b.n	80052fc <HAL_RCC_OscConfig+0x324>
 80052e4:	4b58      	ldr	r3, [pc, #352]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	4a57      	ldr	r2, [pc, #348]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f0:	4b55      	ldr	r3, [pc, #340]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	4a54      	ldr	r2, [pc, #336]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052f6:	f023 0304 	bic.w	r3, r3, #4
 80052fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d015      	beq.n	8005330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7ff fade 	bl	80048c4 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530a:	e00a      	b.n	8005322 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7ff fada 	bl	80048c4 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0cb      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005322:	4b49      	ldr	r3, [pc, #292]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0ee      	beq.n	800530c <HAL_RCC_OscConfig+0x334>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005330:	f7ff fac8 	bl	80048c4 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005336:	e00a      	b.n	800534e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005338:	f7ff fac4 	bl	80048c4 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0b5      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534e:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ee      	bne.n	8005338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d105      	bne.n	800536c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005360:	4b39      	ldr	r3, [pc, #228]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	4a38      	ldr	r2, [pc, #224]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800536a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80a1 	beq.w	80054b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005376:	4b34      	ldr	r3, [pc, #208]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b08      	cmp	r3, #8
 8005380:	d05c      	beq.n	800543c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d141      	bne.n	800540e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b31      	ldr	r3, [pc, #196]	@ (8005450 <HAL_RCC_OscConfig+0x478>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7ff fa98 	bl	80048c4 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005398:	f7ff fa94 	bl	80048c4 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e087      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053aa:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	3b01      	subs	r3, #1
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	061b      	lsls	r3, r3, #24
 80053da:	491b      	ldr	r1, [pc, #108]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <HAL_RCC_OscConfig+0x478>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e6:	f7ff fa6d 	bl	80048c4 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ee:	f7ff fa69 	bl	80048c4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e05c      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005400:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x416>
 800540c:	e054      	b.n	80054b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <HAL_RCC_OscConfig+0x478>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7ff fa56 	bl	80048c4 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541c:	f7ff fa52 	bl	80048c4 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e045      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542e:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x444>
 800543a:	e03d      	b.n	80054b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e038      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
 8005448:	40023800 	.word	0x40023800
 800544c:	40007000 	.word	0x40007000
 8005450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005454:	4b1b      	ldr	r3, [pc, #108]	@ (80054c4 <HAL_RCC_OscConfig+0x4ec>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d028      	beq.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d121      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d11a      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800548a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800548c:	4293      	cmp	r3, r2
 800548e:	d111      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549a:	085b      	lsrs	r3, r3, #1
 800549c:	3b01      	subs	r3, #1
 800549e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800

080054c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0cc      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054dc:	4b68      	ldr	r3, [pc, #416]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d90c      	bls.n	8005504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b65      	ldr	r3, [pc, #404]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	4b63      	ldr	r3, [pc, #396]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0b8      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d020      	beq.n	8005552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800551c:	4b59      	ldr	r3, [pc, #356]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4a58      	ldr	r2, [pc, #352]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005534:	4b53      	ldr	r3, [pc, #332]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a52      	ldr	r2, [pc, #328]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800553e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005540:	4b50      	ldr	r3, [pc, #320]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	494d      	ldr	r1, [pc, #308]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d044      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005566:	4b47      	ldr	r3, [pc, #284]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d119      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e07f      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d003      	beq.n	8005586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005582:	2b03      	cmp	r3, #3
 8005584:	d107      	bne.n	8005596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005586:	4b3f      	ldr	r3, [pc, #252]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e06f      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005596:	4b3b      	ldr	r3, [pc, #236]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e067      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055a6:	4b37      	ldr	r3, [pc, #220]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f023 0203 	bic.w	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4934      	ldr	r1, [pc, #208]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055b8:	f7ff f984 	bl	80048c4 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c0:	f7ff f980 	bl	80048c4 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e04f      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 020c 	and.w	r2, r3, #12
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d1eb      	bne.n	80055c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e8:	4b25      	ldr	r3, [pc, #148]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d20c      	bcs.n	8005610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b22      	ldr	r3, [pc, #136]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	4b20      	ldr	r3, [pc, #128]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e032      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800561c:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4916      	ldr	r1, [pc, #88]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800563a:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	490e      	ldr	r1, [pc, #56]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800564e:	f000 f821 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 8005652:	4602      	mov	r2, r0
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	490a      	ldr	r1, [pc, #40]	@ (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 8005660:	5ccb      	ldrb	r3, [r1, r3]
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	4a09      	ldr	r2, [pc, #36]	@ (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_RCC_ClockConfig+0x1c8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff f8e4 	bl	800483c <HAL_InitTick>

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40023c00 	.word	0x40023c00
 8005684:	40023800 	.word	0x40023800
 8005688:	0800ca84 	.word	0x0800ca84
 800568c:	2000003c 	.word	0x2000003c
 8005690:	2000006c 	.word	0x2000006c

08005694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005698:	b094      	sub	sp, #80	@ 0x50
 800569a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a0:	2300      	movs	r3, #0
 80056a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a4:	2300      	movs	r3, #0
 80056a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ac:	4b79      	ldr	r3, [pc, #484]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d00d      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x40>
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	f200 80e1 	bhi.w	8005880 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_RCC_GetSysClockFreq+0x34>
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d003      	beq.n	80056ce <HAL_RCC_GetSysClockFreq+0x3a>
 80056c6:	e0db      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056c8:	4b73      	ldr	r3, [pc, #460]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80056cc:	e0db      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ce:	4b73      	ldr	r3, [pc, #460]	@ (800589c <HAL_RCC_GetSysClockFreq+0x208>)
 80056d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056d2:	e0d8      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056de:	4b6d      	ldr	r3, [pc, #436]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d063      	beq.n	80057b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	2200      	movs	r2, #0
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80056fe:	2300      	movs	r3, #0
 8005700:	637b      	str	r3, [r7, #52]	@ 0x34
 8005702:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	f04f 0000 	mov.w	r0, #0
 800570e:	f04f 0100 	mov.w	r1, #0
 8005712:	0159      	lsls	r1, r3, #5
 8005714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005718:	0150      	lsls	r0, r2, #5
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4621      	mov	r1, r4
 8005720:	1a51      	subs	r1, r2, r1
 8005722:	6139      	str	r1, [r7, #16]
 8005724:	4629      	mov	r1, r5
 8005726:	eb63 0301 	sbc.w	r3, r3, r1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005738:	4659      	mov	r1, fp
 800573a:	018b      	lsls	r3, r1, #6
 800573c:	4651      	mov	r1, sl
 800573e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005742:	4651      	mov	r1, sl
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	4651      	mov	r1, sl
 8005748:	ebb2 0801 	subs.w	r8, r2, r1
 800574c:	4659      	mov	r1, fp
 800574e:	eb63 0901 	sbc.w	r9, r3, r1
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800575e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005766:	4690      	mov	r8, r2
 8005768:	4699      	mov	r9, r3
 800576a:	4623      	mov	r3, r4
 800576c:	eb18 0303 	adds.w	r3, r8, r3
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	462b      	mov	r3, r5
 8005774:	eb49 0303 	adc.w	r3, r9, r3
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005786:	4629      	mov	r1, r5
 8005788:	024b      	lsls	r3, r1, #9
 800578a:	4621      	mov	r1, r4
 800578c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005790:	4621      	mov	r1, r4
 8005792:	024a      	lsls	r2, r1, #9
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800579a:	2200      	movs	r2, #0
 800579c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057a4:	f7fb fa70 	bl	8000c88 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4613      	mov	r3, r2
 80057ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b0:	e058      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057b2:	4b38      	ldr	r3, [pc, #224]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x200>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	2200      	movs	r2, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	4611      	mov	r1, r2
 80057be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057c2:	623b      	str	r3, [r7, #32]
 80057c4:	2300      	movs	r3, #0
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057cc:	4642      	mov	r2, r8
 80057ce:	464b      	mov	r3, r9
 80057d0:	f04f 0000 	mov.w	r0, #0
 80057d4:	f04f 0100 	mov.w	r1, #0
 80057d8:	0159      	lsls	r1, r3, #5
 80057da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057de:	0150      	lsls	r0, r2, #5
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4641      	mov	r1, r8
 80057e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80057ea:	4649      	mov	r1, r9
 80057ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005800:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005804:	ebb2 040a 	subs.w	r4, r2, sl
 8005808:	eb63 050b 	sbc.w	r5, r3, fp
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	00eb      	lsls	r3, r5, #3
 8005816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581a:	00e2      	lsls	r2, r4, #3
 800581c:	4614      	mov	r4, r2
 800581e:	461d      	mov	r5, r3
 8005820:	4643      	mov	r3, r8
 8005822:	18e3      	adds	r3, r4, r3
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	464b      	mov	r3, r9
 8005828:	eb45 0303 	adc.w	r3, r5, r3
 800582c:	607b      	str	r3, [r7, #4]
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800583a:	4629      	mov	r1, r5
 800583c:	028b      	lsls	r3, r1, #10
 800583e:	4621      	mov	r1, r4
 8005840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005844:	4621      	mov	r1, r4
 8005846:	028a      	lsls	r2, r1, #10
 8005848:	4610      	mov	r0, r2
 800584a:	4619      	mov	r1, r3
 800584c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584e:	2200      	movs	r2, #0
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	61fa      	str	r2, [r7, #28]
 8005854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005858:	f7fb fa16 	bl	8000c88 <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4613      	mov	r3, r2
 8005862:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005864:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x200>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	3301      	adds	r3, #1
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005874:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005878:	fbb2 f3f3 	udiv	r3, r2, r3
 800587c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800587e:	e002      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x204>)
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005888:	4618      	mov	r0, r3
 800588a:	3750      	adds	r7, #80	@ 0x50
 800588c:	46bd      	mov	sp, r7
 800588e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005892:	bf00      	nop
 8005894:	40023800 	.word	0x40023800
 8005898:	00f42400 	.word	0x00f42400
 800589c:	007a1200 	.word	0x007a1200

080058a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a4:	4b03      	ldr	r3, [pc, #12]	@ (80058b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000003c 	.word	0x2000003c

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058bc:	f7ff fff0 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b05      	ldr	r3, [pc, #20]	@ (80058d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	0a9b      	lsrs	r3, r3, #10
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	4903      	ldr	r1, [pc, #12]	@ (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40023800 	.word	0x40023800
 80058dc:	0800ca94 	.word	0x0800ca94

080058e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058e4:	f7ff ffdc 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	0b5b      	lsrs	r3, r3, #13
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	4903      	ldr	r1, [pc, #12]	@ (8005904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f6:	5ccb      	ldrb	r3, [r1, r3]
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	0800ca94 	.word	0x0800ca94

08005908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e07b      	b.n	8005a12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800592a:	d009      	beq.n	8005940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	61da      	str	r2, [r3, #28]
 8005932:	e005      	b.n	8005940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fd fffc 	bl	8003958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005976:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c4:	ea42 0103 	orr.w	r1, r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	f003 0104 	and.w	r1, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	f003 0210 	and.w	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b088      	sub	sp, #32
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_SPI_Transmit+0x22>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e12d      	b.n	8005c98 <HAL_SPI_Transmit+0x27e>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a44:	f7fe ff3e 	bl	80048c4 <HAL_GetTick>
 8005a48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a5e:	e116      	b.n	8005c8e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_Transmit+0x52>
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a70:	e10d      	b.n	8005c8e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2203      	movs	r2, #3
 8005a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab8:	d10f      	bne.n	8005ada <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b40      	cmp	r3, #64	@ 0x40
 8005ae6:	d007      	beq.n	8005af8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b00:	d14f      	bne.n	8005ba2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_Transmit+0xf6>
 8005b0a:	8afb      	ldrh	r3, [r7, #22]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d142      	bne.n	8005b96 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b34:	e02f      	b.n	8005b96 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d112      	bne.n	8005b6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b68:	e015      	b.n	8005b96 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b6a:	f7fe feab 	bl	80048c4 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d803      	bhi.n	8005b82 <HAL_SPI_Transmit+0x168>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b80:	d102      	bne.n	8005b88 <HAL_SPI_Transmit+0x16e>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005b94:	e07b      	b.n	8005c8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1ca      	bne.n	8005b36 <HAL_SPI_Transmit+0x11c>
 8005ba0:	e050      	b.n	8005c44 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Transmit+0x196>
 8005baa:	8afb      	ldrh	r3, [r7, #22]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d144      	bne.n	8005c3a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	7812      	ldrb	r2, [r2, #0]
 8005bbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bd6:	e030      	b.n	8005c3a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d113      	bne.n	8005c0e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	7812      	ldrb	r2, [r2, #0]
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c0c:	e015      	b.n	8005c3a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0e:	f7fe fe59 	bl	80048c4 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d803      	bhi.n	8005c26 <HAL_SPI_Transmit+0x20c>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_Transmit+0x212>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005c38:	e029      	b.n	8005c8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1c9      	bne.n	8005bd8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fbdf 	bl	800640c <SPI_EndRxTxTransaction>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e003      	b.n	8005c8e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3720      	adds	r7, #32
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cc4:	e0fb      	b.n	8005ebe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cce:	d112      	bne.n	8005cf6 <HAL_SPI_Receive+0x56>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10e      	bne.n	8005cf6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2204      	movs	r2, #4
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ce0:	88fa      	ldrh	r2, [r7, #6]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f8ef 	bl	8005ed0 <HAL_SPI_TransmitReceive>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	e0e8      	b.n	8005ec8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_SPI_Receive+0x64>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e0e1      	b.n	8005ec8 <HAL_SPI_Receive+0x228>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d0c:	f7fe fdda 	bl	80048c4 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_SPI_Receive+0x7e>
 8005d18:	88fb      	ldrh	r3, [r7, #6]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d22:	e0cc      	b.n	8005ebe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2204      	movs	r2, #4
 8005d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d6a:	d10f      	bne.n	8005d8c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d96:	2b40      	cmp	r3, #64	@ 0x40
 8005d98:	d007      	beq.n	8005daa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d16a      	bne.n	8005e88 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005db2:	e032      	b.n	8005e1a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d115      	bne.n	8005dee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f103 020c 	add.w	r2, r3, #12
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dce:	7812      	ldrb	r2, [r2, #0]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dec:	e015      	b.n	8005e1a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dee:	f7fe fd69 	bl	80048c4 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d803      	bhi.n	8005e06 <HAL_SPI_Receive+0x166>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e04:	d102      	bne.n	8005e0c <HAL_SPI_Receive+0x16c>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005e18:	e051      	b.n	8005ebe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1c7      	bne.n	8005db4 <HAL_SPI_Receive+0x114>
 8005e24:	e035      	b.n	8005e92 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d113      	bne.n	8005e5c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e5a:	e015      	b.n	8005e88 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5c:	f7fe fd32 	bl	80048c4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d803      	bhi.n	8005e74 <HAL_SPI_Receive+0x1d4>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e72:	d102      	bne.n	8005e7a <HAL_SPI_Receive+0x1da>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005e86:	e01a      	b.n	8005ebe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1c9      	bne.n	8005e26 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fa52 	bl	8006340 <SPI_EndRxTransaction>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
 8005eb4:	e003      	b.n	8005ebe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08c      	sub	sp, #48	@ 0x30
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x26>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e198      	b.n	8006228 <HAL_SPI_TransmitReceive+0x358>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005efe:	f7fe fce1 	bl	80048c4 <HAL_GetTick>
 8005f02:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d00f      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x70>
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f26:	d107      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x68>
 8005f30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d003      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005f3e:	e16d      	b.n	800621c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x82>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x82>
 8005f4c:	887b      	ldrh	r3, [r7, #2]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005f58:	e160      	b.n	800621c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d003      	beq.n	8005f6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2205      	movs	r2, #5
 8005f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	887a      	ldrh	r2, [r7, #2]
 8005f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	887a      	ldrh	r2, [r7, #2]
 8005f84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	887a      	ldrh	r2, [r7, #2]
 8005f90:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	887a      	ldrh	r2, [r7, #2]
 8005f96:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fae:	2b40      	cmp	r3, #64	@ 0x40
 8005fb0:	d007      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fca:	d17c      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x10a>
 8005fd4:	8b7b      	ldrh	r3, [r7, #26]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d16a      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fde:	881a      	ldrh	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	1c9a      	adds	r2, r3, #2
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ffe:	e057      	b.n	80060b0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d11b      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x176>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d016      	beq.n	8006046 <HAL_SPI_TransmitReceive+0x176>
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d113      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	881a      	ldrh	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	1c9a      	adds	r2, r3, #2
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	d119      	bne.n	8006088 <HAL_SPI_TransmitReceive+0x1b8>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d014      	beq.n	8006088 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	b292      	uxth	r2, r2
 800606a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006084:	2301      	movs	r3, #1
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006088:	f7fe fc1c 	bl	80048c4 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006094:	429a      	cmp	r2, r3
 8006096:	d80b      	bhi.n	80060b0 <HAL_SPI_TransmitReceive+0x1e0>
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800609e:	d007      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80060ae:	e0b5      	b.n	800621c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1a2      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x130>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d19d      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x130>
 80060c4:	e080      	b.n	80061c8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_SPI_TransmitReceive+0x204>
 80060ce:	8b7b      	ldrh	r3, [r7, #26]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d16f      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060fa:	e05b      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d11c      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x274>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d017      	beq.n	8006144 <HAL_SPI_TransmitReceive+0x274>
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	2b01      	cmp	r3, #1
 8006118:	d114      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b01      	cmp	r3, #1
 8006150:	d119      	bne.n	8006186 <HAL_SPI_TransmitReceive+0x2b6>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d014      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006182:	2301      	movs	r3, #1
 8006184:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006186:	f7fe fb9d 	bl	80048c4 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006192:	429a      	cmp	r2, r3
 8006194:	d803      	bhi.n	800619e <HAL_SPI_TransmitReceive+0x2ce>
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800619c:	d102      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x2d4>
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d107      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80061b2:	e033      	b.n	800621c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d19e      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x22c>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d199      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f91d 	bl	800640c <SPI_EndRxTxTransaction>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d006      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80061e4:	e01a      	b.n	800621c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006212:	e003      	b.n	800621c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006224:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006228:	4618      	mov	r0, r3
 800622a:	3730      	adds	r7, #48	@ 0x30
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006240:	f7fe fb40 	bl	80048c4 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	4413      	add	r3, r2
 800624e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006250:	f7fe fb38 	bl	80048c4 <HAL_GetTick>
 8006254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006256:	4b39      	ldr	r3, [pc, #228]	@ (800633c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	015b      	lsls	r3, r3, #5
 800625c:	0d1b      	lsrs	r3, r3, #20
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	fb02 f303 	mul.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006266:	e054      	b.n	8006312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800626e:	d050      	beq.n	8006312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006270:	f7fe fb28 	bl	80048c4 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	429a      	cmp	r2, r3
 800627e:	d902      	bls.n	8006286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d13d      	bne.n	8006302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800629e:	d111      	bne.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a8:	d004      	beq.n	80062b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b2:	d107      	bne.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062cc:	d10f      	bne.n	80062ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e017      	b.n	8006332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3b01      	subs	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4013      	ands	r3, r2
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	bf0c      	ite	eq
 8006322:	2301      	moveq	r3, #1
 8006324:	2300      	movne	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	429a      	cmp	r2, r3
 800632e:	d19b      	bne.n	8006268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	2000003c 	.word	0x2000003c

08006340 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006354:	d111      	bne.n	800637a <SPI_EndRxTransaction+0x3a>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800635e:	d004      	beq.n	800636a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006368:	d107      	bne.n	800637a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006378:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006382:	d12a      	bne.n	80063da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800638c:	d012      	beq.n	80063b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2200      	movs	r2, #0
 8006396:	2180      	movs	r1, #128	@ 0x80
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff ff49 	bl	8006230 <SPI_WaitFlagStateUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02d      	beq.n	8006400 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e026      	b.n	8006402 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	2101      	movs	r1, #1
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff ff36 	bl	8006230 <SPI_WaitFlagStateUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01a      	beq.n	8006400 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	f043 0220 	orr.w	r2, r3, #32
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e013      	b.n	8006402 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	2101      	movs	r1, #1
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff ff23 	bl	8006230 <SPI_WaitFlagStateUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e000      	b.n	8006402 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2201      	movs	r2, #1
 8006420:	2102      	movs	r1, #2
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7ff ff04 	bl	8006230 <SPI_WaitFlagStateUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006432:	f043 0220 	orr.w	r2, r3, #32
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e032      	b.n	80064a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800643e:	4b1b      	ldr	r3, [pc, #108]	@ (80064ac <SPI_EndRxTxTransaction+0xa0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	@ (80064b0 <SPI_EndRxTxTransaction+0xa4>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	0d5b      	lsrs	r3, r3, #21
 800644a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800645c:	d112      	bne.n	8006484 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	2180      	movs	r1, #128	@ 0x80
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fee1 	bl	8006230 <SPI_WaitFlagStateUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d016      	beq.n	80064a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e00f      	b.n	80064a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	3b01      	subs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800649a:	2b80      	cmp	r3, #128	@ 0x80
 800649c:	d0f2      	beq.n	8006484 <SPI_EndRxTxTransaction+0x78>
 800649e:	e000      	b.n	80064a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80064a0:	bf00      	nop
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	2000003c 	.word	0x2000003c
 80064b0:	165e9f81 	.word	0x165e9f81

080064b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e041      	b.n	800654a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fd fa84 	bl	80039e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f000 fa7a 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d001      	beq.n	800656c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e046      	b.n	80065fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a23      	ldr	r2, [pc, #140]	@ (8006608 <HAL_TIM_Base_Start+0xb4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <HAL_TIM_Base_Start+0x70>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	d01d      	beq.n	80065c4 <HAL_TIM_Base_Start+0x70>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1f      	ldr	r2, [pc, #124]	@ (800660c <HAL_TIM_Base_Start+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <HAL_TIM_Base_Start+0x70>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1e      	ldr	r2, [pc, #120]	@ (8006610 <HAL_TIM_Base_Start+0xbc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <HAL_TIM_Base_Start+0x70>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006614 <HAL_TIM_Base_Start+0xc0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_TIM_Base_Start+0x70>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006618 <HAL_TIM_Base_Start+0xc4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_TIM_Base_Start+0x70>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a19      	ldr	r2, [pc, #100]	@ (800661c <HAL_TIM_Base_Start+0xc8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_TIM_Base_Start+0x70>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a18      	ldr	r2, [pc, #96]	@ (8006620 <HAL_TIM_Base_Start+0xcc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d111      	bne.n	80065e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b06      	cmp	r3, #6
 80065d4:	d010      	beq.n	80065f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	e007      	b.n	80065f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40010400 	.word	0x40010400
 800661c:	40014000 	.word	0x40014000
 8006620:	40001800 	.word	0x40001800

08006624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e041      	b.n	80066ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f839 	bl	80066c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f000 f9c2 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e0ae      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b0c      	cmp	r3, #12
 8006702:	f200 809f 	bhi.w	8006844 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006706:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006741 	.word	0x08006741
 8006710:	08006845 	.word	0x08006845
 8006714:	08006845 	.word	0x08006845
 8006718:	08006845 	.word	0x08006845
 800671c:	08006781 	.word	0x08006781
 8006720:	08006845 	.word	0x08006845
 8006724:	08006845 	.word	0x08006845
 8006728:	08006845 	.word	0x08006845
 800672c:	080067c3 	.word	0x080067c3
 8006730:	08006845 	.word	0x08006845
 8006734:	08006845 	.word	0x08006845
 8006738:	08006845 	.word	0x08006845
 800673c:	08006803 	.word	0x08006803
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f9fc 	bl	8006b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0208 	orr.w	r2, r2, #8
 800675a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0204 	bic.w	r2, r2, #4
 800676a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6999      	ldr	r1, [r3, #24]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	619a      	str	r2, [r3, #24]
      break;
 800677e:	e064      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fa4c 	bl	8006c24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800679a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6999      	ldr	r1, [r3, #24]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	021a      	lsls	r2, r3, #8
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	619a      	str	r2, [r3, #24]
      break;
 80067c0:	e043      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 faa1 	bl	8006d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0208 	orr.w	r2, r2, #8
 80067dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0204 	bic.w	r2, r2, #4
 80067ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69d9      	ldr	r1, [r3, #28]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	61da      	str	r2, [r3, #28]
      break;
 8006800:	e023      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	4618      	mov	r0, r3
 800680a:	f000 faf5 	bl	8006df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800681c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800682c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69d9      	ldr	r1, [r3, #28]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	021a      	lsls	r2, r3, #8
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	61da      	str	r2, [r3, #28]
      break;
 8006842:	e002      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	75fb      	strb	r3, [r7, #23]
      break;
 8006848:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006852:	7dfb      	ldrb	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_TIM_ConfigClockSource+0x1c>
 8006874:	2302      	movs	r3, #2
 8006876:	e0b4      	b.n	80069e2 <HAL_TIM_ConfigClockSource+0x186>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800689e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b0:	d03e      	beq.n	8006930 <HAL_TIM_ConfigClockSource+0xd4>
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b6:	f200 8087 	bhi.w	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068be:	f000 8086 	beq.w	80069ce <HAL_TIM_ConfigClockSource+0x172>
 80068c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068c6:	d87f      	bhi.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b70      	cmp	r3, #112	@ 0x70
 80068ca:	d01a      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0xa6>
 80068cc:	2b70      	cmp	r3, #112	@ 0x70
 80068ce:	d87b      	bhi.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b60      	cmp	r3, #96	@ 0x60
 80068d2:	d050      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0x11a>
 80068d4:	2b60      	cmp	r3, #96	@ 0x60
 80068d6:	d877      	bhi.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b50      	cmp	r3, #80	@ 0x50
 80068da:	d03c      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0xfa>
 80068dc:	2b50      	cmp	r3, #80	@ 0x50
 80068de:	d873      	bhi.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b40      	cmp	r3, #64	@ 0x40
 80068e2:	d058      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x13a>
 80068e4:	2b40      	cmp	r3, #64	@ 0x40
 80068e6:	d86f      	bhi.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	2b30      	cmp	r3, #48	@ 0x30
 80068ea:	d064      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x15a>
 80068ec:	2b30      	cmp	r3, #48	@ 0x30
 80068ee:	d86b      	bhi.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d060      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x15a>
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d867      	bhi.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d05c      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x15a>
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d05a      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006900:	e062      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006912:	f000 fb41 	bl	8006f98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006924:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	609a      	str	r2, [r3, #8]
      break;
 800692e:	e04f      	b.n	80069d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006940:	f000 fb2a 	bl	8006f98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006952:	609a      	str	r2, [r3, #8]
      break;
 8006954:	e03c      	b.n	80069d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006962:	461a      	mov	r2, r3
 8006964:	f000 fa9e 	bl	8006ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2150      	movs	r1, #80	@ 0x50
 800696e:	4618      	mov	r0, r3
 8006970:	f000 faf7 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006974:	e02c      	b.n	80069d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006982:	461a      	mov	r2, r3
 8006984:	f000 fabd 	bl	8006f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2160      	movs	r1, #96	@ 0x60
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fae7 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006994:	e01c      	b.n	80069d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	461a      	mov	r2, r3
 80069a4:	f000 fa7e 	bl	8006ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2140      	movs	r1, #64	@ 0x40
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fad7 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 80069b4:	e00c      	b.n	80069d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4619      	mov	r1, r3
 80069c0:	4610      	mov	r0, r2
 80069c2:	f000 face 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 80069c6:	e003      	b.n	80069d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
      break;
 80069cc:	e000      	b.n	80069d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a46      	ldr	r2, [pc, #280]	@ (8006b18 <TIM_Base_SetConfig+0x12c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0a:	d00f      	beq.n	8006a2c <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a43      	ldr	r2, [pc, #268]	@ (8006b1c <TIM_Base_SetConfig+0x130>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a42      	ldr	r2, [pc, #264]	@ (8006b20 <TIM_Base_SetConfig+0x134>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <TIM_Base_SetConfig+0x40>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a41      	ldr	r2, [pc, #260]	@ (8006b24 <TIM_Base_SetConfig+0x138>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_Base_SetConfig+0x40>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a40      	ldr	r2, [pc, #256]	@ (8006b28 <TIM_Base_SetConfig+0x13c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a35      	ldr	r2, [pc, #212]	@ (8006b18 <TIM_Base_SetConfig+0x12c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d02b      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a4c:	d027      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a32      	ldr	r2, [pc, #200]	@ (8006b1c <TIM_Base_SetConfig+0x130>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d023      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a31      	ldr	r2, [pc, #196]	@ (8006b20 <TIM_Base_SetConfig+0x134>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01f      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a30      	ldr	r2, [pc, #192]	@ (8006b24 <TIM_Base_SetConfig+0x138>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01b      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2f      	ldr	r2, [pc, #188]	@ (8006b28 <TIM_Base_SetConfig+0x13c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d017      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a2e      	ldr	r2, [pc, #184]	@ (8006b2c <TIM_Base_SetConfig+0x140>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2d      	ldr	r2, [pc, #180]	@ (8006b30 <TIM_Base_SetConfig+0x144>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00f      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a2c      	ldr	r2, [pc, #176]	@ (8006b34 <TIM_Base_SetConfig+0x148>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00b      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2b      	ldr	r2, [pc, #172]	@ (8006b38 <TIM_Base_SetConfig+0x14c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d007      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a2a      	ldr	r2, [pc, #168]	@ (8006b3c <TIM_Base_SetConfig+0x150>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_Base_SetConfig+0xb2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a29      	ldr	r2, [pc, #164]	@ (8006b40 <TIM_Base_SetConfig+0x154>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d108      	bne.n	8006ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a10      	ldr	r2, [pc, #64]	@ (8006b18 <TIM_Base_SetConfig+0x12c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_Base_SetConfig+0xf8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a12      	ldr	r2, [pc, #72]	@ (8006b28 <TIM_Base_SetConfig+0x13c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d103      	bne.n	8006aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d105      	bne.n	8006b0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f023 0201 	bic.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	611a      	str	r2, [r3, #16]
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40000400 	.word	0x40000400
 8006b20:	40000800 	.word	0x40000800
 8006b24:	40000c00 	.word	0x40000c00
 8006b28:	40010400 	.word	0x40010400
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800
 8006b38:	40001800 	.word	0x40001800
 8006b3c:	40001c00 	.word	0x40001c00
 8006b40:	40002000 	.word	0x40002000

08006b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f023 0201 	bic.w	r2, r3, #1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f023 0302 	bic.w	r3, r3, #2
 8006b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a20      	ldr	r2, [pc, #128]	@ (8006c1c <TIM_OC1_SetConfig+0xd8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_OC1_SetConfig+0x64>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8006c20 <TIM_OC1_SetConfig+0xdc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d10c      	bne.n	8006bc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0308 	bic.w	r3, r3, #8
 8006bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <TIM_OC1_SetConfig+0xd8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d003      	beq.n	8006bd2 <TIM_OC1_SetConfig+0x8e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a14      	ldr	r2, [pc, #80]	@ (8006c20 <TIM_OC1_SetConfig+0xdc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d111      	bne.n	8006bf6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40010000 	.word	0x40010000
 8006c20:	40010400 	.word	0x40010400

08006c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f023 0210 	bic.w	r2, r3, #16
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0320 	bic.w	r3, r3, #32
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a22      	ldr	r2, [pc, #136]	@ (8006d08 <TIM_OC2_SetConfig+0xe4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_OC2_SetConfig+0x68>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a21      	ldr	r2, [pc, #132]	@ (8006d0c <TIM_OC2_SetConfig+0xe8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d10d      	bne.n	8006ca8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a17      	ldr	r2, [pc, #92]	@ (8006d08 <TIM_OC2_SetConfig+0xe4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_OC2_SetConfig+0x94>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a16      	ldr	r2, [pc, #88]	@ (8006d0c <TIM_OC2_SetConfig+0xe8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d113      	bne.n	8006ce0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40010000 	.word	0x40010000
 8006d0c:	40010400 	.word	0x40010400

08006d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a21      	ldr	r2, [pc, #132]	@ (8006df0 <TIM_OC3_SetConfig+0xe0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_OC3_SetConfig+0x66>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a20      	ldr	r2, [pc, #128]	@ (8006df4 <TIM_OC3_SetConfig+0xe4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d10d      	bne.n	8006d92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a16      	ldr	r2, [pc, #88]	@ (8006df0 <TIM_OC3_SetConfig+0xe0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d003      	beq.n	8006da2 <TIM_OC3_SetConfig+0x92>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <TIM_OC3_SetConfig+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d113      	bne.n	8006dca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	621a      	str	r2, [r3, #32]
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40010400 	.word	0x40010400

08006df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a12      	ldr	r2, [pc, #72]	@ (8006e9c <TIM_OC4_SetConfig+0xa4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC4_SetConfig+0x68>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a11      	ldr	r2, [pc, #68]	@ (8006ea0 <TIM_OC4_SetConfig+0xa8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d109      	bne.n	8006e74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	019b      	lsls	r3, r3, #6
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40010400 	.word	0x40010400

08006ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f023 0201 	bic.w	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f023 030a 	bic.w	r3, r3, #10
 8006ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b087      	sub	sp, #28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f023 0210 	bic.w	r2, r3, #16
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	031b      	lsls	r3, r3, #12
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f043 0307 	orr.w	r3, r3, #7
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	609a      	str	r2, [r3, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e05a      	b.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a21      	ldr	r2, [pc, #132]	@ (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d022      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703c:	d01d      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1d      	ldr	r2, [pc, #116]	@ (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d018      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1b      	ldr	r2, [pc, #108]	@ (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1a      	ldr	r2, [pc, #104]	@ (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00e      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a18      	ldr	r2, [pc, #96]	@ (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d009      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a17      	ldr	r2, [pc, #92]	@ (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d004      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a15      	ldr	r2, [pc, #84]	@ (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d10c      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4313      	orrs	r3, r2
 800708a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40010000 	.word	0x40010000
 80070b8:	40000400 	.word	0x40000400
 80070bc:	40000800 	.word	0x40000800
 80070c0:	40000c00 	.word	0x40000c00
 80070c4:	40010400 	.word	0x40010400
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40001800 	.word	0x40001800

080070d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e03d      	b.n	8007168 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e042      	b.n	800720c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d106      	bne.n	80071a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fc fc80 	bl	8003aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2224      	movs	r2, #36	@ 0x24
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fdbd 	bl	8007d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	695a      	ldr	r2, [r3, #20]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	@ 0x28
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	4613      	mov	r3, r2
 8007222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b20      	cmp	r3, #32
 8007232:	d175      	bne.n	8007320 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_UART_Transmit+0x2c>
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e06e      	b.n	8007322 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2221      	movs	r2, #33	@ 0x21
 800724e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007252:	f7fd fb37 	bl	80048c4 <HAL_GetTick>
 8007256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800726c:	d108      	bne.n	8007280 <HAL_UART_Transmit+0x6c>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d104      	bne.n	8007280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e003      	b.n	8007288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007288:	e02e      	b.n	80072e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2200      	movs	r2, #0
 8007292:	2180      	movs	r1, #128	@ 0x80
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fb1f 	bl	80078d8 <UART_WaitOnFlagUntilTimeout>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e03a      	b.n	8007322 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	3302      	adds	r3, #2
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	e007      	b.n	80072da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1cb      	bne.n	800728a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2140      	movs	r1, #64	@ 0x40
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 faeb 	bl	80078d8 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e006      	b.n	8007322 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e000      	b.n	8007322 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	4613      	mov	r3, r2
 8007336:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b20      	cmp	r3, #32
 8007342:	d112      	bne.n	800736a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_UART_Receive_IT+0x26>
 800734a:	88fb      	ldrh	r3, [r7, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e00b      	b.n	800736c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	461a      	mov	r2, r3
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fb12 	bl	800798a <UART_Start_Receive_IT>
 8007366:	4603      	mov	r3, r0
 8007368:	e000      	b.n	800736c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800736a:	2302      	movs	r3, #2
  }
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b0ba      	sub	sp, #232	@ 0xe8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800739a:	2300      	movs	r3, #0
 800739c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10f      	bne.n	80073da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <HAL_UART_IRQHandler+0x66>
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fbf2 	bl	8007bbc <UART_Receive_IT>
      return;
 80073d8:	e25b      	b.n	8007892 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80de 	beq.w	80075a0 <HAL_UART_IRQHandler+0x22c>
 80073e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 80d1 	beq.w	80075a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <HAL_UART_IRQHandler+0xae>
 800740a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741a:	f043 0201 	orr.w	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <HAL_UART_IRQHandler+0xd2>
 800742e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743e:	f043 0202 	orr.w	r2, r3, #2
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <HAL_UART_IRQHandler+0xf6>
 8007452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007462:	f043 0204 	orr.w	r2, r3, #4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d011      	beq.n	800749a <HAL_UART_IRQHandler+0x126>
 8007476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007492:	f043 0208 	orr.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 81f2 	beq.w	8007888 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_UART_IRQHandler+0x14e>
 80074b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fb7d 	bl	8007bbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b40      	cmp	r3, #64	@ 0x40
 80074ce:	bf0c      	ite	eq
 80074d0:	2301      	moveq	r3, #1
 80074d2:	2300      	movne	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <HAL_UART_IRQHandler+0x17a>
 80074e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d04f      	beq.n	800758e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa85 	bl	80079fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fe:	2b40      	cmp	r3, #64	@ 0x40
 8007500:	d141      	bne.n	8007586 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3314      	adds	r3, #20
 8007508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800751c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3314      	adds	r3, #20
 800752a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800752e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800753a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1d9      	bne.n	8007502 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d013      	beq.n	800757e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755a:	4a7e      	ldr	r2, [pc, #504]	@ (8007754 <HAL_UART_IRQHandler+0x3e0>)
 800755c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007562:	4618      	mov	r0, r3
 8007564:	f7fd fb5f 	bl	8004c26 <HAL_DMA_Abort_IT>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d016      	beq.n	800759c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	e00e      	b.n	800759c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f994 	bl	80078ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007584:	e00a      	b.n	800759c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f990 	bl	80078ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800758c:	e006      	b.n	800759c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f98c 	bl	80078ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800759a:	e175      	b.n	8007888 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	bf00      	nop
    return;
 800759e:	e173      	b.n	8007888 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	f040 814f 	bne.w	8007848 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ae:	f003 0310 	and.w	r3, r3, #16
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 8148 	beq.w	8007848 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 8141 	beq.w	8007848 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	60bb      	str	r3, [r7, #8]
 80075da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e6:	2b40      	cmp	r3, #64	@ 0x40
 80075e8:	f040 80b6 	bne.w	8007758 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8145 	beq.w	800788c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800760a:	429a      	cmp	r2, r3
 800760c:	f080 813e 	bcs.w	800788c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007616:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007622:	f000 8088 	beq.w	8007736 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	330c      	adds	r3, #12
 800762c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800763c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	330c      	adds	r3, #12
 800764e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007652:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800765e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800766a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1d9      	bne.n	8007626 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3314      	adds	r3, #20
 8007678:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3314      	adds	r3, #20
 8007692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007696:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800769a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800769e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e1      	bne.n	8007672 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3314      	adds	r3, #20
 80076b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3314      	adds	r3, #20
 80076ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e3      	bne.n	80076ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	330c      	adds	r3, #12
 80076fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007706:	f023 0310 	bic.w	r3, r3, #16
 800770a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	330c      	adds	r3, #12
 8007714:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007718:	65ba      	str	r2, [r7, #88]	@ 0x58
 800771a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800771e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e3      	bne.n	80076f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd fa08 	bl	8004b46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007744:	b29b      	uxth	r3, r3
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	b29b      	uxth	r3, r3
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8b7 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007752:	e09b      	b.n	800788c <HAL_UART_IRQHandler+0x518>
 8007754:	08007ac5 	.word	0x08007ac5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007760:	b29b      	uxth	r3, r3
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 808e 	beq.w	8007890 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8089 	beq.w	8007890 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	330c      	adds	r3, #12
 8007784:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800778e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007794:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80077a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e3      	bne.n	800777e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	623b      	str	r3, [r7, #32]
   return(result);
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077da:	633a      	str	r2, [r7, #48]	@ 0x30
 80077dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60fb      	str	r3, [r7, #12]
   return(result);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007820:	61fa      	str	r2, [r7, #28]
 8007822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	69b9      	ldr	r1, [r7, #24]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	617b      	str	r3, [r7, #20]
   return(result);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e3      	bne.n	80077fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800783a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f83d 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007846:	e023      	b.n	8007890 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007850:	2b00      	cmp	r3, #0
 8007852:	d009      	beq.n	8007868 <HAL_UART_IRQHandler+0x4f4>
 8007854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f943 	bl	8007aec <UART_Transmit_IT>
    return;
 8007866:	e014      	b.n	8007892 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00e      	beq.n	8007892 <HAL_UART_IRQHandler+0x51e>
 8007874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f983 	bl	8007b8c <UART_EndTransmit_IT>
    return;
 8007886:	e004      	b.n	8007892 <HAL_UART_IRQHandler+0x51e>
    return;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <HAL_UART_IRQHandler+0x51e>
      return;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <HAL_UART_IRQHandler+0x51e>
      return;
 8007890:	bf00      	nop
  }
}
 8007892:	37e8      	adds	r7, #232	@ 0xe8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	4613      	mov	r3, r2
 80078e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e8:	e03b      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078f0:	d037      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f2:	f7fc ffe7 	bl	80048c4 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d302      	bcc.n	8007908 <UART_WaitOnFlagUntilTimeout+0x30>
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e03a      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	d023      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0x8a>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b80      	cmp	r3, #128	@ 0x80
 800791e:	d020      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b40      	cmp	r3, #64	@ 0x40
 8007924:	d01d      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b08      	cmp	r3, #8
 8007932:	d116      	bne.n	8007962 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f857 	bl	80079fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2208      	movs	r2, #8
 8007954:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e00f      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d0b4      	beq.n	80078ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4613      	mov	r3, r2
 8007996:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2222      	movs	r2, #34	@ 0x22
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0201 	orr.w	r2, r2, #1
 80079de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0220 	orr.w	r2, r2, #32
 80079ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b095      	sub	sp, #84	@ 0x54
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	330c      	adds	r3, #12
 8007a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a26:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e5      	bne.n	8007a06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f023 0301 	bic.w	r3, r3, #1
 8007a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3314      	adds	r3, #20
 8007a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e5      	bne.n	8007a3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d119      	bne.n	8007aaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f023 0310 	bic.w	r3, r3, #16
 8007a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a96:	61ba      	str	r2, [r7, #24]
 8007a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6979      	ldr	r1, [r7, #20]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ab8:	bf00      	nop
 8007aba:	3754      	adds	r7, #84	@ 0x54
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff fee4 	bl	80078ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ae4:	bf00      	nop
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b21      	cmp	r3, #33	@ 0x21
 8007afe:	d13e      	bne.n	8007b7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b08:	d114      	bne.n	8007b34 <UART_Transmit_IT+0x48>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d110      	bne.n	8007b34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	1c9a      	adds	r2, r3, #2
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	621a      	str	r2, [r3, #32]
 8007b32:	e008      	b.n	8007b46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	1c59      	adds	r1, r3, #1
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6211      	str	r1, [r2, #32]
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	4619      	mov	r1, r3
 8007b54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10f      	bne.n	8007b7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e000      	b.n	8007b80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b7e:	2302      	movs	r3, #2
  }
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ba2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fe73 	bl	8007898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	@ 0x30
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b22      	cmp	r3, #34	@ 0x22
 8007bce:	f040 80ae 	bne.w	8007d2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bda:	d117      	bne.n	8007c0c <UART_Receive_IT+0x50>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d113      	bne.n	8007c0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c04:	1c9a      	adds	r2, r3, #2
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c0a:	e026      	b.n	8007c5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1e:	d007      	beq.n	8007c30 <UART_Receive_IT+0x74>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <UART_Receive_IT+0x82>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	e008      	b.n	8007c50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4619      	mov	r1, r3
 8007c68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d15d      	bne.n	8007d2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0220 	bic.w	r2, r2, #32
 8007c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695a      	ldr	r2, [r3, #20]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d135      	bne.n	8007d20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f023 0310 	bic.w	r3, r3, #16
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	330c      	adds	r3, #12
 8007cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cda:	623a      	str	r2, [r7, #32]
 8007cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69f9      	ldr	r1, [r7, #28]
 8007ce0:	6a3a      	ldr	r2, [r7, #32]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d10a      	bne.n	8007d12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff fdd1 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
 8007d1e:	e002      	b.n	8007d26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fa feed 	bl	8002b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e002      	b.n	8007d30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e000      	b.n	8007d30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d2e:	2302      	movs	r3, #2
  }
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3730      	adds	r7, #48	@ 0x30
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d3c:	b0c0      	sub	sp, #256	@ 0x100
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d54:	68d9      	ldr	r1, [r3, #12]
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	ea40 0301 	orr.w	r3, r0, r1
 8007d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d90:	f021 010c 	bic.w	r1, r1, #12
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db2:	6999      	ldr	r1, [r3, #24]
 8007db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	ea40 0301 	orr.w	r3, r0, r1
 8007dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8008004 <UART_SetConfig+0x2cc>)
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d005      	beq.n	8007dd8 <UART_SetConfig+0xa0>
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8008008 <UART_SetConfig+0x2d0>)
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d104      	bne.n	8007de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dd8:	f7fd fd82 	bl	80058e0 <HAL_RCC_GetPCLK2Freq>
 8007ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007de0:	e003      	b.n	8007dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007de2:	f7fd fd69 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8007de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df4:	f040 810c 	bne.w	8008010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	1891      	adds	r1, r2, r2
 8007e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e12:	415b      	adcs	r3, r3
 8007e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	eb12 0801 	adds.w	r8, r2, r1
 8007e20:	4629      	mov	r1, r5
 8007e22:	eb43 0901 	adc.w	r9, r3, r1
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e3a:	4690      	mov	r8, r2
 8007e3c:	4699      	mov	r9, r3
 8007e3e:	4623      	mov	r3, r4
 8007e40:	eb18 0303 	adds.w	r3, r8, r3
 8007e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e48:	462b      	mov	r3, r5
 8007e4a:	eb49 0303 	adc.w	r3, r9, r3
 8007e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e66:	460b      	mov	r3, r1
 8007e68:	18db      	adds	r3, r3, r3
 8007e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	eb42 0303 	adc.w	r3, r2, r3
 8007e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e7c:	f7f8 ff04 	bl	8000c88 <__aeabi_uldivmod>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4b61      	ldr	r3, [pc, #388]	@ (800800c <UART_SetConfig+0x2d4>)
 8007e86:	fba3 2302 	umull	r2, r3, r3, r2
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	011c      	lsls	r4, r3, #4
 8007e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	1891      	adds	r1, r2, r2
 8007ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ea8:	415b      	adcs	r3, r3
 8007eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8007ebc:	f04f 0200 	mov.w	r2, #0
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ed0:	4692      	mov	sl, r2
 8007ed2:	469b      	mov	fp, r3
 8007ed4:	4643      	mov	r3, r8
 8007ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8007eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007efc:	460b      	mov	r3, r1
 8007efe:	18db      	adds	r3, r3, r3
 8007f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f02:	4613      	mov	r3, r2
 8007f04:	eb42 0303 	adc.w	r3, r2, r3
 8007f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f12:	f7f8 feb9 	bl	8000c88 <__aeabi_uldivmod>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800800c <UART_SetConfig+0x2d4>)
 8007f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2264      	movs	r2, #100	@ 0x64
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	1acb      	subs	r3, r1, r3
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f32:	4b36      	ldr	r3, [pc, #216]	@ (800800c <UART_SetConfig+0x2d4>)
 8007f34:	fba3 2302 	umull	r2, r3, r3, r2
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f40:	441c      	add	r4, r3
 8007f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f54:	4642      	mov	r2, r8
 8007f56:	464b      	mov	r3, r9
 8007f58:	1891      	adds	r1, r2, r2
 8007f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f5c:	415b      	adcs	r3, r3
 8007f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f64:	4641      	mov	r1, r8
 8007f66:	1851      	adds	r1, r2, r1
 8007f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	414b      	adcs	r3, r1
 8007f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f7c:	4659      	mov	r1, fp
 8007f7e:	00cb      	lsls	r3, r1, #3
 8007f80:	4651      	mov	r1, sl
 8007f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f86:	4651      	mov	r1, sl
 8007f88:	00ca      	lsls	r2, r1, #3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4642      	mov	r2, r8
 8007f92:	189b      	adds	r3, r3, r2
 8007f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f98:	464b      	mov	r3, r9
 8007f9a:	460a      	mov	r2, r1
 8007f9c:	eb42 0303 	adc.w	r3, r2, r3
 8007fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007fb8:	460b      	mov	r3, r1
 8007fba:	18db      	adds	r3, r3, r3
 8007fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	eb42 0303 	adc.w	r3, r2, r3
 8007fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007fce:	f7f8 fe5b 	bl	8000c88 <__aeabi_uldivmod>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800800c <UART_SetConfig+0x2d4>)
 8007fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	2164      	movs	r1, #100	@ 0x64
 8007fe0:	fb01 f303 	mul.w	r3, r1, r3
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	3332      	adds	r3, #50	@ 0x32
 8007fea:	4a08      	ldr	r2, [pc, #32]	@ (800800c <UART_SetConfig+0x2d4>)
 8007fec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	f003 0207 	and.w	r2, r3, #7
 8007ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4422      	add	r2, r4
 8007ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008000:	e106      	b.n	8008210 <UART_SetConfig+0x4d8>
 8008002:	bf00      	nop
 8008004:	40011000 	.word	0x40011000
 8008008:	40011400 	.word	0x40011400
 800800c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008014:	2200      	movs	r2, #0
 8008016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800801a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800801e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008022:	4642      	mov	r2, r8
 8008024:	464b      	mov	r3, r9
 8008026:	1891      	adds	r1, r2, r2
 8008028:	6239      	str	r1, [r7, #32]
 800802a:	415b      	adcs	r3, r3
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24
 800802e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008032:	4641      	mov	r1, r8
 8008034:	1854      	adds	r4, r2, r1
 8008036:	4649      	mov	r1, r9
 8008038:	eb43 0501 	adc.w	r5, r3, r1
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	00eb      	lsls	r3, r5, #3
 8008046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800804a:	00e2      	lsls	r2, r4, #3
 800804c:	4614      	mov	r4, r2
 800804e:	461d      	mov	r5, r3
 8008050:	4643      	mov	r3, r8
 8008052:	18e3      	adds	r3, r4, r3
 8008054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008058:	464b      	mov	r3, r9
 800805a:	eb45 0303 	adc.w	r3, r5, r3
 800805e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800806e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800807e:	4629      	mov	r1, r5
 8008080:	008b      	lsls	r3, r1, #2
 8008082:	4621      	mov	r1, r4
 8008084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008088:	4621      	mov	r1, r4
 800808a:	008a      	lsls	r2, r1, #2
 800808c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008090:	f7f8 fdfa 	bl	8000c88 <__aeabi_uldivmod>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4b60      	ldr	r3, [pc, #384]	@ (800821c <UART_SetConfig+0x4e4>)
 800809a:	fba3 2302 	umull	r2, r3, r3, r2
 800809e:	095b      	lsrs	r3, r3, #5
 80080a0:	011c      	lsls	r4, r3, #4
 80080a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80080b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80080b4:	4642      	mov	r2, r8
 80080b6:	464b      	mov	r3, r9
 80080b8:	1891      	adds	r1, r2, r2
 80080ba:	61b9      	str	r1, [r7, #24]
 80080bc:	415b      	adcs	r3, r3
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080c4:	4641      	mov	r1, r8
 80080c6:	1851      	adds	r1, r2, r1
 80080c8:	6139      	str	r1, [r7, #16]
 80080ca:	4649      	mov	r1, r9
 80080cc:	414b      	adcs	r3, r1
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	f04f 0200 	mov.w	r2, #0
 80080d4:	f04f 0300 	mov.w	r3, #0
 80080d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080dc:	4659      	mov	r1, fp
 80080de:	00cb      	lsls	r3, r1, #3
 80080e0:	4651      	mov	r1, sl
 80080e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080e6:	4651      	mov	r1, sl
 80080e8:	00ca      	lsls	r2, r1, #3
 80080ea:	4610      	mov	r0, r2
 80080ec:	4619      	mov	r1, r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	4642      	mov	r2, r8
 80080f2:	189b      	adds	r3, r3, r2
 80080f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080f8:	464b      	mov	r3, r9
 80080fa:	460a      	mov	r2, r1
 80080fc:	eb42 0303 	adc.w	r3, r2, r3
 8008100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800810e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800811c:	4649      	mov	r1, r9
 800811e:	008b      	lsls	r3, r1, #2
 8008120:	4641      	mov	r1, r8
 8008122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008126:	4641      	mov	r1, r8
 8008128:	008a      	lsls	r2, r1, #2
 800812a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800812e:	f7f8 fdab 	bl	8000c88 <__aeabi_uldivmod>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4611      	mov	r1, r2
 8008138:	4b38      	ldr	r3, [pc, #224]	@ (800821c <UART_SetConfig+0x4e4>)
 800813a:	fba3 2301 	umull	r2, r3, r3, r1
 800813e:	095b      	lsrs	r3, r3, #5
 8008140:	2264      	movs	r2, #100	@ 0x64
 8008142:	fb02 f303 	mul.w	r3, r2, r3
 8008146:	1acb      	subs	r3, r1, r3
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	3332      	adds	r3, #50	@ 0x32
 800814c:	4a33      	ldr	r2, [pc, #204]	@ (800821c <UART_SetConfig+0x4e4>)
 800814e:	fba2 2303 	umull	r2, r3, r2, r3
 8008152:	095b      	lsrs	r3, r3, #5
 8008154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008158:	441c      	add	r4, r3
 800815a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800815e:	2200      	movs	r2, #0
 8008160:	673b      	str	r3, [r7, #112]	@ 0x70
 8008162:	677a      	str	r2, [r7, #116]	@ 0x74
 8008164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	1891      	adds	r1, r2, r2
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	415b      	adcs	r3, r3
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008178:	4641      	mov	r1, r8
 800817a:	1851      	adds	r1, r2, r1
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	4649      	mov	r1, r9
 8008180:	414b      	adcs	r3, r1
 8008182:	607b      	str	r3, [r7, #4]
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008190:	4659      	mov	r1, fp
 8008192:	00cb      	lsls	r3, r1, #3
 8008194:	4651      	mov	r1, sl
 8008196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800819a:	4651      	mov	r1, sl
 800819c:	00ca      	lsls	r2, r1, #3
 800819e:	4610      	mov	r0, r2
 80081a0:	4619      	mov	r1, r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	4642      	mov	r2, r8
 80081a6:	189b      	adds	r3, r3, r2
 80081a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081aa:	464b      	mov	r3, r9
 80081ac:	460a      	mov	r2, r1
 80081ae:	eb42 0303 	adc.w	r3, r2, r3
 80081b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80081be:	667a      	str	r2, [r7, #100]	@ 0x64
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80081cc:	4649      	mov	r1, r9
 80081ce:	008b      	lsls	r3, r1, #2
 80081d0:	4641      	mov	r1, r8
 80081d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d6:	4641      	mov	r1, r8
 80081d8:	008a      	lsls	r2, r1, #2
 80081da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80081de:	f7f8 fd53 	bl	8000c88 <__aeabi_uldivmod>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4b0d      	ldr	r3, [pc, #52]	@ (800821c <UART_SetConfig+0x4e4>)
 80081e8:	fba3 1302 	umull	r1, r3, r3, r2
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	2164      	movs	r1, #100	@ 0x64
 80081f0:	fb01 f303 	mul.w	r3, r1, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	3332      	adds	r3, #50	@ 0x32
 80081fa:	4a08      	ldr	r2, [pc, #32]	@ (800821c <UART_SetConfig+0x4e4>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	f003 020f 	and.w	r2, r3, #15
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4422      	add	r2, r4
 800820e:	609a      	str	r2, [r3, #8]
}
 8008210:	bf00      	nop
 8008212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008216:	46bd      	mov	sp, r7
 8008218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800821c:	51eb851f 	.word	0x51eb851f

08008220 <_strtol_l.constprop.0>:
 8008220:	2b24      	cmp	r3, #36	@ 0x24
 8008222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008226:	4686      	mov	lr, r0
 8008228:	4690      	mov	r8, r2
 800822a:	d801      	bhi.n	8008230 <_strtol_l.constprop.0+0x10>
 800822c:	2b01      	cmp	r3, #1
 800822e:	d106      	bne.n	800823e <_strtol_l.constprop.0+0x1e>
 8008230:	f001 f856 	bl	80092e0 <__errno>
 8008234:	2316      	movs	r3, #22
 8008236:	6003      	str	r3, [r0, #0]
 8008238:	2000      	movs	r0, #0
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	4834      	ldr	r0, [pc, #208]	@ (8008310 <_strtol_l.constprop.0+0xf0>)
 8008240:	460d      	mov	r5, r1
 8008242:	462a      	mov	r2, r5
 8008244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008248:	5d06      	ldrb	r6, [r0, r4]
 800824a:	f016 0608 	ands.w	r6, r6, #8
 800824e:	d1f8      	bne.n	8008242 <_strtol_l.constprop.0+0x22>
 8008250:	2c2d      	cmp	r4, #45	@ 0x2d
 8008252:	d12d      	bne.n	80082b0 <_strtol_l.constprop.0+0x90>
 8008254:	782c      	ldrb	r4, [r5, #0]
 8008256:	2601      	movs	r6, #1
 8008258:	1c95      	adds	r5, r2, #2
 800825a:	f033 0210 	bics.w	r2, r3, #16
 800825e:	d109      	bne.n	8008274 <_strtol_l.constprop.0+0x54>
 8008260:	2c30      	cmp	r4, #48	@ 0x30
 8008262:	d12a      	bne.n	80082ba <_strtol_l.constprop.0+0x9a>
 8008264:	782a      	ldrb	r2, [r5, #0]
 8008266:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800826a:	2a58      	cmp	r2, #88	@ 0x58
 800826c:	d125      	bne.n	80082ba <_strtol_l.constprop.0+0x9a>
 800826e:	786c      	ldrb	r4, [r5, #1]
 8008270:	2310      	movs	r3, #16
 8008272:	3502      	adds	r5, #2
 8008274:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008278:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800827c:	2200      	movs	r2, #0
 800827e:	fbbc f9f3 	udiv	r9, ip, r3
 8008282:	4610      	mov	r0, r2
 8008284:	fb03 ca19 	mls	sl, r3, r9, ip
 8008288:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800828c:	2f09      	cmp	r7, #9
 800828e:	d81b      	bhi.n	80082c8 <_strtol_l.constprop.0+0xa8>
 8008290:	463c      	mov	r4, r7
 8008292:	42a3      	cmp	r3, r4
 8008294:	dd27      	ble.n	80082e6 <_strtol_l.constprop.0+0xc6>
 8008296:	1c57      	adds	r7, r2, #1
 8008298:	d007      	beq.n	80082aa <_strtol_l.constprop.0+0x8a>
 800829a:	4581      	cmp	r9, r0
 800829c:	d320      	bcc.n	80082e0 <_strtol_l.constprop.0+0xc0>
 800829e:	d101      	bne.n	80082a4 <_strtol_l.constprop.0+0x84>
 80082a0:	45a2      	cmp	sl, r4
 80082a2:	db1d      	blt.n	80082e0 <_strtol_l.constprop.0+0xc0>
 80082a4:	fb00 4003 	mla	r0, r0, r3, r4
 80082a8:	2201      	movs	r2, #1
 80082aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082ae:	e7eb      	b.n	8008288 <_strtol_l.constprop.0+0x68>
 80082b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80082b2:	bf04      	itt	eq
 80082b4:	782c      	ldrbeq	r4, [r5, #0]
 80082b6:	1c95      	addeq	r5, r2, #2
 80082b8:	e7cf      	b.n	800825a <_strtol_l.constprop.0+0x3a>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1da      	bne.n	8008274 <_strtol_l.constprop.0+0x54>
 80082be:	2c30      	cmp	r4, #48	@ 0x30
 80082c0:	bf0c      	ite	eq
 80082c2:	2308      	moveq	r3, #8
 80082c4:	230a      	movne	r3, #10
 80082c6:	e7d5      	b.n	8008274 <_strtol_l.constprop.0+0x54>
 80082c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80082cc:	2f19      	cmp	r7, #25
 80082ce:	d801      	bhi.n	80082d4 <_strtol_l.constprop.0+0xb4>
 80082d0:	3c37      	subs	r4, #55	@ 0x37
 80082d2:	e7de      	b.n	8008292 <_strtol_l.constprop.0+0x72>
 80082d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80082d8:	2f19      	cmp	r7, #25
 80082da:	d804      	bhi.n	80082e6 <_strtol_l.constprop.0+0xc6>
 80082dc:	3c57      	subs	r4, #87	@ 0x57
 80082de:	e7d8      	b.n	8008292 <_strtol_l.constprop.0+0x72>
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082e4:	e7e1      	b.n	80082aa <_strtol_l.constprop.0+0x8a>
 80082e6:	1c53      	adds	r3, r2, #1
 80082e8:	d108      	bne.n	80082fc <_strtol_l.constprop.0+0xdc>
 80082ea:	2322      	movs	r3, #34	@ 0x22
 80082ec:	f8ce 3000 	str.w	r3, [lr]
 80082f0:	4660      	mov	r0, ip
 80082f2:	f1b8 0f00 	cmp.w	r8, #0
 80082f6:	d0a0      	beq.n	800823a <_strtol_l.constprop.0+0x1a>
 80082f8:	1e69      	subs	r1, r5, #1
 80082fa:	e006      	b.n	800830a <_strtol_l.constprop.0+0xea>
 80082fc:	b106      	cbz	r6, 8008300 <_strtol_l.constprop.0+0xe0>
 80082fe:	4240      	negs	r0, r0
 8008300:	f1b8 0f00 	cmp.w	r8, #0
 8008304:	d099      	beq.n	800823a <_strtol_l.constprop.0+0x1a>
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1f6      	bne.n	80082f8 <_strtol_l.constprop.0+0xd8>
 800830a:	f8c8 1000 	str.w	r1, [r8]
 800830e:	e794      	b.n	800823a <_strtol_l.constprop.0+0x1a>
 8008310:	0800ca9d 	.word	0x0800ca9d

08008314 <_strtol_r>:
 8008314:	f7ff bf84 	b.w	8008220 <_strtol_l.constprop.0>

08008318 <__cvt>:
 8008318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	ec57 6b10 	vmov	r6, r7, d0
 8008320:	2f00      	cmp	r7, #0
 8008322:	460c      	mov	r4, r1
 8008324:	4619      	mov	r1, r3
 8008326:	463b      	mov	r3, r7
 8008328:	bfbb      	ittet	lt
 800832a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800832e:	461f      	movlt	r7, r3
 8008330:	2300      	movge	r3, #0
 8008332:	232d      	movlt	r3, #45	@ 0x2d
 8008334:	700b      	strb	r3, [r1, #0]
 8008336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008338:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800833c:	4691      	mov	r9, r2
 800833e:	f023 0820 	bic.w	r8, r3, #32
 8008342:	bfbc      	itt	lt
 8008344:	4632      	movlt	r2, r6
 8008346:	4616      	movlt	r6, r2
 8008348:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800834c:	d005      	beq.n	800835a <__cvt+0x42>
 800834e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008352:	d100      	bne.n	8008356 <__cvt+0x3e>
 8008354:	3401      	adds	r4, #1
 8008356:	2102      	movs	r1, #2
 8008358:	e000      	b.n	800835c <__cvt+0x44>
 800835a:	2103      	movs	r1, #3
 800835c:	ab03      	add	r3, sp, #12
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	ab02      	add	r3, sp, #8
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	ec47 6b10 	vmov	d0, r6, r7
 8008368:	4653      	mov	r3, sl
 800836a:	4622      	mov	r2, r4
 800836c:	f001 f894 	bl	8009498 <_dtoa_r>
 8008370:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008374:	4605      	mov	r5, r0
 8008376:	d119      	bne.n	80083ac <__cvt+0x94>
 8008378:	f019 0f01 	tst.w	r9, #1
 800837c:	d00e      	beq.n	800839c <__cvt+0x84>
 800837e:	eb00 0904 	add.w	r9, r0, r4
 8008382:	2200      	movs	r2, #0
 8008384:	2300      	movs	r3, #0
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f8 fb9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800838e:	b108      	cbz	r0, 8008394 <__cvt+0x7c>
 8008390:	f8cd 900c 	str.w	r9, [sp, #12]
 8008394:	2230      	movs	r2, #48	@ 0x30
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	454b      	cmp	r3, r9
 800839a:	d31e      	bcc.n	80083da <__cvt+0xc2>
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083a0:	1b5b      	subs	r3, r3, r5
 80083a2:	4628      	mov	r0, r5
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	b004      	add	sp, #16
 80083a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083b0:	eb00 0904 	add.w	r9, r0, r4
 80083b4:	d1e5      	bne.n	8008382 <__cvt+0x6a>
 80083b6:	7803      	ldrb	r3, [r0, #0]
 80083b8:	2b30      	cmp	r3, #48	@ 0x30
 80083ba:	d10a      	bne.n	80083d2 <__cvt+0xba>
 80083bc:	2200      	movs	r2, #0
 80083be:	2300      	movs	r3, #0
 80083c0:	4630      	mov	r0, r6
 80083c2:	4639      	mov	r1, r7
 80083c4:	f7f8 fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c8:	b918      	cbnz	r0, 80083d2 <__cvt+0xba>
 80083ca:	f1c4 0401 	rsb	r4, r4, #1
 80083ce:	f8ca 4000 	str.w	r4, [sl]
 80083d2:	f8da 3000 	ldr.w	r3, [sl]
 80083d6:	4499      	add	r9, r3
 80083d8:	e7d3      	b.n	8008382 <__cvt+0x6a>
 80083da:	1c59      	adds	r1, r3, #1
 80083dc:	9103      	str	r1, [sp, #12]
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e7d9      	b.n	8008396 <__cvt+0x7e>

080083e2 <__exponent>:
 80083e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083e4:	2900      	cmp	r1, #0
 80083e6:	bfba      	itte	lt
 80083e8:	4249      	neglt	r1, r1
 80083ea:	232d      	movlt	r3, #45	@ 0x2d
 80083ec:	232b      	movge	r3, #43	@ 0x2b
 80083ee:	2909      	cmp	r1, #9
 80083f0:	7002      	strb	r2, [r0, #0]
 80083f2:	7043      	strb	r3, [r0, #1]
 80083f4:	dd29      	ble.n	800844a <__exponent+0x68>
 80083f6:	f10d 0307 	add.w	r3, sp, #7
 80083fa:	461d      	mov	r5, r3
 80083fc:	270a      	movs	r7, #10
 80083fe:	461a      	mov	r2, r3
 8008400:	fbb1 f6f7 	udiv	r6, r1, r7
 8008404:	fb07 1416 	mls	r4, r7, r6, r1
 8008408:	3430      	adds	r4, #48	@ 0x30
 800840a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800840e:	460c      	mov	r4, r1
 8008410:	2c63      	cmp	r4, #99	@ 0x63
 8008412:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008416:	4631      	mov	r1, r6
 8008418:	dcf1      	bgt.n	80083fe <__exponent+0x1c>
 800841a:	3130      	adds	r1, #48	@ 0x30
 800841c:	1e94      	subs	r4, r2, #2
 800841e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008422:	1c41      	adds	r1, r0, #1
 8008424:	4623      	mov	r3, r4
 8008426:	42ab      	cmp	r3, r5
 8008428:	d30a      	bcc.n	8008440 <__exponent+0x5e>
 800842a:	f10d 0309 	add.w	r3, sp, #9
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ac      	cmp	r4, r5
 8008432:	bf88      	it	hi
 8008434:	2300      	movhi	r3, #0
 8008436:	3302      	adds	r3, #2
 8008438:	4403      	add	r3, r0
 800843a:	1a18      	subs	r0, r3, r0
 800843c:	b003      	add	sp, #12
 800843e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008440:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008444:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008448:	e7ed      	b.n	8008426 <__exponent+0x44>
 800844a:	2330      	movs	r3, #48	@ 0x30
 800844c:	3130      	adds	r1, #48	@ 0x30
 800844e:	7083      	strb	r3, [r0, #2]
 8008450:	70c1      	strb	r1, [r0, #3]
 8008452:	1d03      	adds	r3, r0, #4
 8008454:	e7f1      	b.n	800843a <__exponent+0x58>
	...

08008458 <_printf_float>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	b08d      	sub	sp, #52	@ 0x34
 800845e:	460c      	mov	r4, r1
 8008460:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008464:	4616      	mov	r6, r2
 8008466:	461f      	mov	r7, r3
 8008468:	4605      	mov	r5, r0
 800846a:	f000 feef 	bl	800924c <_localeconv_r>
 800846e:	6803      	ldr	r3, [r0, #0]
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	4618      	mov	r0, r3
 8008474:	f7f7 fefc 	bl	8000270 <strlen>
 8008478:	2300      	movs	r3, #0
 800847a:	930a      	str	r3, [sp, #40]	@ 0x28
 800847c:	f8d8 3000 	ldr.w	r3, [r8]
 8008480:	9005      	str	r0, [sp, #20]
 8008482:	3307      	adds	r3, #7
 8008484:	f023 0307 	bic.w	r3, r3, #7
 8008488:	f103 0208 	add.w	r2, r3, #8
 800848c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008490:	f8d4 b000 	ldr.w	fp, [r4]
 8008494:	f8c8 2000 	str.w	r2, [r8]
 8008498:	e9d3 8900 	ldrd	r8, r9, [r3]
 800849c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084a0:	9307      	str	r3, [sp, #28]
 80084a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80084a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80084aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ae:	4b9c      	ldr	r3, [pc, #624]	@ (8008720 <_printf_float+0x2c8>)
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084b4:	f7f8 fb3a 	bl	8000b2c <__aeabi_dcmpun>
 80084b8:	bb70      	cbnz	r0, 8008518 <_printf_float+0xc0>
 80084ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084be:	4b98      	ldr	r3, [pc, #608]	@ (8008720 <_printf_float+0x2c8>)
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084c4:	f7f8 fb14 	bl	8000af0 <__aeabi_dcmple>
 80084c8:	bb30      	cbnz	r0, 8008518 <_printf_float+0xc0>
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4640      	mov	r0, r8
 80084d0:	4649      	mov	r1, r9
 80084d2:	f7f8 fb03 	bl	8000adc <__aeabi_dcmplt>
 80084d6:	b110      	cbz	r0, 80084de <_printf_float+0x86>
 80084d8:	232d      	movs	r3, #45	@ 0x2d
 80084da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084de:	4a91      	ldr	r2, [pc, #580]	@ (8008724 <_printf_float+0x2cc>)
 80084e0:	4b91      	ldr	r3, [pc, #580]	@ (8008728 <_printf_float+0x2d0>)
 80084e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80084e6:	bf94      	ite	ls
 80084e8:	4690      	movls	r8, r2
 80084ea:	4698      	movhi	r8, r3
 80084ec:	2303      	movs	r3, #3
 80084ee:	6123      	str	r3, [r4, #16]
 80084f0:	f02b 0304 	bic.w	r3, fp, #4
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	f04f 0900 	mov.w	r9, #0
 80084fa:	9700      	str	r7, [sp, #0]
 80084fc:	4633      	mov	r3, r6
 80084fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f9d2 	bl	80088ac <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	f040 808d 	bne.w	8008628 <_printf_float+0x1d0>
 800850e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008512:	b00d      	add	sp, #52	@ 0x34
 8008514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	4640      	mov	r0, r8
 800851e:	4649      	mov	r1, r9
 8008520:	f7f8 fb04 	bl	8000b2c <__aeabi_dcmpun>
 8008524:	b140      	cbz	r0, 8008538 <_printf_float+0xe0>
 8008526:	464b      	mov	r3, r9
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfbc      	itt	lt
 800852c:	232d      	movlt	r3, #45	@ 0x2d
 800852e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008532:	4a7e      	ldr	r2, [pc, #504]	@ (800872c <_printf_float+0x2d4>)
 8008534:	4b7e      	ldr	r3, [pc, #504]	@ (8008730 <_printf_float+0x2d8>)
 8008536:	e7d4      	b.n	80084e2 <_printf_float+0x8a>
 8008538:	6863      	ldr	r3, [r4, #4]
 800853a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800853e:	9206      	str	r2, [sp, #24]
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	d13b      	bne.n	80085bc <_printf_float+0x164>
 8008544:	2306      	movs	r3, #6
 8008546:	6063      	str	r3, [r4, #4]
 8008548:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800854c:	2300      	movs	r3, #0
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	ab0a      	add	r3, sp, #40	@ 0x28
 8008554:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008558:	ab09      	add	r3, sp, #36	@ 0x24
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	6861      	ldr	r1, [r4, #4]
 800855e:	ec49 8b10 	vmov	d0, r8, r9
 8008562:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008566:	4628      	mov	r0, r5
 8008568:	f7ff fed6 	bl	8008318 <__cvt>
 800856c:	9b06      	ldr	r3, [sp, #24]
 800856e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008570:	2b47      	cmp	r3, #71	@ 0x47
 8008572:	4680      	mov	r8, r0
 8008574:	d129      	bne.n	80085ca <_printf_float+0x172>
 8008576:	1cc8      	adds	r0, r1, #3
 8008578:	db02      	blt.n	8008580 <_printf_float+0x128>
 800857a:	6863      	ldr	r3, [r4, #4]
 800857c:	4299      	cmp	r1, r3
 800857e:	dd41      	ble.n	8008604 <_printf_float+0x1ac>
 8008580:	f1aa 0a02 	sub.w	sl, sl, #2
 8008584:	fa5f fa8a 	uxtb.w	sl, sl
 8008588:	3901      	subs	r1, #1
 800858a:	4652      	mov	r2, sl
 800858c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008590:	9109      	str	r1, [sp, #36]	@ 0x24
 8008592:	f7ff ff26 	bl	80083e2 <__exponent>
 8008596:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008598:	1813      	adds	r3, r2, r0
 800859a:	2a01      	cmp	r2, #1
 800859c:	4681      	mov	r9, r0
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	dc02      	bgt.n	80085a8 <_printf_float+0x150>
 80085a2:	6822      	ldr	r2, [r4, #0]
 80085a4:	07d2      	lsls	r2, r2, #31
 80085a6:	d501      	bpl.n	80085ac <_printf_float+0x154>
 80085a8:	3301      	adds	r3, #1
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0a2      	beq.n	80084fa <_printf_float+0xa2>
 80085b4:	232d      	movs	r3, #45	@ 0x2d
 80085b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ba:	e79e      	b.n	80084fa <_printf_float+0xa2>
 80085bc:	9a06      	ldr	r2, [sp, #24]
 80085be:	2a47      	cmp	r2, #71	@ 0x47
 80085c0:	d1c2      	bne.n	8008548 <_printf_float+0xf0>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1c0      	bne.n	8008548 <_printf_float+0xf0>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7bd      	b.n	8008546 <_printf_float+0xee>
 80085ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085ce:	d9db      	bls.n	8008588 <_printf_float+0x130>
 80085d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085d4:	d118      	bne.n	8008608 <_printf_float+0x1b0>
 80085d6:	2900      	cmp	r1, #0
 80085d8:	6863      	ldr	r3, [r4, #4]
 80085da:	dd0b      	ble.n	80085f4 <_printf_float+0x19c>
 80085dc:	6121      	str	r1, [r4, #16]
 80085de:	b913      	cbnz	r3, 80085e6 <_printf_float+0x18e>
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	07d0      	lsls	r0, r2, #31
 80085e4:	d502      	bpl.n	80085ec <_printf_float+0x194>
 80085e6:	3301      	adds	r3, #1
 80085e8:	440b      	add	r3, r1
 80085ea:	6123      	str	r3, [r4, #16]
 80085ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80085ee:	f04f 0900 	mov.w	r9, #0
 80085f2:	e7db      	b.n	80085ac <_printf_float+0x154>
 80085f4:	b913      	cbnz	r3, 80085fc <_printf_float+0x1a4>
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	07d2      	lsls	r2, r2, #31
 80085fa:	d501      	bpl.n	8008600 <_printf_float+0x1a8>
 80085fc:	3302      	adds	r3, #2
 80085fe:	e7f4      	b.n	80085ea <_printf_float+0x192>
 8008600:	2301      	movs	r3, #1
 8008602:	e7f2      	b.n	80085ea <_printf_float+0x192>
 8008604:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860a:	4299      	cmp	r1, r3
 800860c:	db05      	blt.n	800861a <_printf_float+0x1c2>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	6121      	str	r1, [r4, #16]
 8008612:	07d8      	lsls	r0, r3, #31
 8008614:	d5ea      	bpl.n	80085ec <_printf_float+0x194>
 8008616:	1c4b      	adds	r3, r1, #1
 8008618:	e7e7      	b.n	80085ea <_printf_float+0x192>
 800861a:	2900      	cmp	r1, #0
 800861c:	bfd4      	ite	le
 800861e:	f1c1 0202 	rsble	r2, r1, #2
 8008622:	2201      	movgt	r2, #1
 8008624:	4413      	add	r3, r2
 8008626:	e7e0      	b.n	80085ea <_printf_float+0x192>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	055a      	lsls	r2, r3, #21
 800862c:	d407      	bmi.n	800863e <_printf_float+0x1e6>
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	4642      	mov	r2, r8
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	d12b      	bne.n	8008694 <_printf_float+0x23c>
 800863c:	e767      	b.n	800850e <_printf_float+0xb6>
 800863e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008642:	f240 80dd 	bls.w	8008800 <_printf_float+0x3a8>
 8008646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800864a:	2200      	movs	r2, #0
 800864c:	2300      	movs	r3, #0
 800864e:	f7f8 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008652:	2800      	cmp	r0, #0
 8008654:	d033      	beq.n	80086be <_printf_float+0x266>
 8008656:	4a37      	ldr	r2, [pc, #220]	@ (8008734 <_printf_float+0x2dc>)
 8008658:	2301      	movs	r3, #1
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	f43f af54 	beq.w	800850e <_printf_float+0xb6>
 8008666:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800866a:	4543      	cmp	r3, r8
 800866c:	db02      	blt.n	8008674 <_printf_float+0x21c>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	07d8      	lsls	r0, r3, #31
 8008672:	d50f      	bpl.n	8008694 <_printf_float+0x23c>
 8008674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	f43f af45 	beq.w	800850e <_printf_float+0xb6>
 8008684:	f04f 0900 	mov.w	r9, #0
 8008688:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800868c:	f104 0a1a 	add.w	sl, r4, #26
 8008690:	45c8      	cmp	r8, r9
 8008692:	dc09      	bgt.n	80086a8 <_printf_float+0x250>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	079b      	lsls	r3, r3, #30
 8008698:	f100 8103 	bmi.w	80088a2 <_printf_float+0x44a>
 800869c:	68e0      	ldr	r0, [r4, #12]
 800869e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086a0:	4298      	cmp	r0, r3
 80086a2:	bfb8      	it	lt
 80086a4:	4618      	movlt	r0, r3
 80086a6:	e734      	b.n	8008512 <_printf_float+0xba>
 80086a8:	2301      	movs	r3, #1
 80086aa:	4652      	mov	r2, sl
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	f43f af2b 	beq.w	800850e <_printf_float+0xb6>
 80086b8:	f109 0901 	add.w	r9, r9, #1
 80086bc:	e7e8      	b.n	8008690 <_printf_float+0x238>
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dc39      	bgt.n	8008738 <_printf_float+0x2e0>
 80086c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008734 <_printf_float+0x2dc>)
 80086c6:	2301      	movs	r3, #1
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b8      	blx	r7
 80086ce:	3001      	adds	r0, #1
 80086d0:	f43f af1d 	beq.w	800850e <_printf_float+0xb6>
 80086d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80086d8:	ea59 0303 	orrs.w	r3, r9, r3
 80086dc:	d102      	bne.n	80086e4 <_printf_float+0x28c>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	07d9      	lsls	r1, r3, #31
 80086e2:	d5d7      	bpl.n	8008694 <_printf_float+0x23c>
 80086e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086e8:	4631      	mov	r1, r6
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b8      	blx	r7
 80086ee:	3001      	adds	r0, #1
 80086f0:	f43f af0d 	beq.w	800850e <_printf_float+0xb6>
 80086f4:	f04f 0a00 	mov.w	sl, #0
 80086f8:	f104 0b1a 	add.w	fp, r4, #26
 80086fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fe:	425b      	negs	r3, r3
 8008700:	4553      	cmp	r3, sl
 8008702:	dc01      	bgt.n	8008708 <_printf_float+0x2b0>
 8008704:	464b      	mov	r3, r9
 8008706:	e793      	b.n	8008630 <_printf_float+0x1d8>
 8008708:	2301      	movs	r3, #1
 800870a:	465a      	mov	r2, fp
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f43f aefb 	beq.w	800850e <_printf_float+0xb6>
 8008718:	f10a 0a01 	add.w	sl, sl, #1
 800871c:	e7ee      	b.n	80086fc <_printf_float+0x2a4>
 800871e:	bf00      	nop
 8008720:	7fefffff 	.word	0x7fefffff
 8008724:	0800cb9d 	.word	0x0800cb9d
 8008728:	0800cba1 	.word	0x0800cba1
 800872c:	0800cba5 	.word	0x0800cba5
 8008730:	0800cba9 	.word	0x0800cba9
 8008734:	0800cbad 	.word	0x0800cbad
 8008738:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800873a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800873e:	4553      	cmp	r3, sl
 8008740:	bfa8      	it	ge
 8008742:	4653      	movge	r3, sl
 8008744:	2b00      	cmp	r3, #0
 8008746:	4699      	mov	r9, r3
 8008748:	dc36      	bgt.n	80087b8 <_printf_float+0x360>
 800874a:	f04f 0b00 	mov.w	fp, #0
 800874e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008752:	f104 021a 	add.w	r2, r4, #26
 8008756:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008758:	9306      	str	r3, [sp, #24]
 800875a:	eba3 0309 	sub.w	r3, r3, r9
 800875e:	455b      	cmp	r3, fp
 8008760:	dc31      	bgt.n	80087c6 <_printf_float+0x36e>
 8008762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008764:	459a      	cmp	sl, r3
 8008766:	dc3a      	bgt.n	80087de <_printf_float+0x386>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	07da      	lsls	r2, r3, #31
 800876c:	d437      	bmi.n	80087de <_printf_float+0x386>
 800876e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008770:	ebaa 0903 	sub.w	r9, sl, r3
 8008774:	9b06      	ldr	r3, [sp, #24]
 8008776:	ebaa 0303 	sub.w	r3, sl, r3
 800877a:	4599      	cmp	r9, r3
 800877c:	bfa8      	it	ge
 800877e:	4699      	movge	r9, r3
 8008780:	f1b9 0f00 	cmp.w	r9, #0
 8008784:	dc33      	bgt.n	80087ee <_printf_float+0x396>
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800878e:	f104 0b1a 	add.w	fp, r4, #26
 8008792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008794:	ebaa 0303 	sub.w	r3, sl, r3
 8008798:	eba3 0309 	sub.w	r3, r3, r9
 800879c:	4543      	cmp	r3, r8
 800879e:	f77f af79 	ble.w	8008694 <_printf_float+0x23c>
 80087a2:	2301      	movs	r3, #1
 80087a4:	465a      	mov	r2, fp
 80087a6:	4631      	mov	r1, r6
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b8      	blx	r7
 80087ac:	3001      	adds	r0, #1
 80087ae:	f43f aeae 	beq.w	800850e <_printf_float+0xb6>
 80087b2:	f108 0801 	add.w	r8, r8, #1
 80087b6:	e7ec      	b.n	8008792 <_printf_float+0x33a>
 80087b8:	4642      	mov	r2, r8
 80087ba:	4631      	mov	r1, r6
 80087bc:	4628      	mov	r0, r5
 80087be:	47b8      	blx	r7
 80087c0:	3001      	adds	r0, #1
 80087c2:	d1c2      	bne.n	800874a <_printf_float+0x2f2>
 80087c4:	e6a3      	b.n	800850e <_printf_float+0xb6>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	9206      	str	r2, [sp, #24]
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f ae9c 	beq.w	800850e <_printf_float+0xb6>
 80087d6:	9a06      	ldr	r2, [sp, #24]
 80087d8:	f10b 0b01 	add.w	fp, fp, #1
 80087dc:	e7bb      	b.n	8008756 <_printf_float+0x2fe>
 80087de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	d1c0      	bne.n	800876e <_printf_float+0x316>
 80087ec:	e68f      	b.n	800850e <_printf_float+0xb6>
 80087ee:	9a06      	ldr	r2, [sp, #24]
 80087f0:	464b      	mov	r3, r9
 80087f2:	4442      	add	r2, r8
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	d1c3      	bne.n	8008786 <_printf_float+0x32e>
 80087fe:	e686      	b.n	800850e <_printf_float+0xb6>
 8008800:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008804:	f1ba 0f01 	cmp.w	sl, #1
 8008808:	dc01      	bgt.n	800880e <_printf_float+0x3b6>
 800880a:	07db      	lsls	r3, r3, #31
 800880c:	d536      	bpl.n	800887c <_printf_float+0x424>
 800880e:	2301      	movs	r3, #1
 8008810:	4642      	mov	r2, r8
 8008812:	4631      	mov	r1, r6
 8008814:	4628      	mov	r0, r5
 8008816:	47b8      	blx	r7
 8008818:	3001      	adds	r0, #1
 800881a:	f43f ae78 	beq.w	800850e <_printf_float+0xb6>
 800881e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	f43f ae70 	beq.w	800850e <_printf_float+0xb6>
 800882e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800883a:	f7f8 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800883e:	b9c0      	cbnz	r0, 8008872 <_printf_float+0x41a>
 8008840:	4653      	mov	r3, sl
 8008842:	f108 0201 	add.w	r2, r8, #1
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	d10c      	bne.n	800886a <_printf_float+0x412>
 8008850:	e65d      	b.n	800850e <_printf_float+0xb6>
 8008852:	2301      	movs	r3, #1
 8008854:	465a      	mov	r2, fp
 8008856:	4631      	mov	r1, r6
 8008858:	4628      	mov	r0, r5
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	f43f ae56 	beq.w	800850e <_printf_float+0xb6>
 8008862:	f108 0801 	add.w	r8, r8, #1
 8008866:	45d0      	cmp	r8, sl
 8008868:	dbf3      	blt.n	8008852 <_printf_float+0x3fa>
 800886a:	464b      	mov	r3, r9
 800886c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008870:	e6df      	b.n	8008632 <_printf_float+0x1da>
 8008872:	f04f 0800 	mov.w	r8, #0
 8008876:	f104 0b1a 	add.w	fp, r4, #26
 800887a:	e7f4      	b.n	8008866 <_printf_float+0x40e>
 800887c:	2301      	movs	r3, #1
 800887e:	4642      	mov	r2, r8
 8008880:	e7e1      	b.n	8008846 <_printf_float+0x3ee>
 8008882:	2301      	movs	r3, #1
 8008884:	464a      	mov	r2, r9
 8008886:	4631      	mov	r1, r6
 8008888:	4628      	mov	r0, r5
 800888a:	47b8      	blx	r7
 800888c:	3001      	adds	r0, #1
 800888e:	f43f ae3e 	beq.w	800850e <_printf_float+0xb6>
 8008892:	f108 0801 	add.w	r8, r8, #1
 8008896:	68e3      	ldr	r3, [r4, #12]
 8008898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800889a:	1a5b      	subs	r3, r3, r1
 800889c:	4543      	cmp	r3, r8
 800889e:	dcf0      	bgt.n	8008882 <_printf_float+0x42a>
 80088a0:	e6fc      	b.n	800869c <_printf_float+0x244>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	f104 0919 	add.w	r9, r4, #25
 80088aa:	e7f4      	b.n	8008896 <_printf_float+0x43e>

080088ac <_printf_common>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	4616      	mov	r6, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	688a      	ldr	r2, [r1, #8]
 80088b6:	690b      	ldr	r3, [r1, #16]
 80088b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088bc:	4293      	cmp	r3, r2
 80088be:	bfb8      	it	lt
 80088c0:	4613      	movlt	r3, r2
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088c8:	4607      	mov	r7, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	b10a      	cbz	r2, 80088d2 <_printf_common+0x26>
 80088ce:	3301      	adds	r3, #1
 80088d0:	6033      	str	r3, [r6, #0]
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	0699      	lsls	r1, r3, #26
 80088d6:	bf42      	ittt	mi
 80088d8:	6833      	ldrmi	r3, [r6, #0]
 80088da:	3302      	addmi	r3, #2
 80088dc:	6033      	strmi	r3, [r6, #0]
 80088de:	6825      	ldr	r5, [r4, #0]
 80088e0:	f015 0506 	ands.w	r5, r5, #6
 80088e4:	d106      	bne.n	80088f4 <_printf_common+0x48>
 80088e6:	f104 0a19 	add.w	sl, r4, #25
 80088ea:	68e3      	ldr	r3, [r4, #12]
 80088ec:	6832      	ldr	r2, [r6, #0]
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc26      	bgt.n	8008942 <_printf_common+0x96>
 80088f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	3b00      	subs	r3, #0
 80088fc:	bf18      	it	ne
 80088fe:	2301      	movne	r3, #1
 8008900:	0692      	lsls	r2, r2, #26
 8008902:	d42b      	bmi.n	800895c <_printf_common+0xb0>
 8008904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008908:	4641      	mov	r1, r8
 800890a:	4638      	mov	r0, r7
 800890c:	47c8      	blx	r9
 800890e:	3001      	adds	r0, #1
 8008910:	d01e      	beq.n	8008950 <_printf_common+0xa4>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	6922      	ldr	r2, [r4, #16]
 8008916:	f003 0306 	and.w	r3, r3, #6
 800891a:	2b04      	cmp	r3, #4
 800891c:	bf02      	ittt	eq
 800891e:	68e5      	ldreq	r5, [r4, #12]
 8008920:	6833      	ldreq	r3, [r6, #0]
 8008922:	1aed      	subeq	r5, r5, r3
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	bf0c      	ite	eq
 8008928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800892c:	2500      	movne	r5, #0
 800892e:	4293      	cmp	r3, r2
 8008930:	bfc4      	itt	gt
 8008932:	1a9b      	subgt	r3, r3, r2
 8008934:	18ed      	addgt	r5, r5, r3
 8008936:	2600      	movs	r6, #0
 8008938:	341a      	adds	r4, #26
 800893a:	42b5      	cmp	r5, r6
 800893c:	d11a      	bne.n	8008974 <_printf_common+0xc8>
 800893e:	2000      	movs	r0, #0
 8008940:	e008      	b.n	8008954 <_printf_common+0xa8>
 8008942:	2301      	movs	r3, #1
 8008944:	4652      	mov	r2, sl
 8008946:	4641      	mov	r1, r8
 8008948:	4638      	mov	r0, r7
 800894a:	47c8      	blx	r9
 800894c:	3001      	adds	r0, #1
 800894e:	d103      	bne.n	8008958 <_printf_common+0xac>
 8008950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008958:	3501      	adds	r5, #1
 800895a:	e7c6      	b.n	80088ea <_printf_common+0x3e>
 800895c:	18e1      	adds	r1, r4, r3
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	2030      	movs	r0, #48	@ 0x30
 8008962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008966:	4422      	add	r2, r4
 8008968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800896c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008970:	3302      	adds	r3, #2
 8008972:	e7c7      	b.n	8008904 <_printf_common+0x58>
 8008974:	2301      	movs	r3, #1
 8008976:	4622      	mov	r2, r4
 8008978:	4641      	mov	r1, r8
 800897a:	4638      	mov	r0, r7
 800897c:	47c8      	blx	r9
 800897e:	3001      	adds	r0, #1
 8008980:	d0e6      	beq.n	8008950 <_printf_common+0xa4>
 8008982:	3601      	adds	r6, #1
 8008984:	e7d9      	b.n	800893a <_printf_common+0x8e>
	...

08008988 <_printf_i>:
 8008988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	7e0f      	ldrb	r7, [r1, #24]
 800898e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008990:	2f78      	cmp	r7, #120	@ 0x78
 8008992:	4691      	mov	r9, r2
 8008994:	4680      	mov	r8, r0
 8008996:	460c      	mov	r4, r1
 8008998:	469a      	mov	sl, r3
 800899a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800899e:	d807      	bhi.n	80089b0 <_printf_i+0x28>
 80089a0:	2f62      	cmp	r7, #98	@ 0x62
 80089a2:	d80a      	bhi.n	80089ba <_printf_i+0x32>
 80089a4:	2f00      	cmp	r7, #0
 80089a6:	f000 80d2 	beq.w	8008b4e <_printf_i+0x1c6>
 80089aa:	2f58      	cmp	r7, #88	@ 0x58
 80089ac:	f000 80b9 	beq.w	8008b22 <_printf_i+0x19a>
 80089b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089b8:	e03a      	b.n	8008a30 <_printf_i+0xa8>
 80089ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089be:	2b15      	cmp	r3, #21
 80089c0:	d8f6      	bhi.n	80089b0 <_printf_i+0x28>
 80089c2:	a101      	add	r1, pc, #4	@ (adr r1, 80089c8 <_printf_i+0x40>)
 80089c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c8:	08008a21 	.word	0x08008a21
 80089cc:	08008a35 	.word	0x08008a35
 80089d0:	080089b1 	.word	0x080089b1
 80089d4:	080089b1 	.word	0x080089b1
 80089d8:	080089b1 	.word	0x080089b1
 80089dc:	080089b1 	.word	0x080089b1
 80089e0:	08008a35 	.word	0x08008a35
 80089e4:	080089b1 	.word	0x080089b1
 80089e8:	080089b1 	.word	0x080089b1
 80089ec:	080089b1 	.word	0x080089b1
 80089f0:	080089b1 	.word	0x080089b1
 80089f4:	08008b35 	.word	0x08008b35
 80089f8:	08008a5f 	.word	0x08008a5f
 80089fc:	08008aef 	.word	0x08008aef
 8008a00:	080089b1 	.word	0x080089b1
 8008a04:	080089b1 	.word	0x080089b1
 8008a08:	08008b57 	.word	0x08008b57
 8008a0c:	080089b1 	.word	0x080089b1
 8008a10:	08008a5f 	.word	0x08008a5f
 8008a14:	080089b1 	.word	0x080089b1
 8008a18:	080089b1 	.word	0x080089b1
 8008a1c:	08008af7 	.word	0x08008af7
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	1d1a      	adds	r2, r3, #4
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6032      	str	r2, [r6, #0]
 8008a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a30:	2301      	movs	r3, #1
 8008a32:	e09d      	b.n	8008b70 <_printf_i+0x1e8>
 8008a34:	6833      	ldr	r3, [r6, #0]
 8008a36:	6820      	ldr	r0, [r4, #0]
 8008a38:	1d19      	adds	r1, r3, #4
 8008a3a:	6031      	str	r1, [r6, #0]
 8008a3c:	0606      	lsls	r6, r0, #24
 8008a3e:	d501      	bpl.n	8008a44 <_printf_i+0xbc>
 8008a40:	681d      	ldr	r5, [r3, #0]
 8008a42:	e003      	b.n	8008a4c <_printf_i+0xc4>
 8008a44:	0645      	lsls	r5, r0, #25
 8008a46:	d5fb      	bpl.n	8008a40 <_printf_i+0xb8>
 8008a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a4c:	2d00      	cmp	r5, #0
 8008a4e:	da03      	bge.n	8008a58 <_printf_i+0xd0>
 8008a50:	232d      	movs	r3, #45	@ 0x2d
 8008a52:	426d      	negs	r5, r5
 8008a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a58:	4859      	ldr	r0, [pc, #356]	@ (8008bc0 <_printf_i+0x238>)
 8008a5a:	230a      	movs	r3, #10
 8008a5c:	e011      	b.n	8008a82 <_printf_i+0xfa>
 8008a5e:	6821      	ldr	r1, [r4, #0]
 8008a60:	6833      	ldr	r3, [r6, #0]
 8008a62:	0608      	lsls	r0, r1, #24
 8008a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a68:	d402      	bmi.n	8008a70 <_printf_i+0xe8>
 8008a6a:	0649      	lsls	r1, r1, #25
 8008a6c:	bf48      	it	mi
 8008a6e:	b2ad      	uxthmi	r5, r5
 8008a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a72:	4853      	ldr	r0, [pc, #332]	@ (8008bc0 <_printf_i+0x238>)
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	bf14      	ite	ne
 8008a78:	230a      	movne	r3, #10
 8008a7a:	2308      	moveq	r3, #8
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a82:	6866      	ldr	r6, [r4, #4]
 8008a84:	60a6      	str	r6, [r4, #8]
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	bfa2      	ittt	ge
 8008a8a:	6821      	ldrge	r1, [r4, #0]
 8008a8c:	f021 0104 	bicge.w	r1, r1, #4
 8008a90:	6021      	strge	r1, [r4, #0]
 8008a92:	b90d      	cbnz	r5, 8008a98 <_printf_i+0x110>
 8008a94:	2e00      	cmp	r6, #0
 8008a96:	d04b      	beq.n	8008b30 <_printf_i+0x1a8>
 8008a98:	4616      	mov	r6, r2
 8008a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8008aa2:	5dc7      	ldrb	r7, [r0, r7]
 8008aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008aa8:	462f      	mov	r7, r5
 8008aaa:	42bb      	cmp	r3, r7
 8008aac:	460d      	mov	r5, r1
 8008aae:	d9f4      	bls.n	8008a9a <_printf_i+0x112>
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d10b      	bne.n	8008acc <_printf_i+0x144>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07df      	lsls	r7, r3, #31
 8008ab8:	d508      	bpl.n	8008acc <_printf_i+0x144>
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	6861      	ldr	r1, [r4, #4]
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	bfde      	ittt	le
 8008ac2:	2330      	movle	r3, #48	@ 0x30
 8008ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ac8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008acc:	1b92      	subs	r2, r2, r6
 8008ace:	6122      	str	r2, [r4, #16]
 8008ad0:	f8cd a000 	str.w	sl, [sp]
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	aa03      	add	r2, sp, #12
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4640      	mov	r0, r8
 8008adc:	f7ff fee6 	bl	80088ac <_printf_common>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d14a      	bne.n	8008b7a <_printf_i+0x1f2>
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ae8:	b004      	add	sp, #16
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	f043 0320 	orr.w	r3, r3, #32
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	4833      	ldr	r0, [pc, #204]	@ (8008bc4 <_printf_i+0x23c>)
 8008af8:	2778      	movs	r7, #120	@ 0x78
 8008afa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	6831      	ldr	r1, [r6, #0]
 8008b02:	061f      	lsls	r7, r3, #24
 8008b04:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b08:	d402      	bmi.n	8008b10 <_printf_i+0x188>
 8008b0a:	065f      	lsls	r7, r3, #25
 8008b0c:	bf48      	it	mi
 8008b0e:	b2ad      	uxthmi	r5, r5
 8008b10:	6031      	str	r1, [r6, #0]
 8008b12:	07d9      	lsls	r1, r3, #31
 8008b14:	bf44      	itt	mi
 8008b16:	f043 0320 	orrmi.w	r3, r3, #32
 8008b1a:	6023      	strmi	r3, [r4, #0]
 8008b1c:	b11d      	cbz	r5, 8008b26 <_printf_i+0x19e>
 8008b1e:	2310      	movs	r3, #16
 8008b20:	e7ac      	b.n	8008a7c <_printf_i+0xf4>
 8008b22:	4827      	ldr	r0, [pc, #156]	@ (8008bc0 <_printf_i+0x238>)
 8008b24:	e7e9      	b.n	8008afa <_printf_i+0x172>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	f023 0320 	bic.w	r3, r3, #32
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	e7f6      	b.n	8008b1e <_printf_i+0x196>
 8008b30:	4616      	mov	r6, r2
 8008b32:	e7bd      	b.n	8008ab0 <_printf_i+0x128>
 8008b34:	6833      	ldr	r3, [r6, #0]
 8008b36:	6825      	ldr	r5, [r4, #0]
 8008b38:	6961      	ldr	r1, [r4, #20]
 8008b3a:	1d18      	adds	r0, r3, #4
 8008b3c:	6030      	str	r0, [r6, #0]
 8008b3e:	062e      	lsls	r6, r5, #24
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	d501      	bpl.n	8008b48 <_printf_i+0x1c0>
 8008b44:	6019      	str	r1, [r3, #0]
 8008b46:	e002      	b.n	8008b4e <_printf_i+0x1c6>
 8008b48:	0668      	lsls	r0, r5, #25
 8008b4a:	d5fb      	bpl.n	8008b44 <_printf_i+0x1bc>
 8008b4c:	8019      	strh	r1, [r3, #0]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6123      	str	r3, [r4, #16]
 8008b52:	4616      	mov	r6, r2
 8008b54:	e7bc      	b.n	8008ad0 <_printf_i+0x148>
 8008b56:	6833      	ldr	r3, [r6, #0]
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	6032      	str	r2, [r6, #0]
 8008b5c:	681e      	ldr	r6, [r3, #0]
 8008b5e:	6862      	ldr	r2, [r4, #4]
 8008b60:	2100      	movs	r1, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7f7 fb34 	bl	80001d0 <memchr>
 8008b68:	b108      	cbz	r0, 8008b6e <_printf_i+0x1e6>
 8008b6a:	1b80      	subs	r0, r0, r6
 8008b6c:	6060      	str	r0, [r4, #4]
 8008b6e:	6863      	ldr	r3, [r4, #4]
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	2300      	movs	r3, #0
 8008b74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b78:	e7aa      	b.n	8008ad0 <_printf_i+0x148>
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4640      	mov	r0, r8
 8008b82:	47d0      	blx	sl
 8008b84:	3001      	adds	r0, #1
 8008b86:	d0ad      	beq.n	8008ae4 <_printf_i+0x15c>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	079b      	lsls	r3, r3, #30
 8008b8c:	d413      	bmi.n	8008bb6 <_printf_i+0x22e>
 8008b8e:	68e0      	ldr	r0, [r4, #12]
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	4298      	cmp	r0, r3
 8008b94:	bfb8      	it	lt
 8008b96:	4618      	movlt	r0, r3
 8008b98:	e7a6      	b.n	8008ae8 <_printf_i+0x160>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	47d0      	blx	sl
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d09d      	beq.n	8008ae4 <_printf_i+0x15c>
 8008ba8:	3501      	adds	r5, #1
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	9903      	ldr	r1, [sp, #12]
 8008bae:	1a5b      	subs	r3, r3, r1
 8008bb0:	42ab      	cmp	r3, r5
 8008bb2:	dcf2      	bgt.n	8008b9a <_printf_i+0x212>
 8008bb4:	e7eb      	b.n	8008b8e <_printf_i+0x206>
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	f104 0619 	add.w	r6, r4, #25
 8008bbc:	e7f5      	b.n	8008baa <_printf_i+0x222>
 8008bbe:	bf00      	nop
 8008bc0:	0800cbaf 	.word	0x0800cbaf
 8008bc4:	0800cbc0 	.word	0x0800cbc0

08008bc8 <_scanf_float>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	b087      	sub	sp, #28
 8008bce:	4617      	mov	r7, r2
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	688b      	ldr	r3, [r1, #8]
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008bda:	bf81      	itttt	hi
 8008bdc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008be0:	eb03 0b05 	addhi.w	fp, r3, r5
 8008be4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008be8:	608b      	strhi	r3, [r1, #8]
 8008bea:	680b      	ldr	r3, [r1, #0]
 8008bec:	460a      	mov	r2, r1
 8008bee:	f04f 0500 	mov.w	r5, #0
 8008bf2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008bf6:	f842 3b1c 	str.w	r3, [r2], #28
 8008bfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008bfe:	4680      	mov	r8, r0
 8008c00:	460c      	mov	r4, r1
 8008c02:	bf98      	it	ls
 8008c04:	f04f 0b00 	movls.w	fp, #0
 8008c08:	9201      	str	r2, [sp, #4]
 8008c0a:	4616      	mov	r6, r2
 8008c0c:	46aa      	mov	sl, r5
 8008c0e:	46a9      	mov	r9, r5
 8008c10:	9502      	str	r5, [sp, #8]
 8008c12:	68a2      	ldr	r2, [r4, #8]
 8008c14:	b152      	cbz	r2, 8008c2c <_scanf_float+0x64>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b4e      	cmp	r3, #78	@ 0x4e
 8008c1c:	d864      	bhi.n	8008ce8 <_scanf_float+0x120>
 8008c1e:	2b40      	cmp	r3, #64	@ 0x40
 8008c20:	d83c      	bhi.n	8008c9c <_scanf_float+0xd4>
 8008c22:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008c26:	b2c8      	uxtb	r0, r1
 8008c28:	280e      	cmp	r0, #14
 8008c2a:	d93a      	bls.n	8008ca2 <_scanf_float+0xda>
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	d003      	beq.n	8008c3a <_scanf_float+0x72>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c3e:	f1ba 0f01 	cmp.w	sl, #1
 8008c42:	f200 8117 	bhi.w	8008e74 <_scanf_float+0x2ac>
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	429e      	cmp	r6, r3
 8008c4a:	f200 8108 	bhi.w	8008e5e <_scanf_float+0x296>
 8008c4e:	2001      	movs	r0, #1
 8008c50:	b007      	add	sp, #28
 8008c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c56:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008c5a:	2a0d      	cmp	r2, #13
 8008c5c:	d8e6      	bhi.n	8008c2c <_scanf_float+0x64>
 8008c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c64 <_scanf_float+0x9c>)
 8008c60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c64:	08008dab 	.word	0x08008dab
 8008c68:	08008c2d 	.word	0x08008c2d
 8008c6c:	08008c2d 	.word	0x08008c2d
 8008c70:	08008c2d 	.word	0x08008c2d
 8008c74:	08008e0b 	.word	0x08008e0b
 8008c78:	08008de3 	.word	0x08008de3
 8008c7c:	08008c2d 	.word	0x08008c2d
 8008c80:	08008c2d 	.word	0x08008c2d
 8008c84:	08008db9 	.word	0x08008db9
 8008c88:	08008c2d 	.word	0x08008c2d
 8008c8c:	08008c2d 	.word	0x08008c2d
 8008c90:	08008c2d 	.word	0x08008c2d
 8008c94:	08008c2d 	.word	0x08008c2d
 8008c98:	08008d71 	.word	0x08008d71
 8008c9c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008ca0:	e7db      	b.n	8008c5a <_scanf_float+0x92>
 8008ca2:	290e      	cmp	r1, #14
 8008ca4:	d8c2      	bhi.n	8008c2c <_scanf_float+0x64>
 8008ca6:	a001      	add	r0, pc, #4	@ (adr r0, 8008cac <_scanf_float+0xe4>)
 8008ca8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008cac:	08008d61 	.word	0x08008d61
 8008cb0:	08008c2d 	.word	0x08008c2d
 8008cb4:	08008d61 	.word	0x08008d61
 8008cb8:	08008df7 	.word	0x08008df7
 8008cbc:	08008c2d 	.word	0x08008c2d
 8008cc0:	08008d09 	.word	0x08008d09
 8008cc4:	08008d47 	.word	0x08008d47
 8008cc8:	08008d47 	.word	0x08008d47
 8008ccc:	08008d47 	.word	0x08008d47
 8008cd0:	08008d47 	.word	0x08008d47
 8008cd4:	08008d47 	.word	0x08008d47
 8008cd8:	08008d47 	.word	0x08008d47
 8008cdc:	08008d47 	.word	0x08008d47
 8008ce0:	08008d47 	.word	0x08008d47
 8008ce4:	08008d47 	.word	0x08008d47
 8008ce8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008cea:	d809      	bhi.n	8008d00 <_scanf_float+0x138>
 8008cec:	2b60      	cmp	r3, #96	@ 0x60
 8008cee:	d8b2      	bhi.n	8008c56 <_scanf_float+0x8e>
 8008cf0:	2b54      	cmp	r3, #84	@ 0x54
 8008cf2:	d07b      	beq.n	8008dec <_scanf_float+0x224>
 8008cf4:	2b59      	cmp	r3, #89	@ 0x59
 8008cf6:	d199      	bne.n	8008c2c <_scanf_float+0x64>
 8008cf8:	2d07      	cmp	r5, #7
 8008cfa:	d197      	bne.n	8008c2c <_scanf_float+0x64>
 8008cfc:	2508      	movs	r5, #8
 8008cfe:	e02c      	b.n	8008d5a <_scanf_float+0x192>
 8008d00:	2b74      	cmp	r3, #116	@ 0x74
 8008d02:	d073      	beq.n	8008dec <_scanf_float+0x224>
 8008d04:	2b79      	cmp	r3, #121	@ 0x79
 8008d06:	e7f6      	b.n	8008cf6 <_scanf_float+0x12e>
 8008d08:	6821      	ldr	r1, [r4, #0]
 8008d0a:	05c8      	lsls	r0, r1, #23
 8008d0c:	d51b      	bpl.n	8008d46 <_scanf_float+0x17e>
 8008d0e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008d12:	6021      	str	r1, [r4, #0]
 8008d14:	f109 0901 	add.w	r9, r9, #1
 8008d18:	f1bb 0f00 	cmp.w	fp, #0
 8008d1c:	d003      	beq.n	8008d26 <_scanf_float+0x15e>
 8008d1e:	3201      	adds	r2, #1
 8008d20:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008d24:	60a2      	str	r2, [r4, #8]
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	607b      	str	r3, [r7, #4]
 8008d3a:	f340 8087 	ble.w	8008e4c <_scanf_float+0x284>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	603b      	str	r3, [r7, #0]
 8008d44:	e765      	b.n	8008c12 <_scanf_float+0x4a>
 8008d46:	eb1a 0105 	adds.w	r1, sl, r5
 8008d4a:	f47f af6f 	bne.w	8008c2c <_scanf_float+0x64>
 8008d4e:	6822      	ldr	r2, [r4, #0]
 8008d50:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008d54:	6022      	str	r2, [r4, #0]
 8008d56:	460d      	mov	r5, r1
 8008d58:	468a      	mov	sl, r1
 8008d5a:	f806 3b01 	strb.w	r3, [r6], #1
 8008d5e:	e7e2      	b.n	8008d26 <_scanf_float+0x15e>
 8008d60:	6822      	ldr	r2, [r4, #0]
 8008d62:	0610      	lsls	r0, r2, #24
 8008d64:	f57f af62 	bpl.w	8008c2c <_scanf_float+0x64>
 8008d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d6c:	6022      	str	r2, [r4, #0]
 8008d6e:	e7f4      	b.n	8008d5a <_scanf_float+0x192>
 8008d70:	f1ba 0f00 	cmp.w	sl, #0
 8008d74:	d10e      	bne.n	8008d94 <_scanf_float+0x1cc>
 8008d76:	f1b9 0f00 	cmp.w	r9, #0
 8008d7a:	d10e      	bne.n	8008d9a <_scanf_float+0x1d2>
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d82:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d86:	d108      	bne.n	8008d9a <_scanf_float+0x1d2>
 8008d88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d8c:	6022      	str	r2, [r4, #0]
 8008d8e:	f04f 0a01 	mov.w	sl, #1
 8008d92:	e7e2      	b.n	8008d5a <_scanf_float+0x192>
 8008d94:	f1ba 0f02 	cmp.w	sl, #2
 8008d98:	d055      	beq.n	8008e46 <_scanf_float+0x27e>
 8008d9a:	2d01      	cmp	r5, #1
 8008d9c:	d002      	beq.n	8008da4 <_scanf_float+0x1dc>
 8008d9e:	2d04      	cmp	r5, #4
 8008da0:	f47f af44 	bne.w	8008c2c <_scanf_float+0x64>
 8008da4:	3501      	adds	r5, #1
 8008da6:	b2ed      	uxtb	r5, r5
 8008da8:	e7d7      	b.n	8008d5a <_scanf_float+0x192>
 8008daa:	f1ba 0f01 	cmp.w	sl, #1
 8008dae:	f47f af3d 	bne.w	8008c2c <_scanf_float+0x64>
 8008db2:	f04f 0a02 	mov.w	sl, #2
 8008db6:	e7d0      	b.n	8008d5a <_scanf_float+0x192>
 8008db8:	b97d      	cbnz	r5, 8008dda <_scanf_float+0x212>
 8008dba:	f1b9 0f00 	cmp.w	r9, #0
 8008dbe:	f47f af38 	bne.w	8008c32 <_scanf_float+0x6a>
 8008dc2:	6822      	ldr	r2, [r4, #0]
 8008dc4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008dc8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008dcc:	f040 8108 	bne.w	8008fe0 <_scanf_float+0x418>
 8008dd0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008dd4:	6022      	str	r2, [r4, #0]
 8008dd6:	2501      	movs	r5, #1
 8008dd8:	e7bf      	b.n	8008d5a <_scanf_float+0x192>
 8008dda:	2d03      	cmp	r5, #3
 8008ddc:	d0e2      	beq.n	8008da4 <_scanf_float+0x1dc>
 8008dde:	2d05      	cmp	r5, #5
 8008de0:	e7de      	b.n	8008da0 <_scanf_float+0x1d8>
 8008de2:	2d02      	cmp	r5, #2
 8008de4:	f47f af22 	bne.w	8008c2c <_scanf_float+0x64>
 8008de8:	2503      	movs	r5, #3
 8008dea:	e7b6      	b.n	8008d5a <_scanf_float+0x192>
 8008dec:	2d06      	cmp	r5, #6
 8008dee:	f47f af1d 	bne.w	8008c2c <_scanf_float+0x64>
 8008df2:	2507      	movs	r5, #7
 8008df4:	e7b1      	b.n	8008d5a <_scanf_float+0x192>
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	0591      	lsls	r1, r2, #22
 8008dfa:	f57f af17 	bpl.w	8008c2c <_scanf_float+0x64>
 8008dfe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008e02:	6022      	str	r2, [r4, #0]
 8008e04:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e08:	e7a7      	b.n	8008d5a <_scanf_float+0x192>
 8008e0a:	6822      	ldr	r2, [r4, #0]
 8008e0c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008e10:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008e14:	d006      	beq.n	8008e24 <_scanf_float+0x25c>
 8008e16:	0550      	lsls	r0, r2, #21
 8008e18:	f57f af08 	bpl.w	8008c2c <_scanf_float+0x64>
 8008e1c:	f1b9 0f00 	cmp.w	r9, #0
 8008e20:	f000 80de 	beq.w	8008fe0 <_scanf_float+0x418>
 8008e24:	0591      	lsls	r1, r2, #22
 8008e26:	bf58      	it	pl
 8008e28:	9902      	ldrpl	r1, [sp, #8]
 8008e2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e2e:	bf58      	it	pl
 8008e30:	eba9 0101 	subpl.w	r1, r9, r1
 8008e34:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008e38:	bf58      	it	pl
 8008e3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e3e:	6022      	str	r2, [r4, #0]
 8008e40:	f04f 0900 	mov.w	r9, #0
 8008e44:	e789      	b.n	8008d5a <_scanf_float+0x192>
 8008e46:	f04f 0a03 	mov.w	sl, #3
 8008e4a:	e786      	b.n	8008d5a <_scanf_float+0x192>
 8008e4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e50:	4639      	mov	r1, r7
 8008e52:	4640      	mov	r0, r8
 8008e54:	4798      	blx	r3
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f43f aedb 	beq.w	8008c12 <_scanf_float+0x4a>
 8008e5c:	e6e6      	b.n	8008c2c <_scanf_float+0x64>
 8008e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e66:	463a      	mov	r2, r7
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4798      	blx	r3
 8008e6c:	6923      	ldr	r3, [r4, #16]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	e6e8      	b.n	8008c46 <_scanf_float+0x7e>
 8008e74:	1e6b      	subs	r3, r5, #1
 8008e76:	2b06      	cmp	r3, #6
 8008e78:	d824      	bhi.n	8008ec4 <_scanf_float+0x2fc>
 8008e7a:	2d02      	cmp	r5, #2
 8008e7c:	d836      	bhi.n	8008eec <_scanf_float+0x324>
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	429e      	cmp	r6, r3
 8008e82:	f67f aee4 	bls.w	8008c4e <_scanf_float+0x86>
 8008e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e8e:	463a      	mov	r2, r7
 8008e90:	4640      	mov	r0, r8
 8008e92:	4798      	blx	r3
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	e7f0      	b.n	8008e7e <_scanf_float+0x2b6>
 8008e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ea0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008ea4:	463a      	mov	r2, r7
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4798      	blx	r3
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	6123      	str	r3, [r4, #16]
 8008eb0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008eb4:	fa5f fa8a 	uxtb.w	sl, sl
 8008eb8:	f1ba 0f02 	cmp.w	sl, #2
 8008ebc:	d1ee      	bne.n	8008e9c <_scanf_float+0x2d4>
 8008ebe:	3d03      	subs	r5, #3
 8008ec0:	b2ed      	uxtb	r5, r5
 8008ec2:	1b76      	subs	r6, r6, r5
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	05da      	lsls	r2, r3, #23
 8008ec8:	d530      	bpl.n	8008f2c <_scanf_float+0x364>
 8008eca:	055b      	lsls	r3, r3, #21
 8008ecc:	d511      	bpl.n	8008ef2 <_scanf_float+0x32a>
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	429e      	cmp	r6, r3
 8008ed2:	f67f aebc 	bls.w	8008c4e <_scanf_float+0x86>
 8008ed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008eda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ede:	463a      	mov	r2, r7
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	4798      	blx	r3
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	6123      	str	r3, [r4, #16]
 8008eea:	e7f0      	b.n	8008ece <_scanf_float+0x306>
 8008eec:	46aa      	mov	sl, r5
 8008eee:	46b3      	mov	fp, r6
 8008ef0:	e7de      	b.n	8008eb0 <_scanf_float+0x2e8>
 8008ef2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	2965      	cmp	r1, #101	@ 0x65
 8008efa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008efe:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	d00c      	beq.n	8008f20 <_scanf_float+0x358>
 8008f06:	2945      	cmp	r1, #69	@ 0x45
 8008f08:	d00a      	beq.n	8008f20 <_scanf_float+0x358>
 8008f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f0e:	463a      	mov	r2, r7
 8008f10:	4640      	mov	r0, r8
 8008f12:	4798      	blx	r3
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	1eb5      	subs	r5, r6, #2
 8008f1e:	6123      	str	r3, [r4, #16]
 8008f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f24:	463a      	mov	r2, r7
 8008f26:	4640      	mov	r0, r8
 8008f28:	4798      	blx	r3
 8008f2a:	462e      	mov	r6, r5
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	f012 0210 	ands.w	r2, r2, #16
 8008f32:	d001      	beq.n	8008f38 <_scanf_float+0x370>
 8008f34:	2000      	movs	r0, #0
 8008f36:	e68b      	b.n	8008c50 <_scanf_float+0x88>
 8008f38:	7032      	strb	r2, [r6, #0]
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f44:	d11c      	bne.n	8008f80 <_scanf_float+0x3b8>
 8008f46:	9b02      	ldr	r3, [sp, #8]
 8008f48:	454b      	cmp	r3, r9
 8008f4a:	eba3 0209 	sub.w	r2, r3, r9
 8008f4e:	d123      	bne.n	8008f98 <_scanf_float+0x3d0>
 8008f50:	9901      	ldr	r1, [sp, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	4640      	mov	r0, r8
 8008f56:	f002 fc17 	bl	800b788 <_strtod_r>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	6821      	ldr	r1, [r4, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f011 0f02 	tst.w	r1, #2
 8008f64:	ec57 6b10 	vmov	r6, r7, d0
 8008f68:	f103 0204 	add.w	r2, r3, #4
 8008f6c:	d01f      	beq.n	8008fae <_scanf_float+0x3e6>
 8008f6e:	9903      	ldr	r1, [sp, #12]
 8008f70:	600a      	str	r2, [r1, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	e9c3 6700 	strd	r6, r7, [r3]
 8008f78:	68e3      	ldr	r3, [r4, #12]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	60e3      	str	r3, [r4, #12]
 8008f7e:	e7d9      	b.n	8008f34 <_scanf_float+0x36c>
 8008f80:	9b04      	ldr	r3, [sp, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0e4      	beq.n	8008f50 <_scanf_float+0x388>
 8008f86:	9905      	ldr	r1, [sp, #20]
 8008f88:	230a      	movs	r3, #10
 8008f8a:	3101      	adds	r1, #1
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	f7ff f9c1 	bl	8008314 <_strtol_r>
 8008f92:	9b04      	ldr	r3, [sp, #16]
 8008f94:	9e05      	ldr	r6, [sp, #20]
 8008f96:	1ac2      	subs	r2, r0, r3
 8008f98:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008f9c:	429e      	cmp	r6, r3
 8008f9e:	bf28      	it	cs
 8008fa0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008fa4:	4910      	ldr	r1, [pc, #64]	@ (8008fe8 <_scanf_float+0x420>)
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f000 f8e4 	bl	8009174 <siprintf>
 8008fac:	e7d0      	b.n	8008f50 <_scanf_float+0x388>
 8008fae:	f011 0f04 	tst.w	r1, #4
 8008fb2:	9903      	ldr	r1, [sp, #12]
 8008fb4:	600a      	str	r2, [r1, #0]
 8008fb6:	d1dc      	bne.n	8008f72 <_scanf_float+0x3aa>
 8008fb8:	681d      	ldr	r5, [r3, #0]
 8008fba:	4632      	mov	r2, r6
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fdb3 	bl	8000b2c <__aeabi_dcmpun>
 8008fc6:	b128      	cbz	r0, 8008fd4 <_scanf_float+0x40c>
 8008fc8:	4808      	ldr	r0, [pc, #32]	@ (8008fec <_scanf_float+0x424>)
 8008fca:	f000 f9b7 	bl	800933c <nanf>
 8008fce:	ed85 0a00 	vstr	s0, [r5]
 8008fd2:	e7d1      	b.n	8008f78 <_scanf_float+0x3b0>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 fe06 	bl	8000be8 <__aeabi_d2f>
 8008fdc:	6028      	str	r0, [r5, #0]
 8008fde:	e7cb      	b.n	8008f78 <_scanf_float+0x3b0>
 8008fe0:	f04f 0900 	mov.w	r9, #0
 8008fe4:	e629      	b.n	8008c3a <_scanf_float+0x72>
 8008fe6:	bf00      	nop
 8008fe8:	0800cbd1 	.word	0x0800cbd1
 8008fec:	0800cc11 	.word	0x0800cc11

08008ff0 <std>:
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8008ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ffe:	6083      	str	r3, [r0, #8]
 8009000:	8181      	strh	r1, [r0, #12]
 8009002:	6643      	str	r3, [r0, #100]	@ 0x64
 8009004:	81c2      	strh	r2, [r0, #14]
 8009006:	6183      	str	r3, [r0, #24]
 8009008:	4619      	mov	r1, r3
 800900a:	2208      	movs	r2, #8
 800900c:	305c      	adds	r0, #92	@ 0x5c
 800900e:	f000 f914 	bl	800923a <memset>
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <std+0x58>)
 8009014:	6263      	str	r3, [r4, #36]	@ 0x24
 8009016:	4b0d      	ldr	r3, [pc, #52]	@ (800904c <std+0x5c>)
 8009018:	62a3      	str	r3, [r4, #40]	@ 0x28
 800901a:	4b0d      	ldr	r3, [pc, #52]	@ (8009050 <std+0x60>)
 800901c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800901e:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <std+0x64>)
 8009020:	6323      	str	r3, [r4, #48]	@ 0x30
 8009022:	4b0d      	ldr	r3, [pc, #52]	@ (8009058 <std+0x68>)
 8009024:	6224      	str	r4, [r4, #32]
 8009026:	429c      	cmp	r4, r3
 8009028:	d006      	beq.n	8009038 <std+0x48>
 800902a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800902e:	4294      	cmp	r4, r2
 8009030:	d002      	beq.n	8009038 <std+0x48>
 8009032:	33d0      	adds	r3, #208	@ 0xd0
 8009034:	429c      	cmp	r4, r3
 8009036:	d105      	bne.n	8009044 <std+0x54>
 8009038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800903c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009040:	f000 b978 	b.w	8009334 <__retarget_lock_init_recursive>
 8009044:	bd10      	pop	{r4, pc}
 8009046:	bf00      	nop
 8009048:	080091b5 	.word	0x080091b5
 800904c:	080091d7 	.word	0x080091d7
 8009050:	0800920f 	.word	0x0800920f
 8009054:	08009233 	.word	0x08009233
 8009058:	20000cac 	.word	0x20000cac

0800905c <stdio_exit_handler>:
 800905c:	4a02      	ldr	r2, [pc, #8]	@ (8009068 <stdio_exit_handler+0xc>)
 800905e:	4903      	ldr	r1, [pc, #12]	@ (800906c <stdio_exit_handler+0x10>)
 8009060:	4803      	ldr	r0, [pc, #12]	@ (8009070 <stdio_exit_handler+0x14>)
 8009062:	f000 b869 	b.w	8009138 <_fwalk_sglue>
 8009066:	bf00      	nop
 8009068:	20000074 	.word	0x20000074
 800906c:	0800bdd1 	.word	0x0800bdd1
 8009070:	20000084 	.word	0x20000084

08009074 <cleanup_stdio>:
 8009074:	6841      	ldr	r1, [r0, #4]
 8009076:	4b0c      	ldr	r3, [pc, #48]	@ (80090a8 <cleanup_stdio+0x34>)
 8009078:	4299      	cmp	r1, r3
 800907a:	b510      	push	{r4, lr}
 800907c:	4604      	mov	r4, r0
 800907e:	d001      	beq.n	8009084 <cleanup_stdio+0x10>
 8009080:	f002 fea6 	bl	800bdd0 <_fflush_r>
 8009084:	68a1      	ldr	r1, [r4, #8]
 8009086:	4b09      	ldr	r3, [pc, #36]	@ (80090ac <cleanup_stdio+0x38>)
 8009088:	4299      	cmp	r1, r3
 800908a:	d002      	beq.n	8009092 <cleanup_stdio+0x1e>
 800908c:	4620      	mov	r0, r4
 800908e:	f002 fe9f 	bl	800bdd0 <_fflush_r>
 8009092:	68e1      	ldr	r1, [r4, #12]
 8009094:	4b06      	ldr	r3, [pc, #24]	@ (80090b0 <cleanup_stdio+0x3c>)
 8009096:	4299      	cmp	r1, r3
 8009098:	d004      	beq.n	80090a4 <cleanup_stdio+0x30>
 800909a:	4620      	mov	r0, r4
 800909c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a0:	f002 be96 	b.w	800bdd0 <_fflush_r>
 80090a4:	bd10      	pop	{r4, pc}
 80090a6:	bf00      	nop
 80090a8:	20000cac 	.word	0x20000cac
 80090ac:	20000d14 	.word	0x20000d14
 80090b0:	20000d7c 	.word	0x20000d7c

080090b4 <global_stdio_init.part.0>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <global_stdio_init.part.0+0x30>)
 80090b8:	4c0b      	ldr	r4, [pc, #44]	@ (80090e8 <global_stdio_init.part.0+0x34>)
 80090ba:	4a0c      	ldr	r2, [pc, #48]	@ (80090ec <global_stdio_init.part.0+0x38>)
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	4620      	mov	r0, r4
 80090c0:	2200      	movs	r2, #0
 80090c2:	2104      	movs	r1, #4
 80090c4:	f7ff ff94 	bl	8008ff0 <std>
 80090c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090cc:	2201      	movs	r2, #1
 80090ce:	2109      	movs	r1, #9
 80090d0:	f7ff ff8e 	bl	8008ff0 <std>
 80090d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090d8:	2202      	movs	r2, #2
 80090da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090de:	2112      	movs	r1, #18
 80090e0:	f7ff bf86 	b.w	8008ff0 <std>
 80090e4:	20000de4 	.word	0x20000de4
 80090e8:	20000cac 	.word	0x20000cac
 80090ec:	0800905d 	.word	0x0800905d

080090f0 <__sfp_lock_acquire>:
 80090f0:	4801      	ldr	r0, [pc, #4]	@ (80090f8 <__sfp_lock_acquire+0x8>)
 80090f2:	f000 b920 	b.w	8009336 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	20000ded 	.word	0x20000ded

080090fc <__sfp_lock_release>:
 80090fc:	4801      	ldr	r0, [pc, #4]	@ (8009104 <__sfp_lock_release+0x8>)
 80090fe:	f000 b91b 	b.w	8009338 <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	20000ded 	.word	0x20000ded

08009108 <__sinit>:
 8009108:	b510      	push	{r4, lr}
 800910a:	4604      	mov	r4, r0
 800910c:	f7ff fff0 	bl	80090f0 <__sfp_lock_acquire>
 8009110:	6a23      	ldr	r3, [r4, #32]
 8009112:	b11b      	cbz	r3, 800911c <__sinit+0x14>
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f7ff bff0 	b.w	80090fc <__sfp_lock_release>
 800911c:	4b04      	ldr	r3, [pc, #16]	@ (8009130 <__sinit+0x28>)
 800911e:	6223      	str	r3, [r4, #32]
 8009120:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <__sinit+0x2c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1f5      	bne.n	8009114 <__sinit+0xc>
 8009128:	f7ff ffc4 	bl	80090b4 <global_stdio_init.part.0>
 800912c:	e7f2      	b.n	8009114 <__sinit+0xc>
 800912e:	bf00      	nop
 8009130:	08009075 	.word	0x08009075
 8009134:	20000de4 	.word	0x20000de4

08009138 <_fwalk_sglue>:
 8009138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800913c:	4607      	mov	r7, r0
 800913e:	4688      	mov	r8, r1
 8009140:	4614      	mov	r4, r2
 8009142:	2600      	movs	r6, #0
 8009144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009148:	f1b9 0901 	subs.w	r9, r9, #1
 800914c:	d505      	bpl.n	800915a <_fwalk_sglue+0x22>
 800914e:	6824      	ldr	r4, [r4, #0]
 8009150:	2c00      	cmp	r4, #0
 8009152:	d1f7      	bne.n	8009144 <_fwalk_sglue+0xc>
 8009154:	4630      	mov	r0, r6
 8009156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d907      	bls.n	8009170 <_fwalk_sglue+0x38>
 8009160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009164:	3301      	adds	r3, #1
 8009166:	d003      	beq.n	8009170 <_fwalk_sglue+0x38>
 8009168:	4629      	mov	r1, r5
 800916a:	4638      	mov	r0, r7
 800916c:	47c0      	blx	r8
 800916e:	4306      	orrs	r6, r0
 8009170:	3568      	adds	r5, #104	@ 0x68
 8009172:	e7e9      	b.n	8009148 <_fwalk_sglue+0x10>

08009174 <siprintf>:
 8009174:	b40e      	push	{r1, r2, r3}
 8009176:	b500      	push	{lr}
 8009178:	b09c      	sub	sp, #112	@ 0x70
 800917a:	ab1d      	add	r3, sp, #116	@ 0x74
 800917c:	9002      	str	r0, [sp, #8]
 800917e:	9006      	str	r0, [sp, #24]
 8009180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009184:	4809      	ldr	r0, [pc, #36]	@ (80091ac <siprintf+0x38>)
 8009186:	9107      	str	r1, [sp, #28]
 8009188:	9104      	str	r1, [sp, #16]
 800918a:	4909      	ldr	r1, [pc, #36]	@ (80091b0 <siprintf+0x3c>)
 800918c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009190:	9105      	str	r1, [sp, #20]
 8009192:	6800      	ldr	r0, [r0, #0]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	a902      	add	r1, sp, #8
 8009198:	f002 fb58 	bl	800b84c <_svfiprintf_r>
 800919c:	9b02      	ldr	r3, [sp, #8]
 800919e:	2200      	movs	r2, #0
 80091a0:	701a      	strb	r2, [r3, #0]
 80091a2:	b01c      	add	sp, #112	@ 0x70
 80091a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a8:	b003      	add	sp, #12
 80091aa:	4770      	bx	lr
 80091ac:	20000080 	.word	0x20000080
 80091b0:	ffff0208 	.word	0xffff0208

080091b4 <__sread>:
 80091b4:	b510      	push	{r4, lr}
 80091b6:	460c      	mov	r4, r1
 80091b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091bc:	f000 f86c 	bl	8009298 <_read_r>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	bfab      	itete	ge
 80091c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091c6:	89a3      	ldrhlt	r3, [r4, #12]
 80091c8:	181b      	addge	r3, r3, r0
 80091ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091ce:	bfac      	ite	ge
 80091d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091d2:	81a3      	strhlt	r3, [r4, #12]
 80091d4:	bd10      	pop	{r4, pc}

080091d6 <__swrite>:
 80091d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091da:	461f      	mov	r7, r3
 80091dc:	898b      	ldrh	r3, [r1, #12]
 80091de:	05db      	lsls	r3, r3, #23
 80091e0:	4605      	mov	r5, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	4616      	mov	r6, r2
 80091e6:	d505      	bpl.n	80091f4 <__swrite+0x1e>
 80091e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ec:	2302      	movs	r3, #2
 80091ee:	2200      	movs	r2, #0
 80091f0:	f000 f840 	bl	8009274 <_lseek_r>
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	4632      	mov	r2, r6
 8009202:	463b      	mov	r3, r7
 8009204:	4628      	mov	r0, r5
 8009206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800920a:	f000 b857 	b.w	80092bc <_write_r>

0800920e <__sseek>:
 800920e:	b510      	push	{r4, lr}
 8009210:	460c      	mov	r4, r1
 8009212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009216:	f000 f82d 	bl	8009274 <_lseek_r>
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	bf15      	itete	ne
 8009220:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800922a:	81a3      	strheq	r3, [r4, #12]
 800922c:	bf18      	it	ne
 800922e:	81a3      	strhne	r3, [r4, #12]
 8009230:	bd10      	pop	{r4, pc}

08009232 <__sclose>:
 8009232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009236:	f000 b80d 	b.w	8009254 <_close_r>

0800923a <memset>:
 800923a:	4402      	add	r2, r0
 800923c:	4603      	mov	r3, r0
 800923e:	4293      	cmp	r3, r2
 8009240:	d100      	bne.n	8009244 <memset+0xa>
 8009242:	4770      	bx	lr
 8009244:	f803 1b01 	strb.w	r1, [r3], #1
 8009248:	e7f9      	b.n	800923e <memset+0x4>
	...

0800924c <_localeconv_r>:
 800924c:	4800      	ldr	r0, [pc, #0]	@ (8009250 <_localeconv_r+0x4>)
 800924e:	4770      	bx	lr
 8009250:	200001c0 	.word	0x200001c0

08009254 <_close_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d06      	ldr	r5, [pc, #24]	@ (8009270 <_close_r+0x1c>)
 8009258:	2300      	movs	r3, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	f7fa fd04 	bl	8003c6c <_close>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_close_r+0x1a>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_close_r+0x1a>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20000de8 	.word	0x20000de8

08009274 <_lseek_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	@ (8009294 <_lseek_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7fa fd19 	bl	8003cba <_lseek>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_lseek_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_lseek_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000de8 	.word	0x20000de8

08009298 <_read_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d07      	ldr	r5, [pc, #28]	@ (80092b8 <_read_r+0x20>)
 800929c:	4604      	mov	r4, r0
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	602a      	str	r2, [r5, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f7fa fca7 	bl	8003bfa <_read>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_read_r+0x1e>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_read_r+0x1e>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20000de8 	.word	0x20000de8

080092bc <_write_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d07      	ldr	r5, [pc, #28]	@ (80092dc <_write_r+0x20>)
 80092c0:	4604      	mov	r4, r0
 80092c2:	4608      	mov	r0, r1
 80092c4:	4611      	mov	r1, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	602a      	str	r2, [r5, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	f7fa fcb2 	bl	8003c34 <_write>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_write_r+0x1e>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_write_r+0x1e>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000de8 	.word	0x20000de8

080092e0 <__errno>:
 80092e0:	4b01      	ldr	r3, [pc, #4]	@ (80092e8 <__errno+0x8>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000080 	.word	0x20000080

080092ec <__libc_init_array>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009324 <__libc_init_array+0x38>)
 80092f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009328 <__libc_init_array+0x3c>)
 80092f2:	1b64      	subs	r4, r4, r5
 80092f4:	10a4      	asrs	r4, r4, #2
 80092f6:	2600      	movs	r6, #0
 80092f8:	42a6      	cmp	r6, r4
 80092fa:	d109      	bne.n	8009310 <__libc_init_array+0x24>
 80092fc:	4d0b      	ldr	r5, [pc, #44]	@ (800932c <__libc_init_array+0x40>)
 80092fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009330 <__libc_init_array+0x44>)
 8009300:	f003 faf6 	bl	800c8f0 <_init>
 8009304:	1b64      	subs	r4, r4, r5
 8009306:	10a4      	asrs	r4, r4, #2
 8009308:	2600      	movs	r6, #0
 800930a:	42a6      	cmp	r6, r4
 800930c:	d105      	bne.n	800931a <__libc_init_array+0x2e>
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	f855 3b04 	ldr.w	r3, [r5], #4
 8009314:	4798      	blx	r3
 8009316:	3601      	adds	r6, #1
 8009318:	e7ee      	b.n	80092f8 <__libc_init_array+0xc>
 800931a:	f855 3b04 	ldr.w	r3, [r5], #4
 800931e:	4798      	blx	r3
 8009320:	3601      	adds	r6, #1
 8009322:	e7f2      	b.n	800930a <__libc_init_array+0x1e>
 8009324:	0800ced4 	.word	0x0800ced4
 8009328:	0800ced4 	.word	0x0800ced4
 800932c:	0800ced4 	.word	0x0800ced4
 8009330:	0800ced8 	.word	0x0800ced8

08009334 <__retarget_lock_init_recursive>:
 8009334:	4770      	bx	lr

08009336 <__retarget_lock_acquire_recursive>:
 8009336:	4770      	bx	lr

08009338 <__retarget_lock_release_recursive>:
 8009338:	4770      	bx	lr
	...

0800933c <nanf>:
 800933c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009344 <nanf+0x8>
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	7fc00000 	.word	0x7fc00000

08009348 <__assert_func>:
 8009348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800934a:	4614      	mov	r4, r2
 800934c:	461a      	mov	r2, r3
 800934e:	4b09      	ldr	r3, [pc, #36]	@ (8009374 <__assert_func+0x2c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4605      	mov	r5, r0
 8009354:	68d8      	ldr	r0, [r3, #12]
 8009356:	b954      	cbnz	r4, 800936e <__assert_func+0x26>
 8009358:	4b07      	ldr	r3, [pc, #28]	@ (8009378 <__assert_func+0x30>)
 800935a:	461c      	mov	r4, r3
 800935c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009360:	9100      	str	r1, [sp, #0]
 8009362:	462b      	mov	r3, r5
 8009364:	4905      	ldr	r1, [pc, #20]	@ (800937c <__assert_func+0x34>)
 8009366:	f002 fd5b 	bl	800be20 <fiprintf>
 800936a:	f002 fe51 	bl	800c010 <abort>
 800936e:	4b04      	ldr	r3, [pc, #16]	@ (8009380 <__assert_func+0x38>)
 8009370:	e7f4      	b.n	800935c <__assert_func+0x14>
 8009372:	bf00      	nop
 8009374:	20000080 	.word	0x20000080
 8009378:	0800cc11 	.word	0x0800cc11
 800937c:	0800cbe3 	.word	0x0800cbe3
 8009380:	0800cbd6 	.word	0x0800cbd6

08009384 <quorem>:
 8009384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	6903      	ldr	r3, [r0, #16]
 800938a:	690c      	ldr	r4, [r1, #16]
 800938c:	42a3      	cmp	r3, r4
 800938e:	4607      	mov	r7, r0
 8009390:	db7e      	blt.n	8009490 <quorem+0x10c>
 8009392:	3c01      	subs	r4, #1
 8009394:	f101 0814 	add.w	r8, r1, #20
 8009398:	00a3      	lsls	r3, r4, #2
 800939a:	f100 0514 	add.w	r5, r0, #20
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093ae:	3301      	adds	r3, #1
 80093b0:	429a      	cmp	r2, r3
 80093b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80093ba:	d32e      	bcc.n	800941a <quorem+0x96>
 80093bc:	f04f 0a00 	mov.w	sl, #0
 80093c0:	46c4      	mov	ip, r8
 80093c2:	46ae      	mov	lr, r5
 80093c4:	46d3      	mov	fp, sl
 80093c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093ca:	b298      	uxth	r0, r3
 80093cc:	fb06 a000 	mla	r0, r6, r0, sl
 80093d0:	0c02      	lsrs	r2, r0, #16
 80093d2:	0c1b      	lsrs	r3, r3, #16
 80093d4:	fb06 2303 	mla	r3, r6, r3, r2
 80093d8:	f8de 2000 	ldr.w	r2, [lr]
 80093dc:	b280      	uxth	r0, r0
 80093de:	b292      	uxth	r2, r2
 80093e0:	1a12      	subs	r2, r2, r0
 80093e2:	445a      	add	r2, fp
 80093e4:	f8de 0000 	ldr.w	r0, [lr]
 80093e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093f6:	b292      	uxth	r2, r2
 80093f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093fc:	45e1      	cmp	r9, ip
 80093fe:	f84e 2b04 	str.w	r2, [lr], #4
 8009402:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009406:	d2de      	bcs.n	80093c6 <quorem+0x42>
 8009408:	9b00      	ldr	r3, [sp, #0]
 800940a:	58eb      	ldr	r3, [r5, r3]
 800940c:	b92b      	cbnz	r3, 800941a <quorem+0x96>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	3b04      	subs	r3, #4
 8009412:	429d      	cmp	r5, r3
 8009414:	461a      	mov	r2, r3
 8009416:	d32f      	bcc.n	8009478 <quorem+0xf4>
 8009418:	613c      	str	r4, [r7, #16]
 800941a:	4638      	mov	r0, r7
 800941c:	f001 f9c4 	bl	800a7a8 <__mcmp>
 8009420:	2800      	cmp	r0, #0
 8009422:	db25      	blt.n	8009470 <quorem+0xec>
 8009424:	4629      	mov	r1, r5
 8009426:	2000      	movs	r0, #0
 8009428:	f858 2b04 	ldr.w	r2, [r8], #4
 800942c:	f8d1 c000 	ldr.w	ip, [r1]
 8009430:	fa1f fe82 	uxth.w	lr, r2
 8009434:	fa1f f38c 	uxth.w	r3, ip
 8009438:	eba3 030e 	sub.w	r3, r3, lr
 800943c:	4403      	add	r3, r0
 800943e:	0c12      	lsrs	r2, r2, #16
 8009440:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009444:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009448:	b29b      	uxth	r3, r3
 800944a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800944e:	45c1      	cmp	r9, r8
 8009450:	f841 3b04 	str.w	r3, [r1], #4
 8009454:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009458:	d2e6      	bcs.n	8009428 <quorem+0xa4>
 800945a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800945e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009462:	b922      	cbnz	r2, 800946e <quorem+0xea>
 8009464:	3b04      	subs	r3, #4
 8009466:	429d      	cmp	r5, r3
 8009468:	461a      	mov	r2, r3
 800946a:	d30b      	bcc.n	8009484 <quorem+0x100>
 800946c:	613c      	str	r4, [r7, #16]
 800946e:	3601      	adds	r6, #1
 8009470:	4630      	mov	r0, r6
 8009472:	b003      	add	sp, #12
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009478:	6812      	ldr	r2, [r2, #0]
 800947a:	3b04      	subs	r3, #4
 800947c:	2a00      	cmp	r2, #0
 800947e:	d1cb      	bne.n	8009418 <quorem+0x94>
 8009480:	3c01      	subs	r4, #1
 8009482:	e7c6      	b.n	8009412 <quorem+0x8e>
 8009484:	6812      	ldr	r2, [r2, #0]
 8009486:	3b04      	subs	r3, #4
 8009488:	2a00      	cmp	r2, #0
 800948a:	d1ef      	bne.n	800946c <quorem+0xe8>
 800948c:	3c01      	subs	r4, #1
 800948e:	e7ea      	b.n	8009466 <quorem+0xe2>
 8009490:	2000      	movs	r0, #0
 8009492:	e7ee      	b.n	8009472 <quorem+0xee>
 8009494:	0000      	movs	r0, r0
	...

08009498 <_dtoa_r>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	69c7      	ldr	r7, [r0, #28]
 800949e:	b099      	sub	sp, #100	@ 0x64
 80094a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094a4:	ec55 4b10 	vmov	r4, r5, d0
 80094a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80094aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80094ac:	4683      	mov	fp, r0
 80094ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80094b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094b2:	b97f      	cbnz	r7, 80094d4 <_dtoa_r+0x3c>
 80094b4:	2010      	movs	r0, #16
 80094b6:	f000 fdfd 	bl	800a0b4 <malloc>
 80094ba:	4602      	mov	r2, r0
 80094bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80094c0:	b920      	cbnz	r0, 80094cc <_dtoa_r+0x34>
 80094c2:	4ba7      	ldr	r3, [pc, #668]	@ (8009760 <_dtoa_r+0x2c8>)
 80094c4:	21ef      	movs	r1, #239	@ 0xef
 80094c6:	48a7      	ldr	r0, [pc, #668]	@ (8009764 <_dtoa_r+0x2cc>)
 80094c8:	f7ff ff3e 	bl	8009348 <__assert_func>
 80094cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094d0:	6007      	str	r7, [r0, #0]
 80094d2:	60c7      	str	r7, [r0, #12]
 80094d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094d8:	6819      	ldr	r1, [r3, #0]
 80094da:	b159      	cbz	r1, 80094f4 <_dtoa_r+0x5c>
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	604a      	str	r2, [r1, #4]
 80094e0:	2301      	movs	r3, #1
 80094e2:	4093      	lsls	r3, r2
 80094e4:	608b      	str	r3, [r1, #8]
 80094e6:	4658      	mov	r0, fp
 80094e8:	f000 feda 	bl	800a2a0 <_Bfree>
 80094ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	1e2b      	subs	r3, r5, #0
 80094f6:	bfb9      	ittee	lt
 80094f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094fc:	9303      	strlt	r3, [sp, #12]
 80094fe:	2300      	movge	r3, #0
 8009500:	6033      	strge	r3, [r6, #0]
 8009502:	9f03      	ldr	r7, [sp, #12]
 8009504:	4b98      	ldr	r3, [pc, #608]	@ (8009768 <_dtoa_r+0x2d0>)
 8009506:	bfbc      	itt	lt
 8009508:	2201      	movlt	r2, #1
 800950a:	6032      	strlt	r2, [r6, #0]
 800950c:	43bb      	bics	r3, r7
 800950e:	d112      	bne.n	8009536 <_dtoa_r+0x9e>
 8009510:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009512:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800951c:	4323      	orrs	r3, r4
 800951e:	f000 854d 	beq.w	8009fbc <_dtoa_r+0xb24>
 8009522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009524:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800977c <_dtoa_r+0x2e4>
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 854f 	beq.w	8009fcc <_dtoa_r+0xb34>
 800952e:	f10a 0303 	add.w	r3, sl, #3
 8009532:	f000 bd49 	b.w	8009fc8 <_dtoa_r+0xb30>
 8009536:	ed9d 7b02 	vldr	d7, [sp, #8]
 800953a:	2200      	movs	r2, #0
 800953c:	ec51 0b17 	vmov	r0, r1, d7
 8009540:	2300      	movs	r3, #0
 8009542:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009546:	f7f7 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800954a:	4680      	mov	r8, r0
 800954c:	b158      	cbz	r0, 8009566 <_dtoa_r+0xce>
 800954e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009550:	2301      	movs	r3, #1
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009556:	b113      	cbz	r3, 800955e <_dtoa_r+0xc6>
 8009558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800955a:	4b84      	ldr	r3, [pc, #528]	@ (800976c <_dtoa_r+0x2d4>)
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009780 <_dtoa_r+0x2e8>
 8009562:	f000 bd33 	b.w	8009fcc <_dtoa_r+0xb34>
 8009566:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800956a:	aa16      	add	r2, sp, #88	@ 0x58
 800956c:	a917      	add	r1, sp, #92	@ 0x5c
 800956e:	4658      	mov	r0, fp
 8009570:	f001 fa3a 	bl	800a9e8 <__d2b>
 8009574:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009578:	4681      	mov	r9, r0
 800957a:	2e00      	cmp	r6, #0
 800957c:	d077      	beq.n	800966e <_dtoa_r+0x1d6>
 800957e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009580:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800958c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009590:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009594:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009598:	4619      	mov	r1, r3
 800959a:	2200      	movs	r2, #0
 800959c:	4b74      	ldr	r3, [pc, #464]	@ (8009770 <_dtoa_r+0x2d8>)
 800959e:	f7f6 fe73 	bl	8000288 <__aeabi_dsub>
 80095a2:	a369      	add	r3, pc, #420	@ (adr r3, 8009748 <_dtoa_r+0x2b0>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f7 f826 	bl	80005f8 <__aeabi_dmul>
 80095ac:	a368      	add	r3, pc, #416	@ (adr r3, 8009750 <_dtoa_r+0x2b8>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	f7f6 fe6b 	bl	800028c <__adddf3>
 80095b6:	4604      	mov	r4, r0
 80095b8:	4630      	mov	r0, r6
 80095ba:	460d      	mov	r5, r1
 80095bc:	f7f6 ffb2 	bl	8000524 <__aeabi_i2d>
 80095c0:	a365      	add	r3, pc, #404	@ (adr r3, 8009758 <_dtoa_r+0x2c0>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f6 fe5b 	bl	800028c <__adddf3>
 80095d6:	4604      	mov	r4, r0
 80095d8:	460d      	mov	r5, r1
 80095da:	f7f7 fabd 	bl	8000b58 <__aeabi_d2iz>
 80095de:	2200      	movs	r2, #0
 80095e0:	4607      	mov	r7, r0
 80095e2:	2300      	movs	r3, #0
 80095e4:	4620      	mov	r0, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	f7f7 fa78 	bl	8000adc <__aeabi_dcmplt>
 80095ec:	b140      	cbz	r0, 8009600 <_dtoa_r+0x168>
 80095ee:	4638      	mov	r0, r7
 80095f0:	f7f6 ff98 	bl	8000524 <__aeabi_i2d>
 80095f4:	4622      	mov	r2, r4
 80095f6:	462b      	mov	r3, r5
 80095f8:	f7f7 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 80095fc:	b900      	cbnz	r0, 8009600 <_dtoa_r+0x168>
 80095fe:	3f01      	subs	r7, #1
 8009600:	2f16      	cmp	r7, #22
 8009602:	d851      	bhi.n	80096a8 <_dtoa_r+0x210>
 8009604:	4b5b      	ldr	r3, [pc, #364]	@ (8009774 <_dtoa_r+0x2dc>)
 8009606:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009612:	f7f7 fa63 	bl	8000adc <__aeabi_dcmplt>
 8009616:	2800      	cmp	r0, #0
 8009618:	d048      	beq.n	80096ac <_dtoa_r+0x214>
 800961a:	3f01      	subs	r7, #1
 800961c:	2300      	movs	r3, #0
 800961e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009620:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009622:	1b9b      	subs	r3, r3, r6
 8009624:	1e5a      	subs	r2, r3, #1
 8009626:	bf44      	itt	mi
 8009628:	f1c3 0801 	rsbmi	r8, r3, #1
 800962c:	2300      	movmi	r3, #0
 800962e:	9208      	str	r2, [sp, #32]
 8009630:	bf54      	ite	pl
 8009632:	f04f 0800 	movpl.w	r8, #0
 8009636:	9308      	strmi	r3, [sp, #32]
 8009638:	2f00      	cmp	r7, #0
 800963a:	db39      	blt.n	80096b0 <_dtoa_r+0x218>
 800963c:	9b08      	ldr	r3, [sp, #32]
 800963e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009640:	443b      	add	r3, r7
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	2300      	movs	r3, #0
 8009646:	930a      	str	r3, [sp, #40]	@ 0x28
 8009648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964a:	2b09      	cmp	r3, #9
 800964c:	d864      	bhi.n	8009718 <_dtoa_r+0x280>
 800964e:	2b05      	cmp	r3, #5
 8009650:	bfc4      	itt	gt
 8009652:	3b04      	subgt	r3, #4
 8009654:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009658:	f1a3 0302 	sub.w	r3, r3, #2
 800965c:	bfcc      	ite	gt
 800965e:	2400      	movgt	r4, #0
 8009660:	2401      	movle	r4, #1
 8009662:	2b03      	cmp	r3, #3
 8009664:	d863      	bhi.n	800972e <_dtoa_r+0x296>
 8009666:	e8df f003 	tbb	[pc, r3]
 800966a:	372a      	.short	0x372a
 800966c:	5535      	.short	0x5535
 800966e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009672:	441e      	add	r6, r3
 8009674:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009678:	2b20      	cmp	r3, #32
 800967a:	bfc1      	itttt	gt
 800967c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009680:	409f      	lslgt	r7, r3
 8009682:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009686:	fa24 f303 	lsrgt.w	r3, r4, r3
 800968a:	bfd6      	itet	le
 800968c:	f1c3 0320 	rsble	r3, r3, #32
 8009690:	ea47 0003 	orrgt.w	r0, r7, r3
 8009694:	fa04 f003 	lslle.w	r0, r4, r3
 8009698:	f7f6 ff34 	bl	8000504 <__aeabi_ui2d>
 800969c:	2201      	movs	r2, #1
 800969e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096a2:	3e01      	subs	r6, #1
 80096a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80096a6:	e777      	b.n	8009598 <_dtoa_r+0x100>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e7b8      	b.n	800961e <_dtoa_r+0x186>
 80096ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80096ae:	e7b7      	b.n	8009620 <_dtoa_r+0x188>
 80096b0:	427b      	negs	r3, r7
 80096b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80096b4:	2300      	movs	r3, #0
 80096b6:	eba8 0807 	sub.w	r8, r8, r7
 80096ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096bc:	e7c4      	b.n	8009648 <_dtoa_r+0x1b0>
 80096be:	2300      	movs	r3, #0
 80096c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dc35      	bgt.n	8009734 <_dtoa_r+0x29c>
 80096c8:	2301      	movs	r3, #1
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	9307      	str	r3, [sp, #28]
 80096ce:	461a      	mov	r2, r3
 80096d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80096d2:	e00b      	b.n	80096ec <_dtoa_r+0x254>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e7f3      	b.n	80096c0 <_dtoa_r+0x228>
 80096d8:	2300      	movs	r3, #0
 80096da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	3301      	adds	r3, #1
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	9307      	str	r3, [sp, #28]
 80096e8:	bfb8      	it	lt
 80096ea:	2301      	movlt	r3, #1
 80096ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80096f0:	2100      	movs	r1, #0
 80096f2:	2204      	movs	r2, #4
 80096f4:	f102 0514 	add.w	r5, r2, #20
 80096f8:	429d      	cmp	r5, r3
 80096fa:	d91f      	bls.n	800973c <_dtoa_r+0x2a4>
 80096fc:	6041      	str	r1, [r0, #4]
 80096fe:	4658      	mov	r0, fp
 8009700:	f000 fd8e 	bl	800a220 <_Balloc>
 8009704:	4682      	mov	sl, r0
 8009706:	2800      	cmp	r0, #0
 8009708:	d13c      	bne.n	8009784 <_dtoa_r+0x2ec>
 800970a:	4b1b      	ldr	r3, [pc, #108]	@ (8009778 <_dtoa_r+0x2e0>)
 800970c:	4602      	mov	r2, r0
 800970e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009712:	e6d8      	b.n	80094c6 <_dtoa_r+0x2e>
 8009714:	2301      	movs	r3, #1
 8009716:	e7e0      	b.n	80096da <_dtoa_r+0x242>
 8009718:	2401      	movs	r4, #1
 800971a:	2300      	movs	r3, #0
 800971c:	9309      	str	r3, [sp, #36]	@ 0x24
 800971e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	9307      	str	r3, [sp, #28]
 8009728:	2200      	movs	r2, #0
 800972a:	2312      	movs	r3, #18
 800972c:	e7d0      	b.n	80096d0 <_dtoa_r+0x238>
 800972e:	2301      	movs	r3, #1
 8009730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009732:	e7f5      	b.n	8009720 <_dtoa_r+0x288>
 8009734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	9307      	str	r3, [sp, #28]
 800973a:	e7d7      	b.n	80096ec <_dtoa_r+0x254>
 800973c:	3101      	adds	r1, #1
 800973e:	0052      	lsls	r2, r2, #1
 8009740:	e7d8      	b.n	80096f4 <_dtoa_r+0x25c>
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	636f4361 	.word	0x636f4361
 800974c:	3fd287a7 	.word	0x3fd287a7
 8009750:	8b60c8b3 	.word	0x8b60c8b3
 8009754:	3fc68a28 	.word	0x3fc68a28
 8009758:	509f79fb 	.word	0x509f79fb
 800975c:	3fd34413 	.word	0x3fd34413
 8009760:	0800cc1f 	.word	0x0800cc1f
 8009764:	0800cc36 	.word	0x0800cc36
 8009768:	7ff00000 	.word	0x7ff00000
 800976c:	0800cbae 	.word	0x0800cbae
 8009770:	3ff80000 	.word	0x3ff80000
 8009774:	0800cd30 	.word	0x0800cd30
 8009778:	0800cc8e 	.word	0x0800cc8e
 800977c:	0800cc1b 	.word	0x0800cc1b
 8009780:	0800cbad 	.word	0x0800cbad
 8009784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009788:	6018      	str	r0, [r3, #0]
 800978a:	9b07      	ldr	r3, [sp, #28]
 800978c:	2b0e      	cmp	r3, #14
 800978e:	f200 80a4 	bhi.w	80098da <_dtoa_r+0x442>
 8009792:	2c00      	cmp	r4, #0
 8009794:	f000 80a1 	beq.w	80098da <_dtoa_r+0x442>
 8009798:	2f00      	cmp	r7, #0
 800979a:	dd33      	ble.n	8009804 <_dtoa_r+0x36c>
 800979c:	4bad      	ldr	r3, [pc, #692]	@ (8009a54 <_dtoa_r+0x5bc>)
 800979e:	f007 020f 	and.w	r2, r7, #15
 80097a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a6:	ed93 7b00 	vldr	d7, [r3]
 80097aa:	05f8      	lsls	r0, r7, #23
 80097ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80097b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097b4:	d516      	bpl.n	80097e4 <_dtoa_r+0x34c>
 80097b6:	4ba8      	ldr	r3, [pc, #672]	@ (8009a58 <_dtoa_r+0x5c0>)
 80097b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097c0:	f7f7 f844 	bl	800084c <__aeabi_ddiv>
 80097c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c8:	f004 040f 	and.w	r4, r4, #15
 80097cc:	2603      	movs	r6, #3
 80097ce:	4da2      	ldr	r5, [pc, #648]	@ (8009a58 <_dtoa_r+0x5c0>)
 80097d0:	b954      	cbnz	r4, 80097e8 <_dtoa_r+0x350>
 80097d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097da:	f7f7 f837 	bl	800084c <__aeabi_ddiv>
 80097de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097e2:	e028      	b.n	8009836 <_dtoa_r+0x39e>
 80097e4:	2602      	movs	r6, #2
 80097e6:	e7f2      	b.n	80097ce <_dtoa_r+0x336>
 80097e8:	07e1      	lsls	r1, r4, #31
 80097ea:	d508      	bpl.n	80097fe <_dtoa_r+0x366>
 80097ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097fc:	3601      	adds	r6, #1
 80097fe:	1064      	asrs	r4, r4, #1
 8009800:	3508      	adds	r5, #8
 8009802:	e7e5      	b.n	80097d0 <_dtoa_r+0x338>
 8009804:	f000 80d2 	beq.w	80099ac <_dtoa_r+0x514>
 8009808:	427c      	negs	r4, r7
 800980a:	4b92      	ldr	r3, [pc, #584]	@ (8009a54 <_dtoa_r+0x5bc>)
 800980c:	4d92      	ldr	r5, [pc, #584]	@ (8009a58 <_dtoa_r+0x5c0>)
 800980e:	f004 020f 	and.w	r2, r4, #15
 8009812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800981e:	f7f6 feeb 	bl	80005f8 <__aeabi_dmul>
 8009822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009826:	1124      	asrs	r4, r4, #4
 8009828:	2300      	movs	r3, #0
 800982a:	2602      	movs	r6, #2
 800982c:	2c00      	cmp	r4, #0
 800982e:	f040 80b2 	bne.w	8009996 <_dtoa_r+0x4fe>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1d3      	bne.n	80097de <_dtoa_r+0x346>
 8009836:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009838:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 80b7 	beq.w	80099b0 <_dtoa_r+0x518>
 8009842:	4b86      	ldr	r3, [pc, #536]	@ (8009a5c <_dtoa_r+0x5c4>)
 8009844:	2200      	movs	r2, #0
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	f7f7 f947 	bl	8000adc <__aeabi_dcmplt>
 800984e:	2800      	cmp	r0, #0
 8009850:	f000 80ae 	beq.w	80099b0 <_dtoa_r+0x518>
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 80aa 	beq.w	80099b0 <_dtoa_r+0x518>
 800985c:	9b00      	ldr	r3, [sp, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	dd37      	ble.n	80098d2 <_dtoa_r+0x43a>
 8009862:	1e7b      	subs	r3, r7, #1
 8009864:	9304      	str	r3, [sp, #16]
 8009866:	4620      	mov	r0, r4
 8009868:	4b7d      	ldr	r3, [pc, #500]	@ (8009a60 <_dtoa_r+0x5c8>)
 800986a:	2200      	movs	r2, #0
 800986c:	4629      	mov	r1, r5
 800986e:	f7f6 fec3 	bl	80005f8 <__aeabi_dmul>
 8009872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009876:	9c00      	ldr	r4, [sp, #0]
 8009878:	3601      	adds	r6, #1
 800987a:	4630      	mov	r0, r6
 800987c:	f7f6 fe52 	bl	8000524 <__aeabi_i2d>
 8009880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009884:	f7f6 feb8 	bl	80005f8 <__aeabi_dmul>
 8009888:	4b76      	ldr	r3, [pc, #472]	@ (8009a64 <_dtoa_r+0x5cc>)
 800988a:	2200      	movs	r2, #0
 800988c:	f7f6 fcfe 	bl	800028c <__adddf3>
 8009890:	4605      	mov	r5, r0
 8009892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009896:	2c00      	cmp	r4, #0
 8009898:	f040 808d 	bne.w	80099b6 <_dtoa_r+0x51e>
 800989c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a0:	4b71      	ldr	r3, [pc, #452]	@ (8009a68 <_dtoa_r+0x5d0>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	f7f6 fcf0 	bl	8000288 <__aeabi_dsub>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4633      	mov	r3, r6
 80098b4:	f7f7 f930 	bl	8000b18 <__aeabi_dcmpgt>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f040 828b 	bne.w	8009dd4 <_dtoa_r+0x93c>
 80098be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c2:	462a      	mov	r2, r5
 80098c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098c8:	f7f7 f908 	bl	8000adc <__aeabi_dcmplt>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f040 8128 	bne.w	8009b22 <_dtoa_r+0x68a>
 80098d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80098d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80098da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f2c0 815a 	blt.w	8009b96 <_dtoa_r+0x6fe>
 80098e2:	2f0e      	cmp	r7, #14
 80098e4:	f300 8157 	bgt.w	8009b96 <_dtoa_r+0x6fe>
 80098e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a54 <_dtoa_r+0x5bc>)
 80098ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098ee:	ed93 7b00 	vldr	d7, [r3]
 80098f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	ed8d 7b00 	vstr	d7, [sp]
 80098fa:	da03      	bge.n	8009904 <_dtoa_r+0x46c>
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f340 8101 	ble.w	8009b06 <_dtoa_r+0x66e>
 8009904:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009908:	4656      	mov	r6, sl
 800990a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	f7f6 ff9b 	bl	800084c <__aeabi_ddiv>
 8009916:	f7f7 f91f 	bl	8000b58 <__aeabi_d2iz>
 800991a:	4680      	mov	r8, r0
 800991c:	f7f6 fe02 	bl	8000524 <__aeabi_i2d>
 8009920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009924:	f7f6 fe68 	bl	80005f8 <__aeabi_dmul>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009934:	f7f6 fca8 	bl	8000288 <__aeabi_dsub>
 8009938:	f806 4b01 	strb.w	r4, [r6], #1
 800993c:	9d07      	ldr	r5, [sp, #28]
 800993e:	eba6 040a 	sub.w	r4, r6, sl
 8009942:	42a5      	cmp	r5, r4
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	f040 8117 	bne.w	8009b7a <_dtoa_r+0x6e2>
 800994c:	f7f6 fc9e 	bl	800028c <__adddf3>
 8009950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009954:	4604      	mov	r4, r0
 8009956:	460d      	mov	r5, r1
 8009958:	f7f7 f8de 	bl	8000b18 <__aeabi_dcmpgt>
 800995c:	2800      	cmp	r0, #0
 800995e:	f040 80f9 	bne.w	8009b54 <_dtoa_r+0x6bc>
 8009962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f7 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800996e:	b118      	cbz	r0, 8009978 <_dtoa_r+0x4e0>
 8009970:	f018 0f01 	tst.w	r8, #1
 8009974:	f040 80ee 	bne.w	8009b54 <_dtoa_r+0x6bc>
 8009978:	4649      	mov	r1, r9
 800997a:	4658      	mov	r0, fp
 800997c:	f000 fc90 	bl	800a2a0 <_Bfree>
 8009980:	2300      	movs	r3, #0
 8009982:	7033      	strb	r3, [r6, #0]
 8009984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009986:	3701      	adds	r7, #1
 8009988:	601f      	str	r7, [r3, #0]
 800998a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 831d 	beq.w	8009fcc <_dtoa_r+0xb34>
 8009992:	601e      	str	r6, [r3, #0]
 8009994:	e31a      	b.n	8009fcc <_dtoa_r+0xb34>
 8009996:	07e2      	lsls	r2, r4, #31
 8009998:	d505      	bpl.n	80099a6 <_dtoa_r+0x50e>
 800999a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800999e:	f7f6 fe2b 	bl	80005f8 <__aeabi_dmul>
 80099a2:	3601      	adds	r6, #1
 80099a4:	2301      	movs	r3, #1
 80099a6:	1064      	asrs	r4, r4, #1
 80099a8:	3508      	adds	r5, #8
 80099aa:	e73f      	b.n	800982c <_dtoa_r+0x394>
 80099ac:	2602      	movs	r6, #2
 80099ae:	e742      	b.n	8009836 <_dtoa_r+0x39e>
 80099b0:	9c07      	ldr	r4, [sp, #28]
 80099b2:	9704      	str	r7, [sp, #16]
 80099b4:	e761      	b.n	800987a <_dtoa_r+0x3e2>
 80099b6:	4b27      	ldr	r3, [pc, #156]	@ (8009a54 <_dtoa_r+0x5bc>)
 80099b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099c2:	4454      	add	r4, sl
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d053      	beq.n	8009a70 <_dtoa_r+0x5d8>
 80099c8:	4928      	ldr	r1, [pc, #160]	@ (8009a6c <_dtoa_r+0x5d4>)
 80099ca:	2000      	movs	r0, #0
 80099cc:	f7f6 ff3e 	bl	800084c <__aeabi_ddiv>
 80099d0:	4633      	mov	r3, r6
 80099d2:	462a      	mov	r2, r5
 80099d4:	f7f6 fc58 	bl	8000288 <__aeabi_dsub>
 80099d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099dc:	4656      	mov	r6, sl
 80099de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099e2:	f7f7 f8b9 	bl	8000b58 <__aeabi_d2iz>
 80099e6:	4605      	mov	r5, r0
 80099e8:	f7f6 fd9c 	bl	8000524 <__aeabi_i2d>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f4:	f7f6 fc48 	bl	8000288 <__aeabi_dsub>
 80099f8:	3530      	adds	r5, #48	@ 0x30
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a02:	f806 5b01 	strb.w	r5, [r6], #1
 8009a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a0a:	f7f7 f867 	bl	8000adc <__aeabi_dcmplt>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d171      	bne.n	8009af6 <_dtoa_r+0x65e>
 8009a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a16:	4911      	ldr	r1, [pc, #68]	@ (8009a5c <_dtoa_r+0x5c4>)
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f7f6 fc35 	bl	8000288 <__aeabi_dsub>
 8009a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a22:	f7f7 f85b 	bl	8000adc <__aeabi_dcmplt>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f040 8095 	bne.w	8009b56 <_dtoa_r+0x6be>
 8009a2c:	42a6      	cmp	r6, r4
 8009a2e:	f43f af50 	beq.w	80098d2 <_dtoa_r+0x43a>
 8009a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a36:	4b0a      	ldr	r3, [pc, #40]	@ (8009a60 <_dtoa_r+0x5c8>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f7f6 fddd 	bl	80005f8 <__aeabi_dmul>
 8009a3e:	4b08      	ldr	r3, [pc, #32]	@ (8009a60 <_dtoa_r+0x5c8>)
 8009a40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a44:	2200      	movs	r2, #0
 8009a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4a:	f7f6 fdd5 	bl	80005f8 <__aeabi_dmul>
 8009a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a52:	e7c4      	b.n	80099de <_dtoa_r+0x546>
 8009a54:	0800cd30 	.word	0x0800cd30
 8009a58:	0800cd08 	.word	0x0800cd08
 8009a5c:	3ff00000 	.word	0x3ff00000
 8009a60:	40240000 	.word	0x40240000
 8009a64:	401c0000 	.word	0x401c0000
 8009a68:	40140000 	.word	0x40140000
 8009a6c:	3fe00000 	.word	0x3fe00000
 8009a70:	4631      	mov	r1, r6
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7f6 fdc0 	bl	80005f8 <__aeabi_dmul>
 8009a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a7c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009a7e:	4656      	mov	r6, sl
 8009a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a84:	f7f7 f868 	bl	8000b58 <__aeabi_d2iz>
 8009a88:	4605      	mov	r5, r0
 8009a8a:	f7f6 fd4b 	bl	8000524 <__aeabi_i2d>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a96:	f7f6 fbf7 	bl	8000288 <__aeabi_dsub>
 8009a9a:	3530      	adds	r5, #48	@ 0x30
 8009a9c:	f806 5b01 	strb.w	r5, [r6], #1
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	d124      	bne.n	8009afa <_dtoa_r+0x662>
 8009ab0:	4bac      	ldr	r3, [pc, #688]	@ (8009d64 <_dtoa_r+0x8cc>)
 8009ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ab6:	f7f6 fbe9 	bl	800028c <__adddf3>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ac2:	f7f7 f829 	bl	8000b18 <__aeabi_dcmpgt>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d145      	bne.n	8009b56 <_dtoa_r+0x6be>
 8009aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ace:	49a5      	ldr	r1, [pc, #660]	@ (8009d64 <_dtoa_r+0x8cc>)
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f7f6 fbd9 	bl	8000288 <__aeabi_dsub>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ade:	f7f6 fffd 	bl	8000adc <__aeabi_dcmplt>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f43f aef5 	beq.w	80098d2 <_dtoa_r+0x43a>
 8009ae8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009aea:	1e73      	subs	r3, r6, #1
 8009aec:	9315      	str	r3, [sp, #84]	@ 0x54
 8009aee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009af2:	2b30      	cmp	r3, #48	@ 0x30
 8009af4:	d0f8      	beq.n	8009ae8 <_dtoa_r+0x650>
 8009af6:	9f04      	ldr	r7, [sp, #16]
 8009af8:	e73e      	b.n	8009978 <_dtoa_r+0x4e0>
 8009afa:	4b9b      	ldr	r3, [pc, #620]	@ (8009d68 <_dtoa_r+0x8d0>)
 8009afc:	f7f6 fd7c 	bl	80005f8 <__aeabi_dmul>
 8009b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b04:	e7bc      	b.n	8009a80 <_dtoa_r+0x5e8>
 8009b06:	d10c      	bne.n	8009b22 <_dtoa_r+0x68a>
 8009b08:	4b98      	ldr	r3, [pc, #608]	@ (8009d6c <_dtoa_r+0x8d4>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b10:	f7f6 fd72 	bl	80005f8 <__aeabi_dmul>
 8009b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b18:	f7f6 fff4 	bl	8000b04 <__aeabi_dcmpge>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f000 8157 	beq.w	8009dd0 <_dtoa_r+0x938>
 8009b22:	2400      	movs	r4, #0
 8009b24:	4625      	mov	r5, r4
 8009b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	9304      	str	r3, [sp, #16]
 8009b2c:	4656      	mov	r6, sl
 8009b2e:	2700      	movs	r7, #0
 8009b30:	4621      	mov	r1, r4
 8009b32:	4658      	mov	r0, fp
 8009b34:	f000 fbb4 	bl	800a2a0 <_Bfree>
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	d0dc      	beq.n	8009af6 <_dtoa_r+0x65e>
 8009b3c:	b12f      	cbz	r7, 8009b4a <_dtoa_r+0x6b2>
 8009b3e:	42af      	cmp	r7, r5
 8009b40:	d003      	beq.n	8009b4a <_dtoa_r+0x6b2>
 8009b42:	4639      	mov	r1, r7
 8009b44:	4658      	mov	r0, fp
 8009b46:	f000 fbab 	bl	800a2a0 <_Bfree>
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	f000 fba7 	bl	800a2a0 <_Bfree>
 8009b52:	e7d0      	b.n	8009af6 <_dtoa_r+0x65e>
 8009b54:	9704      	str	r7, [sp, #16]
 8009b56:	4633      	mov	r3, r6
 8009b58:	461e      	mov	r6, r3
 8009b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b5e:	2a39      	cmp	r2, #57	@ 0x39
 8009b60:	d107      	bne.n	8009b72 <_dtoa_r+0x6da>
 8009b62:	459a      	cmp	sl, r3
 8009b64:	d1f8      	bne.n	8009b58 <_dtoa_r+0x6c0>
 8009b66:	9a04      	ldr	r2, [sp, #16]
 8009b68:	3201      	adds	r2, #1
 8009b6a:	9204      	str	r2, [sp, #16]
 8009b6c:	2230      	movs	r2, #48	@ 0x30
 8009b6e:	f88a 2000 	strb.w	r2, [sl]
 8009b72:	781a      	ldrb	r2, [r3, #0]
 8009b74:	3201      	adds	r2, #1
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	e7bd      	b.n	8009af6 <_dtoa_r+0x65e>
 8009b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d68 <_dtoa_r+0x8d0>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f7f6 fd3b 	bl	80005f8 <__aeabi_dmul>
 8009b82:	2200      	movs	r2, #0
 8009b84:	2300      	movs	r3, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	f7f6 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f43f aebb 	beq.w	800990a <_dtoa_r+0x472>
 8009b94:	e6f0      	b.n	8009978 <_dtoa_r+0x4e0>
 8009b96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b98:	2a00      	cmp	r2, #0
 8009b9a:	f000 80db 	beq.w	8009d54 <_dtoa_r+0x8bc>
 8009b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ba0:	2a01      	cmp	r2, #1
 8009ba2:	f300 80bf 	bgt.w	8009d24 <_dtoa_r+0x88c>
 8009ba6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	f000 80b7 	beq.w	8009d1c <_dtoa_r+0x884>
 8009bae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bb4:	4646      	mov	r6, r8
 8009bb6:	9a08      	ldr	r2, [sp, #32]
 8009bb8:	2101      	movs	r1, #1
 8009bba:	441a      	add	r2, r3
 8009bbc:	4658      	mov	r0, fp
 8009bbe:	4498      	add	r8, r3
 8009bc0:	9208      	str	r2, [sp, #32]
 8009bc2:	f000 fc6b 	bl	800a49c <__i2b>
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	b15e      	cbz	r6, 8009be2 <_dtoa_r+0x74a>
 8009bca:	9b08      	ldr	r3, [sp, #32]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dd08      	ble.n	8009be2 <_dtoa_r+0x74a>
 8009bd0:	42b3      	cmp	r3, r6
 8009bd2:	9a08      	ldr	r2, [sp, #32]
 8009bd4:	bfa8      	it	ge
 8009bd6:	4633      	movge	r3, r6
 8009bd8:	eba8 0803 	sub.w	r8, r8, r3
 8009bdc:	1af6      	subs	r6, r6, r3
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	9308      	str	r3, [sp, #32]
 8009be2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009be4:	b1f3      	cbz	r3, 8009c24 <_dtoa_r+0x78c>
 8009be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80b7 	beq.w	8009d5c <_dtoa_r+0x8c4>
 8009bee:	b18c      	cbz	r4, 8009c14 <_dtoa_r+0x77c>
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	4658      	mov	r0, fp
 8009bf6:	f000 fd11 	bl	800a61c <__pow5mult>
 8009bfa:	464a      	mov	r2, r9
 8009bfc:	4601      	mov	r1, r0
 8009bfe:	4605      	mov	r5, r0
 8009c00:	4658      	mov	r0, fp
 8009c02:	f000 fc61 	bl	800a4c8 <__multiply>
 8009c06:	4649      	mov	r1, r9
 8009c08:	9004      	str	r0, [sp, #16]
 8009c0a:	4658      	mov	r0, fp
 8009c0c:	f000 fb48 	bl	800a2a0 <_Bfree>
 8009c10:	9b04      	ldr	r3, [sp, #16]
 8009c12:	4699      	mov	r9, r3
 8009c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c16:	1b1a      	subs	r2, r3, r4
 8009c18:	d004      	beq.n	8009c24 <_dtoa_r+0x78c>
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	4658      	mov	r0, fp
 8009c1e:	f000 fcfd 	bl	800a61c <__pow5mult>
 8009c22:	4681      	mov	r9, r0
 8009c24:	2101      	movs	r1, #1
 8009c26:	4658      	mov	r0, fp
 8009c28:	f000 fc38 	bl	800a49c <__i2b>
 8009c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c2e:	4604      	mov	r4, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 81cf 	beq.w	8009fd4 <_dtoa_r+0xb3c>
 8009c36:	461a      	mov	r2, r3
 8009c38:	4601      	mov	r1, r0
 8009c3a:	4658      	mov	r0, fp
 8009c3c:	f000 fcee 	bl	800a61c <__pow5mult>
 8009c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	4604      	mov	r4, r0
 8009c46:	f300 8095 	bgt.w	8009d74 <_dtoa_r+0x8dc>
 8009c4a:	9b02      	ldr	r3, [sp, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f040 8087 	bne.w	8009d60 <_dtoa_r+0x8c8>
 8009c52:	9b03      	ldr	r3, [sp, #12]
 8009c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f040 8089 	bne.w	8009d70 <_dtoa_r+0x8d8>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c64:	0d1b      	lsrs	r3, r3, #20
 8009c66:	051b      	lsls	r3, r3, #20
 8009c68:	b12b      	cbz	r3, 8009c76 <_dtoa_r+0x7de>
 8009c6a:	9b08      	ldr	r3, [sp, #32]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	9308      	str	r3, [sp, #32]
 8009c70:	f108 0801 	add.w	r8, r8, #1
 8009c74:	2301      	movs	r3, #1
 8009c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 81b0 	beq.w	8009fe0 <_dtoa_r+0xb48>
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c86:	6918      	ldr	r0, [r3, #16]
 8009c88:	f000 fbbc 	bl	800a404 <__hi0bits>
 8009c8c:	f1c0 0020 	rsb	r0, r0, #32
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	4418      	add	r0, r3
 8009c94:	f010 001f 	ands.w	r0, r0, #31
 8009c98:	d077      	beq.n	8009d8a <_dtoa_r+0x8f2>
 8009c9a:	f1c0 0320 	rsb	r3, r0, #32
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	dd6b      	ble.n	8009d7a <_dtoa_r+0x8e2>
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	f1c0 001c 	rsb	r0, r0, #28
 8009ca8:	4403      	add	r3, r0
 8009caa:	4480      	add	r8, r0
 8009cac:	4406      	add	r6, r0
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	f1b8 0f00 	cmp.w	r8, #0
 8009cb4:	dd05      	ble.n	8009cc2 <_dtoa_r+0x82a>
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	4642      	mov	r2, r8
 8009cba:	4658      	mov	r0, fp
 8009cbc:	f000 fd08 	bl	800a6d0 <__lshift>
 8009cc0:	4681      	mov	r9, r0
 8009cc2:	9b08      	ldr	r3, [sp, #32]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dd05      	ble.n	8009cd4 <_dtoa_r+0x83c>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	461a      	mov	r2, r3
 8009ccc:	4658      	mov	r0, fp
 8009cce:	f000 fcff 	bl	800a6d0 <__lshift>
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d059      	beq.n	8009d8e <_dtoa_r+0x8f6>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f000 fd63 	bl	800a7a8 <__mcmp>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	da53      	bge.n	8009d8e <_dtoa_r+0x8f6>
 8009ce6:	1e7b      	subs	r3, r7, #1
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	4649      	mov	r1, r9
 8009cec:	2300      	movs	r3, #0
 8009cee:	220a      	movs	r2, #10
 8009cf0:	4658      	mov	r0, fp
 8009cf2:	f000 faf7 	bl	800a2e4 <__multadd>
 8009cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cf8:	4681      	mov	r9, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8172 	beq.w	8009fe4 <_dtoa_r+0xb4c>
 8009d00:	2300      	movs	r3, #0
 8009d02:	4629      	mov	r1, r5
 8009d04:	220a      	movs	r2, #10
 8009d06:	4658      	mov	r0, fp
 8009d08:	f000 faec 	bl	800a2e4 <__multadd>
 8009d0c:	9b00      	ldr	r3, [sp, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	4605      	mov	r5, r0
 8009d12:	dc67      	bgt.n	8009de4 <_dtoa_r+0x94c>
 8009d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	dc41      	bgt.n	8009d9e <_dtoa_r+0x906>
 8009d1a:	e063      	b.n	8009de4 <_dtoa_r+0x94c>
 8009d1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d22:	e746      	b.n	8009bb2 <_dtoa_r+0x71a>
 8009d24:	9b07      	ldr	r3, [sp, #28]
 8009d26:	1e5c      	subs	r4, r3, #1
 8009d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	bfbf      	itttt	lt
 8009d2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009d32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d34:	1ae3      	sublt	r3, r4, r3
 8009d36:	bfb4      	ite	lt
 8009d38:	18d2      	addlt	r2, r2, r3
 8009d3a:	1b1c      	subge	r4, r3, r4
 8009d3c:	9b07      	ldr	r3, [sp, #28]
 8009d3e:	bfbc      	itt	lt
 8009d40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009d42:	2400      	movlt	r4, #0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bfb5      	itete	lt
 8009d48:	eba8 0603 	sublt.w	r6, r8, r3
 8009d4c:	9b07      	ldrge	r3, [sp, #28]
 8009d4e:	2300      	movlt	r3, #0
 8009d50:	4646      	movge	r6, r8
 8009d52:	e730      	b.n	8009bb6 <_dtoa_r+0x71e>
 8009d54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d58:	4646      	mov	r6, r8
 8009d5a:	e735      	b.n	8009bc8 <_dtoa_r+0x730>
 8009d5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d5e:	e75c      	b.n	8009c1a <_dtoa_r+0x782>
 8009d60:	2300      	movs	r3, #0
 8009d62:	e788      	b.n	8009c76 <_dtoa_r+0x7de>
 8009d64:	3fe00000 	.word	0x3fe00000
 8009d68:	40240000 	.word	0x40240000
 8009d6c:	40140000 	.word	0x40140000
 8009d70:	9b02      	ldr	r3, [sp, #8]
 8009d72:	e780      	b.n	8009c76 <_dtoa_r+0x7de>
 8009d74:	2300      	movs	r3, #0
 8009d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d78:	e782      	b.n	8009c80 <_dtoa_r+0x7e8>
 8009d7a:	d099      	beq.n	8009cb0 <_dtoa_r+0x818>
 8009d7c:	9a08      	ldr	r2, [sp, #32]
 8009d7e:	331c      	adds	r3, #28
 8009d80:	441a      	add	r2, r3
 8009d82:	4498      	add	r8, r3
 8009d84:	441e      	add	r6, r3
 8009d86:	9208      	str	r2, [sp, #32]
 8009d88:	e792      	b.n	8009cb0 <_dtoa_r+0x818>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	e7f6      	b.n	8009d7c <_dtoa_r+0x8e4>
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	9704      	str	r7, [sp, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dc20      	bgt.n	8009dd8 <_dtoa_r+0x940>
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	dd1e      	ble.n	8009ddc <_dtoa_r+0x944>
 8009d9e:	9b00      	ldr	r3, [sp, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f47f aec0 	bne.w	8009b26 <_dtoa_r+0x68e>
 8009da6:	4621      	mov	r1, r4
 8009da8:	2205      	movs	r2, #5
 8009daa:	4658      	mov	r0, fp
 8009dac:	f000 fa9a 	bl	800a2e4 <__multadd>
 8009db0:	4601      	mov	r1, r0
 8009db2:	4604      	mov	r4, r0
 8009db4:	4648      	mov	r0, r9
 8009db6:	f000 fcf7 	bl	800a7a8 <__mcmp>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f77f aeb3 	ble.w	8009b26 <_dtoa_r+0x68e>
 8009dc0:	4656      	mov	r6, sl
 8009dc2:	2331      	movs	r3, #49	@ 0x31
 8009dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8009dc8:	9b04      	ldr	r3, [sp, #16]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	e6ae      	b.n	8009b2e <_dtoa_r+0x696>
 8009dd0:	9c07      	ldr	r4, [sp, #28]
 8009dd2:	9704      	str	r7, [sp, #16]
 8009dd4:	4625      	mov	r5, r4
 8009dd6:	e7f3      	b.n	8009dc0 <_dtoa_r+0x928>
 8009dd8:	9b07      	ldr	r3, [sp, #28]
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 8104 	beq.w	8009fec <_dtoa_r+0xb54>
 8009de4:	2e00      	cmp	r6, #0
 8009de6:	dd05      	ble.n	8009df4 <_dtoa_r+0x95c>
 8009de8:	4629      	mov	r1, r5
 8009dea:	4632      	mov	r2, r6
 8009dec:	4658      	mov	r0, fp
 8009dee:	f000 fc6f 	bl	800a6d0 <__lshift>
 8009df2:	4605      	mov	r5, r0
 8009df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d05a      	beq.n	8009eb0 <_dtoa_r+0xa18>
 8009dfa:	6869      	ldr	r1, [r5, #4]
 8009dfc:	4658      	mov	r0, fp
 8009dfe:	f000 fa0f 	bl	800a220 <_Balloc>
 8009e02:	4606      	mov	r6, r0
 8009e04:	b928      	cbnz	r0, 8009e12 <_dtoa_r+0x97a>
 8009e06:	4b84      	ldr	r3, [pc, #528]	@ (800a018 <_dtoa_r+0xb80>)
 8009e08:	4602      	mov	r2, r0
 8009e0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e0e:	f7ff bb5a 	b.w	80094c6 <_dtoa_r+0x2e>
 8009e12:	692a      	ldr	r2, [r5, #16]
 8009e14:	3202      	adds	r2, #2
 8009e16:	0092      	lsls	r2, r2, #2
 8009e18:	f105 010c 	add.w	r1, r5, #12
 8009e1c:	300c      	adds	r0, #12
 8009e1e:	f002 f8e1 	bl	800bfe4 <memcpy>
 8009e22:	2201      	movs	r2, #1
 8009e24:	4631      	mov	r1, r6
 8009e26:	4658      	mov	r0, fp
 8009e28:	f000 fc52 	bl	800a6d0 <__lshift>
 8009e2c:	f10a 0301 	add.w	r3, sl, #1
 8009e30:	9307      	str	r3, [sp, #28]
 8009e32:	9b00      	ldr	r3, [sp, #0]
 8009e34:	4453      	add	r3, sl
 8009e36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e38:	9b02      	ldr	r3, [sp, #8]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	462f      	mov	r7, r5
 8009e40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e42:	4605      	mov	r5, r0
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	4621      	mov	r1, r4
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	4648      	mov	r0, r9
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	f7ff fa99 	bl	8009384 <quorem>
 8009e52:	4639      	mov	r1, r7
 8009e54:	9002      	str	r0, [sp, #8]
 8009e56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e5a:	4648      	mov	r0, r9
 8009e5c:	f000 fca4 	bl	800a7a8 <__mcmp>
 8009e60:	462a      	mov	r2, r5
 8009e62:	9008      	str	r0, [sp, #32]
 8009e64:	4621      	mov	r1, r4
 8009e66:	4658      	mov	r0, fp
 8009e68:	f000 fcba 	bl	800a7e0 <__mdiff>
 8009e6c:	68c2      	ldr	r2, [r0, #12]
 8009e6e:	4606      	mov	r6, r0
 8009e70:	bb02      	cbnz	r2, 8009eb4 <_dtoa_r+0xa1c>
 8009e72:	4601      	mov	r1, r0
 8009e74:	4648      	mov	r0, r9
 8009e76:	f000 fc97 	bl	800a7a8 <__mcmp>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4658      	mov	r0, fp
 8009e80:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e82:	f000 fa0d 	bl	800a2a0 <_Bfree>
 8009e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e8a:	9e07      	ldr	r6, [sp, #28]
 8009e8c:	ea43 0102 	orr.w	r1, r3, r2
 8009e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e92:	4319      	orrs	r1, r3
 8009e94:	d110      	bne.n	8009eb8 <_dtoa_r+0xa20>
 8009e96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e9a:	d029      	beq.n	8009ef0 <_dtoa_r+0xa58>
 8009e9c:	9b08      	ldr	r3, [sp, #32]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	dd02      	ble.n	8009ea8 <_dtoa_r+0xa10>
 8009ea2:	9b02      	ldr	r3, [sp, #8]
 8009ea4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ea8:	9b00      	ldr	r3, [sp, #0]
 8009eaa:	f883 8000 	strb.w	r8, [r3]
 8009eae:	e63f      	b.n	8009b30 <_dtoa_r+0x698>
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	e7bb      	b.n	8009e2c <_dtoa_r+0x994>
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	e7e1      	b.n	8009e7c <_dtoa_r+0x9e4>
 8009eb8:	9b08      	ldr	r3, [sp, #32]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	db04      	blt.n	8009ec8 <_dtoa_r+0xa30>
 8009ebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ec0:	430b      	orrs	r3, r1
 8009ec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	d120      	bne.n	8009f0a <_dtoa_r+0xa72>
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	dded      	ble.n	8009ea8 <_dtoa_r+0xa10>
 8009ecc:	4649      	mov	r1, r9
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4658      	mov	r0, fp
 8009ed2:	f000 fbfd 	bl	800a6d0 <__lshift>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4681      	mov	r9, r0
 8009eda:	f000 fc65 	bl	800a7a8 <__mcmp>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	dc03      	bgt.n	8009eea <_dtoa_r+0xa52>
 8009ee2:	d1e1      	bne.n	8009ea8 <_dtoa_r+0xa10>
 8009ee4:	f018 0f01 	tst.w	r8, #1
 8009ee8:	d0de      	beq.n	8009ea8 <_dtoa_r+0xa10>
 8009eea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009eee:	d1d8      	bne.n	8009ea2 <_dtoa_r+0xa0a>
 8009ef0:	9a00      	ldr	r2, [sp, #0]
 8009ef2:	2339      	movs	r3, #57	@ 0x39
 8009ef4:	7013      	strb	r3, [r2, #0]
 8009ef6:	4633      	mov	r3, r6
 8009ef8:	461e      	mov	r6, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f00:	2a39      	cmp	r2, #57	@ 0x39
 8009f02:	d052      	beq.n	8009faa <_dtoa_r+0xb12>
 8009f04:	3201      	adds	r2, #1
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	e612      	b.n	8009b30 <_dtoa_r+0x698>
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	dd07      	ble.n	8009f1e <_dtoa_r+0xa86>
 8009f0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f12:	d0ed      	beq.n	8009ef0 <_dtoa_r+0xa58>
 8009f14:	9a00      	ldr	r2, [sp, #0]
 8009f16:	f108 0301 	add.w	r3, r8, #1
 8009f1a:	7013      	strb	r3, [r2, #0]
 8009f1c:	e608      	b.n	8009b30 <_dtoa_r+0x698>
 8009f1e:	9b07      	ldr	r3, [sp, #28]
 8009f20:	9a07      	ldr	r2, [sp, #28]
 8009f22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d028      	beq.n	8009f7e <_dtoa_r+0xae6>
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	2300      	movs	r3, #0
 8009f30:	220a      	movs	r2, #10
 8009f32:	4658      	mov	r0, fp
 8009f34:	f000 f9d6 	bl	800a2e4 <__multadd>
 8009f38:	42af      	cmp	r7, r5
 8009f3a:	4681      	mov	r9, r0
 8009f3c:	f04f 0300 	mov.w	r3, #0
 8009f40:	f04f 020a 	mov.w	r2, #10
 8009f44:	4639      	mov	r1, r7
 8009f46:	4658      	mov	r0, fp
 8009f48:	d107      	bne.n	8009f5a <_dtoa_r+0xac2>
 8009f4a:	f000 f9cb 	bl	800a2e4 <__multadd>
 8009f4e:	4607      	mov	r7, r0
 8009f50:	4605      	mov	r5, r0
 8009f52:	9b07      	ldr	r3, [sp, #28]
 8009f54:	3301      	adds	r3, #1
 8009f56:	9307      	str	r3, [sp, #28]
 8009f58:	e774      	b.n	8009e44 <_dtoa_r+0x9ac>
 8009f5a:	f000 f9c3 	bl	800a2e4 <__multadd>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4607      	mov	r7, r0
 8009f62:	2300      	movs	r3, #0
 8009f64:	220a      	movs	r2, #10
 8009f66:	4658      	mov	r0, fp
 8009f68:	f000 f9bc 	bl	800a2e4 <__multadd>
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	e7f0      	b.n	8009f52 <_dtoa_r+0xaba>
 8009f70:	9b00      	ldr	r3, [sp, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfcc      	ite	gt
 8009f76:	461e      	movgt	r6, r3
 8009f78:	2601      	movle	r6, #1
 8009f7a:	4456      	add	r6, sl
 8009f7c:	2700      	movs	r7, #0
 8009f7e:	4649      	mov	r1, r9
 8009f80:	2201      	movs	r2, #1
 8009f82:	4658      	mov	r0, fp
 8009f84:	f000 fba4 	bl	800a6d0 <__lshift>
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4681      	mov	r9, r0
 8009f8c:	f000 fc0c 	bl	800a7a8 <__mcmp>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	dcb0      	bgt.n	8009ef6 <_dtoa_r+0xa5e>
 8009f94:	d102      	bne.n	8009f9c <_dtoa_r+0xb04>
 8009f96:	f018 0f01 	tst.w	r8, #1
 8009f9a:	d1ac      	bne.n	8009ef6 <_dtoa_r+0xa5e>
 8009f9c:	4633      	mov	r3, r6
 8009f9e:	461e      	mov	r6, r3
 8009fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fa4:	2a30      	cmp	r2, #48	@ 0x30
 8009fa6:	d0fa      	beq.n	8009f9e <_dtoa_r+0xb06>
 8009fa8:	e5c2      	b.n	8009b30 <_dtoa_r+0x698>
 8009faa:	459a      	cmp	sl, r3
 8009fac:	d1a4      	bne.n	8009ef8 <_dtoa_r+0xa60>
 8009fae:	9b04      	ldr	r3, [sp, #16]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	2331      	movs	r3, #49	@ 0x31
 8009fb6:	f88a 3000 	strb.w	r3, [sl]
 8009fba:	e5b9      	b.n	8009b30 <_dtoa_r+0x698>
 8009fbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a01c <_dtoa_r+0xb84>
 8009fc2:	b11b      	cbz	r3, 8009fcc <_dtoa_r+0xb34>
 8009fc4:	f10a 0308 	add.w	r3, sl, #8
 8009fc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	4650      	mov	r0, sl
 8009fce:	b019      	add	sp, #100	@ 0x64
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	f77f ae37 	ble.w	8009c4a <_dtoa_r+0x7b2>
 8009fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe0:	2001      	movs	r0, #1
 8009fe2:	e655      	b.n	8009c90 <_dtoa_r+0x7f8>
 8009fe4:	9b00      	ldr	r3, [sp, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f77f aed6 	ble.w	8009d98 <_dtoa_r+0x900>
 8009fec:	4656      	mov	r6, sl
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4648      	mov	r0, r9
 8009ff2:	f7ff f9c7 	bl	8009384 <quorem>
 8009ff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ffa:	f806 8b01 	strb.w	r8, [r6], #1
 8009ffe:	9b00      	ldr	r3, [sp, #0]
 800a000:	eba6 020a 	sub.w	r2, r6, sl
 800a004:	4293      	cmp	r3, r2
 800a006:	ddb3      	ble.n	8009f70 <_dtoa_r+0xad8>
 800a008:	4649      	mov	r1, r9
 800a00a:	2300      	movs	r3, #0
 800a00c:	220a      	movs	r2, #10
 800a00e:	4658      	mov	r0, fp
 800a010:	f000 f968 	bl	800a2e4 <__multadd>
 800a014:	4681      	mov	r9, r0
 800a016:	e7ea      	b.n	8009fee <_dtoa_r+0xb56>
 800a018:	0800cc8e 	.word	0x0800cc8e
 800a01c:	0800cc12 	.word	0x0800cc12

0800a020 <_free_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4605      	mov	r5, r0
 800a024:	2900      	cmp	r1, #0
 800a026:	d041      	beq.n	800a0ac <_free_r+0x8c>
 800a028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a02c:	1f0c      	subs	r4, r1, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfb8      	it	lt
 800a032:	18e4      	addlt	r4, r4, r3
 800a034:	f000 f8e8 	bl	800a208 <__malloc_lock>
 800a038:	4a1d      	ldr	r2, [pc, #116]	@ (800a0b0 <_free_r+0x90>)
 800a03a:	6813      	ldr	r3, [r2, #0]
 800a03c:	b933      	cbnz	r3, 800a04c <_free_r+0x2c>
 800a03e:	6063      	str	r3, [r4, #4]
 800a040:	6014      	str	r4, [r2, #0]
 800a042:	4628      	mov	r0, r5
 800a044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a048:	f000 b8e4 	b.w	800a214 <__malloc_unlock>
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d908      	bls.n	800a062 <_free_r+0x42>
 800a050:	6820      	ldr	r0, [r4, #0]
 800a052:	1821      	adds	r1, r4, r0
 800a054:	428b      	cmp	r3, r1
 800a056:	bf01      	itttt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	1809      	addeq	r1, r1, r0
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	e7ed      	b.n	800a03e <_free_r+0x1e>
 800a062:	461a      	mov	r2, r3
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	b10b      	cbz	r3, 800a06c <_free_r+0x4c>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d9fa      	bls.n	800a062 <_free_r+0x42>
 800a06c:	6811      	ldr	r1, [r2, #0]
 800a06e:	1850      	adds	r0, r2, r1
 800a070:	42a0      	cmp	r0, r4
 800a072:	d10b      	bne.n	800a08c <_free_r+0x6c>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	4401      	add	r1, r0
 800a078:	1850      	adds	r0, r2, r1
 800a07a:	4283      	cmp	r3, r0
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	d1e0      	bne.n	800a042 <_free_r+0x22>
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	4408      	add	r0, r1
 800a088:	6010      	str	r0, [r2, #0]
 800a08a:	e7da      	b.n	800a042 <_free_r+0x22>
 800a08c:	d902      	bls.n	800a094 <_free_r+0x74>
 800a08e:	230c      	movs	r3, #12
 800a090:	602b      	str	r3, [r5, #0]
 800a092:	e7d6      	b.n	800a042 <_free_r+0x22>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	1821      	adds	r1, r4, r0
 800a098:	428b      	cmp	r3, r1
 800a09a:	bf04      	itt	eq
 800a09c:	6819      	ldreq	r1, [r3, #0]
 800a09e:	685b      	ldreq	r3, [r3, #4]
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	bf04      	itt	eq
 800a0a4:	1809      	addeq	r1, r1, r0
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	6054      	str	r4, [r2, #4]
 800a0aa:	e7ca      	b.n	800a042 <_free_r+0x22>
 800a0ac:	bd38      	pop	{r3, r4, r5, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20000df4 	.word	0x20000df4

0800a0b4 <malloc>:
 800a0b4:	4b02      	ldr	r3, [pc, #8]	@ (800a0c0 <malloc+0xc>)
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	f000 b825 	b.w	800a108 <_malloc_r>
 800a0be:	bf00      	nop
 800a0c0:	20000080 	.word	0x20000080

0800a0c4 <sbrk_aligned>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	4e0f      	ldr	r6, [pc, #60]	@ (800a104 <sbrk_aligned+0x40>)
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	6831      	ldr	r1, [r6, #0]
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	b911      	cbnz	r1, 800a0d6 <sbrk_aligned+0x12>
 800a0d0:	f001 ff78 	bl	800bfc4 <_sbrk_r>
 800a0d4:	6030      	str	r0, [r6, #0]
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f001 ff73 	bl	800bfc4 <_sbrk_r>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d103      	bne.n	800a0ea <sbrk_aligned+0x26>
 800a0e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ea:	1cc4      	adds	r4, r0, #3
 800a0ec:	f024 0403 	bic.w	r4, r4, #3
 800a0f0:	42a0      	cmp	r0, r4
 800a0f2:	d0f8      	beq.n	800a0e6 <sbrk_aligned+0x22>
 800a0f4:	1a21      	subs	r1, r4, r0
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f001 ff64 	bl	800bfc4 <_sbrk_r>
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d1f2      	bne.n	800a0e6 <sbrk_aligned+0x22>
 800a100:	e7ef      	b.n	800a0e2 <sbrk_aligned+0x1e>
 800a102:	bf00      	nop
 800a104:	20000df0 	.word	0x20000df0

0800a108 <_malloc_r>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	1ccd      	adds	r5, r1, #3
 800a10e:	f025 0503 	bic.w	r5, r5, #3
 800a112:	3508      	adds	r5, #8
 800a114:	2d0c      	cmp	r5, #12
 800a116:	bf38      	it	cc
 800a118:	250c      	movcc	r5, #12
 800a11a:	2d00      	cmp	r5, #0
 800a11c:	4606      	mov	r6, r0
 800a11e:	db01      	blt.n	800a124 <_malloc_r+0x1c>
 800a120:	42a9      	cmp	r1, r5
 800a122:	d904      	bls.n	800a12e <_malloc_r+0x26>
 800a124:	230c      	movs	r3, #12
 800a126:	6033      	str	r3, [r6, #0]
 800a128:	2000      	movs	r0, #0
 800a12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a12e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a204 <_malloc_r+0xfc>
 800a132:	f000 f869 	bl	800a208 <__malloc_lock>
 800a136:	f8d8 3000 	ldr.w	r3, [r8]
 800a13a:	461c      	mov	r4, r3
 800a13c:	bb44      	cbnz	r4, 800a190 <_malloc_r+0x88>
 800a13e:	4629      	mov	r1, r5
 800a140:	4630      	mov	r0, r6
 800a142:	f7ff ffbf 	bl	800a0c4 <sbrk_aligned>
 800a146:	1c43      	adds	r3, r0, #1
 800a148:	4604      	mov	r4, r0
 800a14a:	d158      	bne.n	800a1fe <_malloc_r+0xf6>
 800a14c:	f8d8 4000 	ldr.w	r4, [r8]
 800a150:	4627      	mov	r7, r4
 800a152:	2f00      	cmp	r7, #0
 800a154:	d143      	bne.n	800a1de <_malloc_r+0xd6>
 800a156:	2c00      	cmp	r4, #0
 800a158:	d04b      	beq.n	800a1f2 <_malloc_r+0xea>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	4639      	mov	r1, r7
 800a15e:	4630      	mov	r0, r6
 800a160:	eb04 0903 	add.w	r9, r4, r3
 800a164:	f001 ff2e 	bl	800bfc4 <_sbrk_r>
 800a168:	4581      	cmp	r9, r0
 800a16a:	d142      	bne.n	800a1f2 <_malloc_r+0xea>
 800a16c:	6821      	ldr	r1, [r4, #0]
 800a16e:	1a6d      	subs	r5, r5, r1
 800a170:	4629      	mov	r1, r5
 800a172:	4630      	mov	r0, r6
 800a174:	f7ff ffa6 	bl	800a0c4 <sbrk_aligned>
 800a178:	3001      	adds	r0, #1
 800a17a:	d03a      	beq.n	800a1f2 <_malloc_r+0xea>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	442b      	add	r3, r5
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	f8d8 3000 	ldr.w	r3, [r8]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	bb62      	cbnz	r2, 800a1e4 <_malloc_r+0xdc>
 800a18a:	f8c8 7000 	str.w	r7, [r8]
 800a18e:	e00f      	b.n	800a1b0 <_malloc_r+0xa8>
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	1b52      	subs	r2, r2, r5
 800a194:	d420      	bmi.n	800a1d8 <_malloc_r+0xd0>
 800a196:	2a0b      	cmp	r2, #11
 800a198:	d917      	bls.n	800a1ca <_malloc_r+0xc2>
 800a19a:	1961      	adds	r1, r4, r5
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	6025      	str	r5, [r4, #0]
 800a1a0:	bf18      	it	ne
 800a1a2:	6059      	strne	r1, [r3, #4]
 800a1a4:	6863      	ldr	r3, [r4, #4]
 800a1a6:	bf08      	it	eq
 800a1a8:	f8c8 1000 	streq.w	r1, [r8]
 800a1ac:	5162      	str	r2, [r4, r5]
 800a1ae:	604b      	str	r3, [r1, #4]
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f000 f82f 	bl	800a214 <__malloc_unlock>
 800a1b6:	f104 000b 	add.w	r0, r4, #11
 800a1ba:	1d23      	adds	r3, r4, #4
 800a1bc:	f020 0007 	bic.w	r0, r0, #7
 800a1c0:	1ac2      	subs	r2, r0, r3
 800a1c2:	bf1c      	itt	ne
 800a1c4:	1a1b      	subne	r3, r3, r0
 800a1c6:	50a3      	strne	r3, [r4, r2]
 800a1c8:	e7af      	b.n	800a12a <_malloc_r+0x22>
 800a1ca:	6862      	ldr	r2, [r4, #4]
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	bf0c      	ite	eq
 800a1d0:	f8c8 2000 	streq.w	r2, [r8]
 800a1d4:	605a      	strne	r2, [r3, #4]
 800a1d6:	e7eb      	b.n	800a1b0 <_malloc_r+0xa8>
 800a1d8:	4623      	mov	r3, r4
 800a1da:	6864      	ldr	r4, [r4, #4]
 800a1dc:	e7ae      	b.n	800a13c <_malloc_r+0x34>
 800a1de:	463c      	mov	r4, r7
 800a1e0:	687f      	ldr	r7, [r7, #4]
 800a1e2:	e7b6      	b.n	800a152 <_malloc_r+0x4a>
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	d1fb      	bne.n	800a1e4 <_malloc_r+0xdc>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	6053      	str	r3, [r2, #4]
 800a1f0:	e7de      	b.n	800a1b0 <_malloc_r+0xa8>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	6033      	str	r3, [r6, #0]
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f000 f80c 	bl	800a214 <__malloc_unlock>
 800a1fc:	e794      	b.n	800a128 <_malloc_r+0x20>
 800a1fe:	6005      	str	r5, [r0, #0]
 800a200:	e7d6      	b.n	800a1b0 <_malloc_r+0xa8>
 800a202:	bf00      	nop
 800a204:	20000df4 	.word	0x20000df4

0800a208 <__malloc_lock>:
 800a208:	4801      	ldr	r0, [pc, #4]	@ (800a210 <__malloc_lock+0x8>)
 800a20a:	f7ff b894 	b.w	8009336 <__retarget_lock_acquire_recursive>
 800a20e:	bf00      	nop
 800a210:	20000dec 	.word	0x20000dec

0800a214 <__malloc_unlock>:
 800a214:	4801      	ldr	r0, [pc, #4]	@ (800a21c <__malloc_unlock+0x8>)
 800a216:	f7ff b88f 	b.w	8009338 <__retarget_lock_release_recursive>
 800a21a:	bf00      	nop
 800a21c:	20000dec 	.word	0x20000dec

0800a220 <_Balloc>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	69c6      	ldr	r6, [r0, #28]
 800a224:	4604      	mov	r4, r0
 800a226:	460d      	mov	r5, r1
 800a228:	b976      	cbnz	r6, 800a248 <_Balloc+0x28>
 800a22a:	2010      	movs	r0, #16
 800a22c:	f7ff ff42 	bl	800a0b4 <malloc>
 800a230:	4602      	mov	r2, r0
 800a232:	61e0      	str	r0, [r4, #28]
 800a234:	b920      	cbnz	r0, 800a240 <_Balloc+0x20>
 800a236:	4b18      	ldr	r3, [pc, #96]	@ (800a298 <_Balloc+0x78>)
 800a238:	4818      	ldr	r0, [pc, #96]	@ (800a29c <_Balloc+0x7c>)
 800a23a:	216b      	movs	r1, #107	@ 0x6b
 800a23c:	f7ff f884 	bl	8009348 <__assert_func>
 800a240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a244:	6006      	str	r6, [r0, #0]
 800a246:	60c6      	str	r6, [r0, #12]
 800a248:	69e6      	ldr	r6, [r4, #28]
 800a24a:	68f3      	ldr	r3, [r6, #12]
 800a24c:	b183      	cbz	r3, 800a270 <_Balloc+0x50>
 800a24e:	69e3      	ldr	r3, [r4, #28]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a256:	b9b8      	cbnz	r0, 800a288 <_Balloc+0x68>
 800a258:	2101      	movs	r1, #1
 800a25a:	fa01 f605 	lsl.w	r6, r1, r5
 800a25e:	1d72      	adds	r2, r6, #5
 800a260:	0092      	lsls	r2, r2, #2
 800a262:	4620      	mov	r0, r4
 800a264:	f001 fedb 	bl	800c01e <_calloc_r>
 800a268:	b160      	cbz	r0, 800a284 <_Balloc+0x64>
 800a26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a26e:	e00e      	b.n	800a28e <_Balloc+0x6e>
 800a270:	2221      	movs	r2, #33	@ 0x21
 800a272:	2104      	movs	r1, #4
 800a274:	4620      	mov	r0, r4
 800a276:	f001 fed2 	bl	800c01e <_calloc_r>
 800a27a:	69e3      	ldr	r3, [r4, #28]
 800a27c:	60f0      	str	r0, [r6, #12]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e4      	bne.n	800a24e <_Balloc+0x2e>
 800a284:	2000      	movs	r0, #0
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	6802      	ldr	r2, [r0, #0]
 800a28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a28e:	2300      	movs	r3, #0
 800a290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a294:	e7f7      	b.n	800a286 <_Balloc+0x66>
 800a296:	bf00      	nop
 800a298:	0800cc1f 	.word	0x0800cc1f
 800a29c:	0800cc9f 	.word	0x0800cc9f

0800a2a0 <_Bfree>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	69c6      	ldr	r6, [r0, #28]
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	b976      	cbnz	r6, 800a2c8 <_Bfree+0x28>
 800a2aa:	2010      	movs	r0, #16
 800a2ac:	f7ff ff02 	bl	800a0b4 <malloc>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	61e8      	str	r0, [r5, #28]
 800a2b4:	b920      	cbnz	r0, 800a2c0 <_Bfree+0x20>
 800a2b6:	4b09      	ldr	r3, [pc, #36]	@ (800a2dc <_Bfree+0x3c>)
 800a2b8:	4809      	ldr	r0, [pc, #36]	@ (800a2e0 <_Bfree+0x40>)
 800a2ba:	218f      	movs	r1, #143	@ 0x8f
 800a2bc:	f7ff f844 	bl	8009348 <__assert_func>
 800a2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c4:	6006      	str	r6, [r0, #0]
 800a2c6:	60c6      	str	r6, [r0, #12]
 800a2c8:	b13c      	cbz	r4, 800a2da <_Bfree+0x3a>
 800a2ca:	69eb      	ldr	r3, [r5, #28]
 800a2cc:	6862      	ldr	r2, [r4, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2d4:	6021      	str	r1, [r4, #0]
 800a2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	0800cc1f 	.word	0x0800cc1f
 800a2e0:	0800cc9f 	.word	0x0800cc9f

0800a2e4 <__multadd>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	690d      	ldr	r5, [r1, #16]
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	461e      	mov	r6, r3
 800a2f0:	f101 0c14 	add.w	ip, r1, #20
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2fa:	b299      	uxth	r1, r3
 800a2fc:	fb02 6101 	mla	r1, r2, r1, r6
 800a300:	0c1e      	lsrs	r6, r3, #16
 800a302:	0c0b      	lsrs	r3, r1, #16
 800a304:	fb02 3306 	mla	r3, r2, r6, r3
 800a308:	b289      	uxth	r1, r1
 800a30a:	3001      	adds	r0, #1
 800a30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a310:	4285      	cmp	r5, r0
 800a312:	f84c 1b04 	str.w	r1, [ip], #4
 800a316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a31a:	dcec      	bgt.n	800a2f6 <__multadd+0x12>
 800a31c:	b30e      	cbz	r6, 800a362 <__multadd+0x7e>
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	42ab      	cmp	r3, r5
 800a322:	dc19      	bgt.n	800a358 <__multadd+0x74>
 800a324:	6861      	ldr	r1, [r4, #4]
 800a326:	4638      	mov	r0, r7
 800a328:	3101      	adds	r1, #1
 800a32a:	f7ff ff79 	bl	800a220 <_Balloc>
 800a32e:	4680      	mov	r8, r0
 800a330:	b928      	cbnz	r0, 800a33e <__multadd+0x5a>
 800a332:	4602      	mov	r2, r0
 800a334:	4b0c      	ldr	r3, [pc, #48]	@ (800a368 <__multadd+0x84>)
 800a336:	480d      	ldr	r0, [pc, #52]	@ (800a36c <__multadd+0x88>)
 800a338:	21ba      	movs	r1, #186	@ 0xba
 800a33a:	f7ff f805 	bl	8009348 <__assert_func>
 800a33e:	6922      	ldr	r2, [r4, #16]
 800a340:	3202      	adds	r2, #2
 800a342:	f104 010c 	add.w	r1, r4, #12
 800a346:	0092      	lsls	r2, r2, #2
 800a348:	300c      	adds	r0, #12
 800a34a:	f001 fe4b 	bl	800bfe4 <memcpy>
 800a34e:	4621      	mov	r1, r4
 800a350:	4638      	mov	r0, r7
 800a352:	f7ff ffa5 	bl	800a2a0 <_Bfree>
 800a356:	4644      	mov	r4, r8
 800a358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a35c:	3501      	adds	r5, #1
 800a35e:	615e      	str	r6, [r3, #20]
 800a360:	6125      	str	r5, [r4, #16]
 800a362:	4620      	mov	r0, r4
 800a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a368:	0800cc8e 	.word	0x0800cc8e
 800a36c:	0800cc9f 	.word	0x0800cc9f

0800a370 <__s2b>:
 800a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a374:	460c      	mov	r4, r1
 800a376:	4615      	mov	r5, r2
 800a378:	461f      	mov	r7, r3
 800a37a:	2209      	movs	r2, #9
 800a37c:	3308      	adds	r3, #8
 800a37e:	4606      	mov	r6, r0
 800a380:	fb93 f3f2 	sdiv	r3, r3, r2
 800a384:	2100      	movs	r1, #0
 800a386:	2201      	movs	r2, #1
 800a388:	429a      	cmp	r2, r3
 800a38a:	db09      	blt.n	800a3a0 <__s2b+0x30>
 800a38c:	4630      	mov	r0, r6
 800a38e:	f7ff ff47 	bl	800a220 <_Balloc>
 800a392:	b940      	cbnz	r0, 800a3a6 <__s2b+0x36>
 800a394:	4602      	mov	r2, r0
 800a396:	4b19      	ldr	r3, [pc, #100]	@ (800a3fc <__s2b+0x8c>)
 800a398:	4819      	ldr	r0, [pc, #100]	@ (800a400 <__s2b+0x90>)
 800a39a:	21d3      	movs	r1, #211	@ 0xd3
 800a39c:	f7fe ffd4 	bl	8009348 <__assert_func>
 800a3a0:	0052      	lsls	r2, r2, #1
 800a3a2:	3101      	adds	r1, #1
 800a3a4:	e7f0      	b.n	800a388 <__s2b+0x18>
 800a3a6:	9b08      	ldr	r3, [sp, #32]
 800a3a8:	6143      	str	r3, [r0, #20]
 800a3aa:	2d09      	cmp	r5, #9
 800a3ac:	f04f 0301 	mov.w	r3, #1
 800a3b0:	6103      	str	r3, [r0, #16]
 800a3b2:	dd16      	ble.n	800a3e2 <__s2b+0x72>
 800a3b4:	f104 0909 	add.w	r9, r4, #9
 800a3b8:	46c8      	mov	r8, r9
 800a3ba:	442c      	add	r4, r5
 800a3bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3c0:	4601      	mov	r1, r0
 800a3c2:	3b30      	subs	r3, #48	@ 0x30
 800a3c4:	220a      	movs	r2, #10
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7ff ff8c 	bl	800a2e4 <__multadd>
 800a3cc:	45a0      	cmp	r8, r4
 800a3ce:	d1f5      	bne.n	800a3bc <__s2b+0x4c>
 800a3d0:	f1a5 0408 	sub.w	r4, r5, #8
 800a3d4:	444c      	add	r4, r9
 800a3d6:	1b2d      	subs	r5, r5, r4
 800a3d8:	1963      	adds	r3, r4, r5
 800a3da:	42bb      	cmp	r3, r7
 800a3dc:	db04      	blt.n	800a3e8 <__s2b+0x78>
 800a3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e2:	340a      	adds	r4, #10
 800a3e4:	2509      	movs	r5, #9
 800a3e6:	e7f6      	b.n	800a3d6 <__s2b+0x66>
 800a3e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3ec:	4601      	mov	r1, r0
 800a3ee:	3b30      	subs	r3, #48	@ 0x30
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7ff ff76 	bl	800a2e4 <__multadd>
 800a3f8:	e7ee      	b.n	800a3d8 <__s2b+0x68>
 800a3fa:	bf00      	nop
 800a3fc:	0800cc8e 	.word	0x0800cc8e
 800a400:	0800cc9f 	.word	0x0800cc9f

0800a404 <__hi0bits>:
 800a404:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a408:	4603      	mov	r3, r0
 800a40a:	bf36      	itet	cc
 800a40c:	0403      	lslcc	r3, r0, #16
 800a40e:	2000      	movcs	r0, #0
 800a410:	2010      	movcc	r0, #16
 800a412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a416:	bf3c      	itt	cc
 800a418:	021b      	lslcc	r3, r3, #8
 800a41a:	3008      	addcc	r0, #8
 800a41c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a420:	bf3c      	itt	cc
 800a422:	011b      	lslcc	r3, r3, #4
 800a424:	3004      	addcc	r0, #4
 800a426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a42a:	bf3c      	itt	cc
 800a42c:	009b      	lslcc	r3, r3, #2
 800a42e:	3002      	addcc	r0, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	db05      	blt.n	800a440 <__hi0bits+0x3c>
 800a434:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a438:	f100 0001 	add.w	r0, r0, #1
 800a43c:	bf08      	it	eq
 800a43e:	2020      	moveq	r0, #32
 800a440:	4770      	bx	lr

0800a442 <__lo0bits>:
 800a442:	6803      	ldr	r3, [r0, #0]
 800a444:	4602      	mov	r2, r0
 800a446:	f013 0007 	ands.w	r0, r3, #7
 800a44a:	d00b      	beq.n	800a464 <__lo0bits+0x22>
 800a44c:	07d9      	lsls	r1, r3, #31
 800a44e:	d421      	bmi.n	800a494 <__lo0bits+0x52>
 800a450:	0798      	lsls	r0, r3, #30
 800a452:	bf49      	itett	mi
 800a454:	085b      	lsrmi	r3, r3, #1
 800a456:	089b      	lsrpl	r3, r3, #2
 800a458:	2001      	movmi	r0, #1
 800a45a:	6013      	strmi	r3, [r2, #0]
 800a45c:	bf5c      	itt	pl
 800a45e:	6013      	strpl	r3, [r2, #0]
 800a460:	2002      	movpl	r0, #2
 800a462:	4770      	bx	lr
 800a464:	b299      	uxth	r1, r3
 800a466:	b909      	cbnz	r1, 800a46c <__lo0bits+0x2a>
 800a468:	0c1b      	lsrs	r3, r3, #16
 800a46a:	2010      	movs	r0, #16
 800a46c:	b2d9      	uxtb	r1, r3
 800a46e:	b909      	cbnz	r1, 800a474 <__lo0bits+0x32>
 800a470:	3008      	adds	r0, #8
 800a472:	0a1b      	lsrs	r3, r3, #8
 800a474:	0719      	lsls	r1, r3, #28
 800a476:	bf04      	itt	eq
 800a478:	091b      	lsreq	r3, r3, #4
 800a47a:	3004      	addeq	r0, #4
 800a47c:	0799      	lsls	r1, r3, #30
 800a47e:	bf04      	itt	eq
 800a480:	089b      	lsreq	r3, r3, #2
 800a482:	3002      	addeq	r0, #2
 800a484:	07d9      	lsls	r1, r3, #31
 800a486:	d403      	bmi.n	800a490 <__lo0bits+0x4e>
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	f100 0001 	add.w	r0, r0, #1
 800a48e:	d003      	beq.n	800a498 <__lo0bits+0x56>
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	4770      	bx	lr
 800a494:	2000      	movs	r0, #0
 800a496:	4770      	bx	lr
 800a498:	2020      	movs	r0, #32
 800a49a:	4770      	bx	lr

0800a49c <__i2b>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	f7ff febd 	bl	800a220 <_Balloc>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	b928      	cbnz	r0, 800a4b6 <__i2b+0x1a>
 800a4aa:	4b05      	ldr	r3, [pc, #20]	@ (800a4c0 <__i2b+0x24>)
 800a4ac:	4805      	ldr	r0, [pc, #20]	@ (800a4c4 <__i2b+0x28>)
 800a4ae:	f240 1145 	movw	r1, #325	@ 0x145
 800a4b2:	f7fe ff49 	bl	8009348 <__assert_func>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	6144      	str	r4, [r0, #20]
 800a4ba:	6103      	str	r3, [r0, #16]
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800cc8e 	.word	0x0800cc8e
 800a4c4:	0800cc9f 	.word	0x0800cc9f

0800a4c8 <__multiply>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	690a      	ldr	r2, [r1, #16]
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	bfa8      	it	ge
 800a4d6:	4623      	movge	r3, r4
 800a4d8:	460f      	mov	r7, r1
 800a4da:	bfa4      	itt	ge
 800a4dc:	460c      	movge	r4, r1
 800a4de:	461f      	movge	r7, r3
 800a4e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a4e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	6861      	ldr	r1, [r4, #4]
 800a4ec:	eb0a 0609 	add.w	r6, sl, r9
 800a4f0:	42b3      	cmp	r3, r6
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	bfb8      	it	lt
 800a4f6:	3101      	addlt	r1, #1
 800a4f8:	f7ff fe92 	bl	800a220 <_Balloc>
 800a4fc:	b930      	cbnz	r0, 800a50c <__multiply+0x44>
 800a4fe:	4602      	mov	r2, r0
 800a500:	4b44      	ldr	r3, [pc, #272]	@ (800a614 <__multiply+0x14c>)
 800a502:	4845      	ldr	r0, [pc, #276]	@ (800a618 <__multiply+0x150>)
 800a504:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a508:	f7fe ff1e 	bl	8009348 <__assert_func>
 800a50c:	f100 0514 	add.w	r5, r0, #20
 800a510:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a514:	462b      	mov	r3, r5
 800a516:	2200      	movs	r2, #0
 800a518:	4543      	cmp	r3, r8
 800a51a:	d321      	bcc.n	800a560 <__multiply+0x98>
 800a51c:	f107 0114 	add.w	r1, r7, #20
 800a520:	f104 0214 	add.w	r2, r4, #20
 800a524:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a528:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a52c:	9302      	str	r3, [sp, #8]
 800a52e:	1b13      	subs	r3, r2, r4
 800a530:	3b15      	subs	r3, #21
 800a532:	f023 0303 	bic.w	r3, r3, #3
 800a536:	3304      	adds	r3, #4
 800a538:	f104 0715 	add.w	r7, r4, #21
 800a53c:	42ba      	cmp	r2, r7
 800a53e:	bf38      	it	cc
 800a540:	2304      	movcc	r3, #4
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	9b02      	ldr	r3, [sp, #8]
 800a546:	9103      	str	r1, [sp, #12]
 800a548:	428b      	cmp	r3, r1
 800a54a:	d80c      	bhi.n	800a566 <__multiply+0x9e>
 800a54c:	2e00      	cmp	r6, #0
 800a54e:	dd03      	ble.n	800a558 <__multiply+0x90>
 800a550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a554:	2b00      	cmp	r3, #0
 800a556:	d05b      	beq.n	800a610 <__multiply+0x148>
 800a558:	6106      	str	r6, [r0, #16]
 800a55a:	b005      	add	sp, #20
 800a55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a560:	f843 2b04 	str.w	r2, [r3], #4
 800a564:	e7d8      	b.n	800a518 <__multiply+0x50>
 800a566:	f8b1 a000 	ldrh.w	sl, [r1]
 800a56a:	f1ba 0f00 	cmp.w	sl, #0
 800a56e:	d024      	beq.n	800a5ba <__multiply+0xf2>
 800a570:	f104 0e14 	add.w	lr, r4, #20
 800a574:	46a9      	mov	r9, r5
 800a576:	f04f 0c00 	mov.w	ip, #0
 800a57a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a57e:	f8d9 3000 	ldr.w	r3, [r9]
 800a582:	fa1f fb87 	uxth.w	fp, r7
 800a586:	b29b      	uxth	r3, r3
 800a588:	fb0a 330b 	mla	r3, sl, fp, r3
 800a58c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a590:	f8d9 7000 	ldr.w	r7, [r9]
 800a594:	4463      	add	r3, ip
 800a596:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a59a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a59e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5a8:	4572      	cmp	r2, lr
 800a5aa:	f849 3b04 	str.w	r3, [r9], #4
 800a5ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5b2:	d8e2      	bhi.n	800a57a <__multiply+0xb2>
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	f845 c003 	str.w	ip, [r5, r3]
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a5c0:	3104      	adds	r1, #4
 800a5c2:	f1b9 0f00 	cmp.w	r9, #0
 800a5c6:	d021      	beq.n	800a60c <__multiply+0x144>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	f104 0c14 	add.w	ip, r4, #20
 800a5ce:	46ae      	mov	lr, r5
 800a5d0:	f04f 0a00 	mov.w	sl, #0
 800a5d4:	f8bc b000 	ldrh.w	fp, [ip]
 800a5d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a5dc:	fb09 770b 	mla	r7, r9, fp, r7
 800a5e0:	4457      	add	r7, sl
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5e8:	f84e 3b04 	str.w	r3, [lr], #4
 800a5ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5f4:	f8be 3000 	ldrh.w	r3, [lr]
 800a5f8:	fb09 330a 	mla	r3, r9, sl, r3
 800a5fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a600:	4562      	cmp	r2, ip
 800a602:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a606:	d8e5      	bhi.n	800a5d4 <__multiply+0x10c>
 800a608:	9f01      	ldr	r7, [sp, #4]
 800a60a:	51eb      	str	r3, [r5, r7]
 800a60c:	3504      	adds	r5, #4
 800a60e:	e799      	b.n	800a544 <__multiply+0x7c>
 800a610:	3e01      	subs	r6, #1
 800a612:	e79b      	b.n	800a54c <__multiply+0x84>
 800a614:	0800cc8e 	.word	0x0800cc8e
 800a618:	0800cc9f 	.word	0x0800cc9f

0800a61c <__pow5mult>:
 800a61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a620:	4615      	mov	r5, r2
 800a622:	f012 0203 	ands.w	r2, r2, #3
 800a626:	4607      	mov	r7, r0
 800a628:	460e      	mov	r6, r1
 800a62a:	d007      	beq.n	800a63c <__pow5mult+0x20>
 800a62c:	4c25      	ldr	r4, [pc, #148]	@ (800a6c4 <__pow5mult+0xa8>)
 800a62e:	3a01      	subs	r2, #1
 800a630:	2300      	movs	r3, #0
 800a632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a636:	f7ff fe55 	bl	800a2e4 <__multadd>
 800a63a:	4606      	mov	r6, r0
 800a63c:	10ad      	asrs	r5, r5, #2
 800a63e:	d03d      	beq.n	800a6bc <__pow5mult+0xa0>
 800a640:	69fc      	ldr	r4, [r7, #28]
 800a642:	b97c      	cbnz	r4, 800a664 <__pow5mult+0x48>
 800a644:	2010      	movs	r0, #16
 800a646:	f7ff fd35 	bl	800a0b4 <malloc>
 800a64a:	4602      	mov	r2, r0
 800a64c:	61f8      	str	r0, [r7, #28]
 800a64e:	b928      	cbnz	r0, 800a65c <__pow5mult+0x40>
 800a650:	4b1d      	ldr	r3, [pc, #116]	@ (800a6c8 <__pow5mult+0xac>)
 800a652:	481e      	ldr	r0, [pc, #120]	@ (800a6cc <__pow5mult+0xb0>)
 800a654:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a658:	f7fe fe76 	bl	8009348 <__assert_func>
 800a65c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a660:	6004      	str	r4, [r0, #0]
 800a662:	60c4      	str	r4, [r0, #12]
 800a664:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a66c:	b94c      	cbnz	r4, 800a682 <__pow5mult+0x66>
 800a66e:	f240 2171 	movw	r1, #625	@ 0x271
 800a672:	4638      	mov	r0, r7
 800a674:	f7ff ff12 	bl	800a49c <__i2b>
 800a678:	2300      	movs	r3, #0
 800a67a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a67e:	4604      	mov	r4, r0
 800a680:	6003      	str	r3, [r0, #0]
 800a682:	f04f 0900 	mov.w	r9, #0
 800a686:	07eb      	lsls	r3, r5, #31
 800a688:	d50a      	bpl.n	800a6a0 <__pow5mult+0x84>
 800a68a:	4631      	mov	r1, r6
 800a68c:	4622      	mov	r2, r4
 800a68e:	4638      	mov	r0, r7
 800a690:	f7ff ff1a 	bl	800a4c8 <__multiply>
 800a694:	4631      	mov	r1, r6
 800a696:	4680      	mov	r8, r0
 800a698:	4638      	mov	r0, r7
 800a69a:	f7ff fe01 	bl	800a2a0 <_Bfree>
 800a69e:	4646      	mov	r6, r8
 800a6a0:	106d      	asrs	r5, r5, #1
 800a6a2:	d00b      	beq.n	800a6bc <__pow5mult+0xa0>
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	b938      	cbnz	r0, 800a6b8 <__pow5mult+0x9c>
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f7ff ff0b 	bl	800a4c8 <__multiply>
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	f8c0 9000 	str.w	r9, [r0]
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	e7e4      	b.n	800a686 <__pow5mult+0x6a>
 800a6bc:	4630      	mov	r0, r6
 800a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c2:	bf00      	nop
 800a6c4:	0800ccf8 	.word	0x0800ccf8
 800a6c8:	0800cc1f 	.word	0x0800cc1f
 800a6cc:	0800cc9f 	.word	0x0800cc9f

0800a6d0 <__lshift>:
 800a6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	6849      	ldr	r1, [r1, #4]
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	4691      	mov	r9, r2
 800a6e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6e8:	f108 0601 	add.w	r6, r8, #1
 800a6ec:	42b3      	cmp	r3, r6
 800a6ee:	db0b      	blt.n	800a708 <__lshift+0x38>
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff fd95 	bl	800a220 <_Balloc>
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	b948      	cbnz	r0, 800a70e <__lshift+0x3e>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4b28      	ldr	r3, [pc, #160]	@ (800a7a0 <__lshift+0xd0>)
 800a6fe:	4829      	ldr	r0, [pc, #164]	@ (800a7a4 <__lshift+0xd4>)
 800a700:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a704:	f7fe fe20 	bl	8009348 <__assert_func>
 800a708:	3101      	adds	r1, #1
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	e7ee      	b.n	800a6ec <__lshift+0x1c>
 800a70e:	2300      	movs	r3, #0
 800a710:	f100 0114 	add.w	r1, r0, #20
 800a714:	f100 0210 	add.w	r2, r0, #16
 800a718:	4618      	mov	r0, r3
 800a71a:	4553      	cmp	r3, sl
 800a71c:	db33      	blt.n	800a786 <__lshift+0xb6>
 800a71e:	6920      	ldr	r0, [r4, #16]
 800a720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a724:	f104 0314 	add.w	r3, r4, #20
 800a728:	f019 091f 	ands.w	r9, r9, #31
 800a72c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a734:	d02b      	beq.n	800a78e <__lshift+0xbe>
 800a736:	f1c9 0e20 	rsb	lr, r9, #32
 800a73a:	468a      	mov	sl, r1
 800a73c:	2200      	movs	r2, #0
 800a73e:	6818      	ldr	r0, [r3, #0]
 800a740:	fa00 f009 	lsl.w	r0, r0, r9
 800a744:	4310      	orrs	r0, r2
 800a746:	f84a 0b04 	str.w	r0, [sl], #4
 800a74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a74e:	459c      	cmp	ip, r3
 800a750:	fa22 f20e 	lsr.w	r2, r2, lr
 800a754:	d8f3      	bhi.n	800a73e <__lshift+0x6e>
 800a756:	ebac 0304 	sub.w	r3, ip, r4
 800a75a:	3b15      	subs	r3, #21
 800a75c:	f023 0303 	bic.w	r3, r3, #3
 800a760:	3304      	adds	r3, #4
 800a762:	f104 0015 	add.w	r0, r4, #21
 800a766:	4584      	cmp	ip, r0
 800a768:	bf38      	it	cc
 800a76a:	2304      	movcc	r3, #4
 800a76c:	50ca      	str	r2, [r1, r3]
 800a76e:	b10a      	cbz	r2, 800a774 <__lshift+0xa4>
 800a770:	f108 0602 	add.w	r6, r8, #2
 800a774:	3e01      	subs	r6, #1
 800a776:	4638      	mov	r0, r7
 800a778:	612e      	str	r6, [r5, #16]
 800a77a:	4621      	mov	r1, r4
 800a77c:	f7ff fd90 	bl	800a2a0 <_Bfree>
 800a780:	4628      	mov	r0, r5
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	f842 0f04 	str.w	r0, [r2, #4]!
 800a78a:	3301      	adds	r3, #1
 800a78c:	e7c5      	b.n	800a71a <__lshift+0x4a>
 800a78e:	3904      	subs	r1, #4
 800a790:	f853 2b04 	ldr.w	r2, [r3], #4
 800a794:	f841 2f04 	str.w	r2, [r1, #4]!
 800a798:	459c      	cmp	ip, r3
 800a79a:	d8f9      	bhi.n	800a790 <__lshift+0xc0>
 800a79c:	e7ea      	b.n	800a774 <__lshift+0xa4>
 800a79e:	bf00      	nop
 800a7a0:	0800cc8e 	.word	0x0800cc8e
 800a7a4:	0800cc9f 	.word	0x0800cc9f

0800a7a8 <__mcmp>:
 800a7a8:	690a      	ldr	r2, [r1, #16]
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6900      	ldr	r0, [r0, #16]
 800a7ae:	1a80      	subs	r0, r0, r2
 800a7b0:	b530      	push	{r4, r5, lr}
 800a7b2:	d10e      	bne.n	800a7d2 <__mcmp+0x2a>
 800a7b4:	3314      	adds	r3, #20
 800a7b6:	3114      	adds	r1, #20
 800a7b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a7bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7c8:	4295      	cmp	r5, r2
 800a7ca:	d003      	beq.n	800a7d4 <__mcmp+0x2c>
 800a7cc:	d205      	bcs.n	800a7da <__mcmp+0x32>
 800a7ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7d2:	bd30      	pop	{r4, r5, pc}
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	d3f3      	bcc.n	800a7c0 <__mcmp+0x18>
 800a7d8:	e7fb      	b.n	800a7d2 <__mcmp+0x2a>
 800a7da:	2001      	movs	r0, #1
 800a7dc:	e7f9      	b.n	800a7d2 <__mcmp+0x2a>
	...

0800a7e0 <__mdiff>:
 800a7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	4689      	mov	r9, r1
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	4648      	mov	r0, r9
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	f7ff ffdb 	bl	800a7a8 <__mcmp>
 800a7f2:	1e05      	subs	r5, r0, #0
 800a7f4:	d112      	bne.n	800a81c <__mdiff+0x3c>
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff fd11 	bl	800a220 <_Balloc>
 800a7fe:	4602      	mov	r2, r0
 800a800:	b928      	cbnz	r0, 800a80e <__mdiff+0x2e>
 800a802:	4b3f      	ldr	r3, [pc, #252]	@ (800a900 <__mdiff+0x120>)
 800a804:	f240 2137 	movw	r1, #567	@ 0x237
 800a808:	483e      	ldr	r0, [pc, #248]	@ (800a904 <__mdiff+0x124>)
 800a80a:	f7fe fd9d 	bl	8009348 <__assert_func>
 800a80e:	2301      	movs	r3, #1
 800a810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a814:	4610      	mov	r0, r2
 800a816:	b003      	add	sp, #12
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	bfbc      	itt	lt
 800a81e:	464b      	movlt	r3, r9
 800a820:	46a1      	movlt	r9, r4
 800a822:	4630      	mov	r0, r6
 800a824:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a828:	bfba      	itte	lt
 800a82a:	461c      	movlt	r4, r3
 800a82c:	2501      	movlt	r5, #1
 800a82e:	2500      	movge	r5, #0
 800a830:	f7ff fcf6 	bl	800a220 <_Balloc>
 800a834:	4602      	mov	r2, r0
 800a836:	b918      	cbnz	r0, 800a840 <__mdiff+0x60>
 800a838:	4b31      	ldr	r3, [pc, #196]	@ (800a900 <__mdiff+0x120>)
 800a83a:	f240 2145 	movw	r1, #581	@ 0x245
 800a83e:	e7e3      	b.n	800a808 <__mdiff+0x28>
 800a840:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a844:	6926      	ldr	r6, [r4, #16]
 800a846:	60c5      	str	r5, [r0, #12]
 800a848:	f109 0310 	add.w	r3, r9, #16
 800a84c:	f109 0514 	add.w	r5, r9, #20
 800a850:	f104 0e14 	add.w	lr, r4, #20
 800a854:	f100 0b14 	add.w	fp, r0, #20
 800a858:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a85c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	46d9      	mov	r9, fp
 800a864:	f04f 0c00 	mov.w	ip, #0
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a86e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	fa1f f38a 	uxth.w	r3, sl
 800a878:	4619      	mov	r1, r3
 800a87a:	b283      	uxth	r3, r0
 800a87c:	1acb      	subs	r3, r1, r3
 800a87e:	0c00      	lsrs	r0, r0, #16
 800a880:	4463      	add	r3, ip
 800a882:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a886:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a890:	4576      	cmp	r6, lr
 800a892:	f849 3b04 	str.w	r3, [r9], #4
 800a896:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a89a:	d8e5      	bhi.n	800a868 <__mdiff+0x88>
 800a89c:	1b33      	subs	r3, r6, r4
 800a89e:	3b15      	subs	r3, #21
 800a8a0:	f023 0303 	bic.w	r3, r3, #3
 800a8a4:	3415      	adds	r4, #21
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	42a6      	cmp	r6, r4
 800a8aa:	bf38      	it	cc
 800a8ac:	2304      	movcc	r3, #4
 800a8ae:	441d      	add	r5, r3
 800a8b0:	445b      	add	r3, fp
 800a8b2:	461e      	mov	r6, r3
 800a8b4:	462c      	mov	r4, r5
 800a8b6:	4544      	cmp	r4, r8
 800a8b8:	d30e      	bcc.n	800a8d8 <__mdiff+0xf8>
 800a8ba:	f108 0103 	add.w	r1, r8, #3
 800a8be:	1b49      	subs	r1, r1, r5
 800a8c0:	f021 0103 	bic.w	r1, r1, #3
 800a8c4:	3d03      	subs	r5, #3
 800a8c6:	45a8      	cmp	r8, r5
 800a8c8:	bf38      	it	cc
 800a8ca:	2100      	movcc	r1, #0
 800a8cc:	440b      	add	r3, r1
 800a8ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8d2:	b191      	cbz	r1, 800a8fa <__mdiff+0x11a>
 800a8d4:	6117      	str	r7, [r2, #16]
 800a8d6:	e79d      	b.n	800a814 <__mdiff+0x34>
 800a8d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8dc:	46e6      	mov	lr, ip
 800a8de:	0c08      	lsrs	r0, r1, #16
 800a8e0:	fa1c fc81 	uxtah	ip, ip, r1
 800a8e4:	4471      	add	r1, lr
 800a8e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8ea:	b289      	uxth	r1, r1
 800a8ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8f0:	f846 1b04 	str.w	r1, [r6], #4
 800a8f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8f8:	e7dd      	b.n	800a8b6 <__mdiff+0xd6>
 800a8fa:	3f01      	subs	r7, #1
 800a8fc:	e7e7      	b.n	800a8ce <__mdiff+0xee>
 800a8fe:	bf00      	nop
 800a900:	0800cc8e 	.word	0x0800cc8e
 800a904:	0800cc9f 	.word	0x0800cc9f

0800a908 <__ulp>:
 800a908:	b082      	sub	sp, #8
 800a90a:	ed8d 0b00 	vstr	d0, [sp]
 800a90e:	9a01      	ldr	r2, [sp, #4]
 800a910:	4b0f      	ldr	r3, [pc, #60]	@ (800a950 <__ulp+0x48>)
 800a912:	4013      	ands	r3, r2
 800a914:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	dc08      	bgt.n	800a92e <__ulp+0x26>
 800a91c:	425b      	negs	r3, r3
 800a91e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a922:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a926:	da04      	bge.n	800a932 <__ulp+0x2a>
 800a928:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a92c:	4113      	asrs	r3, r2
 800a92e:	2200      	movs	r2, #0
 800a930:	e008      	b.n	800a944 <__ulp+0x3c>
 800a932:	f1a2 0314 	sub.w	r3, r2, #20
 800a936:	2b1e      	cmp	r3, #30
 800a938:	bfda      	itte	le
 800a93a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a93e:	40da      	lsrle	r2, r3
 800a940:	2201      	movgt	r2, #1
 800a942:	2300      	movs	r3, #0
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	ec41 0b10 	vmov	d0, r0, r1
 800a94c:	b002      	add	sp, #8
 800a94e:	4770      	bx	lr
 800a950:	7ff00000 	.word	0x7ff00000

0800a954 <__b2d>:
 800a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a958:	6906      	ldr	r6, [r0, #16]
 800a95a:	f100 0814 	add.w	r8, r0, #20
 800a95e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a962:	1f37      	subs	r7, r6, #4
 800a964:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a968:	4610      	mov	r0, r2
 800a96a:	f7ff fd4b 	bl	800a404 <__hi0bits>
 800a96e:	f1c0 0320 	rsb	r3, r0, #32
 800a972:	280a      	cmp	r0, #10
 800a974:	600b      	str	r3, [r1, #0]
 800a976:	491b      	ldr	r1, [pc, #108]	@ (800a9e4 <__b2d+0x90>)
 800a978:	dc15      	bgt.n	800a9a6 <__b2d+0x52>
 800a97a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a97e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a982:	45b8      	cmp	r8, r7
 800a984:	ea43 0501 	orr.w	r5, r3, r1
 800a988:	bf34      	ite	cc
 800a98a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a98e:	2300      	movcs	r3, #0
 800a990:	3015      	adds	r0, #21
 800a992:	fa02 f000 	lsl.w	r0, r2, r0
 800a996:	fa23 f30c 	lsr.w	r3, r3, ip
 800a99a:	4303      	orrs	r3, r0
 800a99c:	461c      	mov	r4, r3
 800a99e:	ec45 4b10 	vmov	d0, r4, r5
 800a9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a6:	45b8      	cmp	r8, r7
 800a9a8:	bf3a      	itte	cc
 800a9aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800a9b2:	2300      	movcs	r3, #0
 800a9b4:	380b      	subs	r0, #11
 800a9b6:	d012      	beq.n	800a9de <__b2d+0x8a>
 800a9b8:	f1c0 0120 	rsb	r1, r0, #32
 800a9bc:	fa23 f401 	lsr.w	r4, r3, r1
 800a9c0:	4082      	lsls	r2, r0
 800a9c2:	4322      	orrs	r2, r4
 800a9c4:	4547      	cmp	r7, r8
 800a9c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a9ca:	bf8c      	ite	hi
 800a9cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9d0:	2200      	movls	r2, #0
 800a9d2:	4083      	lsls	r3, r0
 800a9d4:	40ca      	lsrs	r2, r1
 800a9d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	e7de      	b.n	800a99c <__b2d+0x48>
 800a9de:	ea42 0501 	orr.w	r5, r2, r1
 800a9e2:	e7db      	b.n	800a99c <__b2d+0x48>
 800a9e4:	3ff00000 	.word	0x3ff00000

0800a9e8 <__d2b>:
 800a9e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9ec:	460f      	mov	r7, r1
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	ec59 8b10 	vmov	r8, r9, d0
 800a9f4:	4616      	mov	r6, r2
 800a9f6:	f7ff fc13 	bl	800a220 <_Balloc>
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	b930      	cbnz	r0, 800aa0c <__d2b+0x24>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	4b23      	ldr	r3, [pc, #140]	@ (800aa90 <__d2b+0xa8>)
 800aa02:	4824      	ldr	r0, [pc, #144]	@ (800aa94 <__d2b+0xac>)
 800aa04:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa08:	f7fe fc9e 	bl	8009348 <__assert_func>
 800aa0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa14:	b10d      	cbz	r5, 800aa1a <__d2b+0x32>
 800aa16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	f1b8 0300 	subs.w	r3, r8, #0
 800aa20:	d023      	beq.n	800aa6a <__d2b+0x82>
 800aa22:	4668      	mov	r0, sp
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	f7ff fd0c 	bl	800a442 <__lo0bits>
 800aa2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa2e:	b1d0      	cbz	r0, 800aa66 <__d2b+0x7e>
 800aa30:	f1c0 0320 	rsb	r3, r0, #32
 800aa34:	fa02 f303 	lsl.w	r3, r2, r3
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	40c2      	lsrs	r2, r0
 800aa3c:	6163      	str	r3, [r4, #20]
 800aa3e:	9201      	str	r2, [sp, #4]
 800aa40:	9b01      	ldr	r3, [sp, #4]
 800aa42:	61a3      	str	r3, [r4, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bf0c      	ite	eq
 800aa48:	2201      	moveq	r2, #1
 800aa4a:	2202      	movne	r2, #2
 800aa4c:	6122      	str	r2, [r4, #16]
 800aa4e:	b1a5      	cbz	r5, 800aa7a <__d2b+0x92>
 800aa50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa54:	4405      	add	r5, r0
 800aa56:	603d      	str	r5, [r7, #0]
 800aa58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa5c:	6030      	str	r0, [r6, #0]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	b003      	add	sp, #12
 800aa62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa66:	6161      	str	r1, [r4, #20]
 800aa68:	e7ea      	b.n	800aa40 <__d2b+0x58>
 800aa6a:	a801      	add	r0, sp, #4
 800aa6c:	f7ff fce9 	bl	800a442 <__lo0bits>
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	6163      	str	r3, [r4, #20]
 800aa74:	3020      	adds	r0, #32
 800aa76:	2201      	movs	r2, #1
 800aa78:	e7e8      	b.n	800aa4c <__d2b+0x64>
 800aa7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa82:	6038      	str	r0, [r7, #0]
 800aa84:	6918      	ldr	r0, [r3, #16]
 800aa86:	f7ff fcbd 	bl	800a404 <__hi0bits>
 800aa8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa8e:	e7e5      	b.n	800aa5c <__d2b+0x74>
 800aa90:	0800cc8e 	.word	0x0800cc8e
 800aa94:	0800cc9f 	.word	0x0800cc9f

0800aa98 <__ratio>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	b085      	sub	sp, #20
 800aa9e:	e9cd 1000 	strd	r1, r0, [sp]
 800aaa2:	a902      	add	r1, sp, #8
 800aaa4:	f7ff ff56 	bl	800a954 <__b2d>
 800aaa8:	9800      	ldr	r0, [sp, #0]
 800aaaa:	a903      	add	r1, sp, #12
 800aaac:	ec55 4b10 	vmov	r4, r5, d0
 800aab0:	f7ff ff50 	bl	800a954 <__b2d>
 800aab4:	9b01      	ldr	r3, [sp, #4]
 800aab6:	6919      	ldr	r1, [r3, #16]
 800aab8:	9b00      	ldr	r3, [sp, #0]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	1ac9      	subs	r1, r1, r3
 800aabe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aac2:	1a9b      	subs	r3, r3, r2
 800aac4:	ec5b ab10 	vmov	sl, fp, d0
 800aac8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aacc:	2b00      	cmp	r3, #0
 800aace:	bfce      	itee	gt
 800aad0:	462a      	movgt	r2, r5
 800aad2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aad6:	465a      	movle	r2, fp
 800aad8:	462f      	mov	r7, r5
 800aada:	46d9      	mov	r9, fp
 800aadc:	bfcc      	ite	gt
 800aade:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aae2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aae6:	464b      	mov	r3, r9
 800aae8:	4652      	mov	r2, sl
 800aaea:	4620      	mov	r0, r4
 800aaec:	4639      	mov	r1, r7
 800aaee:	f7f5 fead 	bl	800084c <__aeabi_ddiv>
 800aaf2:	ec41 0b10 	vmov	d0, r0, r1
 800aaf6:	b005      	add	sp, #20
 800aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aafc <__copybits>:
 800aafc:	3901      	subs	r1, #1
 800aafe:	b570      	push	{r4, r5, r6, lr}
 800ab00:	1149      	asrs	r1, r1, #5
 800ab02:	6914      	ldr	r4, [r2, #16]
 800ab04:	3101      	adds	r1, #1
 800ab06:	f102 0314 	add.w	r3, r2, #20
 800ab0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab12:	1f05      	subs	r5, r0, #4
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	d30c      	bcc.n	800ab32 <__copybits+0x36>
 800ab18:	1aa3      	subs	r3, r4, r2
 800ab1a:	3b11      	subs	r3, #17
 800ab1c:	f023 0303 	bic.w	r3, r3, #3
 800ab20:	3211      	adds	r2, #17
 800ab22:	42a2      	cmp	r2, r4
 800ab24:	bf88      	it	hi
 800ab26:	2300      	movhi	r3, #0
 800ab28:	4418      	add	r0, r3
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	4288      	cmp	r0, r1
 800ab2e:	d305      	bcc.n	800ab3c <__copybits+0x40>
 800ab30:	bd70      	pop	{r4, r5, r6, pc}
 800ab32:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab36:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab3a:	e7eb      	b.n	800ab14 <__copybits+0x18>
 800ab3c:	f840 3b04 	str.w	r3, [r0], #4
 800ab40:	e7f4      	b.n	800ab2c <__copybits+0x30>

0800ab42 <__any_on>:
 800ab42:	f100 0214 	add.w	r2, r0, #20
 800ab46:	6900      	ldr	r0, [r0, #16]
 800ab48:	114b      	asrs	r3, r1, #5
 800ab4a:	4298      	cmp	r0, r3
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	db11      	blt.n	800ab74 <__any_on+0x32>
 800ab50:	dd0a      	ble.n	800ab68 <__any_on+0x26>
 800ab52:	f011 011f 	ands.w	r1, r1, #31
 800ab56:	d007      	beq.n	800ab68 <__any_on+0x26>
 800ab58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab5c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab60:	fa00 f101 	lsl.w	r1, r0, r1
 800ab64:	428c      	cmp	r4, r1
 800ab66:	d10b      	bne.n	800ab80 <__any_on+0x3e>
 800ab68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d803      	bhi.n	800ab78 <__any_on+0x36>
 800ab70:	2000      	movs	r0, #0
 800ab72:	bd10      	pop	{r4, pc}
 800ab74:	4603      	mov	r3, r0
 800ab76:	e7f7      	b.n	800ab68 <__any_on+0x26>
 800ab78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab7c:	2900      	cmp	r1, #0
 800ab7e:	d0f5      	beq.n	800ab6c <__any_on+0x2a>
 800ab80:	2001      	movs	r0, #1
 800ab82:	e7f6      	b.n	800ab72 <__any_on+0x30>

0800ab84 <sulp>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	4604      	mov	r4, r0
 800ab88:	460d      	mov	r5, r1
 800ab8a:	ec45 4b10 	vmov	d0, r4, r5
 800ab8e:	4616      	mov	r6, r2
 800ab90:	f7ff feba 	bl	800a908 <__ulp>
 800ab94:	ec51 0b10 	vmov	r0, r1, d0
 800ab98:	b17e      	cbz	r6, 800abba <sulp+0x36>
 800ab9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dd09      	ble.n	800abba <sulp+0x36>
 800aba6:	051b      	lsls	r3, r3, #20
 800aba8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800abac:	2400      	movs	r4, #0
 800abae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800abb2:	4622      	mov	r2, r4
 800abb4:	462b      	mov	r3, r5
 800abb6:	f7f5 fd1f 	bl	80005f8 <__aeabi_dmul>
 800abba:	ec41 0b10 	vmov	d0, r0, r1
 800abbe:	bd70      	pop	{r4, r5, r6, pc}

0800abc0 <_strtod_l>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	b09f      	sub	sp, #124	@ 0x7c
 800abc6:	460c      	mov	r4, r1
 800abc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800abca:	2200      	movs	r2, #0
 800abcc:	921a      	str	r2, [sp, #104]	@ 0x68
 800abce:	9005      	str	r0, [sp, #20]
 800abd0:	f04f 0a00 	mov.w	sl, #0
 800abd4:	f04f 0b00 	mov.w	fp, #0
 800abd8:	460a      	mov	r2, r1
 800abda:	9219      	str	r2, [sp, #100]	@ 0x64
 800abdc:	7811      	ldrb	r1, [r2, #0]
 800abde:	292b      	cmp	r1, #43	@ 0x2b
 800abe0:	d04a      	beq.n	800ac78 <_strtod_l+0xb8>
 800abe2:	d838      	bhi.n	800ac56 <_strtod_l+0x96>
 800abe4:	290d      	cmp	r1, #13
 800abe6:	d832      	bhi.n	800ac4e <_strtod_l+0x8e>
 800abe8:	2908      	cmp	r1, #8
 800abea:	d832      	bhi.n	800ac52 <_strtod_l+0x92>
 800abec:	2900      	cmp	r1, #0
 800abee:	d03b      	beq.n	800ac68 <_strtod_l+0xa8>
 800abf0:	2200      	movs	r2, #0
 800abf2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800abf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abf6:	782a      	ldrb	r2, [r5, #0]
 800abf8:	2a30      	cmp	r2, #48	@ 0x30
 800abfa:	f040 80b3 	bne.w	800ad64 <_strtod_l+0x1a4>
 800abfe:	786a      	ldrb	r2, [r5, #1]
 800ac00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac04:	2a58      	cmp	r2, #88	@ 0x58
 800ac06:	d16e      	bne.n	800ace6 <_strtod_l+0x126>
 800ac08:	9302      	str	r3, [sp, #8]
 800ac0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4a8e      	ldr	r2, [pc, #568]	@ (800ae4c <_strtod_l+0x28c>)
 800ac14:	9805      	ldr	r0, [sp, #20]
 800ac16:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ac18:	a919      	add	r1, sp, #100	@ 0x64
 800ac1a:	f001 fa7b 	bl	800c114 <__gethex>
 800ac1e:	f010 060f 	ands.w	r6, r0, #15
 800ac22:	4604      	mov	r4, r0
 800ac24:	d005      	beq.n	800ac32 <_strtod_l+0x72>
 800ac26:	2e06      	cmp	r6, #6
 800ac28:	d128      	bne.n	800ac7c <_strtod_l+0xbc>
 800ac2a:	3501      	adds	r5, #1
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f040 858e 	bne.w	800b756 <_strtod_l+0xb96>
 800ac3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac3c:	b1cb      	cbz	r3, 800ac72 <_strtod_l+0xb2>
 800ac3e:	4652      	mov	r2, sl
 800ac40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ac44:	ec43 2b10 	vmov	d0, r2, r3
 800ac48:	b01f      	add	sp, #124	@ 0x7c
 800ac4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4e:	2920      	cmp	r1, #32
 800ac50:	d1ce      	bne.n	800abf0 <_strtod_l+0x30>
 800ac52:	3201      	adds	r2, #1
 800ac54:	e7c1      	b.n	800abda <_strtod_l+0x1a>
 800ac56:	292d      	cmp	r1, #45	@ 0x2d
 800ac58:	d1ca      	bne.n	800abf0 <_strtod_l+0x30>
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac5e:	1c51      	adds	r1, r2, #1
 800ac60:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac62:	7852      	ldrb	r2, [r2, #1]
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	d1c5      	bne.n	800abf4 <_strtod_l+0x34>
 800ac68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac6a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f040 8570 	bne.w	800b752 <_strtod_l+0xb92>
 800ac72:	4652      	mov	r2, sl
 800ac74:	465b      	mov	r3, fp
 800ac76:	e7e5      	b.n	800ac44 <_strtod_l+0x84>
 800ac78:	2100      	movs	r1, #0
 800ac7a:	e7ef      	b.n	800ac5c <_strtod_l+0x9c>
 800ac7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac7e:	b13a      	cbz	r2, 800ac90 <_strtod_l+0xd0>
 800ac80:	2135      	movs	r1, #53	@ 0x35
 800ac82:	a81c      	add	r0, sp, #112	@ 0x70
 800ac84:	f7ff ff3a 	bl	800aafc <__copybits>
 800ac88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac8a:	9805      	ldr	r0, [sp, #20]
 800ac8c:	f7ff fb08 	bl	800a2a0 <_Bfree>
 800ac90:	3e01      	subs	r6, #1
 800ac92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac94:	2e04      	cmp	r6, #4
 800ac96:	d806      	bhi.n	800aca6 <_strtod_l+0xe6>
 800ac98:	e8df f006 	tbb	[pc, r6]
 800ac9c:	201d0314 	.word	0x201d0314
 800aca0:	14          	.byte	0x14
 800aca1:	00          	.byte	0x00
 800aca2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aca6:	05e1      	lsls	r1, r4, #23
 800aca8:	bf48      	it	mi
 800acaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800acae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acb2:	0d1b      	lsrs	r3, r3, #20
 800acb4:	051b      	lsls	r3, r3, #20
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1bb      	bne.n	800ac32 <_strtod_l+0x72>
 800acba:	f7fe fb11 	bl	80092e0 <__errno>
 800acbe:	2322      	movs	r3, #34	@ 0x22
 800acc0:	6003      	str	r3, [r0, #0]
 800acc2:	e7b6      	b.n	800ac32 <_strtod_l+0x72>
 800acc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800acc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800accc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800acd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800acd4:	e7e7      	b.n	800aca6 <_strtod_l+0xe6>
 800acd6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ae54 <_strtod_l+0x294>
 800acda:	e7e4      	b.n	800aca6 <_strtod_l+0xe6>
 800acdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ace0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ace4:	e7df      	b.n	800aca6 <_strtod_l+0xe6>
 800ace6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	9219      	str	r2, [sp, #100]	@ 0x64
 800acec:	785b      	ldrb	r3, [r3, #1]
 800acee:	2b30      	cmp	r3, #48	@ 0x30
 800acf0:	d0f9      	beq.n	800ace6 <_strtod_l+0x126>
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d09d      	beq.n	800ac32 <_strtod_l+0x72>
 800acf6:	2301      	movs	r3, #1
 800acf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800acfe:	2300      	movs	r3, #0
 800ad00:	9308      	str	r3, [sp, #32]
 800ad02:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad04:	461f      	mov	r7, r3
 800ad06:	220a      	movs	r2, #10
 800ad08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ad0a:	7805      	ldrb	r5, [r0, #0]
 800ad0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ad10:	b2d9      	uxtb	r1, r3
 800ad12:	2909      	cmp	r1, #9
 800ad14:	d928      	bls.n	800ad68 <_strtod_l+0x1a8>
 800ad16:	494e      	ldr	r1, [pc, #312]	@ (800ae50 <_strtod_l+0x290>)
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f001 f941 	bl	800bfa0 <strncmp>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d032      	beq.n	800ad88 <_strtod_l+0x1c8>
 800ad22:	2000      	movs	r0, #0
 800ad24:	462a      	mov	r2, r5
 800ad26:	4681      	mov	r9, r0
 800ad28:	463d      	mov	r5, r7
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2a65      	cmp	r2, #101	@ 0x65
 800ad2e:	d001      	beq.n	800ad34 <_strtod_l+0x174>
 800ad30:	2a45      	cmp	r2, #69	@ 0x45
 800ad32:	d114      	bne.n	800ad5e <_strtod_l+0x19e>
 800ad34:	b91d      	cbnz	r5, 800ad3e <_strtod_l+0x17e>
 800ad36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad38:	4302      	orrs	r2, r0
 800ad3a:	d095      	beq.n	800ac68 <_strtod_l+0xa8>
 800ad3c:	2500      	movs	r5, #0
 800ad3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ad40:	1c62      	adds	r2, r4, #1
 800ad42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad44:	7862      	ldrb	r2, [r4, #1]
 800ad46:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad48:	d077      	beq.n	800ae3a <_strtod_l+0x27a>
 800ad4a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad4c:	d07b      	beq.n	800ae46 <_strtod_l+0x286>
 800ad4e:	f04f 0c00 	mov.w	ip, #0
 800ad52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad56:	2909      	cmp	r1, #9
 800ad58:	f240 8082 	bls.w	800ae60 <_strtod_l+0x2a0>
 800ad5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad5e:	f04f 0800 	mov.w	r8, #0
 800ad62:	e0a2      	b.n	800aeaa <_strtod_l+0x2ea>
 800ad64:	2300      	movs	r3, #0
 800ad66:	e7c7      	b.n	800acf8 <_strtod_l+0x138>
 800ad68:	2f08      	cmp	r7, #8
 800ad6a:	bfd5      	itete	le
 800ad6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ad6e:	9908      	ldrgt	r1, [sp, #32]
 800ad70:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad74:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad78:	f100 0001 	add.w	r0, r0, #1
 800ad7c:	bfd4      	ite	le
 800ad7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ad80:	9308      	strgt	r3, [sp, #32]
 800ad82:	3701      	adds	r7, #1
 800ad84:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad86:	e7bf      	b.n	800ad08 <_strtod_l+0x148>
 800ad88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad8a:	1c5a      	adds	r2, r3, #1
 800ad8c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad8e:	785a      	ldrb	r2, [r3, #1]
 800ad90:	b37f      	cbz	r7, 800adf2 <_strtod_l+0x232>
 800ad92:	4681      	mov	r9, r0
 800ad94:	463d      	mov	r5, r7
 800ad96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad9a:	2b09      	cmp	r3, #9
 800ad9c:	d912      	bls.n	800adc4 <_strtod_l+0x204>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e7c4      	b.n	800ad2c <_strtod_l+0x16c>
 800ada2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ada4:	1c5a      	adds	r2, r3, #1
 800ada6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ada8:	785a      	ldrb	r2, [r3, #1]
 800adaa:	3001      	adds	r0, #1
 800adac:	2a30      	cmp	r2, #48	@ 0x30
 800adae:	d0f8      	beq.n	800ada2 <_strtod_l+0x1e2>
 800adb0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800adb4:	2b08      	cmp	r3, #8
 800adb6:	f200 84d3 	bhi.w	800b760 <_strtod_l+0xba0>
 800adba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800adbe:	4681      	mov	r9, r0
 800adc0:	2000      	movs	r0, #0
 800adc2:	4605      	mov	r5, r0
 800adc4:	3a30      	subs	r2, #48	@ 0x30
 800adc6:	f100 0301 	add.w	r3, r0, #1
 800adca:	d02a      	beq.n	800ae22 <_strtod_l+0x262>
 800adcc:	4499      	add	r9, r3
 800adce:	eb00 0c05 	add.w	ip, r0, r5
 800add2:	462b      	mov	r3, r5
 800add4:	210a      	movs	r1, #10
 800add6:	4563      	cmp	r3, ip
 800add8:	d10d      	bne.n	800adf6 <_strtod_l+0x236>
 800adda:	1c69      	adds	r1, r5, #1
 800addc:	4401      	add	r1, r0
 800adde:	4428      	add	r0, r5
 800ade0:	2808      	cmp	r0, #8
 800ade2:	dc16      	bgt.n	800ae12 <_strtod_l+0x252>
 800ade4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ade6:	230a      	movs	r3, #10
 800ade8:	fb03 2300 	mla	r3, r3, r0, r2
 800adec:	930a      	str	r3, [sp, #40]	@ 0x28
 800adee:	2300      	movs	r3, #0
 800adf0:	e018      	b.n	800ae24 <_strtod_l+0x264>
 800adf2:	4638      	mov	r0, r7
 800adf4:	e7da      	b.n	800adac <_strtod_l+0x1ec>
 800adf6:	2b08      	cmp	r3, #8
 800adf8:	f103 0301 	add.w	r3, r3, #1
 800adfc:	dc03      	bgt.n	800ae06 <_strtod_l+0x246>
 800adfe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ae00:	434e      	muls	r6, r1
 800ae02:	960a      	str	r6, [sp, #40]	@ 0x28
 800ae04:	e7e7      	b.n	800add6 <_strtod_l+0x216>
 800ae06:	2b10      	cmp	r3, #16
 800ae08:	bfde      	ittt	le
 800ae0a:	9e08      	ldrle	r6, [sp, #32]
 800ae0c:	434e      	mulle	r6, r1
 800ae0e:	9608      	strle	r6, [sp, #32]
 800ae10:	e7e1      	b.n	800add6 <_strtod_l+0x216>
 800ae12:	280f      	cmp	r0, #15
 800ae14:	dceb      	bgt.n	800adee <_strtod_l+0x22e>
 800ae16:	9808      	ldr	r0, [sp, #32]
 800ae18:	230a      	movs	r3, #10
 800ae1a:	fb03 2300 	mla	r3, r3, r0, r2
 800ae1e:	9308      	str	r3, [sp, #32]
 800ae20:	e7e5      	b.n	800adee <_strtod_l+0x22e>
 800ae22:	4629      	mov	r1, r5
 800ae24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae26:	1c50      	adds	r0, r2, #1
 800ae28:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae2a:	7852      	ldrb	r2, [r2, #1]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	460d      	mov	r5, r1
 800ae30:	e7b1      	b.n	800ad96 <_strtod_l+0x1d6>
 800ae32:	f04f 0900 	mov.w	r9, #0
 800ae36:	2301      	movs	r3, #1
 800ae38:	e77d      	b.n	800ad36 <_strtod_l+0x176>
 800ae3a:	f04f 0c00 	mov.w	ip, #0
 800ae3e:	1ca2      	adds	r2, r4, #2
 800ae40:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae42:	78a2      	ldrb	r2, [r4, #2]
 800ae44:	e785      	b.n	800ad52 <_strtod_l+0x192>
 800ae46:	f04f 0c01 	mov.w	ip, #1
 800ae4a:	e7f8      	b.n	800ae3e <_strtod_l+0x27e>
 800ae4c:	0800ce10 	.word	0x0800ce10
 800ae50:	0800cdf8 	.word	0x0800cdf8
 800ae54:	7ff00000 	.word	0x7ff00000
 800ae58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae5a:	1c51      	adds	r1, r2, #1
 800ae5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae5e:	7852      	ldrb	r2, [r2, #1]
 800ae60:	2a30      	cmp	r2, #48	@ 0x30
 800ae62:	d0f9      	beq.n	800ae58 <_strtod_l+0x298>
 800ae64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae68:	2908      	cmp	r1, #8
 800ae6a:	f63f af78 	bhi.w	800ad5e <_strtod_l+0x19e>
 800ae6e:	3a30      	subs	r2, #48	@ 0x30
 800ae70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae76:	f04f 080a 	mov.w	r8, #10
 800ae7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae7c:	1c56      	adds	r6, r2, #1
 800ae7e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae80:	7852      	ldrb	r2, [r2, #1]
 800ae82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae86:	f1be 0f09 	cmp.w	lr, #9
 800ae8a:	d939      	bls.n	800af00 <_strtod_l+0x340>
 800ae8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae8e:	1a76      	subs	r6, r6, r1
 800ae90:	2e08      	cmp	r6, #8
 800ae92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae96:	dc03      	bgt.n	800aea0 <_strtod_l+0x2e0>
 800ae98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae9a:	4588      	cmp	r8, r1
 800ae9c:	bfa8      	it	ge
 800ae9e:	4688      	movge	r8, r1
 800aea0:	f1bc 0f00 	cmp.w	ip, #0
 800aea4:	d001      	beq.n	800aeaa <_strtod_l+0x2ea>
 800aea6:	f1c8 0800 	rsb	r8, r8, #0
 800aeaa:	2d00      	cmp	r5, #0
 800aeac:	d14e      	bne.n	800af4c <_strtod_l+0x38c>
 800aeae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aeb0:	4308      	orrs	r0, r1
 800aeb2:	f47f aebe 	bne.w	800ac32 <_strtod_l+0x72>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f47f aed6 	bne.w	800ac68 <_strtod_l+0xa8>
 800aebc:	2a69      	cmp	r2, #105	@ 0x69
 800aebe:	d028      	beq.n	800af12 <_strtod_l+0x352>
 800aec0:	dc25      	bgt.n	800af0e <_strtod_l+0x34e>
 800aec2:	2a49      	cmp	r2, #73	@ 0x49
 800aec4:	d025      	beq.n	800af12 <_strtod_l+0x352>
 800aec6:	2a4e      	cmp	r2, #78	@ 0x4e
 800aec8:	f47f aece 	bne.w	800ac68 <_strtod_l+0xa8>
 800aecc:	499b      	ldr	r1, [pc, #620]	@ (800b13c <_strtod_l+0x57c>)
 800aece:	a819      	add	r0, sp, #100	@ 0x64
 800aed0:	f001 fb42 	bl	800c558 <__match>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	f43f aec7 	beq.w	800ac68 <_strtod_l+0xa8>
 800aeda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b28      	cmp	r3, #40	@ 0x28
 800aee0:	d12e      	bne.n	800af40 <_strtod_l+0x380>
 800aee2:	4997      	ldr	r1, [pc, #604]	@ (800b140 <_strtod_l+0x580>)
 800aee4:	aa1c      	add	r2, sp, #112	@ 0x70
 800aee6:	a819      	add	r0, sp, #100	@ 0x64
 800aee8:	f001 fb4a 	bl	800c580 <__hexnan>
 800aeec:	2805      	cmp	r0, #5
 800aeee:	d127      	bne.n	800af40 <_strtod_l+0x380>
 800aef0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aef2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aef6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aefa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aefe:	e698      	b.n	800ac32 <_strtod_l+0x72>
 800af00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af02:	fb08 2101 	mla	r1, r8, r1, r2
 800af06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800af0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800af0c:	e7b5      	b.n	800ae7a <_strtod_l+0x2ba>
 800af0e:	2a6e      	cmp	r2, #110	@ 0x6e
 800af10:	e7da      	b.n	800aec8 <_strtod_l+0x308>
 800af12:	498c      	ldr	r1, [pc, #560]	@ (800b144 <_strtod_l+0x584>)
 800af14:	a819      	add	r0, sp, #100	@ 0x64
 800af16:	f001 fb1f 	bl	800c558 <__match>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	f43f aea4 	beq.w	800ac68 <_strtod_l+0xa8>
 800af20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af22:	4989      	ldr	r1, [pc, #548]	@ (800b148 <_strtod_l+0x588>)
 800af24:	3b01      	subs	r3, #1
 800af26:	a819      	add	r0, sp, #100	@ 0x64
 800af28:	9319      	str	r3, [sp, #100]	@ 0x64
 800af2a:	f001 fb15 	bl	800c558 <__match>
 800af2e:	b910      	cbnz	r0, 800af36 <_strtod_l+0x376>
 800af30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af32:	3301      	adds	r3, #1
 800af34:	9319      	str	r3, [sp, #100]	@ 0x64
 800af36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b158 <_strtod_l+0x598>
 800af3a:	f04f 0a00 	mov.w	sl, #0
 800af3e:	e678      	b.n	800ac32 <_strtod_l+0x72>
 800af40:	4882      	ldr	r0, [pc, #520]	@ (800b14c <_strtod_l+0x58c>)
 800af42:	f001 f85d 	bl	800c000 <nan>
 800af46:	ec5b ab10 	vmov	sl, fp, d0
 800af4a:	e672      	b.n	800ac32 <_strtod_l+0x72>
 800af4c:	eba8 0309 	sub.w	r3, r8, r9
 800af50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af52:	9309      	str	r3, [sp, #36]	@ 0x24
 800af54:	2f00      	cmp	r7, #0
 800af56:	bf08      	it	eq
 800af58:	462f      	moveq	r7, r5
 800af5a:	2d10      	cmp	r5, #16
 800af5c:	462c      	mov	r4, r5
 800af5e:	bfa8      	it	ge
 800af60:	2410      	movge	r4, #16
 800af62:	f7f5 facf 	bl	8000504 <__aeabi_ui2d>
 800af66:	2d09      	cmp	r5, #9
 800af68:	4682      	mov	sl, r0
 800af6a:	468b      	mov	fp, r1
 800af6c:	dc13      	bgt.n	800af96 <_strtod_l+0x3d6>
 800af6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af70:	2b00      	cmp	r3, #0
 800af72:	f43f ae5e 	beq.w	800ac32 <_strtod_l+0x72>
 800af76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af78:	dd78      	ble.n	800b06c <_strtod_l+0x4ac>
 800af7a:	2b16      	cmp	r3, #22
 800af7c:	dc5f      	bgt.n	800b03e <_strtod_l+0x47e>
 800af7e:	4974      	ldr	r1, [pc, #464]	@ (800b150 <_strtod_l+0x590>)
 800af80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af88:	4652      	mov	r2, sl
 800af8a:	465b      	mov	r3, fp
 800af8c:	f7f5 fb34 	bl	80005f8 <__aeabi_dmul>
 800af90:	4682      	mov	sl, r0
 800af92:	468b      	mov	fp, r1
 800af94:	e64d      	b.n	800ac32 <_strtod_l+0x72>
 800af96:	4b6e      	ldr	r3, [pc, #440]	@ (800b150 <_strtod_l+0x590>)
 800af98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	4682      	mov	sl, r0
 800afa6:	9808      	ldr	r0, [sp, #32]
 800afa8:	468b      	mov	fp, r1
 800afaa:	f7f5 faab 	bl	8000504 <__aeabi_ui2d>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4650      	mov	r0, sl
 800afb4:	4659      	mov	r1, fp
 800afb6:	f7f5 f969 	bl	800028c <__adddf3>
 800afba:	2d0f      	cmp	r5, #15
 800afbc:	4682      	mov	sl, r0
 800afbe:	468b      	mov	fp, r1
 800afc0:	ddd5      	ble.n	800af6e <_strtod_l+0x3ae>
 800afc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc4:	1b2c      	subs	r4, r5, r4
 800afc6:	441c      	add	r4, r3
 800afc8:	2c00      	cmp	r4, #0
 800afca:	f340 8096 	ble.w	800b0fa <_strtod_l+0x53a>
 800afce:	f014 030f 	ands.w	r3, r4, #15
 800afd2:	d00a      	beq.n	800afea <_strtod_l+0x42a>
 800afd4:	495e      	ldr	r1, [pc, #376]	@ (800b150 <_strtod_l+0x590>)
 800afd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afda:	4652      	mov	r2, sl
 800afdc:	465b      	mov	r3, fp
 800afde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afe2:	f7f5 fb09 	bl	80005f8 <__aeabi_dmul>
 800afe6:	4682      	mov	sl, r0
 800afe8:	468b      	mov	fp, r1
 800afea:	f034 040f 	bics.w	r4, r4, #15
 800afee:	d073      	beq.n	800b0d8 <_strtod_l+0x518>
 800aff0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aff4:	dd48      	ble.n	800b088 <_strtod_l+0x4c8>
 800aff6:	2400      	movs	r4, #0
 800aff8:	46a0      	mov	r8, r4
 800affa:	940a      	str	r4, [sp, #40]	@ 0x28
 800affc:	46a1      	mov	r9, r4
 800affe:	9a05      	ldr	r2, [sp, #20]
 800b000:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b158 <_strtod_l+0x598>
 800b004:	2322      	movs	r3, #34	@ 0x22
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	f04f 0a00 	mov.w	sl, #0
 800b00c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f43f ae0f 	beq.w	800ac32 <_strtod_l+0x72>
 800b014:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b016:	9805      	ldr	r0, [sp, #20]
 800b018:	f7ff f942 	bl	800a2a0 <_Bfree>
 800b01c:	9805      	ldr	r0, [sp, #20]
 800b01e:	4649      	mov	r1, r9
 800b020:	f7ff f93e 	bl	800a2a0 <_Bfree>
 800b024:	9805      	ldr	r0, [sp, #20]
 800b026:	4641      	mov	r1, r8
 800b028:	f7ff f93a 	bl	800a2a0 <_Bfree>
 800b02c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b02e:	9805      	ldr	r0, [sp, #20]
 800b030:	f7ff f936 	bl	800a2a0 <_Bfree>
 800b034:	9805      	ldr	r0, [sp, #20]
 800b036:	4621      	mov	r1, r4
 800b038:	f7ff f932 	bl	800a2a0 <_Bfree>
 800b03c:	e5f9      	b.n	800ac32 <_strtod_l+0x72>
 800b03e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b040:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b044:	4293      	cmp	r3, r2
 800b046:	dbbc      	blt.n	800afc2 <_strtod_l+0x402>
 800b048:	4c41      	ldr	r4, [pc, #260]	@ (800b150 <_strtod_l+0x590>)
 800b04a:	f1c5 050f 	rsb	r5, r5, #15
 800b04e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b052:	4652      	mov	r2, sl
 800b054:	465b      	mov	r3, fp
 800b056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b05a:	f7f5 facd 	bl	80005f8 <__aeabi_dmul>
 800b05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b060:	1b5d      	subs	r5, r3, r5
 800b062:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b066:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b06a:	e78f      	b.n	800af8c <_strtod_l+0x3cc>
 800b06c:	3316      	adds	r3, #22
 800b06e:	dba8      	blt.n	800afc2 <_strtod_l+0x402>
 800b070:	4b37      	ldr	r3, [pc, #220]	@ (800b150 <_strtod_l+0x590>)
 800b072:	eba9 0808 	sub.w	r8, r9, r8
 800b076:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b07a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b07e:	4650      	mov	r0, sl
 800b080:	4659      	mov	r1, fp
 800b082:	f7f5 fbe3 	bl	800084c <__aeabi_ddiv>
 800b086:	e783      	b.n	800af90 <_strtod_l+0x3d0>
 800b088:	4b32      	ldr	r3, [pc, #200]	@ (800b154 <_strtod_l+0x594>)
 800b08a:	9308      	str	r3, [sp, #32]
 800b08c:	2300      	movs	r3, #0
 800b08e:	1124      	asrs	r4, r4, #4
 800b090:	4650      	mov	r0, sl
 800b092:	4659      	mov	r1, fp
 800b094:	461e      	mov	r6, r3
 800b096:	2c01      	cmp	r4, #1
 800b098:	dc21      	bgt.n	800b0de <_strtod_l+0x51e>
 800b09a:	b10b      	cbz	r3, 800b0a0 <_strtod_l+0x4e0>
 800b09c:	4682      	mov	sl, r0
 800b09e:	468b      	mov	fp, r1
 800b0a0:	492c      	ldr	r1, [pc, #176]	@ (800b154 <_strtod_l+0x594>)
 800b0a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b0a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b2:	f7f5 faa1 	bl	80005f8 <__aeabi_dmul>
 800b0b6:	4b28      	ldr	r3, [pc, #160]	@ (800b158 <_strtod_l+0x598>)
 800b0b8:	460a      	mov	r2, r1
 800b0ba:	400b      	ands	r3, r1
 800b0bc:	4927      	ldr	r1, [pc, #156]	@ (800b15c <_strtod_l+0x59c>)
 800b0be:	428b      	cmp	r3, r1
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	d898      	bhi.n	800aff6 <_strtod_l+0x436>
 800b0c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b0c8:	428b      	cmp	r3, r1
 800b0ca:	bf86      	itte	hi
 800b0cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b160 <_strtod_l+0x5a0>
 800b0d0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b0d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b0d8:	2300      	movs	r3, #0
 800b0da:	9308      	str	r3, [sp, #32]
 800b0dc:	e07a      	b.n	800b1d4 <_strtod_l+0x614>
 800b0de:	07e2      	lsls	r2, r4, #31
 800b0e0:	d505      	bpl.n	800b0ee <_strtod_l+0x52e>
 800b0e2:	9b08      	ldr	r3, [sp, #32]
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 fa86 	bl	80005f8 <__aeabi_dmul>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	9a08      	ldr	r2, [sp, #32]
 800b0f0:	3208      	adds	r2, #8
 800b0f2:	3601      	adds	r6, #1
 800b0f4:	1064      	asrs	r4, r4, #1
 800b0f6:	9208      	str	r2, [sp, #32]
 800b0f8:	e7cd      	b.n	800b096 <_strtod_l+0x4d6>
 800b0fa:	d0ed      	beq.n	800b0d8 <_strtod_l+0x518>
 800b0fc:	4264      	negs	r4, r4
 800b0fe:	f014 020f 	ands.w	r2, r4, #15
 800b102:	d00a      	beq.n	800b11a <_strtod_l+0x55a>
 800b104:	4b12      	ldr	r3, [pc, #72]	@ (800b150 <_strtod_l+0x590>)
 800b106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b10a:	4650      	mov	r0, sl
 800b10c:	4659      	mov	r1, fp
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	f7f5 fb9b 	bl	800084c <__aeabi_ddiv>
 800b116:	4682      	mov	sl, r0
 800b118:	468b      	mov	fp, r1
 800b11a:	1124      	asrs	r4, r4, #4
 800b11c:	d0dc      	beq.n	800b0d8 <_strtod_l+0x518>
 800b11e:	2c1f      	cmp	r4, #31
 800b120:	dd20      	ble.n	800b164 <_strtod_l+0x5a4>
 800b122:	2400      	movs	r4, #0
 800b124:	46a0      	mov	r8, r4
 800b126:	940a      	str	r4, [sp, #40]	@ 0x28
 800b128:	46a1      	mov	r9, r4
 800b12a:	9a05      	ldr	r2, [sp, #20]
 800b12c:	2322      	movs	r3, #34	@ 0x22
 800b12e:	f04f 0a00 	mov.w	sl, #0
 800b132:	f04f 0b00 	mov.w	fp, #0
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	e768      	b.n	800b00c <_strtod_l+0x44c>
 800b13a:	bf00      	nop
 800b13c:	0800cbaa 	.word	0x0800cbaa
 800b140:	0800cdfc 	.word	0x0800cdfc
 800b144:	0800cba2 	.word	0x0800cba2
 800b148:	0800cc15 	.word	0x0800cc15
 800b14c:	0800cc11 	.word	0x0800cc11
 800b150:	0800cd30 	.word	0x0800cd30
 800b154:	0800cd08 	.word	0x0800cd08
 800b158:	7ff00000 	.word	0x7ff00000
 800b15c:	7ca00000 	.word	0x7ca00000
 800b160:	7fefffff 	.word	0x7fefffff
 800b164:	f014 0310 	ands.w	r3, r4, #16
 800b168:	bf18      	it	ne
 800b16a:	236a      	movne	r3, #106	@ 0x6a
 800b16c:	4ea9      	ldr	r6, [pc, #676]	@ (800b414 <_strtod_l+0x854>)
 800b16e:	9308      	str	r3, [sp, #32]
 800b170:	4650      	mov	r0, sl
 800b172:	4659      	mov	r1, fp
 800b174:	2300      	movs	r3, #0
 800b176:	07e2      	lsls	r2, r4, #31
 800b178:	d504      	bpl.n	800b184 <_strtod_l+0x5c4>
 800b17a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b17e:	f7f5 fa3b 	bl	80005f8 <__aeabi_dmul>
 800b182:	2301      	movs	r3, #1
 800b184:	1064      	asrs	r4, r4, #1
 800b186:	f106 0608 	add.w	r6, r6, #8
 800b18a:	d1f4      	bne.n	800b176 <_strtod_l+0x5b6>
 800b18c:	b10b      	cbz	r3, 800b192 <_strtod_l+0x5d2>
 800b18e:	4682      	mov	sl, r0
 800b190:	468b      	mov	fp, r1
 800b192:	9b08      	ldr	r3, [sp, #32]
 800b194:	b1b3      	cbz	r3, 800b1c4 <_strtod_l+0x604>
 800b196:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b19a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	dd0f      	ble.n	800b1c4 <_strtod_l+0x604>
 800b1a4:	2b1f      	cmp	r3, #31
 800b1a6:	dd55      	ble.n	800b254 <_strtod_l+0x694>
 800b1a8:	2b34      	cmp	r3, #52	@ 0x34
 800b1aa:	bfde      	ittt	le
 800b1ac:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b1b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b1b4:	4093      	lslle	r3, r2
 800b1b6:	f04f 0a00 	mov.w	sl, #0
 800b1ba:	bfcc      	ite	gt
 800b1bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b1c0:	ea03 0b01 	andle.w	fp, r3, r1
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	4659      	mov	r1, fp
 800b1cc:	f7f5 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d1a6      	bne.n	800b122 <_strtod_l+0x562>
 800b1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1da:	9805      	ldr	r0, [sp, #20]
 800b1dc:	462b      	mov	r3, r5
 800b1de:	463a      	mov	r2, r7
 800b1e0:	f7ff f8c6 	bl	800a370 <__s2b>
 800b1e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f43f af05 	beq.w	800aff6 <_strtod_l+0x436>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	eba9 0308 	sub.w	r3, r9, r8
 800b1f4:	bfa8      	it	ge
 800b1f6:	2300      	movge	r3, #0
 800b1f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1fa:	2400      	movs	r4, #0
 800b1fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b200:	9316      	str	r3, [sp, #88]	@ 0x58
 800b202:	46a0      	mov	r8, r4
 800b204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b206:	9805      	ldr	r0, [sp, #20]
 800b208:	6859      	ldr	r1, [r3, #4]
 800b20a:	f7ff f809 	bl	800a220 <_Balloc>
 800b20e:	4681      	mov	r9, r0
 800b210:	2800      	cmp	r0, #0
 800b212:	f43f aef4 	beq.w	800affe <_strtod_l+0x43e>
 800b216:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b218:	691a      	ldr	r2, [r3, #16]
 800b21a:	3202      	adds	r2, #2
 800b21c:	f103 010c 	add.w	r1, r3, #12
 800b220:	0092      	lsls	r2, r2, #2
 800b222:	300c      	adds	r0, #12
 800b224:	f000 fede 	bl	800bfe4 <memcpy>
 800b228:	ec4b ab10 	vmov	d0, sl, fp
 800b22c:	9805      	ldr	r0, [sp, #20]
 800b22e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b230:	a91b      	add	r1, sp, #108	@ 0x6c
 800b232:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b236:	f7ff fbd7 	bl	800a9e8 <__d2b>
 800b23a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f43f aede 	beq.w	800affe <_strtod_l+0x43e>
 800b242:	9805      	ldr	r0, [sp, #20]
 800b244:	2101      	movs	r1, #1
 800b246:	f7ff f929 	bl	800a49c <__i2b>
 800b24a:	4680      	mov	r8, r0
 800b24c:	b948      	cbnz	r0, 800b262 <_strtod_l+0x6a2>
 800b24e:	f04f 0800 	mov.w	r8, #0
 800b252:	e6d4      	b.n	800affe <_strtod_l+0x43e>
 800b254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	ea03 0a0a 	and.w	sl, r3, sl
 800b260:	e7b0      	b.n	800b1c4 <_strtod_l+0x604>
 800b262:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b264:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b266:	2d00      	cmp	r5, #0
 800b268:	bfab      	itete	ge
 800b26a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b26c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b26e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b270:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b272:	bfac      	ite	ge
 800b274:	18ef      	addge	r7, r5, r3
 800b276:	1b5e      	sublt	r6, r3, r5
 800b278:	9b08      	ldr	r3, [sp, #32]
 800b27a:	1aed      	subs	r5, r5, r3
 800b27c:	4415      	add	r5, r2
 800b27e:	4b66      	ldr	r3, [pc, #408]	@ (800b418 <_strtod_l+0x858>)
 800b280:	3d01      	subs	r5, #1
 800b282:	429d      	cmp	r5, r3
 800b284:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b288:	da50      	bge.n	800b32c <_strtod_l+0x76c>
 800b28a:	1b5b      	subs	r3, r3, r5
 800b28c:	2b1f      	cmp	r3, #31
 800b28e:	eba2 0203 	sub.w	r2, r2, r3
 800b292:	f04f 0101 	mov.w	r1, #1
 800b296:	dc3d      	bgt.n	800b314 <_strtod_l+0x754>
 800b298:	fa01 f303 	lsl.w	r3, r1, r3
 800b29c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2a2:	18bd      	adds	r5, r7, r2
 800b2a4:	9b08      	ldr	r3, [sp, #32]
 800b2a6:	42af      	cmp	r7, r5
 800b2a8:	4416      	add	r6, r2
 800b2aa:	441e      	add	r6, r3
 800b2ac:	463b      	mov	r3, r7
 800b2ae:	bfa8      	it	ge
 800b2b0:	462b      	movge	r3, r5
 800b2b2:	42b3      	cmp	r3, r6
 800b2b4:	bfa8      	it	ge
 800b2b6:	4633      	movge	r3, r6
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfc2      	ittt	gt
 800b2bc:	1aed      	subgt	r5, r5, r3
 800b2be:	1af6      	subgt	r6, r6, r3
 800b2c0:	1aff      	subgt	r7, r7, r3
 800b2c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dd16      	ble.n	800b2f6 <_strtod_l+0x736>
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	9805      	ldr	r0, [sp, #20]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	f7ff f9a5 	bl	800a61c <__pow5mult>
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d0ba      	beq.n	800b24e <_strtod_l+0x68e>
 800b2d8:	4601      	mov	r1, r0
 800b2da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b2dc:	9805      	ldr	r0, [sp, #20]
 800b2de:	f7ff f8f3 	bl	800a4c8 <__multiply>
 800b2e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	f43f ae8a 	beq.w	800affe <_strtod_l+0x43e>
 800b2ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2ec:	9805      	ldr	r0, [sp, #20]
 800b2ee:	f7fe ffd7 	bl	800a2a0 <_Bfree>
 800b2f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2f6:	2d00      	cmp	r5, #0
 800b2f8:	dc1d      	bgt.n	800b336 <_strtod_l+0x776>
 800b2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dd23      	ble.n	800b348 <_strtod_l+0x788>
 800b300:	4649      	mov	r1, r9
 800b302:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b304:	9805      	ldr	r0, [sp, #20]
 800b306:	f7ff f989 	bl	800a61c <__pow5mult>
 800b30a:	4681      	mov	r9, r0
 800b30c:	b9e0      	cbnz	r0, 800b348 <_strtod_l+0x788>
 800b30e:	f04f 0900 	mov.w	r9, #0
 800b312:	e674      	b.n	800affe <_strtod_l+0x43e>
 800b314:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b318:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b31c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b320:	35e2      	adds	r5, #226	@ 0xe2
 800b322:	fa01 f305 	lsl.w	r3, r1, r5
 800b326:	9310      	str	r3, [sp, #64]	@ 0x40
 800b328:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b32a:	e7ba      	b.n	800b2a2 <_strtod_l+0x6e2>
 800b32c:	2300      	movs	r3, #0
 800b32e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b330:	2301      	movs	r3, #1
 800b332:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b334:	e7b5      	b.n	800b2a2 <_strtod_l+0x6e2>
 800b336:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b338:	9805      	ldr	r0, [sp, #20]
 800b33a:	462a      	mov	r2, r5
 800b33c:	f7ff f9c8 	bl	800a6d0 <__lshift>
 800b340:	901a      	str	r0, [sp, #104]	@ 0x68
 800b342:	2800      	cmp	r0, #0
 800b344:	d1d9      	bne.n	800b2fa <_strtod_l+0x73a>
 800b346:	e65a      	b.n	800affe <_strtod_l+0x43e>
 800b348:	2e00      	cmp	r6, #0
 800b34a:	dd07      	ble.n	800b35c <_strtod_l+0x79c>
 800b34c:	4649      	mov	r1, r9
 800b34e:	9805      	ldr	r0, [sp, #20]
 800b350:	4632      	mov	r2, r6
 800b352:	f7ff f9bd 	bl	800a6d0 <__lshift>
 800b356:	4681      	mov	r9, r0
 800b358:	2800      	cmp	r0, #0
 800b35a:	d0d8      	beq.n	800b30e <_strtod_l+0x74e>
 800b35c:	2f00      	cmp	r7, #0
 800b35e:	dd08      	ble.n	800b372 <_strtod_l+0x7b2>
 800b360:	4641      	mov	r1, r8
 800b362:	9805      	ldr	r0, [sp, #20]
 800b364:	463a      	mov	r2, r7
 800b366:	f7ff f9b3 	bl	800a6d0 <__lshift>
 800b36a:	4680      	mov	r8, r0
 800b36c:	2800      	cmp	r0, #0
 800b36e:	f43f ae46 	beq.w	800affe <_strtod_l+0x43e>
 800b372:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b374:	9805      	ldr	r0, [sp, #20]
 800b376:	464a      	mov	r2, r9
 800b378:	f7ff fa32 	bl	800a7e0 <__mdiff>
 800b37c:	4604      	mov	r4, r0
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f ae3d 	beq.w	800affe <_strtod_l+0x43e>
 800b384:	68c3      	ldr	r3, [r0, #12]
 800b386:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b388:	2300      	movs	r3, #0
 800b38a:	60c3      	str	r3, [r0, #12]
 800b38c:	4641      	mov	r1, r8
 800b38e:	f7ff fa0b 	bl	800a7a8 <__mcmp>
 800b392:	2800      	cmp	r0, #0
 800b394:	da46      	bge.n	800b424 <_strtod_l+0x864>
 800b396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b398:	ea53 030a 	orrs.w	r3, r3, sl
 800b39c:	d16c      	bne.n	800b478 <_strtod_l+0x8b8>
 800b39e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d168      	bne.n	800b478 <_strtod_l+0x8b8>
 800b3a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3aa:	0d1b      	lsrs	r3, r3, #20
 800b3ac:	051b      	lsls	r3, r3, #20
 800b3ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3b2:	d961      	bls.n	800b478 <_strtod_l+0x8b8>
 800b3b4:	6963      	ldr	r3, [r4, #20]
 800b3b6:	b913      	cbnz	r3, 800b3be <_strtod_l+0x7fe>
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	dd5c      	ble.n	800b478 <_strtod_l+0x8b8>
 800b3be:	4621      	mov	r1, r4
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	9805      	ldr	r0, [sp, #20]
 800b3c4:	f7ff f984 	bl	800a6d0 <__lshift>
 800b3c8:	4641      	mov	r1, r8
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	f7ff f9ec 	bl	800a7a8 <__mcmp>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	dd51      	ble.n	800b478 <_strtod_l+0x8b8>
 800b3d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3d8:	9a08      	ldr	r2, [sp, #32]
 800b3da:	0d1b      	lsrs	r3, r3, #20
 800b3dc:	051b      	lsls	r3, r3, #20
 800b3de:	2a00      	cmp	r2, #0
 800b3e0:	d06b      	beq.n	800b4ba <_strtod_l+0x8fa>
 800b3e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3e6:	d868      	bhi.n	800b4ba <_strtod_l+0x8fa>
 800b3e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3ec:	f67f ae9d 	bls.w	800b12a <_strtod_l+0x56a>
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b41c <_strtod_l+0x85c>)
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	4659      	mov	r1, fp
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f7f5 f8fe 	bl	80005f8 <__aeabi_dmul>
 800b3fc:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <_strtod_l+0x860>)
 800b3fe:	400b      	ands	r3, r1
 800b400:	4682      	mov	sl, r0
 800b402:	468b      	mov	fp, r1
 800b404:	2b00      	cmp	r3, #0
 800b406:	f47f ae05 	bne.w	800b014 <_strtod_l+0x454>
 800b40a:	9a05      	ldr	r2, [sp, #20]
 800b40c:	2322      	movs	r3, #34	@ 0x22
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	e600      	b.n	800b014 <_strtod_l+0x454>
 800b412:	bf00      	nop
 800b414:	0800ce28 	.word	0x0800ce28
 800b418:	fffffc02 	.word	0xfffffc02
 800b41c:	39500000 	.word	0x39500000
 800b420:	7ff00000 	.word	0x7ff00000
 800b424:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b428:	d165      	bne.n	800b4f6 <_strtod_l+0x936>
 800b42a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b42c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b430:	b35a      	cbz	r2, 800b48a <_strtod_l+0x8ca>
 800b432:	4a9f      	ldr	r2, [pc, #636]	@ (800b6b0 <_strtod_l+0xaf0>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d12b      	bne.n	800b490 <_strtod_l+0x8d0>
 800b438:	9b08      	ldr	r3, [sp, #32]
 800b43a:	4651      	mov	r1, sl
 800b43c:	b303      	cbz	r3, 800b480 <_strtod_l+0x8c0>
 800b43e:	4b9d      	ldr	r3, [pc, #628]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b440:	465a      	mov	r2, fp
 800b442:	4013      	ands	r3, r2
 800b444:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b44c:	d81b      	bhi.n	800b486 <_strtod_l+0x8c6>
 800b44e:	0d1b      	lsrs	r3, r3, #20
 800b450:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b454:	fa02 f303 	lsl.w	r3, r2, r3
 800b458:	4299      	cmp	r1, r3
 800b45a:	d119      	bne.n	800b490 <_strtod_l+0x8d0>
 800b45c:	4b96      	ldr	r3, [pc, #600]	@ (800b6b8 <_strtod_l+0xaf8>)
 800b45e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b460:	429a      	cmp	r2, r3
 800b462:	d102      	bne.n	800b46a <_strtod_l+0x8aa>
 800b464:	3101      	adds	r1, #1
 800b466:	f43f adca 	beq.w	800affe <_strtod_l+0x43e>
 800b46a:	4b92      	ldr	r3, [pc, #584]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b46e:	401a      	ands	r2, r3
 800b470:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b474:	f04f 0a00 	mov.w	sl, #0
 800b478:	9b08      	ldr	r3, [sp, #32]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1b8      	bne.n	800b3f0 <_strtod_l+0x830>
 800b47e:	e5c9      	b.n	800b014 <_strtod_l+0x454>
 800b480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b484:	e7e8      	b.n	800b458 <_strtod_l+0x898>
 800b486:	4613      	mov	r3, r2
 800b488:	e7e6      	b.n	800b458 <_strtod_l+0x898>
 800b48a:	ea53 030a 	orrs.w	r3, r3, sl
 800b48e:	d0a1      	beq.n	800b3d4 <_strtod_l+0x814>
 800b490:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b492:	b1db      	cbz	r3, 800b4cc <_strtod_l+0x90c>
 800b494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b496:	4213      	tst	r3, r2
 800b498:	d0ee      	beq.n	800b478 <_strtod_l+0x8b8>
 800b49a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b49c:	9a08      	ldr	r2, [sp, #32]
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	b1bb      	cbz	r3, 800b4d4 <_strtod_l+0x914>
 800b4a4:	f7ff fb6e 	bl	800ab84 <sulp>
 800b4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4ac:	ec53 2b10 	vmov	r2, r3, d0
 800b4b0:	f7f4 feec 	bl	800028c <__adddf3>
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	468b      	mov	fp, r1
 800b4b8:	e7de      	b.n	800b478 <_strtod_l+0x8b8>
 800b4ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b4be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b4c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b4c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b4ca:	e7d5      	b.n	800b478 <_strtod_l+0x8b8>
 800b4cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4ce:	ea13 0f0a 	tst.w	r3, sl
 800b4d2:	e7e1      	b.n	800b498 <_strtod_l+0x8d8>
 800b4d4:	f7ff fb56 	bl	800ab84 <sulp>
 800b4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4dc:	ec53 2b10 	vmov	r2, r3, d0
 800b4e0:	f7f4 fed2 	bl	8000288 <__aeabi_dsub>
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	4682      	mov	sl, r0
 800b4ea:	468b      	mov	fp, r1
 800b4ec:	f7f5 faec 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d0c1      	beq.n	800b478 <_strtod_l+0x8b8>
 800b4f4:	e619      	b.n	800b12a <_strtod_l+0x56a>
 800b4f6:	4641      	mov	r1, r8
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f7ff facd 	bl	800aa98 <__ratio>
 800b4fe:	ec57 6b10 	vmov	r6, r7, d0
 800b502:	2200      	movs	r2, #0
 800b504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 faf0 	bl	8000af0 <__aeabi_dcmple>
 800b510:	2800      	cmp	r0, #0
 800b512:	d06f      	beq.n	800b5f4 <_strtod_l+0xa34>
 800b514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b516:	2b00      	cmp	r3, #0
 800b518:	d17a      	bne.n	800b610 <_strtod_l+0xa50>
 800b51a:	f1ba 0f00 	cmp.w	sl, #0
 800b51e:	d158      	bne.n	800b5d2 <_strtod_l+0xa12>
 800b520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b526:	2b00      	cmp	r3, #0
 800b528:	d15a      	bne.n	800b5e0 <_strtod_l+0xa20>
 800b52a:	4b64      	ldr	r3, [pc, #400]	@ (800b6bc <_strtod_l+0xafc>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	4630      	mov	r0, r6
 800b530:	4639      	mov	r1, r7
 800b532:	f7f5 fad3 	bl	8000adc <__aeabi_dcmplt>
 800b536:	2800      	cmp	r0, #0
 800b538:	d159      	bne.n	800b5ee <_strtod_l+0xa2e>
 800b53a:	4630      	mov	r0, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	4b60      	ldr	r3, [pc, #384]	@ (800b6c0 <_strtod_l+0xb00>)
 800b540:	2200      	movs	r2, #0
 800b542:	f7f5 f859 	bl	80005f8 <__aeabi_dmul>
 800b546:	4606      	mov	r6, r0
 800b548:	460f      	mov	r7, r1
 800b54a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b54e:	9606      	str	r6, [sp, #24]
 800b550:	9307      	str	r3, [sp, #28]
 800b552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b556:	4d57      	ldr	r5, [pc, #348]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b558:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b55c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b55e:	401d      	ands	r5, r3
 800b560:	4b58      	ldr	r3, [pc, #352]	@ (800b6c4 <_strtod_l+0xb04>)
 800b562:	429d      	cmp	r5, r3
 800b564:	f040 80b2 	bne.w	800b6cc <_strtod_l+0xb0c>
 800b568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b56a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b56e:	ec4b ab10 	vmov	d0, sl, fp
 800b572:	f7ff f9c9 	bl	800a908 <__ulp>
 800b576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b57a:	ec51 0b10 	vmov	r0, r1, d0
 800b57e:	f7f5 f83b 	bl	80005f8 <__aeabi_dmul>
 800b582:	4652      	mov	r2, sl
 800b584:	465b      	mov	r3, fp
 800b586:	f7f4 fe81 	bl	800028c <__adddf3>
 800b58a:	460b      	mov	r3, r1
 800b58c:	4949      	ldr	r1, [pc, #292]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b58e:	4a4e      	ldr	r2, [pc, #312]	@ (800b6c8 <_strtod_l+0xb08>)
 800b590:	4019      	ands	r1, r3
 800b592:	4291      	cmp	r1, r2
 800b594:	4682      	mov	sl, r0
 800b596:	d942      	bls.n	800b61e <_strtod_l+0xa5e>
 800b598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b59a:	4b47      	ldr	r3, [pc, #284]	@ (800b6b8 <_strtod_l+0xaf8>)
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d103      	bne.n	800b5a8 <_strtod_l+0x9e8>
 800b5a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	f43f ad2b 	beq.w	800affe <_strtod_l+0x43e>
 800b5a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b6b8 <_strtod_l+0xaf8>
 800b5ac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b5b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5b2:	9805      	ldr	r0, [sp, #20]
 800b5b4:	f7fe fe74 	bl	800a2a0 <_Bfree>
 800b5b8:	9805      	ldr	r0, [sp, #20]
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	f7fe fe70 	bl	800a2a0 <_Bfree>
 800b5c0:	9805      	ldr	r0, [sp, #20]
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	f7fe fe6c 	bl	800a2a0 <_Bfree>
 800b5c8:	9805      	ldr	r0, [sp, #20]
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f7fe fe68 	bl	800a2a0 <_Bfree>
 800b5d0:	e618      	b.n	800b204 <_strtod_l+0x644>
 800b5d2:	f1ba 0f01 	cmp.w	sl, #1
 800b5d6:	d103      	bne.n	800b5e0 <_strtod_l+0xa20>
 800b5d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f43f ada5 	beq.w	800b12a <_strtod_l+0x56a>
 800b5e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b690 <_strtod_l+0xad0>
 800b5e4:	4f35      	ldr	r7, [pc, #212]	@ (800b6bc <_strtod_l+0xafc>)
 800b5e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5ea:	2600      	movs	r6, #0
 800b5ec:	e7b1      	b.n	800b552 <_strtod_l+0x992>
 800b5ee:	4f34      	ldr	r7, [pc, #208]	@ (800b6c0 <_strtod_l+0xb00>)
 800b5f0:	2600      	movs	r6, #0
 800b5f2:	e7aa      	b.n	800b54a <_strtod_l+0x98a>
 800b5f4:	4b32      	ldr	r3, [pc, #200]	@ (800b6c0 <_strtod_l+0xb00>)
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f7f4 fffc 	bl	80005f8 <__aeabi_dmul>
 800b600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b602:	4606      	mov	r6, r0
 800b604:	460f      	mov	r7, r1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d09f      	beq.n	800b54a <_strtod_l+0x98a>
 800b60a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b60e:	e7a0      	b.n	800b552 <_strtod_l+0x992>
 800b610:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b698 <_strtod_l+0xad8>
 800b614:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b618:	ec57 6b17 	vmov	r6, r7, d7
 800b61c:	e799      	b.n	800b552 <_strtod_l+0x992>
 800b61e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1c1      	bne.n	800b5b0 <_strtod_l+0x9f0>
 800b62c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b630:	0d1b      	lsrs	r3, r3, #20
 800b632:	051b      	lsls	r3, r3, #20
 800b634:	429d      	cmp	r5, r3
 800b636:	d1bb      	bne.n	800b5b0 <_strtod_l+0x9f0>
 800b638:	4630      	mov	r0, r6
 800b63a:	4639      	mov	r1, r7
 800b63c:	f7f5 fb3c 	bl	8000cb8 <__aeabi_d2lz>
 800b640:	f7f4 ffac 	bl	800059c <__aeabi_l2d>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f4 fe1c 	bl	8000288 <__aeabi_dsub>
 800b650:	460b      	mov	r3, r1
 800b652:	4602      	mov	r2, r0
 800b654:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b658:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b65e:	ea46 060a 	orr.w	r6, r6, sl
 800b662:	431e      	orrs	r6, r3
 800b664:	d06f      	beq.n	800b746 <_strtod_l+0xb86>
 800b666:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6a0 <_strtod_l+0xae0>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f5 fa36 	bl	8000adc <__aeabi_dcmplt>
 800b670:	2800      	cmp	r0, #0
 800b672:	f47f accf 	bne.w	800b014 <_strtod_l+0x454>
 800b676:	a30c      	add	r3, pc, #48	@ (adr r3, 800b6a8 <_strtod_l+0xae8>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b680:	f7f5 fa4a 	bl	8000b18 <__aeabi_dcmpgt>
 800b684:	2800      	cmp	r0, #0
 800b686:	d093      	beq.n	800b5b0 <_strtod_l+0x9f0>
 800b688:	e4c4      	b.n	800b014 <_strtod_l+0x454>
 800b68a:	bf00      	nop
 800b68c:	f3af 8000 	nop.w
 800b690:	00000000 	.word	0x00000000
 800b694:	bff00000 	.word	0xbff00000
 800b698:	00000000 	.word	0x00000000
 800b69c:	3ff00000 	.word	0x3ff00000
 800b6a0:	94a03595 	.word	0x94a03595
 800b6a4:	3fdfffff 	.word	0x3fdfffff
 800b6a8:	35afe535 	.word	0x35afe535
 800b6ac:	3fe00000 	.word	0x3fe00000
 800b6b0:	000fffff 	.word	0x000fffff
 800b6b4:	7ff00000 	.word	0x7ff00000
 800b6b8:	7fefffff 	.word	0x7fefffff
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	3fe00000 	.word	0x3fe00000
 800b6c4:	7fe00000 	.word	0x7fe00000
 800b6c8:	7c9fffff 	.word	0x7c9fffff
 800b6cc:	9b08      	ldr	r3, [sp, #32]
 800b6ce:	b323      	cbz	r3, 800b71a <_strtod_l+0xb5a>
 800b6d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b6d4:	d821      	bhi.n	800b71a <_strtod_l+0xb5a>
 800b6d6:	a328      	add	r3, pc, #160	@ (adr r3, 800b778 <_strtod_l+0xbb8>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	4630      	mov	r0, r6
 800b6de:	4639      	mov	r1, r7
 800b6e0:	f7f5 fa06 	bl	8000af0 <__aeabi_dcmple>
 800b6e4:	b1a0      	cbz	r0, 800b710 <_strtod_l+0xb50>
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7f5 fa5d 	bl	8000ba8 <__aeabi_d2uiz>
 800b6ee:	2801      	cmp	r0, #1
 800b6f0:	bf38      	it	cc
 800b6f2:	2001      	movcc	r0, #1
 800b6f4:	f7f4 ff06 	bl	8000504 <__aeabi_ui2d>
 800b6f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460f      	mov	r7, r1
 800b6fe:	b9fb      	cbnz	r3, 800b740 <_strtod_l+0xb80>
 800b700:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b704:	9014      	str	r0, [sp, #80]	@ 0x50
 800b706:	9315      	str	r3, [sp, #84]	@ 0x54
 800b708:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b70c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b710:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b712:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b716:	1b5b      	subs	r3, r3, r5
 800b718:	9311      	str	r3, [sp, #68]	@ 0x44
 800b71a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b71e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b722:	f7ff f8f1 	bl	800a908 <__ulp>
 800b726:	4650      	mov	r0, sl
 800b728:	ec53 2b10 	vmov	r2, r3, d0
 800b72c:	4659      	mov	r1, fp
 800b72e:	f7f4 ff63 	bl	80005f8 <__aeabi_dmul>
 800b732:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b736:	f7f4 fda9 	bl	800028c <__adddf3>
 800b73a:	4682      	mov	sl, r0
 800b73c:	468b      	mov	fp, r1
 800b73e:	e770      	b.n	800b622 <_strtod_l+0xa62>
 800b740:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b744:	e7e0      	b.n	800b708 <_strtod_l+0xb48>
 800b746:	a30e      	add	r3, pc, #56	@ (adr r3, 800b780 <_strtod_l+0xbc0>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f7f5 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800b750:	e798      	b.n	800b684 <_strtod_l+0xac4>
 800b752:	2300      	movs	r3, #0
 800b754:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b756:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	f7ff ba6d 	b.w	800ac3a <_strtod_l+0x7a>
 800b760:	2a65      	cmp	r2, #101	@ 0x65
 800b762:	f43f ab66 	beq.w	800ae32 <_strtod_l+0x272>
 800b766:	2a45      	cmp	r2, #69	@ 0x45
 800b768:	f43f ab63 	beq.w	800ae32 <_strtod_l+0x272>
 800b76c:	2301      	movs	r3, #1
 800b76e:	f7ff bb9e 	b.w	800aeae <_strtod_l+0x2ee>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
 800b778:	ffc00000 	.word	0xffc00000
 800b77c:	41dfffff 	.word	0x41dfffff
 800b780:	94a03595 	.word	0x94a03595
 800b784:	3fcfffff 	.word	0x3fcfffff

0800b788 <_strtod_r>:
 800b788:	4b01      	ldr	r3, [pc, #4]	@ (800b790 <_strtod_r+0x8>)
 800b78a:	f7ff ba19 	b.w	800abc0 <_strtod_l>
 800b78e:	bf00      	nop
 800b790:	200000d0 	.word	0x200000d0

0800b794 <__ssputs_r>:
 800b794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b798:	688e      	ldr	r6, [r1, #8]
 800b79a:	461f      	mov	r7, r3
 800b79c:	42be      	cmp	r6, r7
 800b79e:	680b      	ldr	r3, [r1, #0]
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	4690      	mov	r8, r2
 800b7a6:	d82d      	bhi.n	800b804 <__ssputs_r+0x70>
 800b7a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7b0:	d026      	beq.n	800b800 <__ssputs_r+0x6c>
 800b7b2:	6965      	ldr	r5, [r4, #20]
 800b7b4:	6909      	ldr	r1, [r1, #16]
 800b7b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7ba:	eba3 0901 	sub.w	r9, r3, r1
 800b7be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7c2:	1c7b      	adds	r3, r7, #1
 800b7c4:	444b      	add	r3, r9
 800b7c6:	106d      	asrs	r5, r5, #1
 800b7c8:	429d      	cmp	r5, r3
 800b7ca:	bf38      	it	cc
 800b7cc:	461d      	movcc	r5, r3
 800b7ce:	0553      	lsls	r3, r2, #21
 800b7d0:	d527      	bpl.n	800b822 <__ssputs_r+0x8e>
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7fe fc98 	bl	800a108 <_malloc_r>
 800b7d8:	4606      	mov	r6, r0
 800b7da:	b360      	cbz	r0, 800b836 <__ssputs_r+0xa2>
 800b7dc:	6921      	ldr	r1, [r4, #16]
 800b7de:	464a      	mov	r2, r9
 800b7e0:	f000 fc00 	bl	800bfe4 <memcpy>
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	6126      	str	r6, [r4, #16]
 800b7f2:	6165      	str	r5, [r4, #20]
 800b7f4:	444e      	add	r6, r9
 800b7f6:	eba5 0509 	sub.w	r5, r5, r9
 800b7fa:	6026      	str	r6, [r4, #0]
 800b7fc:	60a5      	str	r5, [r4, #8]
 800b7fe:	463e      	mov	r6, r7
 800b800:	42be      	cmp	r6, r7
 800b802:	d900      	bls.n	800b806 <__ssputs_r+0x72>
 800b804:	463e      	mov	r6, r7
 800b806:	6820      	ldr	r0, [r4, #0]
 800b808:	4632      	mov	r2, r6
 800b80a:	4641      	mov	r1, r8
 800b80c:	f000 fbae 	bl	800bf6c <memmove>
 800b810:	68a3      	ldr	r3, [r4, #8]
 800b812:	1b9b      	subs	r3, r3, r6
 800b814:	60a3      	str	r3, [r4, #8]
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	4433      	add	r3, r6
 800b81a:	6023      	str	r3, [r4, #0]
 800b81c:	2000      	movs	r0, #0
 800b81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b822:	462a      	mov	r2, r5
 800b824:	f000 ff59 	bl	800c6da <_realloc_r>
 800b828:	4606      	mov	r6, r0
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d1e0      	bne.n	800b7f0 <__ssputs_r+0x5c>
 800b82e:	6921      	ldr	r1, [r4, #16]
 800b830:	4650      	mov	r0, sl
 800b832:	f7fe fbf5 	bl	800a020 <_free_r>
 800b836:	230c      	movs	r3, #12
 800b838:	f8ca 3000 	str.w	r3, [sl]
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b848:	e7e9      	b.n	800b81e <__ssputs_r+0x8a>
	...

0800b84c <_svfiprintf_r>:
 800b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	4698      	mov	r8, r3
 800b852:	898b      	ldrh	r3, [r1, #12]
 800b854:	061b      	lsls	r3, r3, #24
 800b856:	b09d      	sub	sp, #116	@ 0x74
 800b858:	4607      	mov	r7, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	4614      	mov	r4, r2
 800b85e:	d510      	bpl.n	800b882 <_svfiprintf_r+0x36>
 800b860:	690b      	ldr	r3, [r1, #16]
 800b862:	b973      	cbnz	r3, 800b882 <_svfiprintf_r+0x36>
 800b864:	2140      	movs	r1, #64	@ 0x40
 800b866:	f7fe fc4f 	bl	800a108 <_malloc_r>
 800b86a:	6028      	str	r0, [r5, #0]
 800b86c:	6128      	str	r0, [r5, #16]
 800b86e:	b930      	cbnz	r0, 800b87e <_svfiprintf_r+0x32>
 800b870:	230c      	movs	r3, #12
 800b872:	603b      	str	r3, [r7, #0]
 800b874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b878:	b01d      	add	sp, #116	@ 0x74
 800b87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87e:	2340      	movs	r3, #64	@ 0x40
 800b880:	616b      	str	r3, [r5, #20]
 800b882:	2300      	movs	r3, #0
 800b884:	9309      	str	r3, [sp, #36]	@ 0x24
 800b886:	2320      	movs	r3, #32
 800b888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b88c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b890:	2330      	movs	r3, #48	@ 0x30
 800b892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba30 <_svfiprintf_r+0x1e4>
 800b896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b89a:	f04f 0901 	mov.w	r9, #1
 800b89e:	4623      	mov	r3, r4
 800b8a0:	469a      	mov	sl, r3
 800b8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a6:	b10a      	cbz	r2, 800b8ac <_svfiprintf_r+0x60>
 800b8a8:	2a25      	cmp	r2, #37	@ 0x25
 800b8aa:	d1f9      	bne.n	800b8a0 <_svfiprintf_r+0x54>
 800b8ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b8b0:	d00b      	beq.n	800b8ca <_svfiprintf_r+0x7e>
 800b8b2:	465b      	mov	r3, fp
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff ff6b 	bl	800b794 <__ssputs_r>
 800b8be:	3001      	adds	r0, #1
 800b8c0:	f000 80a7 	beq.w	800ba12 <_svfiprintf_r+0x1c6>
 800b8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8c6:	445a      	add	r2, fp
 800b8c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 809f 	beq.w	800ba12 <_svfiprintf_r+0x1c6>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8de:	f10a 0a01 	add.w	sl, sl, #1
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	9307      	str	r3, [sp, #28]
 800b8e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8ec:	4654      	mov	r4, sl
 800b8ee:	2205      	movs	r2, #5
 800b8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f4:	484e      	ldr	r0, [pc, #312]	@ (800ba30 <_svfiprintf_r+0x1e4>)
 800b8f6:	f7f4 fc6b 	bl	80001d0 <memchr>
 800b8fa:	9a04      	ldr	r2, [sp, #16]
 800b8fc:	b9d8      	cbnz	r0, 800b936 <_svfiprintf_r+0xea>
 800b8fe:	06d0      	lsls	r0, r2, #27
 800b900:	bf44      	itt	mi
 800b902:	2320      	movmi	r3, #32
 800b904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b908:	0711      	lsls	r1, r2, #28
 800b90a:	bf44      	itt	mi
 800b90c:	232b      	movmi	r3, #43	@ 0x2b
 800b90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b912:	f89a 3000 	ldrb.w	r3, [sl]
 800b916:	2b2a      	cmp	r3, #42	@ 0x2a
 800b918:	d015      	beq.n	800b946 <_svfiprintf_r+0xfa>
 800b91a:	9a07      	ldr	r2, [sp, #28]
 800b91c:	4654      	mov	r4, sl
 800b91e:	2000      	movs	r0, #0
 800b920:	f04f 0c0a 	mov.w	ip, #10
 800b924:	4621      	mov	r1, r4
 800b926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b92a:	3b30      	subs	r3, #48	@ 0x30
 800b92c:	2b09      	cmp	r3, #9
 800b92e:	d94b      	bls.n	800b9c8 <_svfiprintf_r+0x17c>
 800b930:	b1b0      	cbz	r0, 800b960 <_svfiprintf_r+0x114>
 800b932:	9207      	str	r2, [sp, #28]
 800b934:	e014      	b.n	800b960 <_svfiprintf_r+0x114>
 800b936:	eba0 0308 	sub.w	r3, r0, r8
 800b93a:	fa09 f303 	lsl.w	r3, r9, r3
 800b93e:	4313      	orrs	r3, r2
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	46a2      	mov	sl, r4
 800b944:	e7d2      	b.n	800b8ec <_svfiprintf_r+0xa0>
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	1d19      	adds	r1, r3, #4
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	9103      	str	r1, [sp, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bfbb      	ittet	lt
 800b952:	425b      	neglt	r3, r3
 800b954:	f042 0202 	orrlt.w	r2, r2, #2
 800b958:	9307      	strge	r3, [sp, #28]
 800b95a:	9307      	strlt	r3, [sp, #28]
 800b95c:	bfb8      	it	lt
 800b95e:	9204      	strlt	r2, [sp, #16]
 800b960:	7823      	ldrb	r3, [r4, #0]
 800b962:	2b2e      	cmp	r3, #46	@ 0x2e
 800b964:	d10a      	bne.n	800b97c <_svfiprintf_r+0x130>
 800b966:	7863      	ldrb	r3, [r4, #1]
 800b968:	2b2a      	cmp	r3, #42	@ 0x2a
 800b96a:	d132      	bne.n	800b9d2 <_svfiprintf_r+0x186>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	1d1a      	adds	r2, r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	9203      	str	r2, [sp, #12]
 800b974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b978:	3402      	adds	r4, #2
 800b97a:	9305      	str	r3, [sp, #20]
 800b97c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba40 <_svfiprintf_r+0x1f4>
 800b980:	7821      	ldrb	r1, [r4, #0]
 800b982:	2203      	movs	r2, #3
 800b984:	4650      	mov	r0, sl
 800b986:	f7f4 fc23 	bl	80001d0 <memchr>
 800b98a:	b138      	cbz	r0, 800b99c <_svfiprintf_r+0x150>
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	eba0 000a 	sub.w	r0, r0, sl
 800b992:	2240      	movs	r2, #64	@ 0x40
 800b994:	4082      	lsls	r2, r0
 800b996:	4313      	orrs	r3, r2
 800b998:	3401      	adds	r4, #1
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a0:	4824      	ldr	r0, [pc, #144]	@ (800ba34 <_svfiprintf_r+0x1e8>)
 800b9a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9a6:	2206      	movs	r2, #6
 800b9a8:	f7f4 fc12 	bl	80001d0 <memchr>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d036      	beq.n	800ba1e <_svfiprintf_r+0x1d2>
 800b9b0:	4b21      	ldr	r3, [pc, #132]	@ (800ba38 <_svfiprintf_r+0x1ec>)
 800b9b2:	bb1b      	cbnz	r3, 800b9fc <_svfiprintf_r+0x1b0>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	3307      	adds	r3, #7
 800b9b8:	f023 0307 	bic.w	r3, r3, #7
 800b9bc:	3308      	adds	r3, #8
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c2:	4433      	add	r3, r6
 800b9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c6:	e76a      	b.n	800b89e <_svfiprintf_r+0x52>
 800b9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7a8      	b.n	800b924 <_svfiprintf_r+0xd8>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	3401      	adds	r4, #1
 800b9d6:	9305      	str	r3, [sp, #20]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	f04f 0c0a 	mov.w	ip, #10
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9e4:	3a30      	subs	r2, #48	@ 0x30
 800b9e6:	2a09      	cmp	r2, #9
 800b9e8:	d903      	bls.n	800b9f2 <_svfiprintf_r+0x1a6>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0c6      	beq.n	800b97c <_svfiprintf_r+0x130>
 800b9ee:	9105      	str	r1, [sp, #20]
 800b9f0:	e7c4      	b.n	800b97c <_svfiprintf_r+0x130>
 800b9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e7f0      	b.n	800b9de <_svfiprintf_r+0x192>
 800b9fc:	ab03      	add	r3, sp, #12
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	462a      	mov	r2, r5
 800ba02:	4b0e      	ldr	r3, [pc, #56]	@ (800ba3c <_svfiprintf_r+0x1f0>)
 800ba04:	a904      	add	r1, sp, #16
 800ba06:	4638      	mov	r0, r7
 800ba08:	f7fc fd26 	bl	8008458 <_printf_float>
 800ba0c:	1c42      	adds	r2, r0, #1
 800ba0e:	4606      	mov	r6, r0
 800ba10:	d1d6      	bne.n	800b9c0 <_svfiprintf_r+0x174>
 800ba12:	89ab      	ldrh	r3, [r5, #12]
 800ba14:	065b      	lsls	r3, r3, #25
 800ba16:	f53f af2d 	bmi.w	800b874 <_svfiprintf_r+0x28>
 800ba1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba1c:	e72c      	b.n	800b878 <_svfiprintf_r+0x2c>
 800ba1e:	ab03      	add	r3, sp, #12
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	462a      	mov	r2, r5
 800ba24:	4b05      	ldr	r3, [pc, #20]	@ (800ba3c <_svfiprintf_r+0x1f0>)
 800ba26:	a904      	add	r1, sp, #16
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7fc ffad 	bl	8008988 <_printf_i>
 800ba2e:	e7ed      	b.n	800ba0c <_svfiprintf_r+0x1c0>
 800ba30:	0800ce50 	.word	0x0800ce50
 800ba34:	0800ce5a 	.word	0x0800ce5a
 800ba38:	08008459 	.word	0x08008459
 800ba3c:	0800b795 	.word	0x0800b795
 800ba40:	0800ce56 	.word	0x0800ce56

0800ba44 <__sfputc_r>:
 800ba44:	6893      	ldr	r3, [r2, #8]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	b410      	push	{r4}
 800ba4c:	6093      	str	r3, [r2, #8]
 800ba4e:	da08      	bge.n	800ba62 <__sfputc_r+0x1e>
 800ba50:	6994      	ldr	r4, [r2, #24]
 800ba52:	42a3      	cmp	r3, r4
 800ba54:	db01      	blt.n	800ba5a <__sfputc_r+0x16>
 800ba56:	290a      	cmp	r1, #10
 800ba58:	d103      	bne.n	800ba62 <__sfputc_r+0x1e>
 800ba5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba5e:	f000 b9f1 	b.w	800be44 <__swbuf_r>
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	1c58      	adds	r0, r3, #1
 800ba66:	6010      	str	r0, [r2, #0]
 800ba68:	7019      	strb	r1, [r3, #0]
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <__sfputs_r>:
 800ba72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba74:	4606      	mov	r6, r0
 800ba76:	460f      	mov	r7, r1
 800ba78:	4614      	mov	r4, r2
 800ba7a:	18d5      	adds	r5, r2, r3
 800ba7c:	42ac      	cmp	r4, r5
 800ba7e:	d101      	bne.n	800ba84 <__sfputs_r+0x12>
 800ba80:	2000      	movs	r0, #0
 800ba82:	e007      	b.n	800ba94 <__sfputs_r+0x22>
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	463a      	mov	r2, r7
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffda 	bl	800ba44 <__sfputc_r>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d1f3      	bne.n	800ba7c <__sfputs_r+0xa>
 800ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba98 <_vfiprintf_r>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	b09d      	sub	sp, #116	@ 0x74
 800baa0:	4614      	mov	r4, r2
 800baa2:	4698      	mov	r8, r3
 800baa4:	4606      	mov	r6, r0
 800baa6:	b118      	cbz	r0, 800bab0 <_vfiprintf_r+0x18>
 800baa8:	6a03      	ldr	r3, [r0, #32]
 800baaa:	b90b      	cbnz	r3, 800bab0 <_vfiprintf_r+0x18>
 800baac:	f7fd fb2c 	bl	8009108 <__sinit>
 800bab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	d405      	bmi.n	800bac2 <_vfiprintf_r+0x2a>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	059a      	lsls	r2, r3, #22
 800baba:	d402      	bmi.n	800bac2 <_vfiprintf_r+0x2a>
 800babc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800babe:	f7fd fc3a 	bl	8009336 <__retarget_lock_acquire_recursive>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	071b      	lsls	r3, r3, #28
 800bac6:	d501      	bpl.n	800bacc <_vfiprintf_r+0x34>
 800bac8:	692b      	ldr	r3, [r5, #16]
 800baca:	b99b      	cbnz	r3, 800baf4 <_vfiprintf_r+0x5c>
 800bacc:	4629      	mov	r1, r5
 800bace:	4630      	mov	r0, r6
 800bad0:	f000 f9f6 	bl	800bec0 <__swsetup_r>
 800bad4:	b170      	cbz	r0, 800baf4 <_vfiprintf_r+0x5c>
 800bad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bad8:	07dc      	lsls	r4, r3, #31
 800bada:	d504      	bpl.n	800bae6 <_vfiprintf_r+0x4e>
 800badc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bae0:	b01d      	add	sp, #116	@ 0x74
 800bae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	0598      	lsls	r0, r3, #22
 800baea:	d4f7      	bmi.n	800badc <_vfiprintf_r+0x44>
 800baec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baee:	f7fd fc23 	bl	8009338 <__retarget_lock_release_recursive>
 800baf2:	e7f3      	b.n	800badc <_vfiprintf_r+0x44>
 800baf4:	2300      	movs	r3, #0
 800baf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf8:	2320      	movs	r3, #32
 800bafa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb02:	2330      	movs	r3, #48	@ 0x30
 800bb04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcb4 <_vfiprintf_r+0x21c>
 800bb08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb0c:	f04f 0901 	mov.w	r9, #1
 800bb10:	4623      	mov	r3, r4
 800bb12:	469a      	mov	sl, r3
 800bb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb18:	b10a      	cbz	r2, 800bb1e <_vfiprintf_r+0x86>
 800bb1a:	2a25      	cmp	r2, #37	@ 0x25
 800bb1c:	d1f9      	bne.n	800bb12 <_vfiprintf_r+0x7a>
 800bb1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb22:	d00b      	beq.n	800bb3c <_vfiprintf_r+0xa4>
 800bb24:	465b      	mov	r3, fp
 800bb26:	4622      	mov	r2, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff ffa1 	bl	800ba72 <__sfputs_r>
 800bb30:	3001      	adds	r0, #1
 800bb32:	f000 80a7 	beq.w	800bc84 <_vfiprintf_r+0x1ec>
 800bb36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb38:	445a      	add	r2, fp
 800bb3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 809f 	beq.w	800bc84 <_vfiprintf_r+0x1ec>
 800bb46:	2300      	movs	r3, #0
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb50:	f10a 0a01 	add.w	sl, sl, #1
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	9307      	str	r3, [sp, #28]
 800bb58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb5e:	4654      	mov	r4, sl
 800bb60:	2205      	movs	r2, #5
 800bb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb66:	4853      	ldr	r0, [pc, #332]	@ (800bcb4 <_vfiprintf_r+0x21c>)
 800bb68:	f7f4 fb32 	bl	80001d0 <memchr>
 800bb6c:	9a04      	ldr	r2, [sp, #16]
 800bb6e:	b9d8      	cbnz	r0, 800bba8 <_vfiprintf_r+0x110>
 800bb70:	06d1      	lsls	r1, r2, #27
 800bb72:	bf44      	itt	mi
 800bb74:	2320      	movmi	r3, #32
 800bb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb7a:	0713      	lsls	r3, r2, #28
 800bb7c:	bf44      	itt	mi
 800bb7e:	232b      	movmi	r3, #43	@ 0x2b
 800bb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb84:	f89a 3000 	ldrb.w	r3, [sl]
 800bb88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb8a:	d015      	beq.n	800bbb8 <_vfiprintf_r+0x120>
 800bb8c:	9a07      	ldr	r2, [sp, #28]
 800bb8e:	4654      	mov	r4, sl
 800bb90:	2000      	movs	r0, #0
 800bb92:	f04f 0c0a 	mov.w	ip, #10
 800bb96:	4621      	mov	r1, r4
 800bb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb9c:	3b30      	subs	r3, #48	@ 0x30
 800bb9e:	2b09      	cmp	r3, #9
 800bba0:	d94b      	bls.n	800bc3a <_vfiprintf_r+0x1a2>
 800bba2:	b1b0      	cbz	r0, 800bbd2 <_vfiprintf_r+0x13a>
 800bba4:	9207      	str	r2, [sp, #28]
 800bba6:	e014      	b.n	800bbd2 <_vfiprintf_r+0x13a>
 800bba8:	eba0 0308 	sub.w	r3, r0, r8
 800bbac:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	46a2      	mov	sl, r4
 800bbb6:	e7d2      	b.n	800bb5e <_vfiprintf_r+0xc6>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	1d19      	adds	r1, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	9103      	str	r1, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfbb      	ittet	lt
 800bbc4:	425b      	neglt	r3, r3
 800bbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbca:	9307      	strge	r3, [sp, #28]
 800bbcc:	9307      	strlt	r3, [sp, #28]
 800bbce:	bfb8      	it	lt
 800bbd0:	9204      	strlt	r2, [sp, #16]
 800bbd2:	7823      	ldrb	r3, [r4, #0]
 800bbd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbd6:	d10a      	bne.n	800bbee <_vfiprintf_r+0x156>
 800bbd8:	7863      	ldrb	r3, [r4, #1]
 800bbda:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbdc:	d132      	bne.n	800bc44 <_vfiprintf_r+0x1ac>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	1d1a      	adds	r2, r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	9203      	str	r2, [sp, #12]
 800bbe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbea:	3402      	adds	r4, #2
 800bbec:	9305      	str	r3, [sp, #20]
 800bbee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcc4 <_vfiprintf_r+0x22c>
 800bbf2:	7821      	ldrb	r1, [r4, #0]
 800bbf4:	2203      	movs	r2, #3
 800bbf6:	4650      	mov	r0, sl
 800bbf8:	f7f4 faea 	bl	80001d0 <memchr>
 800bbfc:	b138      	cbz	r0, 800bc0e <_vfiprintf_r+0x176>
 800bbfe:	9b04      	ldr	r3, [sp, #16]
 800bc00:	eba0 000a 	sub.w	r0, r0, sl
 800bc04:	2240      	movs	r2, #64	@ 0x40
 800bc06:	4082      	lsls	r2, r0
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	3401      	adds	r4, #1
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc12:	4829      	ldr	r0, [pc, #164]	@ (800bcb8 <_vfiprintf_r+0x220>)
 800bc14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc18:	2206      	movs	r2, #6
 800bc1a:	f7f4 fad9 	bl	80001d0 <memchr>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d03f      	beq.n	800bca2 <_vfiprintf_r+0x20a>
 800bc22:	4b26      	ldr	r3, [pc, #152]	@ (800bcbc <_vfiprintf_r+0x224>)
 800bc24:	bb1b      	cbnz	r3, 800bc6e <_vfiprintf_r+0x1d6>
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	3307      	adds	r3, #7
 800bc2a:	f023 0307 	bic.w	r3, r3, #7
 800bc2e:	3308      	adds	r3, #8
 800bc30:	9303      	str	r3, [sp, #12]
 800bc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc34:	443b      	add	r3, r7
 800bc36:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc38:	e76a      	b.n	800bb10 <_vfiprintf_r+0x78>
 800bc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc3e:	460c      	mov	r4, r1
 800bc40:	2001      	movs	r0, #1
 800bc42:	e7a8      	b.n	800bb96 <_vfiprintf_r+0xfe>
 800bc44:	2300      	movs	r3, #0
 800bc46:	3401      	adds	r4, #1
 800bc48:	9305      	str	r3, [sp, #20]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	f04f 0c0a 	mov.w	ip, #10
 800bc50:	4620      	mov	r0, r4
 800bc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc56:	3a30      	subs	r2, #48	@ 0x30
 800bc58:	2a09      	cmp	r2, #9
 800bc5a:	d903      	bls.n	800bc64 <_vfiprintf_r+0x1cc>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d0c6      	beq.n	800bbee <_vfiprintf_r+0x156>
 800bc60:	9105      	str	r1, [sp, #20]
 800bc62:	e7c4      	b.n	800bbee <_vfiprintf_r+0x156>
 800bc64:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc68:	4604      	mov	r4, r0
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e7f0      	b.n	800bc50 <_vfiprintf_r+0x1b8>
 800bc6e:	ab03      	add	r3, sp, #12
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	462a      	mov	r2, r5
 800bc74:	4b12      	ldr	r3, [pc, #72]	@ (800bcc0 <_vfiprintf_r+0x228>)
 800bc76:	a904      	add	r1, sp, #16
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7fc fbed 	bl	8008458 <_printf_float>
 800bc7e:	4607      	mov	r7, r0
 800bc80:	1c78      	adds	r0, r7, #1
 800bc82:	d1d6      	bne.n	800bc32 <_vfiprintf_r+0x19a>
 800bc84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc86:	07d9      	lsls	r1, r3, #31
 800bc88:	d405      	bmi.n	800bc96 <_vfiprintf_r+0x1fe>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	059a      	lsls	r2, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_vfiprintf_r+0x1fe>
 800bc90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc92:	f7fd fb51 	bl	8009338 <__retarget_lock_release_recursive>
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	065b      	lsls	r3, r3, #25
 800bc9a:	f53f af1f 	bmi.w	800badc <_vfiprintf_r+0x44>
 800bc9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bca0:	e71e      	b.n	800bae0 <_vfiprintf_r+0x48>
 800bca2:	ab03      	add	r3, sp, #12
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	462a      	mov	r2, r5
 800bca8:	4b05      	ldr	r3, [pc, #20]	@ (800bcc0 <_vfiprintf_r+0x228>)
 800bcaa:	a904      	add	r1, sp, #16
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7fc fe6b 	bl	8008988 <_printf_i>
 800bcb2:	e7e4      	b.n	800bc7e <_vfiprintf_r+0x1e6>
 800bcb4:	0800ce50 	.word	0x0800ce50
 800bcb8:	0800ce5a 	.word	0x0800ce5a
 800bcbc:	08008459 	.word	0x08008459
 800bcc0:	0800ba73 	.word	0x0800ba73
 800bcc4:	0800ce56 	.word	0x0800ce56

0800bcc8 <__sflush_r>:
 800bcc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	0716      	lsls	r6, r2, #28
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	d454      	bmi.n	800bd82 <__sflush_r+0xba>
 800bcd8:	684b      	ldr	r3, [r1, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dc02      	bgt.n	800bce4 <__sflush_r+0x1c>
 800bcde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dd48      	ble.n	800bd76 <__sflush_r+0xae>
 800bce4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	d045      	beq.n	800bd76 <__sflush_r+0xae>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcf0:	682f      	ldr	r7, [r5, #0]
 800bcf2:	6a21      	ldr	r1, [r4, #32]
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	d030      	beq.n	800bd5a <__sflush_r+0x92>
 800bcf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	0759      	lsls	r1, r3, #29
 800bcfe:	d505      	bpl.n	800bd0c <__sflush_r+0x44>
 800bd00:	6863      	ldr	r3, [r4, #4]
 800bd02:	1ad2      	subs	r2, r2, r3
 800bd04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd06:	b10b      	cbz	r3, 800bd0c <__sflush_r+0x44>
 800bd08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd0a:	1ad2      	subs	r2, r2, r3
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd10:	6a21      	ldr	r1, [r4, #32]
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b0      	blx	r6
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	d106      	bne.n	800bd2a <__sflush_r+0x62>
 800bd1c:	6829      	ldr	r1, [r5, #0]
 800bd1e:	291d      	cmp	r1, #29
 800bd20:	d82b      	bhi.n	800bd7a <__sflush_r+0xb2>
 800bd22:	4a2a      	ldr	r2, [pc, #168]	@ (800bdcc <__sflush_r+0x104>)
 800bd24:	410a      	asrs	r2, r1
 800bd26:	07d6      	lsls	r6, r2, #31
 800bd28:	d427      	bmi.n	800bd7a <__sflush_r+0xb2>
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	6062      	str	r2, [r4, #4]
 800bd2e:	04d9      	lsls	r1, r3, #19
 800bd30:	6922      	ldr	r2, [r4, #16]
 800bd32:	6022      	str	r2, [r4, #0]
 800bd34:	d504      	bpl.n	800bd40 <__sflush_r+0x78>
 800bd36:	1c42      	adds	r2, r0, #1
 800bd38:	d101      	bne.n	800bd3e <__sflush_r+0x76>
 800bd3a:	682b      	ldr	r3, [r5, #0]
 800bd3c:	b903      	cbnz	r3, 800bd40 <__sflush_r+0x78>
 800bd3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd42:	602f      	str	r7, [r5, #0]
 800bd44:	b1b9      	cbz	r1, 800bd76 <__sflush_r+0xae>
 800bd46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd4a:	4299      	cmp	r1, r3
 800bd4c:	d002      	beq.n	800bd54 <__sflush_r+0x8c>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f7fe f966 	bl	800a020 <_free_r>
 800bd54:	2300      	movs	r3, #0
 800bd56:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd58:	e00d      	b.n	800bd76 <__sflush_r+0xae>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b0      	blx	r6
 800bd60:	4602      	mov	r2, r0
 800bd62:	1c50      	adds	r0, r2, #1
 800bd64:	d1c9      	bne.n	800bcfa <__sflush_r+0x32>
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0c6      	beq.n	800bcfa <__sflush_r+0x32>
 800bd6c:	2b1d      	cmp	r3, #29
 800bd6e:	d001      	beq.n	800bd74 <__sflush_r+0xac>
 800bd70:	2b16      	cmp	r3, #22
 800bd72:	d11e      	bne.n	800bdb2 <__sflush_r+0xea>
 800bd74:	602f      	str	r7, [r5, #0]
 800bd76:	2000      	movs	r0, #0
 800bd78:	e022      	b.n	800bdc0 <__sflush_r+0xf8>
 800bd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd7e:	b21b      	sxth	r3, r3
 800bd80:	e01b      	b.n	800bdba <__sflush_r+0xf2>
 800bd82:	690f      	ldr	r7, [r1, #16]
 800bd84:	2f00      	cmp	r7, #0
 800bd86:	d0f6      	beq.n	800bd76 <__sflush_r+0xae>
 800bd88:	0793      	lsls	r3, r2, #30
 800bd8a:	680e      	ldr	r6, [r1, #0]
 800bd8c:	bf08      	it	eq
 800bd8e:	694b      	ldreq	r3, [r1, #20]
 800bd90:	600f      	str	r7, [r1, #0]
 800bd92:	bf18      	it	ne
 800bd94:	2300      	movne	r3, #0
 800bd96:	eba6 0807 	sub.w	r8, r6, r7
 800bd9a:	608b      	str	r3, [r1, #8]
 800bd9c:	f1b8 0f00 	cmp.w	r8, #0
 800bda0:	dde9      	ble.n	800bd76 <__sflush_r+0xae>
 800bda2:	6a21      	ldr	r1, [r4, #32]
 800bda4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bda6:	4643      	mov	r3, r8
 800bda8:	463a      	mov	r2, r7
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b0      	blx	r6
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	dc08      	bgt.n	800bdc4 <__sflush_r+0xfc>
 800bdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc4:	4407      	add	r7, r0
 800bdc6:	eba8 0800 	sub.w	r8, r8, r0
 800bdca:	e7e7      	b.n	800bd9c <__sflush_r+0xd4>
 800bdcc:	dfbffffe 	.word	0xdfbffffe

0800bdd0 <_fflush_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	690b      	ldr	r3, [r1, #16]
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	b913      	cbnz	r3, 800bde0 <_fflush_r+0x10>
 800bdda:	2500      	movs	r5, #0
 800bddc:	4628      	mov	r0, r5
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
 800bde0:	b118      	cbz	r0, 800bdea <_fflush_r+0x1a>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <_fflush_r+0x1a>
 800bde6:	f7fd f98f 	bl	8009108 <__sinit>
 800bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0f3      	beq.n	800bdda <_fflush_r+0xa>
 800bdf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdf4:	07d0      	lsls	r0, r2, #31
 800bdf6:	d404      	bmi.n	800be02 <_fflush_r+0x32>
 800bdf8:	0599      	lsls	r1, r3, #22
 800bdfa:	d402      	bmi.n	800be02 <_fflush_r+0x32>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdfe:	f7fd fa9a 	bl	8009336 <__retarget_lock_acquire_recursive>
 800be02:	4628      	mov	r0, r5
 800be04:	4621      	mov	r1, r4
 800be06:	f7ff ff5f 	bl	800bcc8 <__sflush_r>
 800be0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be0c:	07da      	lsls	r2, r3, #31
 800be0e:	4605      	mov	r5, r0
 800be10:	d4e4      	bmi.n	800bddc <_fflush_r+0xc>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	059b      	lsls	r3, r3, #22
 800be16:	d4e1      	bmi.n	800bddc <_fflush_r+0xc>
 800be18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be1a:	f7fd fa8d 	bl	8009338 <__retarget_lock_release_recursive>
 800be1e:	e7dd      	b.n	800bddc <_fflush_r+0xc>

0800be20 <fiprintf>:
 800be20:	b40e      	push	{r1, r2, r3}
 800be22:	b503      	push	{r0, r1, lr}
 800be24:	4601      	mov	r1, r0
 800be26:	ab03      	add	r3, sp, #12
 800be28:	4805      	ldr	r0, [pc, #20]	@ (800be40 <fiprintf+0x20>)
 800be2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be2e:	6800      	ldr	r0, [r0, #0]
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	f7ff fe31 	bl	800ba98 <_vfiprintf_r>
 800be36:	b002      	add	sp, #8
 800be38:	f85d eb04 	ldr.w	lr, [sp], #4
 800be3c:	b003      	add	sp, #12
 800be3e:	4770      	bx	lr
 800be40:	20000080 	.word	0x20000080

0800be44 <__swbuf_r>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	460e      	mov	r6, r1
 800be48:	4614      	mov	r4, r2
 800be4a:	4605      	mov	r5, r0
 800be4c:	b118      	cbz	r0, 800be56 <__swbuf_r+0x12>
 800be4e:	6a03      	ldr	r3, [r0, #32]
 800be50:	b90b      	cbnz	r3, 800be56 <__swbuf_r+0x12>
 800be52:	f7fd f959 	bl	8009108 <__sinit>
 800be56:	69a3      	ldr	r3, [r4, #24]
 800be58:	60a3      	str	r3, [r4, #8]
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	071a      	lsls	r2, r3, #28
 800be5e:	d501      	bpl.n	800be64 <__swbuf_r+0x20>
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	b943      	cbnz	r3, 800be76 <__swbuf_r+0x32>
 800be64:	4621      	mov	r1, r4
 800be66:	4628      	mov	r0, r5
 800be68:	f000 f82a 	bl	800bec0 <__swsetup_r>
 800be6c:	b118      	cbz	r0, 800be76 <__swbuf_r+0x32>
 800be6e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800be72:	4638      	mov	r0, r7
 800be74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	6922      	ldr	r2, [r4, #16]
 800be7a:	1a98      	subs	r0, r3, r2
 800be7c:	6963      	ldr	r3, [r4, #20]
 800be7e:	b2f6      	uxtb	r6, r6
 800be80:	4283      	cmp	r3, r0
 800be82:	4637      	mov	r7, r6
 800be84:	dc05      	bgt.n	800be92 <__swbuf_r+0x4e>
 800be86:	4621      	mov	r1, r4
 800be88:	4628      	mov	r0, r5
 800be8a:	f7ff ffa1 	bl	800bdd0 <_fflush_r>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d1ed      	bne.n	800be6e <__swbuf_r+0x2a>
 800be92:	68a3      	ldr	r3, [r4, #8]
 800be94:	3b01      	subs	r3, #1
 800be96:	60a3      	str	r3, [r4, #8]
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	6022      	str	r2, [r4, #0]
 800be9e:	701e      	strb	r6, [r3, #0]
 800bea0:	6962      	ldr	r2, [r4, #20]
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d004      	beq.n	800beb2 <__swbuf_r+0x6e>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	07db      	lsls	r3, r3, #31
 800beac:	d5e1      	bpl.n	800be72 <__swbuf_r+0x2e>
 800beae:	2e0a      	cmp	r6, #10
 800beb0:	d1df      	bne.n	800be72 <__swbuf_r+0x2e>
 800beb2:	4621      	mov	r1, r4
 800beb4:	4628      	mov	r0, r5
 800beb6:	f7ff ff8b 	bl	800bdd0 <_fflush_r>
 800beba:	2800      	cmp	r0, #0
 800bebc:	d0d9      	beq.n	800be72 <__swbuf_r+0x2e>
 800bebe:	e7d6      	b.n	800be6e <__swbuf_r+0x2a>

0800bec0 <__swsetup_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4b29      	ldr	r3, [pc, #164]	@ (800bf68 <__swsetup_r+0xa8>)
 800bec4:	4605      	mov	r5, r0
 800bec6:	6818      	ldr	r0, [r3, #0]
 800bec8:	460c      	mov	r4, r1
 800beca:	b118      	cbz	r0, 800bed4 <__swsetup_r+0x14>
 800becc:	6a03      	ldr	r3, [r0, #32]
 800bece:	b90b      	cbnz	r3, 800bed4 <__swsetup_r+0x14>
 800bed0:	f7fd f91a 	bl	8009108 <__sinit>
 800bed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed8:	0719      	lsls	r1, r3, #28
 800beda:	d422      	bmi.n	800bf22 <__swsetup_r+0x62>
 800bedc:	06da      	lsls	r2, r3, #27
 800bede:	d407      	bmi.n	800bef0 <__swsetup_r+0x30>
 800bee0:	2209      	movs	r2, #9
 800bee2:	602a      	str	r2, [r5, #0]
 800bee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bee8:	81a3      	strh	r3, [r4, #12]
 800beea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800beee:	e033      	b.n	800bf58 <__swsetup_r+0x98>
 800bef0:	0758      	lsls	r0, r3, #29
 800bef2:	d512      	bpl.n	800bf1a <__swsetup_r+0x5a>
 800bef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bef6:	b141      	cbz	r1, 800bf0a <__swsetup_r+0x4a>
 800bef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800befc:	4299      	cmp	r1, r3
 800befe:	d002      	beq.n	800bf06 <__swsetup_r+0x46>
 800bf00:	4628      	mov	r0, r5
 800bf02:	f7fe f88d 	bl	800a020 <_free_r>
 800bf06:	2300      	movs	r3, #0
 800bf08:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	2300      	movs	r3, #0
 800bf14:	6063      	str	r3, [r4, #4]
 800bf16:	6923      	ldr	r3, [r4, #16]
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f043 0308 	orr.w	r3, r3, #8
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	6923      	ldr	r3, [r4, #16]
 800bf24:	b94b      	cbnz	r3, 800bf3a <__swsetup_r+0x7a>
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf30:	d003      	beq.n	800bf3a <__swsetup_r+0x7a>
 800bf32:	4621      	mov	r1, r4
 800bf34:	4628      	mov	r0, r5
 800bf36:	f000 fc31 	bl	800c79c <__smakebuf_r>
 800bf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3e:	f013 0201 	ands.w	r2, r3, #1
 800bf42:	d00a      	beq.n	800bf5a <__swsetup_r+0x9a>
 800bf44:	2200      	movs	r2, #0
 800bf46:	60a2      	str	r2, [r4, #8]
 800bf48:	6962      	ldr	r2, [r4, #20]
 800bf4a:	4252      	negs	r2, r2
 800bf4c:	61a2      	str	r2, [r4, #24]
 800bf4e:	6922      	ldr	r2, [r4, #16]
 800bf50:	b942      	cbnz	r2, 800bf64 <__swsetup_r+0xa4>
 800bf52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf56:	d1c5      	bne.n	800bee4 <__swsetup_r+0x24>
 800bf58:	bd38      	pop	{r3, r4, r5, pc}
 800bf5a:	0799      	lsls	r1, r3, #30
 800bf5c:	bf58      	it	pl
 800bf5e:	6962      	ldrpl	r2, [r4, #20]
 800bf60:	60a2      	str	r2, [r4, #8]
 800bf62:	e7f4      	b.n	800bf4e <__swsetup_r+0x8e>
 800bf64:	2000      	movs	r0, #0
 800bf66:	e7f7      	b.n	800bf58 <__swsetup_r+0x98>
 800bf68:	20000080 	.word	0x20000080

0800bf6c <memmove>:
 800bf6c:	4288      	cmp	r0, r1
 800bf6e:	b510      	push	{r4, lr}
 800bf70:	eb01 0402 	add.w	r4, r1, r2
 800bf74:	d902      	bls.n	800bf7c <memmove+0x10>
 800bf76:	4284      	cmp	r4, r0
 800bf78:	4623      	mov	r3, r4
 800bf7a:	d807      	bhi.n	800bf8c <memmove+0x20>
 800bf7c:	1e43      	subs	r3, r0, #1
 800bf7e:	42a1      	cmp	r1, r4
 800bf80:	d008      	beq.n	800bf94 <memmove+0x28>
 800bf82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf8a:	e7f8      	b.n	800bf7e <memmove+0x12>
 800bf8c:	4402      	add	r2, r0
 800bf8e:	4601      	mov	r1, r0
 800bf90:	428a      	cmp	r2, r1
 800bf92:	d100      	bne.n	800bf96 <memmove+0x2a>
 800bf94:	bd10      	pop	{r4, pc}
 800bf96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf9e:	e7f7      	b.n	800bf90 <memmove+0x24>

0800bfa0 <strncmp>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	b16a      	cbz	r2, 800bfc0 <strncmp+0x20>
 800bfa4:	3901      	subs	r1, #1
 800bfa6:	1884      	adds	r4, r0, r2
 800bfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d103      	bne.n	800bfbc <strncmp+0x1c>
 800bfb4:	42a0      	cmp	r0, r4
 800bfb6:	d001      	beq.n	800bfbc <strncmp+0x1c>
 800bfb8:	2a00      	cmp	r2, #0
 800bfba:	d1f5      	bne.n	800bfa8 <strncmp+0x8>
 800bfbc:	1ad0      	subs	r0, r2, r3
 800bfbe:	bd10      	pop	{r4, pc}
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	e7fc      	b.n	800bfbe <strncmp+0x1e>

0800bfc4 <_sbrk_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4d06      	ldr	r5, [pc, #24]	@ (800bfe0 <_sbrk_r+0x1c>)
 800bfc8:	2300      	movs	r3, #0
 800bfca:	4604      	mov	r4, r0
 800bfcc:	4608      	mov	r0, r1
 800bfce:	602b      	str	r3, [r5, #0]
 800bfd0:	f7f7 fe80 	bl	8003cd4 <_sbrk>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d102      	bne.n	800bfde <_sbrk_r+0x1a>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	b103      	cbz	r3, 800bfde <_sbrk_r+0x1a>
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	20000de8 	.word	0x20000de8

0800bfe4 <memcpy>:
 800bfe4:	440a      	add	r2, r1
 800bfe6:	4291      	cmp	r1, r2
 800bfe8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bfec:	d100      	bne.n	800bff0 <memcpy+0xc>
 800bfee:	4770      	bx	lr
 800bff0:	b510      	push	{r4, lr}
 800bff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bffa:	4291      	cmp	r1, r2
 800bffc:	d1f9      	bne.n	800bff2 <memcpy+0xe>
 800bffe:	bd10      	pop	{r4, pc}

0800c000 <nan>:
 800c000:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c008 <nan+0x8>
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	00000000 	.word	0x00000000
 800c00c:	7ff80000 	.word	0x7ff80000

0800c010 <abort>:
 800c010:	b508      	push	{r3, lr}
 800c012:	2006      	movs	r0, #6
 800c014:	f000 fc26 	bl	800c864 <raise>
 800c018:	2001      	movs	r0, #1
 800c01a:	f7f7 fde3 	bl	8003be4 <_exit>

0800c01e <_calloc_r>:
 800c01e:	b570      	push	{r4, r5, r6, lr}
 800c020:	fba1 5402 	umull	r5, r4, r1, r2
 800c024:	b93c      	cbnz	r4, 800c036 <_calloc_r+0x18>
 800c026:	4629      	mov	r1, r5
 800c028:	f7fe f86e 	bl	800a108 <_malloc_r>
 800c02c:	4606      	mov	r6, r0
 800c02e:	b928      	cbnz	r0, 800c03c <_calloc_r+0x1e>
 800c030:	2600      	movs	r6, #0
 800c032:	4630      	mov	r0, r6
 800c034:	bd70      	pop	{r4, r5, r6, pc}
 800c036:	220c      	movs	r2, #12
 800c038:	6002      	str	r2, [r0, #0]
 800c03a:	e7f9      	b.n	800c030 <_calloc_r+0x12>
 800c03c:	462a      	mov	r2, r5
 800c03e:	4621      	mov	r1, r4
 800c040:	f7fd f8fb 	bl	800923a <memset>
 800c044:	e7f5      	b.n	800c032 <_calloc_r+0x14>

0800c046 <rshift>:
 800c046:	6903      	ldr	r3, [r0, #16]
 800c048:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c050:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c054:	f100 0414 	add.w	r4, r0, #20
 800c058:	dd45      	ble.n	800c0e6 <rshift+0xa0>
 800c05a:	f011 011f 	ands.w	r1, r1, #31
 800c05e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c062:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c066:	d10c      	bne.n	800c082 <rshift+0x3c>
 800c068:	f100 0710 	add.w	r7, r0, #16
 800c06c:	4629      	mov	r1, r5
 800c06e:	42b1      	cmp	r1, r6
 800c070:	d334      	bcc.n	800c0dc <rshift+0x96>
 800c072:	1a9b      	subs	r3, r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	1eea      	subs	r2, r5, #3
 800c078:	4296      	cmp	r6, r2
 800c07a:	bf38      	it	cc
 800c07c:	2300      	movcc	r3, #0
 800c07e:	4423      	add	r3, r4
 800c080:	e015      	b.n	800c0ae <rshift+0x68>
 800c082:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c086:	f1c1 0820 	rsb	r8, r1, #32
 800c08a:	40cf      	lsrs	r7, r1
 800c08c:	f105 0e04 	add.w	lr, r5, #4
 800c090:	46a1      	mov	r9, r4
 800c092:	4576      	cmp	r6, lr
 800c094:	46f4      	mov	ip, lr
 800c096:	d815      	bhi.n	800c0c4 <rshift+0x7e>
 800c098:	1a9a      	subs	r2, r3, r2
 800c09a:	0092      	lsls	r2, r2, #2
 800c09c:	3a04      	subs	r2, #4
 800c09e:	3501      	adds	r5, #1
 800c0a0:	42ae      	cmp	r6, r5
 800c0a2:	bf38      	it	cc
 800c0a4:	2200      	movcc	r2, #0
 800c0a6:	18a3      	adds	r3, r4, r2
 800c0a8:	50a7      	str	r7, [r4, r2]
 800c0aa:	b107      	cbz	r7, 800c0ae <rshift+0x68>
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	1b1a      	subs	r2, r3, r4
 800c0b0:	42a3      	cmp	r3, r4
 800c0b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c0b6:	bf08      	it	eq
 800c0b8:	2300      	moveq	r3, #0
 800c0ba:	6102      	str	r2, [r0, #16]
 800c0bc:	bf08      	it	eq
 800c0be:	6143      	streq	r3, [r0, #20]
 800c0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0c4:	f8dc c000 	ldr.w	ip, [ip]
 800c0c8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c0cc:	ea4c 0707 	orr.w	r7, ip, r7
 800c0d0:	f849 7b04 	str.w	r7, [r9], #4
 800c0d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0d8:	40cf      	lsrs	r7, r1
 800c0da:	e7da      	b.n	800c092 <rshift+0x4c>
 800c0dc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c0e0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c0e4:	e7c3      	b.n	800c06e <rshift+0x28>
 800c0e6:	4623      	mov	r3, r4
 800c0e8:	e7e1      	b.n	800c0ae <rshift+0x68>

0800c0ea <__hexdig_fun>:
 800c0ea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c0ee:	2b09      	cmp	r3, #9
 800c0f0:	d802      	bhi.n	800c0f8 <__hexdig_fun+0xe>
 800c0f2:	3820      	subs	r0, #32
 800c0f4:	b2c0      	uxtb	r0, r0
 800c0f6:	4770      	bx	lr
 800c0f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c0fc:	2b05      	cmp	r3, #5
 800c0fe:	d801      	bhi.n	800c104 <__hexdig_fun+0x1a>
 800c100:	3847      	subs	r0, #71	@ 0x47
 800c102:	e7f7      	b.n	800c0f4 <__hexdig_fun+0xa>
 800c104:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c108:	2b05      	cmp	r3, #5
 800c10a:	d801      	bhi.n	800c110 <__hexdig_fun+0x26>
 800c10c:	3827      	subs	r0, #39	@ 0x27
 800c10e:	e7f1      	b.n	800c0f4 <__hexdig_fun+0xa>
 800c110:	2000      	movs	r0, #0
 800c112:	4770      	bx	lr

0800c114 <__gethex>:
 800c114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c118:	b085      	sub	sp, #20
 800c11a:	468a      	mov	sl, r1
 800c11c:	9302      	str	r3, [sp, #8]
 800c11e:	680b      	ldr	r3, [r1, #0]
 800c120:	9001      	str	r0, [sp, #4]
 800c122:	4690      	mov	r8, r2
 800c124:	1c9c      	adds	r4, r3, #2
 800c126:	46a1      	mov	r9, r4
 800c128:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c12c:	2830      	cmp	r0, #48	@ 0x30
 800c12e:	d0fa      	beq.n	800c126 <__gethex+0x12>
 800c130:	eba9 0303 	sub.w	r3, r9, r3
 800c134:	f1a3 0b02 	sub.w	fp, r3, #2
 800c138:	f7ff ffd7 	bl	800c0ea <__hexdig_fun>
 800c13c:	4605      	mov	r5, r0
 800c13e:	2800      	cmp	r0, #0
 800c140:	d168      	bne.n	800c214 <__gethex+0x100>
 800c142:	49a0      	ldr	r1, [pc, #640]	@ (800c3c4 <__gethex+0x2b0>)
 800c144:	2201      	movs	r2, #1
 800c146:	4648      	mov	r0, r9
 800c148:	f7ff ff2a 	bl	800bfa0 <strncmp>
 800c14c:	4607      	mov	r7, r0
 800c14e:	2800      	cmp	r0, #0
 800c150:	d167      	bne.n	800c222 <__gethex+0x10e>
 800c152:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c156:	4626      	mov	r6, r4
 800c158:	f7ff ffc7 	bl	800c0ea <__hexdig_fun>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d062      	beq.n	800c226 <__gethex+0x112>
 800c160:	4623      	mov	r3, r4
 800c162:	7818      	ldrb	r0, [r3, #0]
 800c164:	2830      	cmp	r0, #48	@ 0x30
 800c166:	4699      	mov	r9, r3
 800c168:	f103 0301 	add.w	r3, r3, #1
 800c16c:	d0f9      	beq.n	800c162 <__gethex+0x4e>
 800c16e:	f7ff ffbc 	bl	800c0ea <__hexdig_fun>
 800c172:	fab0 f580 	clz	r5, r0
 800c176:	096d      	lsrs	r5, r5, #5
 800c178:	f04f 0b01 	mov.w	fp, #1
 800c17c:	464a      	mov	r2, r9
 800c17e:	4616      	mov	r6, r2
 800c180:	3201      	adds	r2, #1
 800c182:	7830      	ldrb	r0, [r6, #0]
 800c184:	f7ff ffb1 	bl	800c0ea <__hexdig_fun>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d1f8      	bne.n	800c17e <__gethex+0x6a>
 800c18c:	498d      	ldr	r1, [pc, #564]	@ (800c3c4 <__gethex+0x2b0>)
 800c18e:	2201      	movs	r2, #1
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff ff05 	bl	800bfa0 <strncmp>
 800c196:	2800      	cmp	r0, #0
 800c198:	d13f      	bne.n	800c21a <__gethex+0x106>
 800c19a:	b944      	cbnz	r4, 800c1ae <__gethex+0x9a>
 800c19c:	1c74      	adds	r4, r6, #1
 800c19e:	4622      	mov	r2, r4
 800c1a0:	4616      	mov	r6, r2
 800c1a2:	3201      	adds	r2, #1
 800c1a4:	7830      	ldrb	r0, [r6, #0]
 800c1a6:	f7ff ffa0 	bl	800c0ea <__hexdig_fun>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d1f8      	bne.n	800c1a0 <__gethex+0x8c>
 800c1ae:	1ba4      	subs	r4, r4, r6
 800c1b0:	00a7      	lsls	r7, r4, #2
 800c1b2:	7833      	ldrb	r3, [r6, #0]
 800c1b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c1b8:	2b50      	cmp	r3, #80	@ 0x50
 800c1ba:	d13e      	bne.n	800c23a <__gethex+0x126>
 800c1bc:	7873      	ldrb	r3, [r6, #1]
 800c1be:	2b2b      	cmp	r3, #43	@ 0x2b
 800c1c0:	d033      	beq.n	800c22a <__gethex+0x116>
 800c1c2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c1c4:	d034      	beq.n	800c230 <__gethex+0x11c>
 800c1c6:	1c71      	adds	r1, r6, #1
 800c1c8:	2400      	movs	r4, #0
 800c1ca:	7808      	ldrb	r0, [r1, #0]
 800c1cc:	f7ff ff8d 	bl	800c0ea <__hexdig_fun>
 800c1d0:	1e43      	subs	r3, r0, #1
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	2b18      	cmp	r3, #24
 800c1d6:	d830      	bhi.n	800c23a <__gethex+0x126>
 800c1d8:	f1a0 0210 	sub.w	r2, r0, #16
 800c1dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c1e0:	f7ff ff83 	bl	800c0ea <__hexdig_fun>
 800c1e4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c1e8:	fa5f fc8c 	uxtb.w	ip, ip
 800c1ec:	f1bc 0f18 	cmp.w	ip, #24
 800c1f0:	f04f 030a 	mov.w	r3, #10
 800c1f4:	d91e      	bls.n	800c234 <__gethex+0x120>
 800c1f6:	b104      	cbz	r4, 800c1fa <__gethex+0xe6>
 800c1f8:	4252      	negs	r2, r2
 800c1fa:	4417      	add	r7, r2
 800c1fc:	f8ca 1000 	str.w	r1, [sl]
 800c200:	b1ed      	cbz	r5, 800c23e <__gethex+0x12a>
 800c202:	f1bb 0f00 	cmp.w	fp, #0
 800c206:	bf0c      	ite	eq
 800c208:	2506      	moveq	r5, #6
 800c20a:	2500      	movne	r5, #0
 800c20c:	4628      	mov	r0, r5
 800c20e:	b005      	add	sp, #20
 800c210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c214:	2500      	movs	r5, #0
 800c216:	462c      	mov	r4, r5
 800c218:	e7b0      	b.n	800c17c <__gethex+0x68>
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	d1c7      	bne.n	800c1ae <__gethex+0x9a>
 800c21e:	4627      	mov	r7, r4
 800c220:	e7c7      	b.n	800c1b2 <__gethex+0x9e>
 800c222:	464e      	mov	r6, r9
 800c224:	462f      	mov	r7, r5
 800c226:	2501      	movs	r5, #1
 800c228:	e7c3      	b.n	800c1b2 <__gethex+0x9e>
 800c22a:	2400      	movs	r4, #0
 800c22c:	1cb1      	adds	r1, r6, #2
 800c22e:	e7cc      	b.n	800c1ca <__gethex+0xb6>
 800c230:	2401      	movs	r4, #1
 800c232:	e7fb      	b.n	800c22c <__gethex+0x118>
 800c234:	fb03 0002 	mla	r0, r3, r2, r0
 800c238:	e7ce      	b.n	800c1d8 <__gethex+0xc4>
 800c23a:	4631      	mov	r1, r6
 800c23c:	e7de      	b.n	800c1fc <__gethex+0xe8>
 800c23e:	eba6 0309 	sub.w	r3, r6, r9
 800c242:	3b01      	subs	r3, #1
 800c244:	4629      	mov	r1, r5
 800c246:	2b07      	cmp	r3, #7
 800c248:	dc0a      	bgt.n	800c260 <__gethex+0x14c>
 800c24a:	9801      	ldr	r0, [sp, #4]
 800c24c:	f7fd ffe8 	bl	800a220 <_Balloc>
 800c250:	4604      	mov	r4, r0
 800c252:	b940      	cbnz	r0, 800c266 <__gethex+0x152>
 800c254:	4b5c      	ldr	r3, [pc, #368]	@ (800c3c8 <__gethex+0x2b4>)
 800c256:	4602      	mov	r2, r0
 800c258:	21e4      	movs	r1, #228	@ 0xe4
 800c25a:	485c      	ldr	r0, [pc, #368]	@ (800c3cc <__gethex+0x2b8>)
 800c25c:	f7fd f874 	bl	8009348 <__assert_func>
 800c260:	3101      	adds	r1, #1
 800c262:	105b      	asrs	r3, r3, #1
 800c264:	e7ef      	b.n	800c246 <__gethex+0x132>
 800c266:	f100 0a14 	add.w	sl, r0, #20
 800c26a:	2300      	movs	r3, #0
 800c26c:	4655      	mov	r5, sl
 800c26e:	469b      	mov	fp, r3
 800c270:	45b1      	cmp	r9, r6
 800c272:	d337      	bcc.n	800c2e4 <__gethex+0x1d0>
 800c274:	f845 bb04 	str.w	fp, [r5], #4
 800c278:	eba5 050a 	sub.w	r5, r5, sl
 800c27c:	10ad      	asrs	r5, r5, #2
 800c27e:	6125      	str	r5, [r4, #16]
 800c280:	4658      	mov	r0, fp
 800c282:	f7fe f8bf 	bl	800a404 <__hi0bits>
 800c286:	016d      	lsls	r5, r5, #5
 800c288:	f8d8 6000 	ldr.w	r6, [r8]
 800c28c:	1a2d      	subs	r5, r5, r0
 800c28e:	42b5      	cmp	r5, r6
 800c290:	dd54      	ble.n	800c33c <__gethex+0x228>
 800c292:	1bad      	subs	r5, r5, r6
 800c294:	4629      	mov	r1, r5
 800c296:	4620      	mov	r0, r4
 800c298:	f7fe fc53 	bl	800ab42 <__any_on>
 800c29c:	4681      	mov	r9, r0
 800c29e:	b178      	cbz	r0, 800c2c0 <__gethex+0x1ac>
 800c2a0:	1e6b      	subs	r3, r5, #1
 800c2a2:	1159      	asrs	r1, r3, #5
 800c2a4:	f003 021f 	and.w	r2, r3, #31
 800c2a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c2ac:	f04f 0901 	mov.w	r9, #1
 800c2b0:	fa09 f202 	lsl.w	r2, r9, r2
 800c2b4:	420a      	tst	r2, r1
 800c2b6:	d003      	beq.n	800c2c0 <__gethex+0x1ac>
 800c2b8:	454b      	cmp	r3, r9
 800c2ba:	dc36      	bgt.n	800c32a <__gethex+0x216>
 800c2bc:	f04f 0902 	mov.w	r9, #2
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7ff febf 	bl	800c046 <rshift>
 800c2c8:	442f      	add	r7, r5
 800c2ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2ce:	42bb      	cmp	r3, r7
 800c2d0:	da42      	bge.n	800c358 <__gethex+0x244>
 800c2d2:	9801      	ldr	r0, [sp, #4]
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	f7fd ffe3 	bl	800a2a0 <_Bfree>
 800c2da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2dc:	2300      	movs	r3, #0
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	25a3      	movs	r5, #163	@ 0xa3
 800c2e2:	e793      	b.n	800c20c <__gethex+0xf8>
 800c2e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c2e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c2ea:	d012      	beq.n	800c312 <__gethex+0x1fe>
 800c2ec:	2b20      	cmp	r3, #32
 800c2ee:	d104      	bne.n	800c2fa <__gethex+0x1e6>
 800c2f0:	f845 bb04 	str.w	fp, [r5], #4
 800c2f4:	f04f 0b00 	mov.w	fp, #0
 800c2f8:	465b      	mov	r3, fp
 800c2fa:	7830      	ldrb	r0, [r6, #0]
 800c2fc:	9303      	str	r3, [sp, #12]
 800c2fe:	f7ff fef4 	bl	800c0ea <__hexdig_fun>
 800c302:	9b03      	ldr	r3, [sp, #12]
 800c304:	f000 000f 	and.w	r0, r0, #15
 800c308:	4098      	lsls	r0, r3
 800c30a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c30e:	3304      	adds	r3, #4
 800c310:	e7ae      	b.n	800c270 <__gethex+0x15c>
 800c312:	45b1      	cmp	r9, r6
 800c314:	d8ea      	bhi.n	800c2ec <__gethex+0x1d8>
 800c316:	492b      	ldr	r1, [pc, #172]	@ (800c3c4 <__gethex+0x2b0>)
 800c318:	9303      	str	r3, [sp, #12]
 800c31a:	2201      	movs	r2, #1
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff fe3f 	bl	800bfa0 <strncmp>
 800c322:	9b03      	ldr	r3, [sp, #12]
 800c324:	2800      	cmp	r0, #0
 800c326:	d1e1      	bne.n	800c2ec <__gethex+0x1d8>
 800c328:	e7a2      	b.n	800c270 <__gethex+0x15c>
 800c32a:	1ea9      	subs	r1, r5, #2
 800c32c:	4620      	mov	r0, r4
 800c32e:	f7fe fc08 	bl	800ab42 <__any_on>
 800c332:	2800      	cmp	r0, #0
 800c334:	d0c2      	beq.n	800c2bc <__gethex+0x1a8>
 800c336:	f04f 0903 	mov.w	r9, #3
 800c33a:	e7c1      	b.n	800c2c0 <__gethex+0x1ac>
 800c33c:	da09      	bge.n	800c352 <__gethex+0x23e>
 800c33e:	1b75      	subs	r5, r6, r5
 800c340:	4621      	mov	r1, r4
 800c342:	9801      	ldr	r0, [sp, #4]
 800c344:	462a      	mov	r2, r5
 800c346:	f7fe f9c3 	bl	800a6d0 <__lshift>
 800c34a:	1b7f      	subs	r7, r7, r5
 800c34c:	4604      	mov	r4, r0
 800c34e:	f100 0a14 	add.w	sl, r0, #20
 800c352:	f04f 0900 	mov.w	r9, #0
 800c356:	e7b8      	b.n	800c2ca <__gethex+0x1b6>
 800c358:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c35c:	42bd      	cmp	r5, r7
 800c35e:	dd6f      	ble.n	800c440 <__gethex+0x32c>
 800c360:	1bed      	subs	r5, r5, r7
 800c362:	42ae      	cmp	r6, r5
 800c364:	dc34      	bgt.n	800c3d0 <__gethex+0x2bc>
 800c366:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d022      	beq.n	800c3b4 <__gethex+0x2a0>
 800c36e:	2b03      	cmp	r3, #3
 800c370:	d024      	beq.n	800c3bc <__gethex+0x2a8>
 800c372:	2b01      	cmp	r3, #1
 800c374:	d115      	bne.n	800c3a2 <__gethex+0x28e>
 800c376:	42ae      	cmp	r6, r5
 800c378:	d113      	bne.n	800c3a2 <__gethex+0x28e>
 800c37a:	2e01      	cmp	r6, #1
 800c37c:	d10b      	bne.n	800c396 <__gethex+0x282>
 800c37e:	9a02      	ldr	r2, [sp, #8]
 800c380:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	2301      	movs	r3, #1
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	f8ca 3000 	str.w	r3, [sl]
 800c38e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c390:	2562      	movs	r5, #98	@ 0x62
 800c392:	601c      	str	r4, [r3, #0]
 800c394:	e73a      	b.n	800c20c <__gethex+0xf8>
 800c396:	1e71      	subs	r1, r6, #1
 800c398:	4620      	mov	r0, r4
 800c39a:	f7fe fbd2 	bl	800ab42 <__any_on>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d1ed      	bne.n	800c37e <__gethex+0x26a>
 800c3a2:	9801      	ldr	r0, [sp, #4]
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	f7fd ff7b 	bl	800a2a0 <_Bfree>
 800c3aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	2550      	movs	r5, #80	@ 0x50
 800c3b2:	e72b      	b.n	800c20c <__gethex+0xf8>
 800c3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1f3      	bne.n	800c3a2 <__gethex+0x28e>
 800c3ba:	e7e0      	b.n	800c37e <__gethex+0x26a>
 800c3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1dd      	bne.n	800c37e <__gethex+0x26a>
 800c3c2:	e7ee      	b.n	800c3a2 <__gethex+0x28e>
 800c3c4:	0800cdf8 	.word	0x0800cdf8
 800c3c8:	0800cc8e 	.word	0x0800cc8e
 800c3cc:	0800ce69 	.word	0x0800ce69
 800c3d0:	1e6f      	subs	r7, r5, #1
 800c3d2:	f1b9 0f00 	cmp.w	r9, #0
 800c3d6:	d130      	bne.n	800c43a <__gethex+0x326>
 800c3d8:	b127      	cbz	r7, 800c3e4 <__gethex+0x2d0>
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f7fe fbb0 	bl	800ab42 <__any_on>
 800c3e2:	4681      	mov	r9, r0
 800c3e4:	117a      	asrs	r2, r7, #5
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c3ec:	f007 071f 	and.w	r7, r7, #31
 800c3f0:	40bb      	lsls	r3, r7
 800c3f2:	4213      	tst	r3, r2
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	bf18      	it	ne
 800c3fa:	f049 0902 	orrne.w	r9, r9, #2
 800c3fe:	f7ff fe22 	bl	800c046 <rshift>
 800c402:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c406:	1b76      	subs	r6, r6, r5
 800c408:	2502      	movs	r5, #2
 800c40a:	f1b9 0f00 	cmp.w	r9, #0
 800c40e:	d047      	beq.n	800c4a0 <__gethex+0x38c>
 800c410:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c414:	2b02      	cmp	r3, #2
 800c416:	d015      	beq.n	800c444 <__gethex+0x330>
 800c418:	2b03      	cmp	r3, #3
 800c41a:	d017      	beq.n	800c44c <__gethex+0x338>
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d109      	bne.n	800c434 <__gethex+0x320>
 800c420:	f019 0f02 	tst.w	r9, #2
 800c424:	d006      	beq.n	800c434 <__gethex+0x320>
 800c426:	f8da 3000 	ldr.w	r3, [sl]
 800c42a:	ea49 0903 	orr.w	r9, r9, r3
 800c42e:	f019 0f01 	tst.w	r9, #1
 800c432:	d10e      	bne.n	800c452 <__gethex+0x33e>
 800c434:	f045 0510 	orr.w	r5, r5, #16
 800c438:	e032      	b.n	800c4a0 <__gethex+0x38c>
 800c43a:	f04f 0901 	mov.w	r9, #1
 800c43e:	e7d1      	b.n	800c3e4 <__gethex+0x2d0>
 800c440:	2501      	movs	r5, #1
 800c442:	e7e2      	b.n	800c40a <__gethex+0x2f6>
 800c444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c446:	f1c3 0301 	rsb	r3, r3, #1
 800c44a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0f0      	beq.n	800c434 <__gethex+0x320>
 800c452:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c456:	f104 0314 	add.w	r3, r4, #20
 800c45a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c45e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c462:	f04f 0c00 	mov.w	ip, #0
 800c466:	4618      	mov	r0, r3
 800c468:	f853 2b04 	ldr.w	r2, [r3], #4
 800c46c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c470:	d01b      	beq.n	800c4aa <__gethex+0x396>
 800c472:	3201      	adds	r2, #1
 800c474:	6002      	str	r2, [r0, #0]
 800c476:	2d02      	cmp	r5, #2
 800c478:	f104 0314 	add.w	r3, r4, #20
 800c47c:	d13c      	bne.n	800c4f8 <__gethex+0x3e4>
 800c47e:	f8d8 2000 	ldr.w	r2, [r8]
 800c482:	3a01      	subs	r2, #1
 800c484:	42b2      	cmp	r2, r6
 800c486:	d109      	bne.n	800c49c <__gethex+0x388>
 800c488:	1171      	asrs	r1, r6, #5
 800c48a:	2201      	movs	r2, #1
 800c48c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c490:	f006 061f 	and.w	r6, r6, #31
 800c494:	fa02 f606 	lsl.w	r6, r2, r6
 800c498:	421e      	tst	r6, r3
 800c49a:	d13a      	bne.n	800c512 <__gethex+0x3fe>
 800c49c:	f045 0520 	orr.w	r5, r5, #32
 800c4a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4a2:	601c      	str	r4, [r3, #0]
 800c4a4:	9b02      	ldr	r3, [sp, #8]
 800c4a6:	601f      	str	r7, [r3, #0]
 800c4a8:	e6b0      	b.n	800c20c <__gethex+0xf8>
 800c4aa:	4299      	cmp	r1, r3
 800c4ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800c4b0:	d8d9      	bhi.n	800c466 <__gethex+0x352>
 800c4b2:	68a3      	ldr	r3, [r4, #8]
 800c4b4:	459b      	cmp	fp, r3
 800c4b6:	db17      	blt.n	800c4e8 <__gethex+0x3d4>
 800c4b8:	6861      	ldr	r1, [r4, #4]
 800c4ba:	9801      	ldr	r0, [sp, #4]
 800c4bc:	3101      	adds	r1, #1
 800c4be:	f7fd feaf 	bl	800a220 <_Balloc>
 800c4c2:	4681      	mov	r9, r0
 800c4c4:	b918      	cbnz	r0, 800c4ce <__gethex+0x3ba>
 800c4c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c530 <__gethex+0x41c>)
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	2184      	movs	r1, #132	@ 0x84
 800c4cc:	e6c5      	b.n	800c25a <__gethex+0x146>
 800c4ce:	6922      	ldr	r2, [r4, #16]
 800c4d0:	3202      	adds	r2, #2
 800c4d2:	f104 010c 	add.w	r1, r4, #12
 800c4d6:	0092      	lsls	r2, r2, #2
 800c4d8:	300c      	adds	r0, #12
 800c4da:	f7ff fd83 	bl	800bfe4 <memcpy>
 800c4de:	4621      	mov	r1, r4
 800c4e0:	9801      	ldr	r0, [sp, #4]
 800c4e2:	f7fd fedd 	bl	800a2a0 <_Bfree>
 800c4e6:	464c      	mov	r4, r9
 800c4e8:	6923      	ldr	r3, [r4, #16]
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4f0:	6122      	str	r2, [r4, #16]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	615a      	str	r2, [r3, #20]
 800c4f6:	e7be      	b.n	800c476 <__gethex+0x362>
 800c4f8:	6922      	ldr	r2, [r4, #16]
 800c4fa:	455a      	cmp	r2, fp
 800c4fc:	dd0b      	ble.n	800c516 <__gethex+0x402>
 800c4fe:	2101      	movs	r1, #1
 800c500:	4620      	mov	r0, r4
 800c502:	f7ff fda0 	bl	800c046 <rshift>
 800c506:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c50a:	3701      	adds	r7, #1
 800c50c:	42bb      	cmp	r3, r7
 800c50e:	f6ff aee0 	blt.w	800c2d2 <__gethex+0x1be>
 800c512:	2501      	movs	r5, #1
 800c514:	e7c2      	b.n	800c49c <__gethex+0x388>
 800c516:	f016 061f 	ands.w	r6, r6, #31
 800c51a:	d0fa      	beq.n	800c512 <__gethex+0x3fe>
 800c51c:	4453      	add	r3, sl
 800c51e:	f1c6 0620 	rsb	r6, r6, #32
 800c522:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c526:	f7fd ff6d 	bl	800a404 <__hi0bits>
 800c52a:	42b0      	cmp	r0, r6
 800c52c:	dbe7      	blt.n	800c4fe <__gethex+0x3ea>
 800c52e:	e7f0      	b.n	800c512 <__gethex+0x3fe>
 800c530:	0800cc8e 	.word	0x0800cc8e

0800c534 <L_shift>:
 800c534:	f1c2 0208 	rsb	r2, r2, #8
 800c538:	0092      	lsls	r2, r2, #2
 800c53a:	b570      	push	{r4, r5, r6, lr}
 800c53c:	f1c2 0620 	rsb	r6, r2, #32
 800c540:	6843      	ldr	r3, [r0, #4]
 800c542:	6804      	ldr	r4, [r0, #0]
 800c544:	fa03 f506 	lsl.w	r5, r3, r6
 800c548:	432c      	orrs	r4, r5
 800c54a:	40d3      	lsrs	r3, r2
 800c54c:	6004      	str	r4, [r0, #0]
 800c54e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c552:	4288      	cmp	r0, r1
 800c554:	d3f4      	bcc.n	800c540 <L_shift+0xc>
 800c556:	bd70      	pop	{r4, r5, r6, pc}

0800c558 <__match>:
 800c558:	b530      	push	{r4, r5, lr}
 800c55a:	6803      	ldr	r3, [r0, #0]
 800c55c:	3301      	adds	r3, #1
 800c55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c562:	b914      	cbnz	r4, 800c56a <__match+0x12>
 800c564:	6003      	str	r3, [r0, #0]
 800c566:	2001      	movs	r0, #1
 800c568:	bd30      	pop	{r4, r5, pc}
 800c56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c56e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c572:	2d19      	cmp	r5, #25
 800c574:	bf98      	it	ls
 800c576:	3220      	addls	r2, #32
 800c578:	42a2      	cmp	r2, r4
 800c57a:	d0f0      	beq.n	800c55e <__match+0x6>
 800c57c:	2000      	movs	r0, #0
 800c57e:	e7f3      	b.n	800c568 <__match+0x10>

0800c580 <__hexnan>:
 800c580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c584:	680b      	ldr	r3, [r1, #0]
 800c586:	6801      	ldr	r1, [r0, #0]
 800c588:	115e      	asrs	r6, r3, #5
 800c58a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c58e:	f013 031f 	ands.w	r3, r3, #31
 800c592:	b087      	sub	sp, #28
 800c594:	bf18      	it	ne
 800c596:	3604      	addne	r6, #4
 800c598:	2500      	movs	r5, #0
 800c59a:	1f37      	subs	r7, r6, #4
 800c59c:	4682      	mov	sl, r0
 800c59e:	4690      	mov	r8, r2
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c5a6:	46b9      	mov	r9, r7
 800c5a8:	463c      	mov	r4, r7
 800c5aa:	9502      	str	r5, [sp, #8]
 800c5ac:	46ab      	mov	fp, r5
 800c5ae:	784a      	ldrb	r2, [r1, #1]
 800c5b0:	1c4b      	adds	r3, r1, #1
 800c5b2:	9303      	str	r3, [sp, #12]
 800c5b4:	b342      	cbz	r2, 800c608 <__hexnan+0x88>
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	9105      	str	r1, [sp, #20]
 800c5ba:	9204      	str	r2, [sp, #16]
 800c5bc:	f7ff fd95 	bl	800c0ea <__hexdig_fun>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d151      	bne.n	800c668 <__hexnan+0xe8>
 800c5c4:	9a04      	ldr	r2, [sp, #16]
 800c5c6:	9905      	ldr	r1, [sp, #20]
 800c5c8:	2a20      	cmp	r2, #32
 800c5ca:	d818      	bhi.n	800c5fe <__hexnan+0x7e>
 800c5cc:	9b02      	ldr	r3, [sp, #8]
 800c5ce:	459b      	cmp	fp, r3
 800c5d0:	dd13      	ble.n	800c5fa <__hexnan+0x7a>
 800c5d2:	454c      	cmp	r4, r9
 800c5d4:	d206      	bcs.n	800c5e4 <__hexnan+0x64>
 800c5d6:	2d07      	cmp	r5, #7
 800c5d8:	dc04      	bgt.n	800c5e4 <__hexnan+0x64>
 800c5da:	462a      	mov	r2, r5
 800c5dc:	4649      	mov	r1, r9
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f7ff ffa8 	bl	800c534 <L_shift>
 800c5e4:	4544      	cmp	r4, r8
 800c5e6:	d952      	bls.n	800c68e <__hexnan+0x10e>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f1a4 0904 	sub.w	r9, r4, #4
 800c5ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5f2:	f8cd b008 	str.w	fp, [sp, #8]
 800c5f6:	464c      	mov	r4, r9
 800c5f8:	461d      	mov	r5, r3
 800c5fa:	9903      	ldr	r1, [sp, #12]
 800c5fc:	e7d7      	b.n	800c5ae <__hexnan+0x2e>
 800c5fe:	2a29      	cmp	r2, #41	@ 0x29
 800c600:	d157      	bne.n	800c6b2 <__hexnan+0x132>
 800c602:	3102      	adds	r1, #2
 800c604:	f8ca 1000 	str.w	r1, [sl]
 800c608:	f1bb 0f00 	cmp.w	fp, #0
 800c60c:	d051      	beq.n	800c6b2 <__hexnan+0x132>
 800c60e:	454c      	cmp	r4, r9
 800c610:	d206      	bcs.n	800c620 <__hexnan+0xa0>
 800c612:	2d07      	cmp	r5, #7
 800c614:	dc04      	bgt.n	800c620 <__hexnan+0xa0>
 800c616:	462a      	mov	r2, r5
 800c618:	4649      	mov	r1, r9
 800c61a:	4620      	mov	r0, r4
 800c61c:	f7ff ff8a 	bl	800c534 <L_shift>
 800c620:	4544      	cmp	r4, r8
 800c622:	d936      	bls.n	800c692 <__hexnan+0x112>
 800c624:	f1a8 0204 	sub.w	r2, r8, #4
 800c628:	4623      	mov	r3, r4
 800c62a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c62e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c632:	429f      	cmp	r7, r3
 800c634:	d2f9      	bcs.n	800c62a <__hexnan+0xaa>
 800c636:	1b3b      	subs	r3, r7, r4
 800c638:	f023 0303 	bic.w	r3, r3, #3
 800c63c:	3304      	adds	r3, #4
 800c63e:	3401      	adds	r4, #1
 800c640:	3e03      	subs	r6, #3
 800c642:	42b4      	cmp	r4, r6
 800c644:	bf88      	it	hi
 800c646:	2304      	movhi	r3, #4
 800c648:	4443      	add	r3, r8
 800c64a:	2200      	movs	r2, #0
 800c64c:	f843 2b04 	str.w	r2, [r3], #4
 800c650:	429f      	cmp	r7, r3
 800c652:	d2fb      	bcs.n	800c64c <__hexnan+0xcc>
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	b91b      	cbnz	r3, 800c660 <__hexnan+0xe0>
 800c658:	4547      	cmp	r7, r8
 800c65a:	d128      	bne.n	800c6ae <__hexnan+0x12e>
 800c65c:	2301      	movs	r3, #1
 800c65e:	603b      	str	r3, [r7, #0]
 800c660:	2005      	movs	r0, #5
 800c662:	b007      	add	sp, #28
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	3501      	adds	r5, #1
 800c66a:	2d08      	cmp	r5, #8
 800c66c:	f10b 0b01 	add.w	fp, fp, #1
 800c670:	dd06      	ble.n	800c680 <__hexnan+0x100>
 800c672:	4544      	cmp	r4, r8
 800c674:	d9c1      	bls.n	800c5fa <__hexnan+0x7a>
 800c676:	2300      	movs	r3, #0
 800c678:	f844 3c04 	str.w	r3, [r4, #-4]
 800c67c:	2501      	movs	r5, #1
 800c67e:	3c04      	subs	r4, #4
 800c680:	6822      	ldr	r2, [r4, #0]
 800c682:	f000 000f 	and.w	r0, r0, #15
 800c686:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c68a:	6020      	str	r0, [r4, #0]
 800c68c:	e7b5      	b.n	800c5fa <__hexnan+0x7a>
 800c68e:	2508      	movs	r5, #8
 800c690:	e7b3      	b.n	800c5fa <__hexnan+0x7a>
 800c692:	9b01      	ldr	r3, [sp, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0dd      	beq.n	800c654 <__hexnan+0xd4>
 800c698:	f1c3 0320 	rsb	r3, r3, #32
 800c69c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c6a0:	40da      	lsrs	r2, r3
 800c6a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c6ac:	e7d2      	b.n	800c654 <__hexnan+0xd4>
 800c6ae:	3f04      	subs	r7, #4
 800c6b0:	e7d0      	b.n	800c654 <__hexnan+0xd4>
 800c6b2:	2004      	movs	r0, #4
 800c6b4:	e7d5      	b.n	800c662 <__hexnan+0xe2>

0800c6b6 <__ascii_mbtowc>:
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	b901      	cbnz	r1, 800c6bc <__ascii_mbtowc+0x6>
 800c6ba:	a901      	add	r1, sp, #4
 800c6bc:	b142      	cbz	r2, 800c6d0 <__ascii_mbtowc+0x1a>
 800c6be:	b14b      	cbz	r3, 800c6d4 <__ascii_mbtowc+0x1e>
 800c6c0:	7813      	ldrb	r3, [r2, #0]
 800c6c2:	600b      	str	r3, [r1, #0]
 800c6c4:	7812      	ldrb	r2, [r2, #0]
 800c6c6:	1e10      	subs	r0, r2, #0
 800c6c8:	bf18      	it	ne
 800c6ca:	2001      	movne	r0, #1
 800c6cc:	b002      	add	sp, #8
 800c6ce:	4770      	bx	lr
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	e7fb      	b.n	800c6cc <__ascii_mbtowc+0x16>
 800c6d4:	f06f 0001 	mvn.w	r0, #1
 800c6d8:	e7f8      	b.n	800c6cc <__ascii_mbtowc+0x16>

0800c6da <_realloc_r>:
 800c6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6de:	4680      	mov	r8, r0
 800c6e0:	4615      	mov	r5, r2
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	b921      	cbnz	r1, 800c6f0 <_realloc_r+0x16>
 800c6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ea:	4611      	mov	r1, r2
 800c6ec:	f7fd bd0c 	b.w	800a108 <_malloc_r>
 800c6f0:	b92a      	cbnz	r2, 800c6fe <_realloc_r+0x24>
 800c6f2:	f7fd fc95 	bl	800a020 <_free_r>
 800c6f6:	2400      	movs	r4, #0
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fe:	f000 f8ef 	bl	800c8e0 <_malloc_usable_size_r>
 800c702:	4285      	cmp	r5, r0
 800c704:	4606      	mov	r6, r0
 800c706:	d802      	bhi.n	800c70e <_realloc_r+0x34>
 800c708:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c70c:	d8f4      	bhi.n	800c6f8 <_realloc_r+0x1e>
 800c70e:	4629      	mov	r1, r5
 800c710:	4640      	mov	r0, r8
 800c712:	f7fd fcf9 	bl	800a108 <_malloc_r>
 800c716:	4607      	mov	r7, r0
 800c718:	2800      	cmp	r0, #0
 800c71a:	d0ec      	beq.n	800c6f6 <_realloc_r+0x1c>
 800c71c:	42b5      	cmp	r5, r6
 800c71e:	462a      	mov	r2, r5
 800c720:	4621      	mov	r1, r4
 800c722:	bf28      	it	cs
 800c724:	4632      	movcs	r2, r6
 800c726:	f7ff fc5d 	bl	800bfe4 <memcpy>
 800c72a:	4621      	mov	r1, r4
 800c72c:	4640      	mov	r0, r8
 800c72e:	f7fd fc77 	bl	800a020 <_free_r>
 800c732:	463c      	mov	r4, r7
 800c734:	e7e0      	b.n	800c6f8 <_realloc_r+0x1e>

0800c736 <__ascii_wctomb>:
 800c736:	4603      	mov	r3, r0
 800c738:	4608      	mov	r0, r1
 800c73a:	b141      	cbz	r1, 800c74e <__ascii_wctomb+0x18>
 800c73c:	2aff      	cmp	r2, #255	@ 0xff
 800c73e:	d904      	bls.n	800c74a <__ascii_wctomb+0x14>
 800c740:	228a      	movs	r2, #138	@ 0x8a
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c748:	4770      	bx	lr
 800c74a:	700a      	strb	r2, [r1, #0]
 800c74c:	2001      	movs	r0, #1
 800c74e:	4770      	bx	lr

0800c750 <__swhatbuf_r>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	460c      	mov	r4, r1
 800c754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c758:	2900      	cmp	r1, #0
 800c75a:	b096      	sub	sp, #88	@ 0x58
 800c75c:	4615      	mov	r5, r2
 800c75e:	461e      	mov	r6, r3
 800c760:	da0d      	bge.n	800c77e <__swhatbuf_r+0x2e>
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c768:	f04f 0100 	mov.w	r1, #0
 800c76c:	bf14      	ite	ne
 800c76e:	2340      	movne	r3, #64	@ 0x40
 800c770:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c774:	2000      	movs	r0, #0
 800c776:	6031      	str	r1, [r6, #0]
 800c778:	602b      	str	r3, [r5, #0]
 800c77a:	b016      	add	sp, #88	@ 0x58
 800c77c:	bd70      	pop	{r4, r5, r6, pc}
 800c77e:	466a      	mov	r2, sp
 800c780:	f000 f878 	bl	800c874 <_fstat_r>
 800c784:	2800      	cmp	r0, #0
 800c786:	dbec      	blt.n	800c762 <__swhatbuf_r+0x12>
 800c788:	9901      	ldr	r1, [sp, #4]
 800c78a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c78e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c792:	4259      	negs	r1, r3
 800c794:	4159      	adcs	r1, r3
 800c796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c79a:	e7eb      	b.n	800c774 <__swhatbuf_r+0x24>

0800c79c <__smakebuf_r>:
 800c79c:	898b      	ldrh	r3, [r1, #12]
 800c79e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7a0:	079d      	lsls	r5, r3, #30
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	d507      	bpl.n	800c7b8 <__smakebuf_r+0x1c>
 800c7a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	6123      	str	r3, [r4, #16]
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	6163      	str	r3, [r4, #20]
 800c7b4:	b003      	add	sp, #12
 800c7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7b8:	ab01      	add	r3, sp, #4
 800c7ba:	466a      	mov	r2, sp
 800c7bc:	f7ff ffc8 	bl	800c750 <__swhatbuf_r>
 800c7c0:	9f00      	ldr	r7, [sp, #0]
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7fd fc9e 	bl	800a108 <_malloc_r>
 800c7cc:	b948      	cbnz	r0, 800c7e2 <__smakebuf_r+0x46>
 800c7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d2:	059a      	lsls	r2, r3, #22
 800c7d4:	d4ee      	bmi.n	800c7b4 <__smakebuf_r+0x18>
 800c7d6:	f023 0303 	bic.w	r3, r3, #3
 800c7da:	f043 0302 	orr.w	r3, r3, #2
 800c7de:	81a3      	strh	r3, [r4, #12]
 800c7e0:	e7e2      	b.n	800c7a8 <__smakebuf_r+0xc>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	6020      	str	r0, [r4, #0]
 800c7e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ea:	81a3      	strh	r3, [r4, #12]
 800c7ec:	9b01      	ldr	r3, [sp, #4]
 800c7ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c7f2:	b15b      	cbz	r3, 800c80c <__smakebuf_r+0x70>
 800c7f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f000 f84d 	bl	800c898 <_isatty_r>
 800c7fe:	b128      	cbz	r0, 800c80c <__smakebuf_r+0x70>
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	f023 0303 	bic.w	r3, r3, #3
 800c806:	f043 0301 	orr.w	r3, r3, #1
 800c80a:	81a3      	strh	r3, [r4, #12]
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	431d      	orrs	r5, r3
 800c810:	81a5      	strh	r5, [r4, #12]
 800c812:	e7cf      	b.n	800c7b4 <__smakebuf_r+0x18>

0800c814 <_raise_r>:
 800c814:	291f      	cmp	r1, #31
 800c816:	b538      	push	{r3, r4, r5, lr}
 800c818:	4605      	mov	r5, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	d904      	bls.n	800c828 <_raise_r+0x14>
 800c81e:	2316      	movs	r3, #22
 800c820:	6003      	str	r3, [r0, #0]
 800c822:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c82a:	b112      	cbz	r2, 800c832 <_raise_r+0x1e>
 800c82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c830:	b94b      	cbnz	r3, 800c846 <_raise_r+0x32>
 800c832:	4628      	mov	r0, r5
 800c834:	f000 f852 	bl	800c8dc <_getpid_r>
 800c838:	4622      	mov	r2, r4
 800c83a:	4601      	mov	r1, r0
 800c83c:	4628      	mov	r0, r5
 800c83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c842:	f000 b839 	b.w	800c8b8 <_kill_r>
 800c846:	2b01      	cmp	r3, #1
 800c848:	d00a      	beq.n	800c860 <_raise_r+0x4c>
 800c84a:	1c59      	adds	r1, r3, #1
 800c84c:	d103      	bne.n	800c856 <_raise_r+0x42>
 800c84e:	2316      	movs	r3, #22
 800c850:	6003      	str	r3, [r0, #0]
 800c852:	2001      	movs	r0, #1
 800c854:	e7e7      	b.n	800c826 <_raise_r+0x12>
 800c856:	2100      	movs	r1, #0
 800c858:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c85c:	4620      	mov	r0, r4
 800c85e:	4798      	blx	r3
 800c860:	2000      	movs	r0, #0
 800c862:	e7e0      	b.n	800c826 <_raise_r+0x12>

0800c864 <raise>:
 800c864:	4b02      	ldr	r3, [pc, #8]	@ (800c870 <raise+0xc>)
 800c866:	4601      	mov	r1, r0
 800c868:	6818      	ldr	r0, [r3, #0]
 800c86a:	f7ff bfd3 	b.w	800c814 <_raise_r>
 800c86e:	bf00      	nop
 800c870:	20000080 	.word	0x20000080

0800c874 <_fstat_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d07      	ldr	r5, [pc, #28]	@ (800c894 <_fstat_r+0x20>)
 800c878:	2300      	movs	r3, #0
 800c87a:	4604      	mov	r4, r0
 800c87c:	4608      	mov	r0, r1
 800c87e:	4611      	mov	r1, r2
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	f7f7 f9ff 	bl	8003c84 <_fstat>
 800c886:	1c43      	adds	r3, r0, #1
 800c888:	d102      	bne.n	800c890 <_fstat_r+0x1c>
 800c88a:	682b      	ldr	r3, [r5, #0]
 800c88c:	b103      	cbz	r3, 800c890 <_fstat_r+0x1c>
 800c88e:	6023      	str	r3, [r4, #0]
 800c890:	bd38      	pop	{r3, r4, r5, pc}
 800c892:	bf00      	nop
 800c894:	20000de8 	.word	0x20000de8

0800c898 <_isatty_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d06      	ldr	r5, [pc, #24]	@ (800c8b4 <_isatty_r+0x1c>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	f7f7 f9fe 	bl	8003ca4 <_isatty>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_isatty_r+0x1a>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_isatty_r+0x1a>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	20000de8 	.word	0x20000de8

0800c8b8 <_kill_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d07      	ldr	r5, [pc, #28]	@ (800c8d8 <_kill_r+0x20>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	602b      	str	r3, [r5, #0]
 800c8c6:	f7f7 f97d 	bl	8003bc4 <_kill>
 800c8ca:	1c43      	adds	r3, r0, #1
 800c8cc:	d102      	bne.n	800c8d4 <_kill_r+0x1c>
 800c8ce:	682b      	ldr	r3, [r5, #0]
 800c8d0:	b103      	cbz	r3, 800c8d4 <_kill_r+0x1c>
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	bd38      	pop	{r3, r4, r5, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20000de8 	.word	0x20000de8

0800c8dc <_getpid_r>:
 800c8dc:	f7f7 b96a 	b.w	8003bb4 <_getpid>

0800c8e0 <_malloc_usable_size_r>:
 800c8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8e4:	1f18      	subs	r0, r3, #4
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	bfbc      	itt	lt
 800c8ea:	580b      	ldrlt	r3, [r1, r0]
 800c8ec:	18c0      	addlt	r0, r0, r3
 800c8ee:	4770      	bx	lr

0800c8f0 <_init>:
 800c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f2:	bf00      	nop
 800c8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f6:	bc08      	pop	{r3}
 800c8f8:	469e      	mov	lr, r3
 800c8fa:	4770      	bx	lr

0800c8fc <_fini>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	bf00      	nop
 800c900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c902:	bc08      	pop	{r3}
 800c904:	469e      	mov	lr, r3
 800c906:	4770      	bx	lr
