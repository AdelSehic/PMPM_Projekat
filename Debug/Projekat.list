
Projekat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800dca8  0800dca8  0000eca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3b4  0800e3b4  00010240  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3b4  0800e3b4  0000f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3bc  0800e3bc  00010240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3bc  0800e3bc  0000f3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3c0  0800e3c0  0000f3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0800e3c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010240  2**0
                  CONTENTS
 10 .bss          00000dc0  20000240  20000240  00010240  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001000  20001000  00010240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dae  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f69  00000000  00000000  0002301e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00025f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  00027200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023547  00000000  00000000  0002806a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145b9  00000000  00000000  0004b5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3777  00000000  00000000  0005fb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001332e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065ac  00000000  00000000  00133324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001398d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc8c 	.word	0x0800dc8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800dc8c 	.word	0x0800dc8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4909      	ldr	r1, [pc, #36]	@ (8001010 <default_ip_assign+0x2c>)
 8000fec:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000ff0:	f003 fbd2 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4907      	ldr	r1, [pc, #28]	@ (8001014 <default_ip_assign+0x30>)
 8000ff8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8000ffc:	f003 fbcc 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8001000:	2204      	movs	r2, #4
 8001002:	4905      	ldr	r1, [pc, #20]	@ (8001018 <default_ip_assign+0x34>)
 8001004:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001008:	f003 fbc6 	bl	8004798 <WIZCHIP_WRITE_BUF>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000026c 	.word	0x2000026c
 8001014:	20000274 	.word	0x20000274
 8001018:	20000270 	.word	0x20000270

0800101c <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	2000      	movs	r0, #0
 8001024:	f003 fb0a 	bl	800463c <WIZCHIP_WRITE>
   getMR(); // for delay
 8001028:	2000      	movs	r0, #0
 800102a:	f003 fabb 	bl	80045a4 <WIZCHIP_READ>
   default_ip_assign();
 800102e:	f7ff ffd9 	bl	8000fe4 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8001032:	2206      	movs	r2, #6
 8001034:	4903      	ldr	r1, [pc, #12]	@ (8001044 <default_ip_update+0x28>)
 8001036:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800103a:	f003 fbad 	bl	8004798 <WIZCHIP_WRITE_BUF>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000028c 	.word	0x2000028c

08001048 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	2000      	movs	r0, #0
 8001050:	f003 faf4 	bl	800463c <WIZCHIP_WRITE>
	getMR(); // for delay
 8001054:	2000      	movs	r0, #0
 8001056:	f003 faa5 	bl	80045a4 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800105a:	2206      	movs	r2, #6
 800105c:	4903      	ldr	r1, [pc, #12]	@ (800106c <default_ip_conflict+0x24>)
 800105e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001062:	f003 fb99 	bl	8004798 <WIZCHIP_WRITE_BUF>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000028c 	.word	0x2000028c

08001070 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <reg_dhcp_cbfunc+0x50>)
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <reg_dhcp_cbfunc+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <reg_dhcp_cbfunc+0x58>)
 8001084:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <reg_dhcp_cbfunc+0x5c>)
 8001086:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <reg_dhcp_cbfunc+0x60>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <reg_dhcp_cbfunc+0x64>)
 800108c:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <reg_dhcp_cbfunc+0x2a>
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <reg_dhcp_cbfunc+0x50>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <reg_dhcp_cbfunc+0x36>
 80010a0:	4a09      	ldr	r2, [pc, #36]	@ (80010c8 <reg_dhcp_cbfunc+0x58>)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <reg_dhcp_cbfunc+0x42>
 80010ac:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <reg_dhcp_cbfunc+0x60>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000010 	.word	0x20000010
 80010c4:	08000fe5 	.word	0x08000fe5
 80010c8:	20000014 	.word	0x20000014
 80010cc:	0800101d 	.word	0x0800101d
 80010d0:	20000018 	.word	0x20000018
 80010d4:	08001049 	.word	0x08001049

080010d8 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80010de:	463b      	mov	r3, r7
 80010e0:	2206      	movs	r2, #6
 80010e2:	4619      	mov	r1, r3
 80010e4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80010e8:	f003 faf6 	bl	80046d8 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 80010ec:	4b72      	ldr	r3, [pc, #456]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80010f4:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2201      	movs	r2, #1
 80010fa:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80010fc:	4b6e      	ldr	r3, [pc, #440]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2206      	movs	r2, #6
 8001102:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001104:	4b6c      	ldr	r3, [pc, #432]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 800110c:	4b6a      	ldr	r3, [pc, #424]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001114:	4b69      	ldr	r3, [pc, #420]	@ (80012bc <makeDHCPMSG+0x1e4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0e1b      	lsrs	r3, r3, #24
 800111a:	b2da      	uxtb	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001120:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <makeDHCPMSG+0x1e4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0c1a      	lsrs	r2, r3, #16
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 800112e:	4b63      	ldr	r3, [pc, #396]	@ (80012bc <makeDHCPMSG+0x1e4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	0a1a      	lsrs	r2, r3, #8
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3302      	adds	r3, #2
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800113c:	4b5f      	ldr	r3, [pc, #380]	@ (80012bc <makeDHCPMSG+0x1e4>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3303      	adds	r3, #3
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001148:	4b5b      	ldr	r3, [pc, #364]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001150:	4b59      	ldr	r3, [pc, #356]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	330a      	adds	r3, #10
 8001156:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3301      	adds	r3, #1
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001166:	4b54      	ldr	r3, [pc, #336]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800116e:	4b52      	ldr	r3, [pc, #328]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001176:	4b50      	ldr	r3, [pc, #320]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800117e:	4b4e      	ldr	r3, [pc, #312]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001186:	4b4c      	ldr	r3, [pc, #304]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800118e:	4b4a      	ldr	r3, [pc, #296]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001196:	4b48      	ldr	r3, [pc, #288]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800119e:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80011ae:	4b42      	ldr	r3, [pc, #264]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80011b6:	4b40      	ldr	r3, [pc, #256]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80011be:	4b3e      	ldr	r3, [pc, #248]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80011ce:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80011d6:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80011de:	4b36      	ldr	r3, [pc, #216]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a35      	ldr	r2, [pc, #212]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a32      	ldr	r2, [pc, #200]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 80011f6:	7852      	ldrb	r2, [r2, #1]
 80011f8:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80011fa:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a30      	ldr	r2, [pc, #192]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 8001200:	7892      	ldrb	r2, [r2, #2]
 8001202:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001204:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a2d      	ldr	r2, [pc, #180]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 800120a:	78d2      	ldrb	r2, [r2, #3]
 800120c:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2b      	ldr	r2, [pc, #172]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 8001214:	7912      	ldrb	r2, [r2, #4]
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <makeDHCPMSG+0x1e8>)
 8001220:	7952      	ldrb	r2, [r2, #5]
 8001222:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001226:	2306      	movs	r3, #6
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e008      	b.n	800123e <makeDHCPMSG+0x166>
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	4413      	add	r3, r2
 8001234:	2200      	movs	r2, #0
 8001236:	771a      	strb	r2, [r3, #28]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d9f3      	bls.n	800122c <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e009      	b.n	800125e <makeDHCPMSG+0x186>
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4413      	add	r3, r2
 8001252:	2200      	movs	r2, #0
 8001254:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b3f      	cmp	r3, #63	@ 0x3f
 8001262:	d9f2      	bls.n	800124a <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e009      	b.n	800127e <makeDHCPMSG+0x1a6>
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	2b00      	cmp	r3, #0
 8001284:	daf1      	bge.n	800126a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2263      	movs	r2, #99	@ 0x63
 800128c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2282      	movs	r2, #130	@ 0x82
 8001296:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2253      	movs	r2, #83	@ 0x53
 80012a0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <makeDHCPMSG+0x1e0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2263      	movs	r2, #99	@ 0x63
 80012aa:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000288 	.word	0x20000288
 80012bc:	20000284 	.word	0x20000284
 80012c0:	2000028c 	.word	0x2000028c

080012c4 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80012ce:	f7ff ff03 	bl	80010d8 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80012d2:	4b56      	ldr	r3, [pc, #344]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80012d8:	4b54      	ldr	r3, [pc, #336]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012da:	2200      	movs	r2, #0
 80012dc:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80012de:	4b53      	ldr	r3, [pc, #332]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80012e4:	4b51      	ldr	r3, [pc, #324]	@ (800142c <send_DHCP_DISCOVER+0x168>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80012ea:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80012f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80012f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80012fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001430 <send_DHCP_DISCOVER+0x16c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001302:	2304      	movs	r3, #4
 8001304:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001306:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	1c59      	adds	r1, r3, #1
 800130e:	80b9      	strh	r1, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	2235      	movs	r2, #53	@ 0x35
 8001314:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001318:	4b46      	ldr	r3, [pc, #280]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	1c59      	adds	r1, r3, #1
 8001320:	80b9      	strh	r1, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800132a:	4b42      	ldr	r3, [pc, #264]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	1c59      	adds	r1, r3, #1
 8001332:	80b9      	strh	r1, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	2201      	movs	r2, #1
 8001338:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800133c:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	1c59      	adds	r1, r3, #1
 8001344:	80b9      	strh	r1, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	223d      	movs	r2, #61	@ 0x3d
 800134a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800134e:	4b39      	ldr	r3, [pc, #228]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	1c59      	adds	r1, r3, #1
 8001356:	80b9      	strh	r1, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	2207      	movs	r2, #7
 800135c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	80b9      	strh	r1, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	2201      	movs	r2, #1
 800136e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001372:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	1c59      	adds	r1, r3, #1
 800137a:	80b9      	strh	r1, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 8001380:	7819      	ldrb	r1, [r3, #0]
 8001382:	1813      	adds	r3, r2, r0
 8001384:	460a      	mov	r2, r1
 8001386:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	1c59      	adds	r1, r3, #1
 8001392:	80b9      	strh	r1, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 8001398:	7859      	ldrb	r1, [r3, #1]
 800139a:	1813      	adds	r3, r2, r0
 800139c:	460a      	mov	r2, r1
 800139e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	1c59      	adds	r1, r3, #1
 80013aa:	80b9      	strh	r1, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013b0:	7899      	ldrb	r1, [r3, #2]
 80013b2:	1813      	adds	r3, r2, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	88bb      	ldrh	r3, [r7, #4]
 80013c0:	1c59      	adds	r1, r3, #1
 80013c2:	80b9      	strh	r1, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013c8:	78d9      	ldrb	r1, [r3, #3]
 80013ca:	1813      	adds	r3, r2, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	1c59      	adds	r1, r3, #1
 80013da:	80b9      	strh	r1, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013e0:	7919      	ldrb	r1, [r3, #4]
 80013e2:	1813      	adds	r3, r2, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	88bb      	ldrh	r3, [r7, #4]
 80013f0:	1c59      	adds	r1, r3, #1
 80013f2:	80b9      	strh	r1, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <send_DHCP_DISCOVER+0x174>)
 80013f8:	7959      	ldrb	r1, [r3, #5]
 80013fa:	1813      	adds	r3, r2, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	80b9      	strh	r1, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	220c      	movs	r2, #12
 8001410:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <send_DHCP_DISCOVER+0x170>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	80b9      	strh	r1, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	e017      	b.n	800145c <send_DHCP_DISCOVER+0x198>
 800142c:	20000260 	.word	0x20000260
 8001430:	20000264 	.word	0x20000264
 8001434:	20000288 	.word	0x20000288
 8001438:	2000028c 	.word	0x2000028c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800143c:	88f9      	ldrh	r1, [r7, #6]
 800143e:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	1c58      	adds	r0, r3, #1
 8001446:	80b8      	strh	r0, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	4b7e      	ldr	r3, [pc, #504]	@ (8001644 <send_DHCP_DISCOVER+0x380>)
 800144c:	5c59      	ldrb	r1, [r3, r1]
 800144e:	1813      	adds	r3, r2, r0
 8001450:	460a      	mov	r2, r1
 8001452:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	3301      	adds	r3, #1
 800145a:	80fb      	strh	r3, [r7, #6]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4a79      	ldr	r2, [pc, #484]	@ (8001644 <send_DHCP_DISCOVER+0x380>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ea      	bne.n	800143c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001466:	4b78      	ldr	r3, [pc, #480]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 8001468:	78db      	ldrb	r3, [r3, #3]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001470:	681c      	ldr	r4, [r3, #0]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	80b9      	strh	r1, [r7, #4]
 8001478:	461d      	mov	r5, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f001 f9a4 	bl	80027c8 <NibbleToHex>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	1963      	adds	r3, r4, r5
 8001486:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800148a:	4b6f      	ldr	r3, [pc, #444]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 800148c:	78da      	ldrb	r2, [r3, #3]
 800148e:	4b6c      	ldr	r3, [pc, #432]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001490:	681c      	ldr	r4, [r3, #0]
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	1c59      	adds	r1, r3, #1
 8001496:	80b9      	strh	r1, [r7, #4]
 8001498:	461d      	mov	r5, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f001 f994 	bl	80027c8 <NibbleToHex>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	1963      	adds	r3, r4, r5
 80014a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80014aa:	4b67      	ldr	r3, [pc, #412]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 80014ac:	791b      	ldrb	r3, [r3, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80014b4:	681c      	ldr	r4, [r3, #0]
 80014b6:	88bb      	ldrh	r3, [r7, #4]
 80014b8:	1c59      	adds	r1, r3, #1
 80014ba:	80b9      	strh	r1, [r7, #4]
 80014bc:	461d      	mov	r5, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f001 f982 	bl	80027c8 <NibbleToHex>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	1963      	adds	r3, r4, r5
 80014ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80014ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 80014d0:	791a      	ldrb	r2, [r3, #4]
 80014d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	1c59      	adds	r1, r3, #1
 80014da:	80b9      	strh	r1, [r7, #4]
 80014dc:	461d      	mov	r5, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f001 f972 	bl	80027c8 <NibbleToHex>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	1963      	adds	r3, r4, r5
 80014ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80014ee:	4b56      	ldr	r3, [pc, #344]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 80014f0:	795b      	ldrb	r3, [r3, #5]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b52      	ldr	r3, [pc, #328]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80014f8:	681c      	ldr	r4, [r3, #0]
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	1c59      	adds	r1, r3, #1
 80014fe:	80b9      	strh	r1, [r7, #4]
 8001500:	461d      	mov	r5, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f001 f960 	bl	80027c8 <NibbleToHex>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	1963      	adds	r3, r4, r5
 800150e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <send_DHCP_DISCOVER+0x384>)
 8001514:	795a      	ldrb	r2, [r3, #5]
 8001516:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	80b9      	strh	r1, [r7, #4]
 8001520:	461d      	mov	r5, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f001 f950 	bl	80027c8 <NibbleToHex>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	1963      	adds	r3, r4, r5
 800152e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	b2d9      	uxtb	r1, r3
 8001536:	4b42      	ldr	r3, [pc, #264]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	88b8      	ldrh	r0, [r7, #4]
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	3307      	adds	r3, #7
 8001540:	1ac3      	subs	r3, r0, r3
 8001542:	3106      	adds	r1, #6
 8001544:	b2c9      	uxtb	r1, r1
 8001546:	4413      	add	r3, r2
 8001548:	460a      	mov	r2, r1
 800154a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	1c59      	adds	r1, r3, #1
 8001556:	80b9      	strh	r1, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	2237      	movs	r2, #55	@ 0x37
 800155c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001560:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	80b9      	strh	r1, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	2206      	movs	r2, #6
 800156e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	1c59      	adds	r1, r3, #1
 800157a:	80b9      	strh	r1, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	2201      	movs	r2, #1
 8001580:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001584:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	1c59      	adds	r1, r3, #1
 800158c:	80b9      	strh	r1, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	2203      	movs	r2, #3
 8001592:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	1c59      	adds	r1, r3, #1
 800159e:	80b9      	strh	r1, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	2206      	movs	r2, #6
 80015a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	88bb      	ldrh	r3, [r7, #4]
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	80b9      	strh	r1, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	220f      	movs	r2, #15
 80015b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	80b9      	strh	r1, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	223a      	movs	r2, #58	@ 0x3a
 80015c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	88bb      	ldrh	r3, [r7, #4]
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	80b9      	strh	r1, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	223b      	movs	r2, #59	@ 0x3b
 80015da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	1c59      	adds	r1, r3, #1
 80015e6:	80b9      	strh	r1, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	22ff      	movs	r2, #255	@ 0xff
 80015ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	80fb      	strh	r3, [r7, #6]
 80015f4:	e009      	b.n	800160a <send_DHCP_DISCOVER+0x346>
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	4413      	add	r3, r2
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	3301      	adds	r3, #1
 8001608:	80fb      	strh	r3, [r7, #6]
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001610:	d3f1      	bcc.n	80015f6 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001612:	23ff      	movs	r3, #255	@ 0xff
 8001614:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001616:	23ff      	movs	r3, #255	@ 0xff
 8001618:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800161a:	23ff      	movs	r3, #255	@ 0xff
 800161c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800161e:	23ff      	movs	r3, #255	@ 0xff
 8001620:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <send_DHCP_DISCOVER+0x388>)
 8001624:	7818      	ldrb	r0, [r3, #0]
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <send_DHCP_DISCOVER+0x37c>)
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	463b      	mov	r3, r7
 800162c:	2243      	movs	r2, #67	@ 0x43
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001634:	f002 fa62 	bl	8003afc <sendto>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bdb0      	pop	{r4, r5, r7, pc}
 8001640:	20000288 	.word	0x20000288
 8001644:	20000008 	.word	0x20000008
 8001648:	2000028c 	.word	0x2000028c
 800164c:	2000025c 	.word	0x2000025c

08001650 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800165a:	f7ff fd3d 	bl	80010d8 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <send_DHCP_REQUEST+0x7c>)
 8001660:	f993 3000 	ldrsb.w	r3, [r3]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d004      	beq.n	8001672 <send_DHCP_REQUEST+0x22>
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <send_DHCP_REQUEST+0x7c>)
 800166a:	f993 3000 	ldrsb.w	r3, [r3]
 800166e:	2b04      	cmp	r3, #4
 8001670:	d134      	bne.n	80016dc <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	330a      	adds	r3, #10
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	330a      	adds	r3, #10
 8001682:	3301      	adds	r3, #1
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 800168e:	7812      	ldrb	r2, [r2, #0]
 8001690:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 8001698:	7852      	ldrb	r2, [r2, #1]
 800169a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 80016a2:	7892      	ldrb	r2, [r2, #2]
 80016a4:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <send_DHCP_REQUEST+0x80>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <send_DHCP_REQUEST+0x84>)
 80016ac:	78d2      	ldrb	r2, [r2, #3]
 80016ae:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <send_DHCP_REQUEST+0x88>)
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	e010      	b.n	80016ec <send_DHCP_REQUEST+0x9c>
 80016ca:	bf00      	nop
 80016cc:	2000027c 	.word	0x2000027c
 80016d0:	20000288 	.word	0x20000288
 80016d4:	2000026c 	.word	0x2000026c
 80016d8:	20000260 	.word	0x20000260
   }
   else
   {
   	ip[0] = 255;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80016e0:	23ff      	movs	r3, #255	@ 0xff
 80016e2:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80016e4:	23ff      	movs	r3, #255	@ 0xff
 80016e6:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80016e8:	23ff      	movs	r3, #255	@ 0xff
 80016ea:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80016ec:	2304      	movs	r3, #4
 80016ee:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80016f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	897b      	ldrh	r3, [r7, #10]
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	8179      	strh	r1, [r7, #10]
 80016fa:	4413      	add	r3, r2
 80016fc:	2235      	movs	r2, #53	@ 0x35
 80016fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	1c59      	adds	r1, r3, #1
 800170a:	8179      	strh	r1, [r7, #10]
 800170c:	4413      	add	r3, r2
 800170e:	2201      	movs	r2, #1
 8001710:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001714:	4b84      	ldr	r3, [pc, #528]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	8179      	strh	r1, [r7, #10]
 800171e:	4413      	add	r3, r2
 8001720:	2203      	movs	r2, #3
 8001722:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001726:	4b80      	ldr	r3, [pc, #512]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	897b      	ldrh	r3, [r7, #10]
 800172c:	1c59      	adds	r1, r3, #1
 800172e:	8179      	strh	r1, [r7, #10]
 8001730:	4413      	add	r3, r2
 8001732:	223d      	movs	r2, #61	@ 0x3d
 8001734:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001738:	4b7b      	ldr	r3, [pc, #492]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	897b      	ldrh	r3, [r7, #10]
 800173e:	1c59      	adds	r1, r3, #1
 8001740:	8179      	strh	r1, [r7, #10]
 8001742:	4413      	add	r3, r2
 8001744:	2207      	movs	r2, #7
 8001746:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800174a:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	897b      	ldrh	r3, [r7, #10]
 8001750:	1c59      	adds	r1, r3, #1
 8001752:	8179      	strh	r1, [r7, #10]
 8001754:	4413      	add	r3, r2
 8001756:	2201      	movs	r2, #1
 8001758:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800175c:	4b72      	ldr	r3, [pc, #456]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	897b      	ldrh	r3, [r7, #10]
 8001762:	1c59      	adds	r1, r3, #1
 8001764:	8179      	strh	r1, [r7, #10]
 8001766:	4618      	mov	r0, r3
 8001768:	4b70      	ldr	r3, [pc, #448]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 800176a:	7819      	ldrb	r1, [r3, #0]
 800176c:	1813      	adds	r3, r2, r0
 800176e:	460a      	mov	r2, r1
 8001770:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001774:	4b6c      	ldr	r3, [pc, #432]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	1c59      	adds	r1, r3, #1
 800177c:	8179      	strh	r1, [r7, #10]
 800177e:	4618      	mov	r0, r3
 8001780:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 8001782:	7859      	ldrb	r1, [r3, #1]
 8001784:	1813      	adds	r3, r2, r0
 8001786:	460a      	mov	r2, r1
 8001788:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800178c:	4b66      	ldr	r3, [pc, #408]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	897b      	ldrh	r3, [r7, #10]
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	8179      	strh	r1, [r7, #10]
 8001796:	4618      	mov	r0, r3
 8001798:	4b64      	ldr	r3, [pc, #400]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 800179a:	7899      	ldrb	r1, [r3, #2]
 800179c:	1813      	adds	r3, r2, r0
 800179e:	460a      	mov	r2, r1
 80017a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80017a4:	4b60      	ldr	r3, [pc, #384]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	897b      	ldrh	r3, [r7, #10]
 80017aa:	1c59      	adds	r1, r3, #1
 80017ac:	8179      	strh	r1, [r7, #10]
 80017ae:	4618      	mov	r0, r3
 80017b0:	4b5e      	ldr	r3, [pc, #376]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 80017b2:	78d9      	ldrb	r1, [r3, #3]
 80017b4:	1813      	adds	r3, r2, r0
 80017b6:	460a      	mov	r2, r1
 80017b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80017bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	897b      	ldrh	r3, [r7, #10]
 80017c2:	1c59      	adds	r1, r3, #1
 80017c4:	8179      	strh	r1, [r7, #10]
 80017c6:	4618      	mov	r0, r3
 80017c8:	4b58      	ldr	r3, [pc, #352]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 80017ca:	7919      	ldrb	r1, [r3, #4]
 80017cc:	1813      	adds	r3, r2, r0
 80017ce:	460a      	mov	r2, r1
 80017d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80017d4:	4b54      	ldr	r3, [pc, #336]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	1c59      	adds	r1, r3, #1
 80017dc:	8179      	strh	r1, [r7, #10]
 80017de:	4618      	mov	r0, r3
 80017e0:	4b52      	ldr	r3, [pc, #328]	@ (800192c <send_DHCP_REQUEST+0x2dc>)
 80017e2:	7959      	ldrb	r1, [r3, #5]
 80017e4:	1813      	adds	r3, r2, r0
 80017e6:	460a      	mov	r2, r1
 80017e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2bff      	cmp	r3, #255	@ 0xff
 80017f0:	f040 8084 	bne.w	80018fc <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80017f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	1c59      	adds	r1, r3, #1
 80017fc:	8179      	strh	r1, [r7, #10]
 80017fe:	4413      	add	r3, r2
 8001800:	2232      	movs	r2, #50	@ 0x32
 8001802:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001806:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	897b      	ldrh	r3, [r7, #10]
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	8179      	strh	r1, [r7, #10]
 8001810:	4413      	add	r3, r2
 8001812:	2204      	movs	r2, #4
 8001814:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	897b      	ldrh	r3, [r7, #10]
 800181e:	1c59      	adds	r1, r3, #1
 8001820:	8179      	strh	r1, [r7, #10]
 8001822:	4618      	mov	r0, r3
 8001824:	4b42      	ldr	r3, [pc, #264]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 8001826:	7819      	ldrb	r1, [r3, #0]
 8001828:	1813      	adds	r3, r2, r0
 800182a:	460a      	mov	r2, r1
 800182c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001830:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	897b      	ldrh	r3, [r7, #10]
 8001836:	1c59      	adds	r1, r3, #1
 8001838:	8179      	strh	r1, [r7, #10]
 800183a:	4618      	mov	r0, r3
 800183c:	4b3c      	ldr	r3, [pc, #240]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 800183e:	7859      	ldrb	r1, [r3, #1]
 8001840:	1813      	adds	r3, r2, r0
 8001842:	460a      	mov	r2, r1
 8001844:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001848:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	897b      	ldrh	r3, [r7, #10]
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	8179      	strh	r1, [r7, #10]
 8001852:	4618      	mov	r0, r3
 8001854:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 8001856:	7899      	ldrb	r1, [r3, #2]
 8001858:	1813      	adds	r3, r2, r0
 800185a:	460a      	mov	r2, r1
 800185c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	897b      	ldrh	r3, [r7, #10]
 8001866:	1c59      	adds	r1, r3, #1
 8001868:	8179      	strh	r1, [r7, #10]
 800186a:	4618      	mov	r0, r3
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <send_DHCP_REQUEST+0x2e0>)
 800186e:	78d9      	ldrb	r1, [r3, #3]
 8001870:	1813      	adds	r3, r2, r0
 8001872:	460a      	mov	r2, r1
 8001874:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001878:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	897b      	ldrh	r3, [r7, #10]
 800187e:	1c59      	adds	r1, r3, #1
 8001880:	8179      	strh	r1, [r7, #10]
 8001882:	4413      	add	r3, r2
 8001884:	2236      	movs	r2, #54	@ 0x36
 8001886:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800188a:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	897b      	ldrh	r3, [r7, #10]
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	8179      	strh	r1, [r7, #10]
 8001894:	4413      	add	r3, r2
 8001896:	2204      	movs	r2, #4
 8001898:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	897b      	ldrh	r3, [r7, #10]
 80018a2:	1c59      	adds	r1, r3, #1
 80018a4:	8179      	strh	r1, [r7, #10]
 80018a6:	4618      	mov	r0, r3
 80018a8:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018aa:	7819      	ldrb	r1, [r3, #0]
 80018ac:	1813      	adds	r3, r2, r0
 80018ae:	460a      	mov	r2, r1
 80018b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80018b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	897b      	ldrh	r3, [r7, #10]
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	8179      	strh	r1, [r7, #10]
 80018be:	4618      	mov	r0, r3
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018c2:	7859      	ldrb	r1, [r3, #1]
 80018c4:	1813      	adds	r3, r2, r0
 80018c6:	460a      	mov	r2, r1
 80018c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80018cc:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	897b      	ldrh	r3, [r7, #10]
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	8179      	strh	r1, [r7, #10]
 80018d6:	4618      	mov	r0, r3
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018da:	7899      	ldrb	r1, [r3, #2]
 80018dc:	1813      	adds	r3, r2, r0
 80018de:	460a      	mov	r2, r1
 80018e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	1c59      	adds	r1, r3, #1
 80018ec:	8179      	strh	r1, [r7, #10]
 80018ee:	4618      	mov	r0, r3
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <send_DHCP_REQUEST+0x2e4>)
 80018f2:	78d9      	ldrb	r1, [r3, #3]
 80018f4:	1813      	adds	r3, r2, r0
 80018f6:	460a      	mov	r2, r1
 80018f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	897b      	ldrh	r3, [r7, #10]
 8001902:	1c59      	adds	r1, r3, #1
 8001904:	8179      	strh	r1, [r7, #10]
 8001906:	4413      	add	r3, r2
 8001908:	220c      	movs	r2, #12
 800190a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <send_DHCP_REQUEST+0x2d8>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	897b      	ldrh	r3, [r7, #10]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	8179      	strh	r1, [r7, #10]
 8001918:	4413      	add	r3, r2
 800191a:	2200      	movs	r2, #0
 800191c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e019      	b.n	800195a <send_DHCP_REQUEST+0x30a>
 8001926:	bf00      	nop
 8001928:	20000288 	.word	0x20000288
 800192c:	2000028c 	.word	0x2000028c
 8001930:	2000026c 	.word	0x2000026c
 8001934:	20000260 	.word	0x20000260
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001938:	4b86      	ldr	r3, [pc, #536]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	897b      	ldrh	r3, [r7, #10]
 800193e:	1c59      	adds	r1, r3, #1
 8001940:	8179      	strh	r1, [r7, #10]
 8001942:	4618      	mov	r0, r3
 8001944:	4984      	ldr	r1, [pc, #528]	@ (8001b58 <send_DHCP_REQUEST+0x508>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	440b      	add	r3, r1
 800194a:	7819      	ldrb	r1, [r3, #0]
 800194c:	1813      	adds	r3, r2, r0
 800194e:	460a      	mov	r2, r1
 8001950:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b58 <send_DHCP_REQUEST+0x508>)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e8      	bne.n	8001938 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001966:	4b7d      	ldr	r3, [pc, #500]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b79      	ldr	r3, [pc, #484]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001970:	681c      	ldr	r4, [r3, #0]
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	1c59      	adds	r1, r3, #1
 8001976:	8179      	strh	r1, [r7, #10]
 8001978:	461d      	mov	r5, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f000 ff24 	bl	80027c8 <NibbleToHex>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	1963      	adds	r3, r4, r5
 8001986:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800198a:	4b74      	ldr	r3, [pc, #464]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 800198c:	78da      	ldrb	r2, [r3, #3]
 800198e:	4b71      	ldr	r3, [pc, #452]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	8179      	strh	r1, [r7, #10]
 8001998:	461d      	mov	r5, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 ff14 	bl	80027c8 <NibbleToHex>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	1963      	adds	r3, r4, r5
 80019a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80019aa:	4b6c      	ldr	r3, [pc, #432]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b68      	ldr	r3, [pc, #416]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 80019b4:	681c      	ldr	r4, [r3, #0]
 80019b6:	897b      	ldrh	r3, [r7, #10]
 80019b8:	1c59      	adds	r1, r3, #1
 80019ba:	8179      	strh	r1, [r7, #10]
 80019bc:	461d      	mov	r5, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 ff02 	bl	80027c8 <NibbleToHex>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	1963      	adds	r3, r4, r5
 80019ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80019ce:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 80019d0:	791a      	ldrb	r2, [r3, #4]
 80019d2:	4b60      	ldr	r3, [pc, #384]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 80019d4:	681c      	ldr	r4, [r3, #0]
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	1c59      	adds	r1, r3, #1
 80019da:	8179      	strh	r1, [r7, #10]
 80019dc:	461d      	mov	r5, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 fef2 	bl	80027c8 <NibbleToHex>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	1963      	adds	r3, r4, r5
 80019ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80019ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 80019f0:	795b      	ldrb	r3, [r3, #5]
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b57      	ldr	r3, [pc, #348]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	897b      	ldrh	r3, [r7, #10]
 80019fc:	1c59      	adds	r1, r3, #1
 80019fe:	8179      	strh	r1, [r7, #10]
 8001a00:	461d      	mov	r5, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f000 fee0 	bl	80027c8 <NibbleToHex>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	1963      	adds	r3, r4, r5
 8001a0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001a12:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <send_DHCP_REQUEST+0x50c>)
 8001a14:	795a      	ldrb	r2, [r3, #5]
 8001a16:	4b4f      	ldr	r3, [pc, #316]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a18:	681c      	ldr	r4, [r3, #0]
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	8179      	strh	r1, [r7, #10]
 8001a20:	461d      	mov	r5, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 fed0 	bl	80027c8 <NibbleToHex>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	1963      	adds	r3, r4, r5
 8001a2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	8978      	ldrh	r0, [r7, #10]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3307      	adds	r3, #7
 8001a40:	1ac3      	subs	r3, r0, r3
 8001a42:	3106      	adds	r1, #6
 8001a44:	b2c9      	uxtb	r1, r1
 8001a46:	4413      	add	r3, r2
 8001a48:	460a      	mov	r2, r1
 8001a4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001a4e:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	897b      	ldrh	r3, [r7, #10]
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	8179      	strh	r1, [r7, #10]
 8001a58:	4413      	add	r3, r2
 8001a5a:	2237      	movs	r2, #55	@ 0x37
 8001a5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001a60:	4b3c      	ldr	r3, [pc, #240]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	897b      	ldrh	r3, [r7, #10]
 8001a66:	1c59      	adds	r1, r3, #1
 8001a68:	8179      	strh	r1, [r7, #10]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001a72:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	1c59      	adds	r1, r3, #1
 8001a7a:	8179      	strh	r1, [r7, #10]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a84:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	1c59      	adds	r1, r3, #1
 8001a8c:	8179      	strh	r1, [r7, #10]
 8001a8e:	4413      	add	r3, r2
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001a96:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	897b      	ldrh	r3, [r7, #10]
 8001a9c:	1c59      	adds	r1, r3, #1
 8001a9e:	8179      	strh	r1, [r7, #10]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2206      	movs	r2, #6
 8001aa4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	897b      	ldrh	r3, [r7, #10]
 8001aae:	1c59      	adds	r1, r3, #1
 8001ab0:	8179      	strh	r1, [r7, #10]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001aba:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	897b      	ldrh	r3, [r7, #10]
 8001ac0:	1c59      	adds	r1, r3, #1
 8001ac2:	8179      	strh	r1, [r7, #10]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	223a      	movs	r2, #58	@ 0x3a
 8001ac8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001acc:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	1c59      	adds	r1, r3, #1
 8001ad4:	8179      	strh	r1, [r7, #10]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	223b      	movs	r2, #59	@ 0x3b
 8001ada:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	1c59      	adds	r1, r3, #1
 8001ae6:	8179      	strh	r1, [r7, #10]
 8001ae8:	4413      	add	r3, r2
 8001aea:	221f      	movs	r2, #31
 8001aec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	8179      	strh	r1, [r7, #10]
 8001afa:	4413      	add	r3, r2
 8001afc:	2221      	movs	r2, #33	@ 0x21
 8001afe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	8179      	strh	r1, [r7, #10]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	22ff      	movs	r2, #255	@ 0xff
 8001b10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e009      	b.n	8001b2e <send_DHCP_REQUEST+0x4de>
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	33ec      	adds	r3, #236	@ 0xec
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001b34:	dbf1      	blt.n	8001b1a <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <send_DHCP_REQUEST+0x510>)
 8001b38:	7818      	ldrb	r0, [r3, #0]
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <send_DHCP_REQUEST+0x504>)
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2243      	movs	r2, #67	@ 0x43
 8001b42:	9200      	str	r2, [sp, #0]
 8001b44:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001b48:	f001 ffd8 	bl	8003afc <sendto>

}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}
 8001b54:	20000288 	.word	0x20000288
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	2000028c 	.word	0x2000028c
 8001b60:	2000025c 	.word	0x2000025c

08001b64 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001b6e:	f7ff fab3 	bl	80010d8 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001b72:	2304      	movs	r3, #4
 8001b74:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001b76:	4b9f      	ldr	r3, [pc, #636]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001b80:	4b9c      	ldr	r3, [pc, #624]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330a      	adds	r3, #10
 8001b86:	3301      	adds	r3, #1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001b8c:	4b99      	ldr	r3, [pc, #612]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	8179      	strh	r1, [r7, #10]
 8001b96:	4413      	add	r3, r2
 8001b98:	2235      	movs	r2, #53	@ 0x35
 8001b9a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001b9e:	4b95      	ldr	r3, [pc, #596]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	8179      	strh	r1, [r7, #10]
 8001ba8:	4413      	add	r3, r2
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001bb0:	4b90      	ldr	r3, [pc, #576]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	8179      	strh	r1, [r7, #10]
 8001bba:	4413      	add	r3, r2
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001bc2:	4b8c      	ldr	r3, [pc, #560]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	1c59      	adds	r1, r3, #1
 8001bca:	8179      	strh	r1, [r7, #10]
 8001bcc:	4413      	add	r3, r2
 8001bce:	223d      	movs	r2, #61	@ 0x3d
 8001bd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001bd4:	4b87      	ldr	r3, [pc, #540]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	1c59      	adds	r1, r3, #1
 8001bdc:	8179      	strh	r1, [r7, #10]
 8001bde:	4413      	add	r3, r2
 8001be0:	2207      	movs	r2, #7
 8001be2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001be6:	4b83      	ldr	r3, [pc, #524]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	1c59      	adds	r1, r3, #1
 8001bee:	8179      	strh	r1, [r7, #10]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	8179      	strh	r1, [r7, #10]
 8001c02:	4618      	mov	r0, r3
 8001c04:	4b7c      	ldr	r3, [pc, #496]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c06:	7819      	ldrb	r1, [r3, #0]
 8001c08:	1813      	adds	r3, r2, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001c10:	4b78      	ldr	r3, [pc, #480]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	8179      	strh	r1, [r7, #10]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4b76      	ldr	r3, [pc, #472]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c1e:	7859      	ldrb	r1, [r3, #1]
 8001c20:	1813      	adds	r3, r2, r0
 8001c22:	460a      	mov	r2, r1
 8001c24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001c28:	4b72      	ldr	r3, [pc, #456]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	8179      	strh	r1, [r7, #10]
 8001c32:	4618      	mov	r0, r3
 8001c34:	4b70      	ldr	r3, [pc, #448]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c36:	7899      	ldrb	r1, [r3, #2]
 8001c38:	1813      	adds	r3, r2, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001c40:	4b6c      	ldr	r3, [pc, #432]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	8179      	strh	r1, [r7, #10]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c4e:	78d9      	ldrb	r1, [r3, #3]
 8001c50:	1813      	adds	r3, r2, r0
 8001c52:	460a      	mov	r2, r1
 8001c54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001c58:	4b66      	ldr	r3, [pc, #408]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	8179      	strh	r1, [r7, #10]
 8001c62:	4618      	mov	r0, r3
 8001c64:	4b64      	ldr	r3, [pc, #400]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c66:	7919      	ldrb	r1, [r3, #4]
 8001c68:	1813      	adds	r3, r2, r0
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001c70:	4b60      	ldr	r3, [pc, #384]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	897b      	ldrh	r3, [r7, #10]
 8001c76:	1c59      	adds	r1, r3, #1
 8001c78:	8179      	strh	r1, [r7, #10]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001df8 <send_DHCP_DECLINE+0x294>)
 8001c7e:	7959      	ldrb	r1, [r3, #5]
 8001c80:	1813      	adds	r3, r2, r0
 8001c82:	460a      	mov	r2, r1
 8001c84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001c88:	4b5a      	ldr	r3, [pc, #360]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	8179      	strh	r1, [r7, #10]
 8001c92:	4413      	add	r3, r2
 8001c94:	2232      	movs	r2, #50	@ 0x32
 8001c96:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001c9a:	4b56      	ldr	r3, [pc, #344]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	897b      	ldrh	r3, [r7, #10]
 8001ca0:	1c59      	adds	r1, r3, #1
 8001ca2:	8179      	strh	r1, [r7, #10]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001cac:	4b51      	ldr	r3, [pc, #324]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	897b      	ldrh	r3, [r7, #10]
 8001cb2:	1c59      	adds	r1, r3, #1
 8001cb4:	8179      	strh	r1, [r7, #10]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4b50      	ldr	r3, [pc, #320]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	1813      	adds	r3, r2, r0
 8001cbe:	460a      	mov	r2, r1
 8001cc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	1c59      	adds	r1, r3, #1
 8001ccc:	8179      	strh	r1, [r7, #10]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001cd2:	7859      	ldrb	r1, [r3, #1]
 8001cd4:	1813      	adds	r3, r2, r0
 8001cd6:	460a      	mov	r2, r1
 8001cd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001cdc:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	897b      	ldrh	r3, [r7, #10]
 8001ce2:	1c59      	adds	r1, r3, #1
 8001ce4:	8179      	strh	r1, [r7, #10]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001cea:	7899      	ldrb	r1, [r3, #2]
 8001cec:	1813      	adds	r3, r2, r0
 8001cee:	460a      	mov	r2, r1
 8001cf0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	8179      	strh	r1, [r7, #10]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <send_DHCP_DECLINE+0x298>)
 8001d02:	78d9      	ldrb	r1, [r3, #3]
 8001d04:	1813      	adds	r3, r2, r0
 8001d06:	460a      	mov	r2, r1
 8001d08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001d0c:	4b39      	ldr	r3, [pc, #228]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	897b      	ldrh	r3, [r7, #10]
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	8179      	strh	r1, [r7, #10]
 8001d16:	4413      	add	r3, r2
 8001d18:	2236      	movs	r2, #54	@ 0x36
 8001d1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	1c59      	adds	r1, r3, #1
 8001d26:	8179      	strh	r1, [r7, #10]
 8001d28:	4413      	add	r3, r2
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001d30:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	1c59      	adds	r1, r3, #1
 8001d38:	8179      	strh	r1, [r7, #10]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d3e:	7819      	ldrb	r1, [r3, #0]
 8001d40:	1813      	adds	r3, r2, r0
 8001d42:	460a      	mov	r2, r1
 8001d44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001d48:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	8179      	strh	r1, [r7, #10]
 8001d52:	4618      	mov	r0, r3
 8001d54:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d56:	7859      	ldrb	r1, [r3, #1]
 8001d58:	1813      	adds	r3, r2, r0
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	897b      	ldrh	r3, [r7, #10]
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	8179      	strh	r1, [r7, #10]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d6e:	7899      	ldrb	r1, [r3, #2]
 8001d70:	1813      	adds	r3, r2, r0
 8001d72:	460a      	mov	r2, r1
 8001d74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	897b      	ldrh	r3, [r7, #10]
 8001d7e:	1c59      	adds	r1, r3, #1
 8001d80:	8179      	strh	r1, [r7, #10]
 8001d82:	4618      	mov	r0, r3
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <send_DHCP_DECLINE+0x29c>)
 8001d86:	78d9      	ldrb	r1, [r3, #3]
 8001d88:	1813      	adds	r3, r2, r0
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	8179      	strh	r1, [r7, #10]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	22ff      	movs	r2, #255	@ 0xff
 8001d9e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e009      	b.n	8001dbc <send_DHCP_DECLINE+0x258>
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	33ec      	adds	r3, #236	@ 0xec
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001dc2:	dbf1      	blt.n	8001da8 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001dc4:	23ff      	movs	r3, #255	@ 0xff
 8001dc6:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001dc8:	23ff      	movs	r3, #255	@ 0xff
 8001dca:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001dcc:	23ff      	movs	r3, #255	@ 0xff
 8001dce:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001dd0:	23ff      	movs	r3, #255	@ 0xff
 8001dd2:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <send_DHCP_DECLINE+0x2a0>)
 8001dd6:	7818      	ldrb	r0, [r3, #0]
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <send_DHCP_DECLINE+0x290>)
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2243      	movs	r2, #67	@ 0x43
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001de6:	f001 fe89 	bl	8003afc <sendto>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000288 	.word	0x20000288
 8001df8:	2000028c 	.word	0x2000028c
 8001dfc:	2000026c 	.word	0x2000026c
 8001e00:	20000260 	.word	0x20000260
 8001e04:	2000025c 	.word	0x2000025c

08001e08 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001e12:	4ba1      	ldr	r3, [pc, #644]	@ (8002098 <parseDHCPMSG+0x290>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fd67 	bl	80048ea <getSn_RX_RSR>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	823b      	strh	r3, [r7, #16]
 8001e20:	8a3b      	ldrh	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d011      	beq.n	8001e4a <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001e26:	4b9c      	ldr	r3, [pc, #624]	@ (8002098 <parseDHCPMSG+0x290>)
 8001e28:	7818      	ldrb	r0, [r3, #0]
 8001e2a:	4b9c      	ldr	r3, [pc, #624]	@ (800209c <parseDHCPMSG+0x294>)
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	1d3c      	adds	r4, r7, #4
 8001e30:	8a3a      	ldrh	r2, [r7, #16]
 8001e32:	1cbb      	adds	r3, r7, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4623      	mov	r3, r4
 8001e38:	f001 ff94 	bl	8003d64 <recvfrom>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	2b43      	cmp	r3, #67	@ 0x43
 8001e44:	f040 81ed 	bne.w	8002222 <parseDHCPMSG+0x41a>
 8001e48:	e001      	b.n	8001e4e <parseDHCPMSG+0x46>
   else return 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e1eb      	b.n	8002226 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001e4e:	4b93      	ldr	r3, [pc, #588]	@ (800209c <parseDHCPMSG+0x294>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	7f1a      	ldrb	r2, [r3, #28]
 8001e54:	4b92      	ldr	r3, [pc, #584]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d124      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
 8001e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800209c <parseDHCPMSG+0x294>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	7f5a      	ldrb	r2, [r3, #29]
 8001e62:	4b8f      	ldr	r3, [pc, #572]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11d      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800209c <parseDHCPMSG+0x294>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	7f9a      	ldrb	r2, [r3, #30]
 8001e70:	4b8b      	ldr	r3, [pc, #556]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e72:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d116      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e78:	4b88      	ldr	r3, [pc, #544]	@ (800209c <parseDHCPMSG+0x294>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	7fda      	ldrb	r2, [r3, #31]
 8001e7e:	4b88      	ldr	r3, [pc, #544]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d10f      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001e86:	4b85      	ldr	r3, [pc, #532]	@ (800209c <parseDHCPMSG+0x294>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001e8e:	4b84      	ldr	r3, [pc, #528]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001e90:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d107      	bne.n	8001ea6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001e96:	4b81      	ldr	r3, [pc, #516]	@ (800209c <parseDHCPMSG+0x294>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001e9e:	4b80      	ldr	r3, [pc, #512]	@ (80020a0 <parseDHCPMSG+0x298>)
 8001ea0:	795b      	ldrb	r3, [r3, #5]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e1bd      	b.n	8002226 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10b      	bne.n	8001eca <parseDHCPMSG+0xc2>
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d107      	bne.n	8001eca <parseDHCPMSG+0xc2>
 8001eba:	4b7a      	ldr	r3, [pc, #488]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ebc:	789b      	ldrb	r3, [r3, #2]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <parseDHCPMSG+0xc2>
 8001ec2:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ec4:	78db      	ldrb	r3, [r3, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d029      	beq.n	8001f1e <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001eca:	793a      	ldrb	r2, [r7, #4]
 8001ecc:	4b75      	ldr	r3, [pc, #468]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10e      	bne.n	8001ef2 <parseDHCPMSG+0xea>
 8001ed4:	797a      	ldrb	r2, [r7, #5]
 8001ed6:	4b73      	ldr	r3, [pc, #460]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ed8:	785b      	ldrb	r3, [r3, #1]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d109      	bne.n	8001ef2 <parseDHCPMSG+0xea>
 8001ede:	79ba      	ldrb	r2, [r7, #6]
 8001ee0:	4b70      	ldr	r3, [pc, #448]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001ee2:	789b      	ldrb	r3, [r3, #2]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d104      	bne.n	8001ef2 <parseDHCPMSG+0xea>
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	4b6e      	ldr	r3, [pc, #440]	@ (80020a4 <parseDHCPMSG+0x29c>)
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d015      	beq.n	8001f1e <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001ef2:	793a      	ldrb	r2, [r7, #4]
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d10e      	bne.n	8001f1a <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001efc:	797a      	ldrb	r2, [r7, #5]
 8001efe:	4b6a      	ldr	r3, [pc, #424]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d109      	bne.n	8001f1a <parseDHCPMSG+0x112>
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	4b67      	ldr	r3, [pc, #412]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d104      	bne.n	8001f1a <parseDHCPMSG+0x112>
 8001f10:	79fa      	ldrb	r2, [r7, #7]
 8001f12:	4b65      	ldr	r3, [pc, #404]	@ (80020a8 <parseDHCPMSG+0x2a0>)
 8001f14:	78db      	ldrb	r3, [r3, #3]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e183      	b.n	8002226 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800209c <parseDHCPMSG+0x294>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	33f0      	adds	r3, #240	@ 0xf0
 8001f28:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001f2a:	8a3b      	ldrh	r3, [r7, #16]
 8001f2c:	3bf0      	subs	r3, #240	@ 0xf0
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4413      	add	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001f34:	e170      	b.n	8002218 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b36      	cmp	r3, #54	@ 0x36
 8001f3c:	dc76      	bgt.n	800202c <parseDHCPMSG+0x224>
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f2c0 815d 	blt.w	80021fe <parseDHCPMSG+0x3f6>
 8001f44:	2b36      	cmp	r3, #54	@ 0x36
 8001f46:	f200 815a 	bhi.w	80021fe <parseDHCPMSG+0x3f6>
 8001f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f50 <parseDHCPMSG+0x148>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08002039 	.word	0x08002039
 8001f54:	08002059 	.word	0x08002059
 8001f58:	080021ff 	.word	0x080021ff
 8001f5c:	080020b1 	.word	0x080020b1
 8001f60:	080021ff 	.word	0x080021ff
 8001f64:	080021ff 	.word	0x080021ff
 8001f68:	080020fd 	.word	0x080020fd
 8001f6c:	080021ff 	.word	0x080021ff
 8001f70:	080021ff 	.word	0x080021ff
 8001f74:	080021ff 	.word	0x080021ff
 8001f78:	080021ff 	.word	0x080021ff
 8001f7c:	080021ff 	.word	0x080021ff
 8001f80:	080021ff 	.word	0x080021ff
 8001f84:	080021ff 	.word	0x080021ff
 8001f88:	080021ff 	.word	0x080021ff
 8001f8c:	080021ff 	.word	0x080021ff
 8001f90:	080021ff 	.word	0x080021ff
 8001f94:	080021ff 	.word	0x080021ff
 8001f98:	080021ff 	.word	0x080021ff
 8001f9c:	080021ff 	.word	0x080021ff
 8001fa0:	080021ff 	.word	0x080021ff
 8001fa4:	080021ff 	.word	0x080021ff
 8001fa8:	080021ff 	.word	0x080021ff
 8001fac:	080021ff 	.word	0x080021ff
 8001fb0:	080021ff 	.word	0x080021ff
 8001fb4:	080021ff 	.word	0x080021ff
 8001fb8:	080021ff 	.word	0x080021ff
 8001fbc:	080021ff 	.word	0x080021ff
 8001fc0:	080021ff 	.word	0x080021ff
 8001fc4:	080021ff 	.word	0x080021ff
 8001fc8:	080021ff 	.word	0x080021ff
 8001fcc:	080021ff 	.word	0x080021ff
 8001fd0:	080021ff 	.word	0x080021ff
 8001fd4:	080021ff 	.word	0x080021ff
 8001fd8:	080021ff 	.word	0x080021ff
 8001fdc:	080021ff 	.word	0x080021ff
 8001fe0:	080021ff 	.word	0x080021ff
 8001fe4:	080021ff 	.word	0x080021ff
 8001fe8:	080021ff 	.word	0x080021ff
 8001fec:	080021ff 	.word	0x080021ff
 8001ff0:	080021ff 	.word	0x080021ff
 8001ff4:	080021ff 	.word	0x080021ff
 8001ff8:	080021ff 	.word	0x080021ff
 8001ffc:	080021ff 	.word	0x080021ff
 8002000:	080021ff 	.word	0x080021ff
 8002004:	080021ff 	.word	0x080021ff
 8002008:	080021ff 	.word	0x080021ff
 800200c:	080021ff 	.word	0x080021ff
 8002010:	080021ff 	.word	0x080021ff
 8002014:	080021ff 	.word	0x080021ff
 8002018:	080021ff 	.word	0x080021ff
 800201c:	08002149 	.word	0x08002149
 8002020:	080021ff 	.word	0x080021ff
 8002024:	08002041 	.word	0x08002041
 8002028:	080021a5 	.word	0x080021a5
 800202c:	2bff      	cmp	r3, #255	@ 0xff
 800202e:	f040 80e6 	bne.w	80021fe <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	617b      	str	r3, [r7, #20]
   				break;
 8002036:	e0ef      	b.n	8002218 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
   				break;
 800203e:	e0eb      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
   				p++;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
   				type = *p++;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	617a      	str	r2, [r7, #20]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	74fb      	strb	r3, [r7, #19]
   				break;
 8002056:	e0df      	b.n	8002218 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
   				p++;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	617a      	str	r2, [r7, #20]
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	4b0f      	ldr	r3, [pc, #60]	@ (80020ac <parseDHCPMSG+0x2a4>)
 800206e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	617a      	str	r2, [r7, #20]
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <parseDHCPMSG+0x2a4>)
 800207a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	617a      	str	r2, [r7, #20]
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <parseDHCPMSG+0x2a4>)
 8002086:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	617a      	str	r2, [r7, #20]
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <parseDHCPMSG+0x2a4>)
 8002092:	70da      	strb	r2, [r3, #3]
   				break;
 8002094:	e0c0      	b.n	8002218 <parseDHCPMSG+0x410>
 8002096:	bf00      	nop
 8002098:	2000025c 	.word	0x2000025c
 800209c:	20000288 	.word	0x20000288
 80020a0:	2000028c 	.word	0x2000028c
 80020a4:	20000260 	.word	0x20000260
 80020a8:	20000264 	.word	0x20000264
 80020ac:	20000274 	.word	0x20000274
   			case routersOnSubnet :
   				p++;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	617a      	str	r2, [r7, #20]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	617a      	str	r2, [r7, #20]
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <parseDHCPMSG+0x428>)
 80020ca:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	617a      	str	r2, [r7, #20]
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	4b56      	ldr	r3, [pc, #344]	@ (8002230 <parseDHCPMSG+0x428>)
 80020d6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	617a      	str	r2, [r7, #20]
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <parseDHCPMSG+0x428>)
 80020e2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	617a      	str	r2, [r7, #20]
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <parseDHCPMSG+0x428>)
 80020ee:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	3b04      	subs	r3, #4
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4413      	add	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
   				break;
 80020fa:	e08d      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	617a      	str	r2, [r7, #20]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	617a      	str	r2, [r7, #20]
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <parseDHCPMSG+0x42c>)
 8002116:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	617a      	str	r2, [r7, #20]
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <parseDHCPMSG+0x42c>)
 8002122:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	617a      	str	r2, [r7, #20]
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <parseDHCPMSG+0x42c>)
 800212e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	617a      	str	r2, [r7, #20]
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b3e      	ldr	r3, [pc, #248]	@ (8002234 <parseDHCPMSG+0x42c>)
 800213a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	3b04      	subs	r3, #4
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4413      	add	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
   				break;
 8002146:	e067      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	617a      	str	r2, [r7, #20]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	617a      	str	r2, [r7, #20]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b35      	ldr	r3, [pc, #212]	@ (8002238 <parseDHCPMSG+0x430>)
 8002164:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002166:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <parseDHCPMSG+0x430>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	021a      	lsls	r2, r3, #8
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	6179      	str	r1, [r7, #20]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4413      	add	r3, r2
 8002176:	4a30      	ldr	r2, [pc, #192]	@ (8002238 <parseDHCPMSG+0x430>)
 8002178:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800217a:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <parseDHCPMSG+0x430>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	021a      	lsls	r2, r3, #8
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	1c59      	adds	r1, r3, #1
 8002184:	6179      	str	r1, [r7, #20]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4413      	add	r3, r2
 800218a:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <parseDHCPMSG+0x430>)
 800218c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800218e:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <parseDHCPMSG+0x430>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	021a      	lsls	r2, r3, #8
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	6179      	str	r1, [r7, #20]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4413      	add	r3, r2
 800219e:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <parseDHCPMSG+0x430>)
 80021a0:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 80021a2:	e039      	b.n	8002218 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	617a      	str	r2, [r7, #20]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	617a      	str	r2, [r7, #20]
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <parseDHCPMSG+0x434>)
 80021be:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	617a      	str	r2, [r7, #20]
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <parseDHCPMSG+0x434>)
 80021ca:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	617a      	str	r2, [r7, #20]
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <parseDHCPMSG+0x434>)
 80021d6:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	617a      	str	r2, [r7, #20]
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <parseDHCPMSG+0x434>)
 80021e2:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80021e4:	793a      	ldrb	r2, [r7, #4]
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <parseDHCPMSG+0x438>)
 80021e8:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80021ea:	797a      	ldrb	r2, [r7, #5]
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <parseDHCPMSG+0x438>)
 80021ee:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80021f0:	79ba      	ldrb	r2, [r7, #6]
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <parseDHCPMSG+0x438>)
 80021f4:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80021f6:	79fa      	ldrb	r2, [r7, #7]
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <parseDHCPMSG+0x438>)
 80021fa:	70da      	strb	r2, [r3, #3]
   				break;
 80021fc:	e00c      	b.n	8002218 <parseDHCPMSG+0x410>
   			default :
   				p++;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	617a      	str	r2, [r7, #20]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
   				break;
 8002216:	bf00      	nop
		while ( p < e ) {
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	f4ff ae8a 	bcc.w	8001f36 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8002222:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	20000270 	.word	0x20000270
 8002234:	20000278 	.word	0x20000278
 8002238:	20000000 	.word	0x20000000
 800223c:	20000260 	.word	0x20000260
 8002240:	20000264 	.word	0x20000264

08002244 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800224a:	4b7f      	ldr	r3, [pc, #508]	@ (8002448 <DHCP_run+0x204>)
 800224c:	f993 3000 	ldrsb.w	r3, [r3]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d101      	bne.n	8002258 <DHCP_run+0x14>
 8002254:	2305      	movs	r3, #5
 8002256:	e0f3      	b.n	8002440 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002258:	4b7c      	ldr	r3, [pc, #496]	@ (800244c <DHCP_run+0x208>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3301      	adds	r3, #1
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002266:	4618      	mov	r0, r3
 8002268:	f002 f99c 	bl	80045a4 <WIZCHIP_READ>
 800226c:	4603      	mov	r3, r0
 800226e:	2b22      	cmp	r3, #34	@ 0x22
 8002270:	d006      	beq.n	8002280 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8002272:	4b76      	ldr	r3, [pc, #472]	@ (800244c <DHCP_run+0x208>)
 8002274:	7818      	ldrb	r0, [r3, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	2244      	movs	r2, #68	@ 0x44
 800227a:	2102      	movs	r1, #2
 800227c:	f001 f834 	bl	80032e8 <socket>

	ret = DHCP_RUNNING;
 8002280:	2301      	movs	r3, #1
 8002282:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002284:	f7ff fdc0 	bl	8001e08 <parseDHCPMSG>
 8002288:	4603      	mov	r3, r0
 800228a:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 800228c:	4b6e      	ldr	r3, [pc, #440]	@ (8002448 <DHCP_run+0x204>)
 800228e:	f993 3000 	ldrsb.w	r3, [r3]
 8002292:	2b04      	cmp	r3, #4
 8002294:	f200 80d0 	bhi.w	8002438 <DHCP_run+0x1f4>
 8002298:	a201      	add	r2, pc, #4	@ (adr r2, 80022a0 <DHCP_run+0x5c>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022b5 	.word	0x080022b5
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	0800231d 	.word	0x0800231d
 80022ac:	0800236d 	.word	0x0800236d
 80022b0:	080023c7 	.word	0x080023c7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80022b4:	4b66      	ldr	r3, [pc, #408]	@ (8002450 <DHCP_run+0x20c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80022ba:	4b65      	ldr	r3, [pc, #404]	@ (8002450 <DHCP_run+0x20c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80022c0:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <DHCP_run+0x20c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80022c6:	4b62      	ldr	r3, [pc, #392]	@ (8002450 <DHCP_run+0x20c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80022cc:	f7fe fffa 	bl	80012c4 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80022d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002448 <DHCP_run+0x204>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
   		break;
 80022d6:	e0b2      	b.n	800243e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80022d8:	79bb      	ldrb	r3, [r7, #6]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d119      	bne.n	8002312 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80022de:	4b5d      	ldr	r3, [pc, #372]	@ (8002454 <DHCP_run+0x210>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	7c1a      	ldrb	r2, [r3, #16]
 80022e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <DHCP_run+0x20c>)
 80022e6:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80022e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002454 <DHCP_run+0x210>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	7c5a      	ldrb	r2, [r3, #17]
 80022ee:	4b58      	ldr	r3, [pc, #352]	@ (8002450 <DHCP_run+0x20c>)
 80022f0:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80022f2:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <DHCP_run+0x210>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	7c9a      	ldrb	r2, [r3, #18]
 80022f8:	4b55      	ldr	r3, [pc, #340]	@ (8002450 <DHCP_run+0x20c>)
 80022fa:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80022fc:	4b55      	ldr	r3, [pc, #340]	@ (8002454 <DHCP_run+0x210>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	7cda      	ldrb	r2, [r3, #19]
 8002302:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <DHCP_run+0x20c>)
 8002304:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002306:	f7ff f9a3 	bl	8001650 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800230a:	4b4f      	ldr	r3, [pc, #316]	@ (8002448 <DHCP_run+0x204>)
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002310:	e095      	b.n	800243e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002312:	f000 f8b1 	bl	8002478 <check_DHCP_timeout>
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
         break;
 800231a:	e090      	b.n	800243e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d116      	bne.n	8002350 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002322:	f000 f909 	bl	8002538 <check_DHCP_leasedIP>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800232c:	4b4a      	ldr	r3, [pc, #296]	@ (8002458 <DHCP_run+0x214>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4798      	blx	r3
					reset_DHCP_timeout();
 8002332:	f000 f9d3 	bl	80026dc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002336:	4b44      	ldr	r3, [pc, #272]	@ (8002448 <DHCP_run+0x204>)
 8002338:	2203      	movs	r2, #3
 800233a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800233c:	e07f      	b.n	800243e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800233e:	f000 f9cd 	bl	80026dc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002342:	4b46      	ldr	r3, [pc, #280]	@ (800245c <DHCP_run+0x218>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002348:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <DHCP_run+0x204>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
		break;
 800234e:	e076      	b.n	800243e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d105      	bne.n	8002362 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002356:	f000 f9c1 	bl	80026dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800235a:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <DHCP_run+0x204>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
		break;
 8002360:	e06d      	b.n	800243e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002362:	f000 f889 	bl	8002478 <check_DHCP_timeout>
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
		break;
 800236a:	e068      	b.n	800243e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800236c:	2304      	movs	r3, #4
 800236e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002370:	4b3b      	ldr	r3, [pc, #236]	@ (8002460 <DHCP_run+0x21c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002378:	d060      	beq.n	800243c <DHCP_run+0x1f8>
 800237a:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <DHCP_run+0x21c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	085a      	lsrs	r2, r3, #1
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <DHCP_run+0x220>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d259      	bcs.n	800243c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800238c:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <DHCP_run+0x20c>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b35      	ldr	r3, [pc, #212]	@ (8002468 <DHCP_run+0x224>)
 8002392:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002394:	4b2e      	ldr	r3, [pc, #184]	@ (8002450 <DHCP_run+0x20c>)
 8002396:	785a      	ldrb	r2, [r3, #1]
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <DHCP_run+0x224>)
 800239a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800239c:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <DHCP_run+0x20c>)
 800239e:	789a      	ldrb	r2, [r3, #2]
 80023a0:	4b31      	ldr	r3, [pc, #196]	@ (8002468 <DHCP_run+0x224>)
 80023a2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <DHCP_run+0x20c>)
 80023a6:	78da      	ldrb	r2, [r3, #3]
 80023a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <DHCP_run+0x224>)
 80023aa:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80023ac:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <DHCP_run+0x228>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a2e      	ldr	r2, [pc, #184]	@ (800246c <DHCP_run+0x228>)
 80023b4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80023b6:	f7ff f94b 	bl	8001650 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80023ba:	f000 f98f 	bl	80026dc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80023be:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <DHCP_run+0x204>)
 80023c0:	2204      	movs	r2, #4
 80023c2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80023c4:	e03a      	b.n	800243c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80023c6:	2304      	movs	r3, #4
 80023c8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80023ca:	79bb      	ldrb	r3, [r7, #6]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d125      	bne.n	800241c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80023d0:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <DHCP_run+0x22c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80023d6:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <DHCP_run+0x224>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <DHCP_run+0x20c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d111      	bne.n	8002406 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <DHCP_run+0x224>)
 80023e4:	785a      	ldrb	r2, [r3, #1]
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <DHCP_run+0x20c>)
 80023e8:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d10b      	bne.n	8002406 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <DHCP_run+0x224>)
 80023f0:	789a      	ldrb	r2, [r3, #2]
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <DHCP_run+0x20c>)
 80023f4:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d105      	bne.n	8002406 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80023fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <DHCP_run+0x224>)
 80023fc:	78da      	ldrb	r2, [r3, #3]
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <DHCP_run+0x20c>)
 8002400:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d004      	beq.n	8002410 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002406:	2303      	movs	r3, #3
 8002408:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <DHCP_run+0x230>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002410:	f000 f964 	bl	80026dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <DHCP_run+0x204>)
 8002416:	2203      	movs	r2, #3
 8002418:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800241a:	e010      	b.n	800243e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d105      	bne.n	800242e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002422:	f000 f95b 	bl	80026dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <DHCP_run+0x204>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
	   	break;
 800242c:	e007      	b.n	800243e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800242e:	f000 f823 	bl	8002478 <check_DHCP_timeout>
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002436:	e002      	b.n	800243e <DHCP_run+0x1fa>
		default :
   		break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <DHCP_run+0x1fa>
		break;
 800243c:	bf00      	nop
	}

	return ret;
 800243e:	79fb      	ldrb	r3, [r7, #7]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000027c 	.word	0x2000027c
 800244c:	2000025c 	.word	0x2000025c
 8002450:	2000026c 	.word	0x2000026c
 8002454:	20000288 	.word	0x20000288
 8002458:	20000010 	.word	0x20000010
 800245c:	20000018 	.word	0x20000018
 8002460:	20000000 	.word	0x20000000
 8002464:	20000280 	.word	0x20000280
 8002468:	20000268 	.word	0x20000268
 800246c:	20000284 	.word	0x20000284
 8002470:	2000027d 	.word	0x2000027d
 8002474:	20000014 	.word	0x20000014

08002478 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800247e:	2301      	movs	r3, #1
 8002480:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002482:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <check_DHCP_timeout+0xb0>)
 8002484:	f993 3000 	ldrsb.w	r3, [r3]
 8002488:	2b01      	cmp	r3, #1
 800248a:	dc2d      	bgt.n	80024e8 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800248c:	4b27      	ldr	r3, [pc, #156]	@ (800252c <check_DHCP_timeout+0xb4>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <check_DHCP_timeout+0xb8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d242      	bcs.n	800251e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002498:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <check_DHCP_timeout+0xbc>)
 800249a:	f993 3000 	ldrsb.w	r3, [r3]
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d00c      	beq.n	80024bc <check_DHCP_timeout+0x44>
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	dc0d      	bgt.n	80024c2 <check_DHCP_timeout+0x4a>
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d002      	beq.n	80024b0 <check_DHCP_timeout+0x38>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80024ae:	e008      	b.n	80024c2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80024b0:	f7fe ff08 	bl	80012c4 <send_DHCP_DISCOVER>
				break;
 80024b4:	e006      	b.n	80024c4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80024b6:	f7ff f8cb 	bl	8001650 <send_DHCP_REQUEST>
				break;
 80024ba:	e003      	b.n	80024c4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80024bc:	f7ff f8c8 	bl	8001650 <send_DHCP_REQUEST>
				break;
 80024c0:	e000      	b.n	80024c4 <check_DHCP_timeout+0x4c>
				break;
 80024c2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <check_DHCP_timeout+0xb8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <check_DHCP_timeout+0xb8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330a      	adds	r3, #10
 80024d0:	4a16      	ldr	r2, [pc, #88]	@ (800252c <check_DHCP_timeout+0xb4>)
 80024d2:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <check_DHCP_timeout+0xb0>)
 80024d6:	f993 3000 	ldrsb.w	r3, [r3]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	b25a      	sxtb	r2, r3
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <check_DHCP_timeout+0xb0>)
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e01a      	b.n	800251e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <check_DHCP_timeout+0xbc>)
 80024ea:	f993 3000 	ldrsb.w	r3, [r3]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <check_DHCP_timeout+0x94>
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	dc10      	bgt.n	8002518 <check_DHCP_timeout+0xa0>
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d002      	beq.n	8002500 <check_DHCP_timeout+0x88>
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d006      	beq.n	800250c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80024fe:	e00b      	b.n	8002518 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <check_DHCP_timeout+0xbc>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002506:	2300      	movs	r3, #0
 8002508:	71fb      	strb	r3, [r7, #7]
				break;
 800250a:	e006      	b.n	800251a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800250c:	f7fe feda 	bl	80012c4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <check_DHCP_timeout+0xbc>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
				break;
 8002516:	e000      	b.n	800251a <check_DHCP_timeout+0xa2>
				break;
 8002518:	bf00      	nop
		}
		reset_DHCP_timeout();
 800251a:	f000 f8df 	bl	80026dc <reset_DHCP_timeout>
	}
	return ret;
 800251e:	79fb      	ldrb	r3, [r7, #7]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000027d 	.word	0x2000027d
 800252c:	20000004 	.word	0x20000004
 8002530:	20000280 	.word	0x20000280
 8002534:	2000027c 	.word	0x2000027c

08002538 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800253e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002542:	f002 f82f 	bl	80045a4 <WIZCHIP_READ>
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800254a:	2103      	movs	r1, #3
 800254c:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002550:	f002 f874 	bl	800463c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <check_DHCP_leasedIP+0x6c>)
 8002556:	7818      	ldrb	r0, [r3, #0]
 8002558:	f241 3388 	movw	r3, #5000	@ 0x1388
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <check_DHCP_leasedIP+0x70>)
 8002560:	2211      	movs	r2, #17
 8002562:	4912      	ldr	r1, [pc, #72]	@ (80025ac <check_DHCP_leasedIP+0x74>)
 8002564:	f001 faca 	bl	8003afc <sendto>
 8002568:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002572:	f002 f863 	bl	800463c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f113 0f0d 	cmn.w	r3, #13
 800257c:	d101      	bne.n	8002582 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800257e:	2301      	movs	r3, #1
 8002580:	e00c      	b.n	800259c <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002582:	f7ff faef 	bl	8001b64 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <check_DHCP_leasedIP+0x78>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 800258c:	bf00      	nop
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <check_DHCP_leasedIP+0x78>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d9f9      	bls.n	800258e <check_DHCP_leasedIP+0x56>

		return 0;
 800259a:	2300      	movs	r3, #0
	}
}	
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2000025c 	.word	0x2000025c
 80025a8:	2000026c 	.word	0x2000026c
 80025ac:	0800dca8 	.word	0x0800dca8
 80025b0:	20000280 	.word	0x20000280

080025b4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80025c4:	2206      	movs	r2, #6
 80025c6:	493f      	ldr	r1, [pc, #252]	@ (80026c4 <DHCP_init+0x110>)
 80025c8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80025cc:	f002 f884 	bl	80046d8 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80025d0:	4b3c      	ldr	r3, [pc, #240]	@ (80026c4 <DHCP_init+0x110>)
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <DHCP_init+0x110>)
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b39      	ldr	r3, [pc, #228]	@ (80026c4 <DHCP_init+0x110>)
 80025de:	789b      	ldrb	r3, [r3, #2]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b37      	ldr	r3, [pc, #220]	@ (80026c4 <DHCP_init+0x110>)
 80025e6:	78db      	ldrb	r3, [r3, #3]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <DHCP_init+0x110>)
 80025ee:	791b      	ldrb	r3, [r3, #4]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <DHCP_init+0x110>)
 80025f6:	795b      	ldrb	r3, [r3, #5]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d117      	bne.n	8002630 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002600:	4b30      	ldr	r3, [pc, #192]	@ (80026c4 <DHCP_init+0x110>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002606:	4b2f      	ldr	r3, [pc, #188]	@ (80026c4 <DHCP_init+0x110>)
 8002608:	2208      	movs	r2, #8
 800260a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800260c:	4b2d      	ldr	r3, [pc, #180]	@ (80026c4 <DHCP_init+0x110>)
 800260e:	22dc      	movs	r2, #220	@ 0xdc
 8002610:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002612:	4b2c      	ldr	r3, [pc, #176]	@ (80026c4 <DHCP_init+0x110>)
 8002614:	2200      	movs	r2, #0
 8002616:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002618:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <DHCP_init+0x110>)
 800261a:	2200      	movs	r2, #0
 800261c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800261e:	4b29      	ldr	r3, [pc, #164]	@ (80026c4 <DHCP_init+0x110>)
 8002620:	2200      	movs	r2, #0
 8002622:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002624:	2206      	movs	r2, #6
 8002626:	4927      	ldr	r1, [pc, #156]	@ (80026c4 <DHCP_init+0x110>)
 8002628:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800262c:	f002 f8b4 	bl	8004798 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002630:	4a25      	ldr	r2, [pc, #148]	@ (80026c8 <DHCP_init+0x114>)
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002636:	4a25      	ldr	r2, [pc, #148]	@ (80026cc <DHCP_init+0x118>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800263c:	4b24      	ldr	r3, [pc, #144]	@ (80026d0 <DHCP_init+0x11c>)
 800263e:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <DHCP_init+0x120>)
 8002640:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002642:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <DHCP_init+0x110>)
 8002644:	78db      	ldrb	r3, [r3, #3]
 8002646:	461a      	mov	r2, r3
 8002648:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <DHCP_init+0x11c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4413      	add	r3, r2
 800264e:	4a20      	ldr	r2, [pc, #128]	@ (80026d0 <DHCP_init+0x11c>)
 8002650:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002652:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <DHCP_init+0x110>)
 8002654:	791b      	ldrb	r3, [r3, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <DHCP_init+0x11c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4413      	add	r3, r2
 800265e:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <DHCP_init+0x11c>)
 8002660:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002662:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <DHCP_init+0x110>)
 8002664:	795b      	ldrb	r3, [r3, #5]
 8002666:	461a      	mov	r2, r3
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <DHCP_init+0x11c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <DHCP_init+0x11c>)
 8002670:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <DHCP_init+0x110>)
 8002674:	78da      	ldrb	r2, [r3, #3]
 8002676:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <DHCP_init+0x110>)
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	4053      	eors	r3, r2
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <DHCP_init+0x110>)
 8002680:	795b      	ldrb	r3, [r3, #5]
 8002682:	4053      	eors	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <DHCP_init+0x11c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4413      	add	r3, r2
 800268e:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <DHCP_init+0x11c>)
 8002690:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2204      	movs	r2, #4
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800269e:	f002 f87b 	bl	8004798 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	2204      	movs	r2, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80026ae:	f002 f873 	bl	8004798 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80026b2:	f000 f813 	bl	80026dc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <DHCP_init+0x124>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	2000028c 	.word	0x2000028c
 80026c8:	2000025c 	.word	0x2000025c
 80026cc:	20000288 	.word	0x20000288
 80026d0:	20000284 	.word	0x20000284
 80026d4:	12345678 	.word	0x12345678
 80026d8:	2000027c 	.word	0x2000027c

080026dc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <reset_DHCP_timeout+0x20>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <reset_DHCP_timeout+0x24>)
 80026e8:	220a      	movs	r2, #10
 80026ea:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <reset_DHCP_timeout+0x28>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	20000280 	.word	0x20000280
 8002700:	20000004 	.word	0x20000004
 8002704:	2000027d 	.word	0x2000027d

08002708 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <getIPfromDHCP+0x3c>)
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3301      	adds	r3, #1
 800271c:	4a09      	ldr	r2, [pc, #36]	@ (8002744 <getIPfromDHCP+0x3c>)
 800271e:	7852      	ldrb	r2, [r2, #1]
 8002720:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3302      	adds	r3, #2
 8002726:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <getIPfromDHCP+0x3c>)
 8002728:	7892      	ldrb	r2, [r2, #2]
 800272a:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3303      	adds	r3, #3
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <getIPfromDHCP+0x3c>)
 8002732:	78d2      	ldrb	r2, [r2, #3]
 8002734:	701a      	strb	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000026c 	.word	0x2000026c

08002748 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <getGWfromDHCP+0x3c>)
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <getGWfromDHCP+0x3c>)
 800275e:	7852      	ldrb	r2, [r2, #1]
 8002760:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3302      	adds	r3, #2
 8002766:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <getGWfromDHCP+0x3c>)
 8002768:	7892      	ldrb	r2, [r2, #2]
 800276a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3303      	adds	r3, #3
 8002770:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <getGWfromDHCP+0x3c>)
 8002772:	78d2      	ldrb	r2, [r2, #3]
 8002774:	701a      	strb	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000270 	.word	0x20000270

08002788 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <getSNfromDHCP+0x3c>)
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3301      	adds	r3, #1
 800279c:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <getSNfromDHCP+0x3c>)
 800279e:	7852      	ldrb	r2, [r2, #1]
 80027a0:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3302      	adds	r3, #2
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <getSNfromDHCP+0x3c>)
 80027a8:	7892      	ldrb	r2, [r2, #2]
 80027aa:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3303      	adds	r3, #3
 80027b0:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <getSNfromDHCP+0x3c>)
 80027b2:	78d2      	ldrb	r2, [r2, #3]
 80027b4:	701a      	strb	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000274 	.word	0x20000274

080027c8 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d803      	bhi.n	80027e8 <NibbleToHex+0x20>
    return nibble + '0';
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	3330      	adds	r3, #48	@ 0x30
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e002      	b.n	80027ee <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	3337      	adds	r3, #55	@ 0x37
 80027ec:	b2db      	uxtb	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <wizchipSelect>:
uint8_t RX_BUF[1024];
uint8_t TX_BUF[1024];
wiz_NetInfo net_info = { .mac = { 0x0A, 0xAD, 0xBE, 0xEF, 0xFE, 0xE2 }, .dhcp =
		NETINFO_DHCP };

void wizchipSelect(void) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2110      	movs	r1, #16
 8002804:	4802      	ldr	r0, [pc, #8]	@ (8002810 <wizchipSelect+0x14>)
 8002806:	f002 ffed 	bl	80057e4 <HAL_GPIO_WritePin>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40020000 	.word	0x40020000

08002814 <wizchipUnselect>:

void wizchipUnselect(void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002818:	2201      	movs	r2, #1
 800281a:	2110      	movs	r1, #16
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <wizchipUnselect+0x14>)
 800281e:	f002 ffe1 	bl	80057e4 <HAL_GPIO_WritePin>
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40020000 	.word	0x40020000

0800282c <wizchipReadBurst>:

void wizchipReadBurst(uint8_t *buff, uint16_t len) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8002838:	887a      	ldrh	r2, [r7, #2]
 800283a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4803      	ldr	r0, [pc, #12]	@ (8002850 <wizchipReadBurst+0x24>)
 8002842:	f003 fe65 	bl	8006510 <HAL_SPI_Receive>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000694 	.word	0x20000694

08002854 <wizchipWriteBurst>:

void wizchipWriteBurst(uint8_t *buff, uint16_t len) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4803      	ldr	r0, [pc, #12]	@ (8002878 <wizchipWriteBurst+0x24>)
 800286a:	f003 fd0e 	bl	800628a <HAL_SPI_Transmit>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000694 	.word	0x20000694

0800287c <wizchipReadByte>:

uint8_t wizchipReadByte(void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchipReadBurst(&byte, sizeof(byte));
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffd0 	bl	800282c <wizchipReadBurst>
	return byte;
 800288c:	79fb      	ldrb	r3, [r7, #7]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <wizchipWriteByte>:

void wizchipWriteByte(uint8_t byte) {
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
	wizchipWriteBurst(&byte, sizeof(byte));
 80028a0:	1dfb      	adds	r3, r7, #7
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ffd5 	bl	8002854 <wizchipWriteBurst>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <Callback_IPAssigned>:

volatile uint8_t ip_assigned = false;

void Callback_IPAssigned(void) {
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	ip_assigned = true;
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <Callback_IPAssigned+0x14>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000292 	.word	0x20000292

080028cc <Callback_IPConflict>:

void Callback_IPConflict(void) {
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
	ip_assigned = false;
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <Callback_IPConflict+0x14>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	20000292 	.word	0x20000292

080028e4 <ETH_Init>:

uint8_t dhcp_buffer[1024];
uint8_t dns_buffer[1024];

uint8_t ETH_Init() {
 80028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e6:	b093      	sub	sp, #76	@ 0x4c
 80028e8:	af0a      	add	r7, sp, #40	@ 0x28
	// Register W5500 callbacks
	reg_wizchip_cs_cbfunc(wizchipSelect, wizchipUnselect);
 80028ea:	4961      	ldr	r1, [pc, #388]	@ (8002a70 <ETH_Init+0x18c>)
 80028ec:	4861      	ldr	r0, [pc, #388]	@ (8002a74 <ETH_Init+0x190>)
 80028ee:	f002 f9a3 	bl	8004c38 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchipReadByte, wizchipWriteByte);
 80028f2:	4961      	ldr	r1, [pc, #388]	@ (8002a78 <ETH_Init+0x194>)
 80028f4:	4861      	ldr	r0, [pc, #388]	@ (8002a7c <ETH_Init+0x198>)
 80028f6:	f002 f9c5 	bl	8004c84 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchipReadBurst, wizchipWriteBurst);
 80028fa:	4961      	ldr	r1, [pc, #388]	@ (8002a80 <ETH_Init+0x19c>)
 80028fc:	4861      	ldr	r0, [pc, #388]	@ (8002a84 <ETH_Init+0x1a0>)
 80028fe:	f002 f9ed 	bl	8004cdc <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 8002902:	4a61      	ldr	r2, [pc, #388]	@ (8002a88 <ETH_Init+0x1a4>)
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290c:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002910:	f107 0214 	add.w	r2, r7, #20
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fa56 	bl	8004dcc <wizchip_init>

	// set MAC address before using DHCP
	setSHAR(net_info.mac);
 8002920:	2206      	movs	r2, #6
 8002922:	495a      	ldr	r1, [pc, #360]	@ (8002a8c <ETH_Init+0x1a8>)
 8002924:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002928:	f001 ff36 	bl	8004798 <WIZCHIP_WRITE_BUF>
	DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800292c:	4958      	ldr	r1, [pc, #352]	@ (8002a90 <ETH_Init+0x1ac>)
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff fe40 	bl	80025b4 <DHCP_init>

	reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned,
 8002934:	4a57      	ldr	r2, [pc, #348]	@ (8002a94 <ETH_Init+0x1b0>)
 8002936:	4958      	ldr	r1, [pc, #352]	@ (8002a98 <ETH_Init+0x1b4>)
 8002938:	4857      	ldr	r0, [pc, #348]	@ (8002a98 <ETH_Init+0x1b4>)
 800293a:	f7fe fb99 	bl	8001070 <reg_dhcp_cbfunc>
			Callback_IPConflict);

	sprintf(msgbuf, "Obtaining network configuration from DHCP ... \r\n");
 800293e:	4957      	ldr	r1, [pc, #348]	@ (8002a9c <ETH_Init+0x1b8>)
 8002940:	4857      	ldr	r0, [pc, #348]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002942:	f007 f95d 	bl	8009c00 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msgbuf, strlen(msgbuf), 100);
 8002946:	4856      	ldr	r0, [pc, #344]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002948:	f7fd fc92 	bl	8000270 <strlen>
 800294c:	4603      	mov	r3, r0
 800294e:	b29a      	uxth	r2, r3
 8002950:	2364      	movs	r3, #100	@ 0x64
 8002952:	4953      	ldr	r1, [pc, #332]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002954:	4853      	ldr	r0, [pc, #332]	@ (8002aa4 <ETH_Init+0x1c0>)
 8002956:	f005 f983 	bl	8007c60 <HAL_UART_Transmit>
	uint32_t ctr = 100;
 800295a:	2364      	movs	r3, #100	@ 0x64
 800295c:	61fb      	str	r3, [r7, #28]
	while ((!ip_assigned) && ctr) {
 800295e:	e007      	b.n	8002970 <ETH_Init+0x8c>
		DHCP_run();
 8002960:	f7ff fc70 	bl	8002244 <DHCP_run>
		--ctr;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	3b01      	subs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
		HAL_Delay(50);
 800296a:	2032      	movs	r0, #50	@ 0x32
 800296c:	f002 fbd6 	bl	800511c <HAL_Delay>
	while ((!ip_assigned) && ctr) {
 8002970:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa8 <ETH_Init+0x1c4>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <ETH_Init+0x9c>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ef      	bne.n	8002960 <ETH_Init+0x7c>
	}
	if (!ip_assigned) {
 8002980:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <ETH_Init+0x1c4>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <ETH_Init+0xc6>
		sprintf(msgbuf, "Failed to obtain IP, returning ... \r\n");
 800298a:	4948      	ldr	r1, [pc, #288]	@ (8002aac <ETH_Init+0x1c8>)
 800298c:	4844      	ldr	r0, [pc, #272]	@ (8002aa0 <ETH_Init+0x1bc>)
 800298e:	f007 f937 	bl	8009c00 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002992:	4843      	ldr	r0, [pc, #268]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002994:	f7fd fc6c 	bl	8000270 <strlen>
 8002998:	4603      	mov	r3, r0
 800299a:	b29a      	uxth	r2, r3
 800299c:	2364      	movs	r3, #100	@ 0x64
 800299e:	4940      	ldr	r1, [pc, #256]	@ (8002aa0 <ETH_Init+0x1bc>)
 80029a0:	4840      	ldr	r0, [pc, #256]	@ (8002aa4 <ETH_Init+0x1c0>)
 80029a2:	f005 f95d 	bl	8007c60 <HAL_UART_Transmit>
		return 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e05d      	b.n	8002a66 <ETH_Init+0x182>
	}
	sprintf(msgbuf, "Network configuration obtained!\r\n-----------------------\r\n");
 80029aa:	4941      	ldr	r1, [pc, #260]	@ (8002ab0 <ETH_Init+0x1cc>)
 80029ac:	483c      	ldr	r0, [pc, #240]	@ (8002aa0 <ETH_Init+0x1bc>)
 80029ae:	f007 f927 	bl	8009c00 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msgbuf, strlen(msgbuf), 100);
 80029b2:	483b      	ldr	r0, [pc, #236]	@ (8002aa0 <ETH_Init+0x1bc>)
 80029b4:	f7fd fc5c 	bl	8000270 <strlen>
 80029b8:	4603      	mov	r3, r0
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	2364      	movs	r3, #100	@ 0x64
 80029be:	4938      	ldr	r1, [pc, #224]	@ (8002aa0 <ETH_Init+0x1bc>)
 80029c0:	4838      	ldr	r0, [pc, #224]	@ (8002aa4 <ETH_Init+0x1c0>)
 80029c2:	f005 f94d 	bl	8007c60 <HAL_UART_Transmit>

	getIPfromDHCP(net_info.ip);
 80029c6:	483b      	ldr	r0, [pc, #236]	@ (8002ab4 <ETH_Init+0x1d0>)
 80029c8:	f7ff fe9e 	bl	8002708 <getIPfromDHCP>
	getGWfromDHCP(net_info.gw);
 80029cc:	483a      	ldr	r0, [pc, #232]	@ (8002ab8 <ETH_Init+0x1d4>)
 80029ce:	f7ff febb 	bl	8002748 <getGWfromDHCP>
	getSNfromDHCP(net_info.sn);
 80029d2:	483a      	ldr	r0, [pc, #232]	@ (8002abc <ETH_Init+0x1d8>)
 80029d4:	f7ff fed8 	bl	8002788 <getSNfromDHCP>
//        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
//        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
//    );
//    HAL_UART_Transmit(&huart1,(uint8_t *)charData,strlen(charData),1000);

	wizchip_setnetinfo(&net_info);
 80029d8:	482c      	ldr	r0, [pc, #176]	@ (8002a8c <ETH_Init+0x1a8>)
 80029da:	f002 fa83 	bl	8004ee4 <wizchip_setnetinfo>
	wizchip_getnetinfo(&net_info);
 80029de:	482b      	ldr	r0, [pc, #172]	@ (8002a8c <ETH_Init+0x1a8>)
 80029e0:	f002 fac0 	bl	8004f64 <wizchip_getnetinfo>

	sprintf(msgbuf,
			"IP:\t%d.%d.%d.%d\r\nSN:\t%d.%d.%d.%d\r\nGW:\t%d.%d.%d.%d\r\n-----------------------\r\n",
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029e4:	4b29      	ldr	r3, [pc, #164]	@ (8002a8c <ETH_Init+0x1a8>)
 80029e6:	799b      	ldrb	r3, [r3, #6]
	sprintf(msgbuf,
 80029e8:	469c      	mov	ip, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029ea:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <ETH_Init+0x1a8>)
 80029ec:	79db      	ldrb	r3, [r3, #7]
	sprintf(msgbuf,
 80029ee:	469e      	mov	lr, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029f0:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <ETH_Init+0x1a8>)
 80029f2:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(msgbuf,
 80029f4:	461a      	mov	r2, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80029f6:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <ETH_Init+0x1a8>)
 80029f8:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(msgbuf,
 80029fa:	4619      	mov	r1, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80029fc:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <ETH_Init+0x1a8>)
 80029fe:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(msgbuf,
 8002a00:	4618      	mov	r0, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <ETH_Init+0x1a8>)
 8002a04:	7adb      	ldrb	r3, [r3, #11]
	sprintf(msgbuf,
 8002a06:	461c      	mov	r4, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a08:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <ETH_Init+0x1a8>)
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(msgbuf,
 8002a0c:	461d      	mov	r5, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <ETH_Init+0x1a8>)
 8002a10:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(msgbuf,
 8002a12:	461e      	mov	r6, r3
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <ETH_Init+0x1a8>)
 8002a16:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(msgbuf,
 8002a18:	60fb      	str	r3, [r7, #12]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a8c <ETH_Init+0x1a8>)
 8002a1c:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(msgbuf,
 8002a1e:	60bb      	str	r3, [r7, #8]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a20:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <ETH_Init+0x1a8>)
 8002a22:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(msgbuf,
 8002a24:	607b      	str	r3, [r7, #4]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a26:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <ETH_Init+0x1a8>)
 8002a28:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(msgbuf,
 8002a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	9308      	str	r3, [sp, #32]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	9307      	str	r3, [sp, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	9306      	str	r3, [sp, #24]
 8002a38:	9605      	str	r6, [sp, #20]
 8002a3a:	9504      	str	r5, [sp, #16]
 8002a3c:	9403      	str	r4, [sp, #12]
 8002a3e:	9002      	str	r0, [sp, #8]
 8002a40:	9101      	str	r1, [sp, #4]
 8002a42:	9200      	str	r2, [sp, #0]
 8002a44:	4673      	mov	r3, lr
 8002a46:	4662      	mov	r2, ip
 8002a48:	491d      	ldr	r1, [pc, #116]	@ (8002ac0 <ETH_Init+0x1dc>)
 8002a4a:	4815      	ldr	r0, [pc, #84]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002a4c:	f007 f8d8 	bl	8009c00 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002a50:	4813      	ldr	r0, [pc, #76]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002a52:	f7fd fc0d 	bl	8000270 <strlen>
 8002a56:	4603      	mov	r3, r0
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	2364      	movs	r3, #100	@ 0x64
 8002a5c:	4910      	ldr	r1, [pc, #64]	@ (8002aa0 <ETH_Init+0x1bc>)
 8002a5e:	4811      	ldr	r0, [pc, #68]	@ (8002aa4 <ETH_Init+0x1c0>)
 8002a60:	f005 f8fe 	bl	8007c60 <HAL_UART_Transmit>

	return 1;
 8002a64:	2301      	movs	r3, #1
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	@ 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	08002815 	.word	0x08002815
 8002a74:	080027fd 	.word	0x080027fd
 8002a78:	08002897 	.word	0x08002897
 8002a7c:	0800287d 	.word	0x0800287d
 8002a80:	08002855 	.word	0x08002855
 8002a84:	0800282d 	.word	0x0800282d
 8002a88:	0800dda4 	.word	0x0800dda4
 8002a8c:	2000001c 	.word	0x2000001c
 8002a90:	20000294 	.word	0x20000294
 8002a94:	080028cd 	.word	0x080028cd
 8002a98:	080028b5 	.word	0x080028b5
 8002a9c:	0800dcbc 	.word	0x0800dcbc
 8002aa0:	20000884 	.word	0x20000884
 8002aa4:	20000734 	.word	0x20000734
 8002aa8:	20000292 	.word	0x20000292
 8002aac:	0800dcf0 	.word	0x0800dcf0
 8002ab0:	0800dd18 	.word	0x0800dd18
 8002ab4:	20000022 	.word	0x20000022
 8002ab8:	2000002a 	.word	0x2000002a
 8002abc:	20000026 	.word	0x20000026
 8002ac0:	0800dd54 	.word	0x0800dd54

08002ac4 <ETH_SocketInit>:

uint8_t ETH_SocketInit(uint8_t *sck) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	int8_t ret;
	if ((ret = socket(*sck, Sn_MR_TCP, 5000, SF_TCP_NODELAY)) != 0) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7818      	ldrb	r0, [r3, #0]
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	f000 fc06 	bl	80032e8 <socket>
 8002adc:	4603      	mov	r3, r0
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <ETH_SocketInit+0x28>
		return -1;
 8002ae8:	23ff      	movs	r3, #255	@ 0xff
 8002aea:	e00e      	b.n	8002b0a <ETH_SocketInit+0x46>
	}
	sprintf(msgbuf, "Socket initialized!\r\n");
 8002aec:	4909      	ldr	r1, [pc, #36]	@ (8002b14 <ETH_SocketInit+0x50>)
 8002aee:	480a      	ldr	r0, [pc, #40]	@ (8002b18 <ETH_SocketInit+0x54>)
 8002af0:	f007 f886 	bl	8009c00 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002af4:	4808      	ldr	r0, [pc, #32]	@ (8002b18 <ETH_SocketInit+0x54>)
 8002af6:	f7fd fbbb 	bl	8000270 <strlen>
 8002afa:	4603      	mov	r3, r0
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	2364      	movs	r3, #100	@ 0x64
 8002b00:	4905      	ldr	r1, [pc, #20]	@ (8002b18 <ETH_SocketInit+0x54>)
 8002b02:	4806      	ldr	r0, [pc, #24]	@ (8002b1c <ETH_SocketInit+0x58>)
 8002b04:	f005 f8ac 	bl	8007c60 <HAL_UART_Transmit>
	return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	0800ddac 	.word	0x0800ddac
 8002b18:	20000884 	.word	0x20000884
 8002b1c:	20000734 	.word	0x20000734

08002b20 <ETH_Connect>:

uint8_t ETH_Connect(uint8_t *sck, char *server) {
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b08b      	sub	sp, #44	@ 0x2c
 8002b24:	af04      	add	r7, sp, #16
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]

	char *ip_part;
	char *port_part;

	// Split the input string using ":" as delimiter
	ip_part = strtok(server, ":");
 8002b2a:	4934      	ldr	r1, [pc, #208]	@ (8002bfc <ETH_Connect+0xdc>)
 8002b2c:	6838      	ldr	r0, [r7, #0]
 8002b2e:	f007 f8ff 	bl	8009d30 <strtok>
 8002b32:	6178      	str	r0, [r7, #20]
	port_part = strtok(NULL, ":");
 8002b34:	4931      	ldr	r1, [pc, #196]	@ (8002bfc <ETH_Connect+0xdc>)
 8002b36:	2000      	movs	r0, #0
 8002b38:	f007 f8fa 	bl	8009d30 <strtok>
 8002b3c:	6138      	str	r0, [r7, #16]

	if (ip_part != NULL && port_part != NULL) {
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d044      	beq.n	8002bce <ETH_Connect+0xae>
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d041      	beq.n	8002bce <ETH_Connect+0xae>
		printf("IP address: %s\n", ip_part);
 8002b4a:	6979      	ldr	r1, [r7, #20]
 8002b4c:	482c      	ldr	r0, [pc, #176]	@ (8002c00 <ETH_Connect+0xe0>)
 8002b4e:	f007 f845 	bl	8009bdc <iprintf>
		printf("Port: %s\n", port_part);
 8002b52:	6939      	ldr	r1, [r7, #16]
 8002b54:	482b      	ldr	r0, [pc, #172]	@ (8002c04 <ETH_Connect+0xe4>)
 8002b56:	f007 f841 	bl	8009bdc <iprintf>

		// Convert IP address to uint8_t array
		sscanf(ip_part, "%d.%d.%d.%d", &server_ip[0], &server_ip[1],
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	f107 0208 	add.w	r2, r7, #8
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	3303      	adds	r3, #3
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	3302      	adds	r3, #2
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	4924      	ldr	r1, [pc, #144]	@ (8002c08 <ETH_Connect+0xe8>)
 8002b78:	6978      	ldr	r0, [r7, #20]
 8002b7a:	f007 f861 	bl	8009c40 <siscanf>
				&server_ip[2], &server_ip[3]);

		// Convert port to uint16_t
		server_port = atoi(port_part);
 8002b7e:	6938      	ldr	r0, [r7, #16]
 8002b80:	f006 f874 	bl	8008c6c <atoi>
 8002b84:	4603      	mov	r3, r0
 8002b86:	81fb      	strh	r3, [r7, #14]
	} else {
		return -2;
	}

	sprintf(msgbuf, "Attempting to connect to %d.%d.%d.%d:%d\r\n", server_ip[0], server_ip[1],
 8002b88:	7a3b      	ldrb	r3, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	7a7b      	ldrb	r3, [r7, #9]
 8002b8e:	461c      	mov	r4, r3
				server_ip[2], server_ip[3], server_port);
 8002b90:	7abb      	ldrb	r3, [r7, #10]
	sprintf(msgbuf, "Attempting to connect to %d.%d.%d.%d:%d\r\n", server_ip[0], server_ip[1],
 8002b92:	461a      	mov	r2, r3
				server_ip[2], server_ip[3], server_port);
 8002b94:	7afb      	ldrb	r3, [r7, #11]
	sprintf(msgbuf, "Attempting to connect to %d.%d.%d.%d:%d\r\n", server_ip[0], server_ip[1],
 8002b96:	4619      	mov	r1, r3
 8002b98:	89fb      	ldrh	r3, [r7, #14]
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	9101      	str	r1, [sp, #4]
 8002b9e:	9200      	str	r2, [sp, #0]
 8002ba0:	4623      	mov	r3, r4
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4919      	ldr	r1, [pc, #100]	@ (8002c0c <ETH_Connect+0xec>)
 8002ba6:	481a      	ldr	r0, [pc, #104]	@ (8002c10 <ETH_Connect+0xf0>)
 8002ba8:	f007 f82a 	bl	8009c00 <siprintf>
	UART_Send();
 8002bac:	f000 f896 	bl	8002cdc <UART_Send>

	int8_t ret;
	if ((ret = connect(*sck, server_ip, server_port)) != SOCK_OK) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	89fa      	ldrh	r2, [r7, #14]
 8002bb6:	f107 0108 	add.w	r1, r7, #8
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fd16 	bl	80035ec <connect>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	737b      	strb	r3, [r7, #13]
 8002bc4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <ETH_Connect+0xb2>
 8002bcc:	e003      	b.n	8002bd6 <ETH_Connect+0xb6>
		return -2;
 8002bce:	23fe      	movs	r3, #254	@ 0xfe
 8002bd0:	e010      	b.n	8002bf4 <ETH_Connect+0xd4>
		return -1;
 8002bd2:	23ff      	movs	r3, #255	@ 0xff
 8002bd4:	e00e      	b.n	8002bf4 <ETH_Connect+0xd4>
	}

	sprintf(msgbuf, "Server connected!\r\n");
 8002bd6:	490f      	ldr	r1, [pc, #60]	@ (8002c14 <ETH_Connect+0xf4>)
 8002bd8:	480d      	ldr	r0, [pc, #52]	@ (8002c10 <ETH_Connect+0xf0>)
 8002bda:	f007 f811 	bl	8009c00 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002bde:	480c      	ldr	r0, [pc, #48]	@ (8002c10 <ETH_Connect+0xf0>)
 8002be0:	f7fd fb46 	bl	8000270 <strlen>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	2364      	movs	r3, #100	@ 0x64
 8002bea:	4909      	ldr	r1, [pc, #36]	@ (8002c10 <ETH_Connect+0xf0>)
 8002bec:	480a      	ldr	r0, [pc, #40]	@ (8002c18 <ETH_Connect+0xf8>)
 8002bee:	f005 f837 	bl	8007c60 <HAL_UART_Transmit>
	return 0;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}
 8002bfc:	0800ddc4 	.word	0x0800ddc4
 8002c00:	0800ddc8 	.word	0x0800ddc8
 8002c04:	0800ddd8 	.word	0x0800ddd8
 8002c08:	0800dde4 	.word	0x0800dde4
 8002c0c:	0800ddf0 	.word	0x0800ddf0
 8002c10:	20000884 	.word	0x20000884
 8002c14:	0800de1c 	.word	0x0800de1c
 8002c18:	20000734 	.word	0x20000734

08002c1c <ETH_Listen>:

int8_t ETH_Listen(uint8_t *sck, char* buf){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
	int RSR_Len = 0, repeat = 500;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c2e:	60bb      	str	r3, [r7, #8]
	while(!RSR_Len && repeat){
 8002c30:	e006      	b.n	8002c40 <ETH_Listen+0x24>
		RSR_Len = getSn_RX_RSR(*sck);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fe57 	bl	80048ea <getSn_RX_RSR>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]
	while(!RSR_Len && repeat){
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <ETH_Listen+0x30>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f2      	bne.n	8002c32 <ETH_Listen+0x16>
	}
	if(!repeat){
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <ETH_Listen+0x3a>
		return 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e009      	b.n	8002c6a <ETH_Listen+0x4e>
	} else {
		return recv(*sck, buf, RSR_Len);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fe97 	bl	8003994 <recv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	b25b      	sxtb	r3, r3
	}
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <ETH_Send>:

void ETH_Send(uint8_t* sck, char* msg){
 8002c72:	b590      	push	{r4, r7, lr}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
	send(*sck, (uint8_t*)msg, strlen(msg));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	781c      	ldrb	r4, [r3, #0]
 8002c80:	6838      	ldr	r0, [r7, #0]
 8002c82:	f7fd faf5 	bl	8000270 <strlen>
 8002c86:	4603      	mov	r3, r0
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f000 fd88 	bl	80037a4 <send>
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd90      	pop	{r4, r7, pc}

08002c9c <UART_Message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Message(char *msg) {
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	sprintf(msgbuf, msg);
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	480b      	ldr	r0, [pc, #44]	@ (8002cd4 <UART_Message+0x38>)
 8002ca8:	f006 ffaa 	bl	8009c00 <siprintf>
	HAL_UART_Transmit(UART, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <UART_Message+0x3c>)
 8002cae:	681c      	ldr	r4, [r3, #0]
 8002cb0:	4808      	ldr	r0, [pc, #32]	@ (8002cd4 <UART_Message+0x38>)
 8002cb2:	f7fd fadd 	bl	8000270 <strlen>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	2364      	movs	r3, #100	@ 0x64
 8002cbc:	4905      	ldr	r1, [pc, #20]	@ (8002cd4 <UART_Message+0x38>)
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f004 ffce 	bl	8007c60 <HAL_UART_Transmit>
	HAL_Delay(20);
 8002cc4:	2014      	movs	r0, #20
 8002cc6:	f002 fa29 	bl	800511c <HAL_Delay>
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000884 	.word	0x20000884
 8002cd8:	20000034 	.word	0x20000034

08002cdc <UART_Send>:

void UART_Send() {
 8002cdc:	b598      	push	{r3, r4, r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(UART, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <UART_Send+0x28>)
 8002ce2:	681c      	ldr	r4, [r3, #0]
 8002ce4:	4808      	ldr	r0, [pc, #32]	@ (8002d08 <UART_Send+0x2c>)
 8002ce6:	f7fd fac3 	bl	8000270 <strlen>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	2364      	movs	r3, #100	@ 0x64
 8002cf0:	4905      	ldr	r1, [pc, #20]	@ (8002d08 <UART_Send+0x2c>)
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f004 ffb4 	bl	8007c60 <HAL_UART_Transmit>
	HAL_Delay(20);
 8002cf8:	2014      	movs	r0, #20
 8002cfa:	f002 fa0f 	bl	800511c <HAL_Delay>
}
 8002cfe:	bf00      	nop
 8002d00:	bd98      	pop	{r3, r4, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000034 	.word	0x20000034
 8002d08:	20000884 	.word	0x20000884

08002d0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	if (rx_input[0] == (uint8_t) '\r' || rx_input[0] == (uint8_t) '\n') {
 8002d14:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <HAL_UART_RxCpltCallback+0xc0>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b0d      	cmp	r3, #13
 8002d1a:	d003      	beq.n	8002d24 <HAL_UART_RxCpltCallback+0x18>
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <HAL_UART_RxCpltCallback+0xc0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b0a      	cmp	r3, #10
 8002d22:	d135      	bne.n	8002d90 <HAL_UART_RxCpltCallback+0x84>
		char newline[] = "\r\n";
 8002d24:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	8019      	strh	r1, [r3, #0]
 8002d30:	3302      	adds	r3, #2
 8002d32:	0c12      	lsrs	r2, r2, #16
 8002d34:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(UART, (uint8_t*) newline, strlen(newline), 100);
 8002d36:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_UART_RxCpltCallback+0xc8>)
 8002d38:	681c      	ldr	r4, [r3, #0]
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fa96 	bl	8000270 <strlen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	f107 010c 	add.w	r1, r7, #12
 8002d4c:	2364      	movs	r3, #100	@ 0x64
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f004 ff86 	bl	8007c60 <HAL_UART_Transmit>
		memcpy(&rx_buffer[rx_index + 1], newline, sizeof newline);
 8002d54:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <HAL_UART_RxCpltCallback+0xcc>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a20      	ldr	r2, [pc, #128]	@ (8002ddc <HAL_UART_RxCpltCallback+0xd0>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	8819      	ldrh	r1, [r3, #0]
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	8011      	strh	r1, [r2, #0]
 8002d6a:	7093      	strb	r3, [r2, #2]

		HAL_UART_Transmit(UART, rx_buffer,
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <HAL_UART_RxCpltCallback+0xc8>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	2364      	movs	r3, #100	@ 0x64
 8002d72:	f240 1201 	movw	r2, #257	@ 0x101
 8002d76:	4919      	ldr	r1, [pc, #100]	@ (8002ddc <HAL_UART_RxCpltCallback+0xd0>)
 8002d78:	f004 ff72 	bl	8007c60 <HAL_UART_Transmit>
				sizeof(rx_buffer) / sizeof(uint8_t), 100);
		rx_index = 0;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <HAL_UART_RxCpltCallback+0xcc>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002d82:	f240 1201 	movw	r2, #257	@ 0x101
 8002d86:	2100      	movs	r1, #0
 8002d88:	4814      	ldr	r0, [pc, #80]	@ (8002ddc <HAL_UART_RxCpltCallback+0xd0>)
 8002d8a:	f006 ffc8 	bl	8009d1e <memset>
	if (rx_input[0] == (uint8_t) '\r' || rx_input[0] == (uint8_t) '\n') {
 8002d8e:	e011      	b.n	8002db4 <HAL_UART_RxCpltCallback+0xa8>
	} else {
		HAL_UART_Transmit(UART, rx_input, 1, 100);
 8002d90:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <HAL_UART_RxCpltCallback+0xc8>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	2364      	movs	r3, #100	@ 0x64
 8002d96:	2201      	movs	r2, #1
 8002d98:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <HAL_UART_RxCpltCallback+0xc0>)
 8002d9a:	f004 ff61 	bl	8007c60 <HAL_UART_Transmit>
		rx_buffer[rx_index++] = rx_input[0];
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_UART_RxCpltCallback+0xcc>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	b2d1      	uxtb	r1, r2
 8002da6:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd8 <HAL_UART_RxCpltCallback+0xcc>)
 8002da8:	7011      	strb	r1, [r2, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <HAL_UART_RxCpltCallback+0xc0>)
 8002dae:	7819      	ldrb	r1, [r3, #0]
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_UART_RxCpltCallback+0xd0>)
 8002db2:	5499      	strb	r1, [r3, r2]
	}
	HAL_UART_Receive_IT(UART, rx_input, 1);
 8002db4:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <HAL_UART_RxCpltCallback+0xc8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2201      	movs	r2, #1
 8002dba:	4904      	ldr	r1, [pc, #16]	@ (8002dcc <HAL_UART_RxCpltCallback+0xc0>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 ffda 	bl	8007d76 <HAL_UART_Receive_IT>
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000880 	.word	0x20000880
 8002dd0:	0800de30 	.word	0x0800de30
 8002dd4:	20000034 	.word	0x20000034
 8002dd8:	20000881 	.word	0x20000881
 8002ddc:	2000077c 	.word	0x2000077c

08002de0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	80fb      	strh	r3, [r7, #6]
	UART_Message("HEY IT WORKS\r\n");
 8002dea:	4803      	ldr	r0, [pc, #12]	@ (8002df8 <HAL_GPIO_EXTI_Callback+0x18>)
 8002dec:	f7ff ff56 	bl	8002c9c <UART_Message>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	0800de34 	.word	0x0800de34

08002dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e02:	f002 f919 	bl	8005038 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e06:	f000 f859 	bl	8002ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e0a:	f000 f9c3 	bl	8003194 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8002e0e:	f000 f997 	bl	8003140 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002e12:	f000 f8f3 	bl	8002ffc <MX_TIM1_Init>
  MX_SPI1_Init();
 8002e16:	f000 f8bb 	bl	8002f90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init();
 8002e1a:	f000 fa53 	bl	80032c4 <SERVO_Init>
	if(ETH_Init()){
 8002e1e:	f7ff fd61 	bl	80028e4 <ETH_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02b      	beq.n	8002e80 <main+0x84>
		ETH_SocketInit(&sck);
 8002e28:	481a      	ldr	r0, [pc, #104]	@ (8002e94 <main+0x98>)
 8002e2a:	f7ff fe4b 	bl	8002ac4 <ETH_SocketInit>
		ETH_Connect(&sck, "192.168.100.6:8080");
 8002e2e:	491a      	ldr	r1, [pc, #104]	@ (8002e98 <main+0x9c>)
 8002e30:	4818      	ldr	r0, [pc, #96]	@ (8002e94 <main+0x98>)
 8002e32:	f7ff fe75 	bl	8002b20 <ETH_Connect>
		int8_t rcv = ETH_Listen(&sck, ethbuf);
 8002e36:	4919      	ldr	r1, [pc, #100]	@ (8002e9c <main+0xa0>)
 8002e38:	4816      	ldr	r0, [pc, #88]	@ (8002e94 <main+0x98>)
 8002e3a:	f7ff feef 	bl	8002c1c <ETH_Listen>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
		if (rcv){
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d017      	beq.n	8002e7a <main+0x7e>
			sprintf(msgbuf, "!! Message from server : %s", ethbuf);
 8002e4a:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <main+0xa0>)
 8002e4c:	4914      	ldr	r1, [pc, #80]	@ (8002ea0 <main+0xa4>)
 8002e4e:	4815      	ldr	r0, [pc, #84]	@ (8002ea4 <main+0xa8>)
 8002e50:	f006 fed6 	bl	8009c00 <siprintf>
			HAL_UART_Transmit(&huart6, (uint8_t*)msgbuf, 25+rcv, 100);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3319      	adds	r3, #25
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	2364      	movs	r3, #100	@ 0x64
 8002e60:	4910      	ldr	r1, [pc, #64]	@ (8002ea4 <main+0xa8>)
 8002e62:	4811      	ldr	r0, [pc, #68]	@ (8002ea8 <main+0xac>)
 8002e64:	f004 fefc 	bl	8007c60 <HAL_UART_Transmit>
			sprintf(msgbuf, "{\"id\":\"STM32-01B5\",\"name\":\"Vjetroelektrana Zivinice\",\"auth\":\"123123\"}");
 8002e68:	4910      	ldr	r1, [pc, #64]	@ (8002eac <main+0xb0>)
 8002e6a:	480e      	ldr	r0, [pc, #56]	@ (8002ea4 <main+0xa8>)
 8002e6c:	f006 fec8 	bl	8009c00 <siprintf>
			ETH_Send(&sck, msgbuf);
 8002e70:	490c      	ldr	r1, [pc, #48]	@ (8002ea4 <main+0xa8>)
 8002e72:	4808      	ldr	r0, [pc, #32]	@ (8002e94 <main+0x98>)
 8002e74:	f7ff fefd 	bl	8002c72 <ETH_Send>
 8002e78:	e002      	b.n	8002e80 <main+0x84>
		} else {
			UART_Message("no data was recieved");
 8002e7a:	480d      	ldr	r0, [pc, #52]	@ (8002eb0 <main+0xb4>)
 8002e7c:	f7ff ff0e 	bl	8002c9c <UART_Message>
		}
	}
	UART_Message("Starting the program ...\r\n");
 8002e80:	480c      	ldr	r0, [pc, #48]	@ (8002eb4 <main+0xb8>)
 8002e82:	f7ff ff0b 	bl	8002c9c <UART_Message>
	HAL_UART_Receive_IT(&huart6, rx_input, 1);
 8002e86:	2201      	movs	r2, #1
 8002e88:	490b      	ldr	r1, [pc, #44]	@ (8002eb8 <main+0xbc>)
 8002e8a:	4807      	ldr	r0, [pc, #28]	@ (8002ea8 <main+0xac>)
 8002e8c:	f004 ff73 	bl	8007d76 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <main+0x94>
 8002e94:	20000e84 	.word	0x20000e84
 8002e98:	0800de44 	.word	0x0800de44
 8002e9c:	20000c84 	.word	0x20000c84
 8002ea0:	0800de58 	.word	0x0800de58
 8002ea4:	20000884 	.word	0x20000884
 8002ea8:	20000734 	.word	0x20000734
 8002eac:	0800de74 	.word	0x0800de74
 8002eb0:	0800debc 	.word	0x0800debc
 8002eb4:	0800ded4 	.word	0x0800ded4
 8002eb8:	20000880 	.word	0x20000880

08002ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b094      	sub	sp, #80	@ 0x50
 8002ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ec2:	f107 0320 	add.w	r3, r7, #32
 8002ec6:	2230      	movs	r2, #48	@ 0x30
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f006 ff27 	bl	8009d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	4b28      	ldr	r3, [pc, #160]	@ (8002f88 <SystemClock_Config+0xcc>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	4a27      	ldr	r2, [pc, #156]	@ (8002f88 <SystemClock_Config+0xcc>)
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <SystemClock_Config+0xcc>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002efc:	2300      	movs	r3, #0
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <SystemClock_Config+0xd0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a21      	ldr	r2, [pc, #132]	@ (8002f8c <SystemClock_Config+0xd0>)
 8002f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f8c <SystemClock_Config+0xd0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f22:	2302      	movs	r3, #2
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002f30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f36:	2302      	movs	r3, #2
 8002f38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f3e:	f107 0320 	add.w	r3, r7, #32
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fc80 	bl	8005848 <HAL_RCC_OscConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f4e:	f000 f9b3 	bl	80032b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f52:	230f      	movs	r3, #15
 8002f54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f56:	2302      	movs	r3, #2
 8002f58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f6a:	f107 030c 	add.w	r3, r7, #12
 8002f6e:	2105      	movs	r1, #5
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fee1 	bl	8005d38 <HAL_RCC_ClockConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002f7c:	f000 f99c 	bl	80032b8 <Error_Handler>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3750      	adds	r7, #80	@ 0x50
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40007000 	.word	0x40007000

08002f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f94:	4b17      	ldr	r3, [pc, #92]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002f96:	4a18      	ldr	r2, [pc, #96]	@ (8002ff8 <MX_SPI1_Init+0x68>)
 8002f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002f9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fa2:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fa8:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fce:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd4:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fdc:	220a      	movs	r2, #10
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <MX_SPI1_Init+0x64>)
 8002fe2:	f003 f8c9 	bl	8006178 <HAL_SPI_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fec:	f000 f964 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000694 	.word	0x20000694
 8002ff8:	40013000 	.word	0x40013000

08002ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b096      	sub	sp, #88	@ 0x58
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003002:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003010:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800301a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	615a      	str	r2, [r3, #20]
 800302c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	2220      	movs	r2, #32
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f006 fe72 	bl	8009d1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800303a:	4b3f      	ldr	r3, [pc, #252]	@ (8003138 <MX_TIM1_Init+0x13c>)
 800303c:	4a3f      	ldr	r2, [pc, #252]	@ (800313c <MX_TIM1_Init+0x140>)
 800303e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3360+1;
 8003040:	4b3d      	ldr	r3, [pc, #244]	@ (8003138 <MX_TIM1_Init+0x13c>)
 8003042:	f640 5221 	movw	r2, #3361	@ 0xd21
 8003046:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <MX_TIM1_Init+0x13c>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000+1;
 800304e:	4b3a      	ldr	r3, [pc, #232]	@ (8003138 <MX_TIM1_Init+0x13c>)
 8003050:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8003054:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003056:	4b38      	ldr	r3, [pc, #224]	@ (8003138 <MX_TIM1_Init+0x13c>)
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800305c:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <MX_TIM1_Init+0x13c>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003062:	4b35      	ldr	r3, [pc, #212]	@ (8003138 <MX_TIM1_Init+0x13c>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003068:	4833      	ldr	r0, [pc, #204]	@ (8003138 <MX_TIM1_Init+0x13c>)
 800306a:	f003 fe5b 	bl	8006d24 <HAL_TIM_Base_Init>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003074:	f000 f920 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800307e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003082:	4619      	mov	r1, r3
 8003084:	482c      	ldr	r0, [pc, #176]	@ (8003138 <MX_TIM1_Init+0x13c>)
 8003086:	f004 f8e9 	bl	800725c <HAL_TIM_ConfigClockSource>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003090:	f000 f912 	bl	80032b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003094:	4828      	ldr	r0, [pc, #160]	@ (8003138 <MX_TIM1_Init+0x13c>)
 8003096:	f003 fefd 	bl	8006e94 <HAL_TIM_PWM_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80030a0:	f000 f90a 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a4:	2300      	movs	r3, #0
 80030a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030b0:	4619      	mov	r1, r3
 80030b2:	4821      	ldr	r0, [pc, #132]	@ (8003138 <MX_TIM1_Init+0x13c>)
 80030b4:	f004 fcb6 	bl	8007a24 <HAL_TIMEx_MasterConfigSynchronization>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80030be:	f000 f8fb 	bl	80032b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030c2:	2360      	movs	r3, #96	@ 0x60
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 80030c6:	2332      	movs	r3, #50	@ 0x32
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030ce:	2300      	movs	r3, #0
 80030d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80030d2:	2304      	movs	r3, #4
 80030d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030e2:	2200      	movs	r2, #0
 80030e4:	4619      	mov	r1, r3
 80030e6:	4814      	ldr	r0, [pc, #80]	@ (8003138 <MX_TIM1_Init+0x13c>)
 80030e8:	f003 fff6 	bl	80070d8 <HAL_TIM_PWM_ConfigChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80030f2:	f000 f8e1 	bl	80032b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800310a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800310e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	4619      	mov	r1, r3
 8003118:	4807      	ldr	r0, [pc, #28]	@ (8003138 <MX_TIM1_Init+0x13c>)
 800311a:	f004 fcff 	bl	8007b1c <HAL_TIMEx_ConfigBreakDeadTime>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003124:	f000 f8c8 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003128:	4803      	ldr	r0, [pc, #12]	@ (8003138 <MX_TIM1_Init+0x13c>)
 800312a:	f001 f899 	bl	8004260 <HAL_TIM_MspPostInit>

}
 800312e:	bf00      	nop
 8003130:	3758      	adds	r7, #88	@ 0x58
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200006ec 	.word	0x200006ec
 800313c:	40010000 	.word	0x40010000

08003140 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003146:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <MX_USART6_UART_Init+0x50>)
 8003148:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 800314c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003150:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003166:	220c      	movs	r2, #12
 8003168:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003176:	4805      	ldr	r0, [pc, #20]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003178:	f004 fd22 	bl	8007bc0 <HAL_UART_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003182:	f000 f899 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000734 	.word	0x20000734
 8003190:	40011400 	.word	0x40011400

08003194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	@ 0x28
 8003198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	4b3e      	ldr	r3, [pc, #248]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	4a3d      	ldr	r2, [pc, #244]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ba:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b37      	ldr	r3, [pc, #220]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	4a36      	ldr	r2, [pc, #216]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d6:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	4b30      	ldr	r3, [pc, #192]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	4a2f      	ldr	r2, [pc, #188]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f2:	4b2d      	ldr	r3, [pc, #180]	@ (80032a8 <MX_GPIO_Init+0x114>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <MX_GPIO_Init+0x114>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a28      	ldr	r2, [pc, #160]	@ (80032a8 <MX_GPIO_Init+0x114>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <MX_GPIO_Init+0x114>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <MX_GPIO_Init+0x114>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a21      	ldr	r2, [pc, #132]	@ (80032a8 <MX_GPIO_Init+0x114>)
 8003224:	f043 0310 	orr.w	r3, r3, #16
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b1f      	ldr	r3, [pc, #124]	@ (80032a8 <MX_GPIO_Init+0x114>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8003236:	2200      	movs	r2, #0
 8003238:	2110      	movs	r1, #16
 800323a:	481c      	ldr	r0, [pc, #112]	@ (80032ac <MX_GPIO_Init+0x118>)
 800323c:	f002 fad2 	bl	80057e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8003240:	2310      	movs	r3, #16
 8003242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003244:	2301      	movs	r3, #1
 8003246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	4619      	mov	r1, r3
 8003256:	4815      	ldr	r0, [pc, #84]	@ (80032ac <MX_GPIO_Init+0x118>)
 8003258:	f002 f928 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_IRQ_Pin */
  GPIO_InitStruct.Pin = ETH_IRQ_Pin;
 800325c:	2310      	movs	r3, #16
 800325e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003260:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ETH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	480f      	ldr	r0, [pc, #60]	@ (80032b0 <MX_GPIO_Init+0x11c>)
 8003272:	f002 f91b 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003276:	2301      	movs	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800327a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800327e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	480a      	ldr	r0, [pc, #40]	@ (80032b4 <MX_GPIO_Init+0x120>)
 800328c:	f002 f90e 	bl	80054ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	2006      	movs	r0, #6
 8003296:	f002 f840 	bl	800531a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800329a:	2006      	movs	r0, #6
 800329c:	f002 f859 	bl	8005352 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032a0:	bf00      	nop
 80032a2:	3728      	adds	r7, #40	@ 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40020400 	.word	0x40020400

080032b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032bc:	b672      	cpsid	i
}
 80032be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <Error_Handler+0x8>

080032c4 <SERVO_Init>:

void SERVO_Off() {
	HAL_TIM_PWM_Stop(PWM_Timer, TIM_CHANNEL_1);
}

void SERVO_Init(){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(PWM_Timer);
 80032c8:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <SERVO_Init+0x20>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fd79 	bl	8006dc4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(PWM_Timer, TIM_CHANNEL_1);
 80032d2:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <SERVO_Init+0x20>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fe35 	bl	8006f48 <HAL_TIM_PWM_Start>
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000038 	.word	0x20000038

080032e8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	71fb      	strb	r3, [r7, #7]
 80032fa:	4603      	mov	r3, r0
 80032fc:	71bb      	strb	r3, [r7, #6]
 80032fe:	460b      	mov	r3, r1
 8003300:	80bb      	strh	r3, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d902      	bls.n	8003312 <socket+0x2a>
 800330c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003310:	e0f0      	b.n	80034f4 <socket+0x20c>
	switch(protocol)
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d005      	beq.n	8003324 <socket+0x3c>
 8003318:	2b00      	cmp	r3, #0
 800331a:	dd11      	ble.n	8003340 <socket+0x58>
 800331c:	3b02      	subs	r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d80e      	bhi.n	8003340 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003322:	e011      	b.n	8003348 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003324:	f107 030c 	add.w	r3, r7, #12
 8003328:	2204      	movs	r2, #4
 800332a:	4619      	mov	r1, r3
 800332c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003330:	f001 f9d2 	bl	80046d8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <socket+0x5e>
 800333a:	f06f 0302 	mvn.w	r3, #2
 800333e:	e0d9      	b.n	80034f4 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003340:	f06f 0304 	mvn.w	r3, #4
 8003344:	e0d6      	b.n	80034f4 <socket+0x20c>
	    break;
 8003346:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <socket+0x70>
 8003352:	f06f 0305 	mvn.w	r3, #5
 8003356:	e0cd      	b.n	80034f4 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d028      	beq.n	80033b0 <socket+0xc8>
	{
   	switch(protocol)
 800335e:	79bb      	ldrb	r3, [r7, #6]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d002      	beq.n	800336a <socket+0x82>
 8003364:	2b02      	cmp	r3, #2
 8003366:	d008      	beq.n	800337a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003368:	e022      	b.n	80033b0 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11a      	bne.n	80033aa <socket+0xc2>
 8003374:	f06f 0305 	mvn.w	r3, #5
 8003378:	e0bc      	b.n	80034f4 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db02      	blt.n	8003392 <socket+0xaa>
 800338c:	f06f 0305 	mvn.w	r3, #5
 8003390:	e0b0      	b.n	80034f4 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800339c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db04      	blt.n	80033ae <socket+0xc6>
 80033a4:	f06f 0305 	mvn.w	r3, #5
 80033a8:	e0a4      	b.n	80034f4 <socket+0x20c>
   	      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <socket+0xc8>
   	      break;
 80033ae:	bf00      	nop
   	}
   }
	close(sn);
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f8ac 	bl	8003510 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	3301      	adds	r3, #1
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4618      	mov	r0, r3
 80033c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c6:	f023 030f 	bic.w	r3, r3, #15
 80033ca:	b25a      	sxtb	r2, r3
 80033cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4619      	mov	r1, r3
 80033d8:	f001 f930 	bl	800463c <WIZCHIP_WRITE>
    #endif
	if(!port)
 80033dc:	88bb      	ldrh	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d110      	bne.n	8003404 <socket+0x11c>
	{
	   port = sock_any_port++;
 80033e2:	4b46      	ldr	r3, [pc, #280]	@ (80034fc <socket+0x214>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	b291      	uxth	r1, r2
 80033ea:	4a44      	ldr	r2, [pc, #272]	@ (80034fc <socket+0x214>)
 80033ec:	8011      	strh	r1, [r2, #0]
 80033ee:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80033f0:	4b42      	ldr	r3, [pc, #264]	@ (80034fc <socket+0x214>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d103      	bne.n	8003404 <socket+0x11c>
 80033fc:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <socket+0x214>)
 80033fe:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8003402:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	3301      	adds	r3, #1
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003410:	461a      	mov	r2, r3
 8003412:	88bb      	ldrh	r3, [r7, #4]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	b29b      	uxth	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	4619      	mov	r1, r3
 800341c:	4610      	mov	r0, r2
 800341e:	f001 f90d 	bl	800463c <WIZCHIP_WRITE>
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3301      	adds	r3, #1
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	88bb      	ldrh	r3, [r7, #4]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f001 f900 	bl	800463c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	3301      	adds	r3, #1
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f001 f8f6 	bl	800463c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003450:	bf00      	nop
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	3301      	adds	r3, #1
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f8a0 	bl	80045a4 <WIZCHIP_READ>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f3      	bne.n	8003452 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	2201      	movs	r2, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	b21b      	sxth	r3, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	b21a      	sxth	r2, r3
 8003478:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <socket+0x218>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b21b      	sxth	r3, r3
 800347e:	4013      	ands	r3, r2
 8003480:	b21b      	sxth	r3, r3
 8003482:	b29a      	uxth	r2, r3
 8003484:	4b1e      	ldr	r3, [pc, #120]	@ (8003500 <socket+0x218>)
 8003486:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	b21a      	sxth	r2, r3
 8003496:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <socket+0x218>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b21b      	sxth	r3, r3
 800349c:	4313      	orrs	r3, r2
 800349e:	b21b      	sxth	r3, r3
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	4b17      	ldr	r3, [pc, #92]	@ (8003500 <socket+0x218>)
 80034a4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	2201      	movs	r2, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	b21b      	sxth	r3, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	b21a      	sxth	r2, r3
 80034b4:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <socket+0x21c>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b21b      	sxth	r3, r3
 80034ba:	4013      	ands	r3, r2
 80034bc:	b21b      	sxth	r3, r3
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <socket+0x21c>)
 80034c2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <socket+0x220>)
 80034c8:	2100      	movs	r1, #0
 80034ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	4a0e      	ldr	r2, [pc, #56]	@ (800350c <socket+0x224>)
 80034d2:	2100      	movs	r1, #0
 80034d4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80034d6:	bf00      	nop
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3301      	adds	r3, #1
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f85d 	bl	80045a4 <WIZCHIP_READ>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f3      	beq.n	80034d8 <socket+0x1f0>
   return (int8_t)sn;
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	2000003c 	.word	0x2000003c
 8003500:	20000e86 	.word	0x20000e86
 8003504:	20000e88 	.word	0x20000e88
 8003508:	20000e8c 	.word	0x20000e8c
 800350c:	20000e9c 	.word	0x20000e9c

08003510 <close>:

int8_t close(uint8_t sn)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d902      	bls.n	8003526 <close+0x16>
 8003520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003524:	e055      	b.n	80035d2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	3301      	adds	r3, #1
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003532:	2110      	movs	r1, #16
 8003534:	4618      	mov	r0, r3
 8003536:	f001 f881 	bl	800463c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800353a:	bf00      	nop
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3301      	adds	r3, #1
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003548:	4618      	mov	r0, r3
 800354a:	f001 f82b 	bl	80045a4 <WIZCHIP_READ>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f3      	bne.n	800353c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3301      	adds	r3, #1
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003560:	211f      	movs	r1, #31
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f86a 	bl	800463c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	b21b      	sxth	r3, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	b21a      	sxth	r2, r3
 8003576:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <close+0xcc>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b21b      	sxth	r3, r3
 800357c:	4013      	ands	r3, r2
 800357e:	b21b      	sxth	r3, r3
 8003580:	b29a      	uxth	r2, r3
 8003582:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <close+0xcc>)
 8003584:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2201      	movs	r2, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	b21b      	sxth	r3, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	b21a      	sxth	r2, r3
 8003594:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <close+0xd0>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	b21b      	sxth	r3, r3
 800359a:	4013      	ands	r3, r2
 800359c:	b21b      	sxth	r3, r3
 800359e:	b29a      	uxth	r2, r3
 80035a0:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <close+0xd0>)
 80035a2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	4a0f      	ldr	r2, [pc, #60]	@ (80035e4 <close+0xd4>)
 80035a8:	2100      	movs	r1, #0
 80035aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	4a0d      	ldr	r2, [pc, #52]	@ (80035e8 <close+0xd8>)
 80035b2:	2100      	movs	r1, #0
 80035b4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80035b6:	bf00      	nop
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3301      	adds	r3, #1
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 ffed 	bl	80045a4 <WIZCHIP_READ>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f3      	bne.n	80035b8 <close+0xa8>
	return SOCK_OK;
 80035d0:	2301      	movs	r3, #1
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000e86 	.word	0x20000e86
 80035e0:	20000e88 	.word	0x20000e88
 80035e4:	20000e8c 	.word	0x20000e8c
 80035e8:	20000e9c 	.word	0x20000e9c

080035ec <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	71fb      	strb	r3, [r7, #7]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d902      	bls.n	8003608 <connect+0x1c>
 8003602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003606:	e0c6      	b.n	8003796 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	3301      	adds	r3, #1
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4618      	mov	r0, r3
 8003612:	f000 ffc7 	bl	80045a4 <WIZCHIP_READ>
 8003616:	4603      	mov	r3, r0
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2b01      	cmp	r3, #1
 800361e:	d002      	beq.n	8003626 <connect+0x3a>
 8003620:	f06f 0304 	mvn.w	r3, #4
 8003624:	e0b7      	b.n	8003796 <connect+0x1aa>
   CHECK_SOCKINIT();
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	3301      	adds	r3, #1
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003632:	4618      	mov	r0, r3
 8003634:	f000 ffb6 	bl	80045a4 <WIZCHIP_READ>
 8003638:	4603      	mov	r3, r0
 800363a:	2b13      	cmp	r3, #19
 800363c:	d002      	beq.n	8003644 <connect+0x58>
 800363e:	f06f 0302 	mvn.w	r3, #2
 8003642:	e0a8      	b.n	8003796 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	3201      	adds	r2, #1
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	4413      	add	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	3202      	adds	r2, #2
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	4413      	add	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	3203      	adds	r2, #3
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	4413      	add	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800367a:	d002      	beq.n	8003682 <connect+0x96>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <connect+0x9c>
 8003682:	f06f 030b 	mvn.w	r3, #11
 8003686:	e086      	b.n	8003796 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8003688:	88bb      	ldrh	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <connect+0xa8>
 800368e:	f06f 030a 	mvn.w	r3, #10
 8003692:	e080      	b.n	8003796 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	3301      	adds	r3, #1
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80036a0:	2204      	movs	r2, #4
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 f877 	bl	8004798 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	3301      	adds	r3, #1
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036b6:	461a      	mov	r2, r3
 80036b8:	88bb      	ldrh	r3, [r7, #4]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	b29b      	uxth	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f000 ffba 	bl	800463c <WIZCHIP_WRITE>
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	3301      	adds	r3, #1
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80036d4:	461a      	mov	r2, r3
 80036d6:	88bb      	ldrh	r3, [r7, #4]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f000 ffad 	bl	800463c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	3301      	adds	r3, #1
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80036ee:	2104      	movs	r1, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 ffa3 	bl	800463c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80036f6:	bf00      	nop
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	3301      	adds	r3, #1
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003704:	4618      	mov	r0, r3
 8003706:	f000 ff4d 	bl	80045a4 <WIZCHIP_READ>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f3      	bne.n	80036f8 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003710:	4b23      	ldr	r3, [pc, #140]	@ (80037a0 <connect+0x1b4>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	fa42 f303 	asr.w	r3, r2, r3
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02b      	beq.n	800377c <connect+0x190>
 8003724:	2300      	movs	r3, #0
 8003726:	e036      	b.n	8003796 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3301      	adds	r3, #1
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003734:	4618      	mov	r0, r3
 8003736:	f000 ff35 	bl	80045a4 <WIZCHIP_READ>
 800373a:	4603      	mov	r3, r0
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3301      	adds	r3, #1
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003750:	2108      	movs	r1, #8
 8003752:	4618      	mov	r0, r3
 8003754:	f000 ff72 	bl	800463c <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8003758:	f06f 030c 	mvn.w	r3, #12
 800375c:	e01b      	b.n	8003796 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	3301      	adds	r3, #1
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800376a:	4618      	mov	r0, r3
 800376c:	f000 ff1a 	bl	80045a4 <WIZCHIP_READ>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8003776:	f06f 0303 	mvn.w	r3, #3
 800377a:	e00c      	b.n	8003796 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	3301      	adds	r3, #1
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003788:	4618      	mov	r0, r3
 800378a:	f000 ff0b 	bl	80045a4 <WIZCHIP_READ>
 800378e:	4603      	mov	r3, r0
 8003790:	2b17      	cmp	r3, #23
 8003792:	d1c9      	bne.n	8003728 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000e86 	.word	0x20000e86

080037a4 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	4613      	mov	r3, r2
 80037b2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d902      	bls.n	80037c8 <send+0x24>
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037c6:	e0dd      	b.n	8003984 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	3301      	adds	r3, #1
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fee7 	bl	80045a4 <WIZCHIP_READ>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d002      	beq.n	80037e6 <send+0x42>
 80037e0:	f06f 0304 	mvn.w	r3, #4
 80037e4:	e0ce      	b.n	8003984 <send+0x1e0>
   CHECK_SOCKDATA();
 80037e6:	88bb      	ldrh	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <send+0x4e>
 80037ec:	f06f 030d 	mvn.w	r3, #13
 80037f0:	e0c8      	b.n	8003984 <send+0x1e0>
   tmp = getSn_SR(sn);
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	3301      	adds	r3, #1
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fed0 	bl	80045a4 <WIZCHIP_READ>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b17      	cmp	r3, #23
 800380c:	d005      	beq.n	800381a <send+0x76>
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b1c      	cmp	r3, #28
 8003812:	d002      	beq.n	800381a <send+0x76>
 8003814:	f06f 0306 	mvn.w	r3, #6
 8003818:	e0b4      	b.n	8003984 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 800381a:	4b5c      	ldr	r3, [pc, #368]	@ (800398c <send+0x1e8>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	fa42 f303 	asr.w	r3, r2, r3
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d039      	beq.n	80038a2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3301      	adds	r3, #1
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800383a:	4618      	mov	r0, r3
 800383c:	f000 feb2 	bl	80045a4 <WIZCHIP_READ>
 8003840:	4603      	mov	r3, r0
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d019      	beq.n	8003886 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	3301      	adds	r3, #1
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800385e:	2110      	movs	r1, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f000 feeb 	bl	800463c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	2201      	movs	r2, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	b21b      	sxth	r3, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	b21a      	sxth	r2, r3
 8003874:	4b45      	ldr	r3, [pc, #276]	@ (800398c <send+0x1e8>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b21b      	sxth	r3, r3
 800387a:	4013      	ands	r3, r2
 800387c:	b21b      	sxth	r3, r3
 800387e:	b29a      	uxth	r2, r3
 8003880:	4b42      	ldr	r3, [pc, #264]	@ (800398c <send+0x1e8>)
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	e00d      	b.n	80038a2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <send+0xfa>
      {
         close(sn);
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fe3c 	bl	8003510 <close>
         return SOCKERR_TIMEOUT;
 8003898:	f06f 030c 	mvn.w	r3, #12
 800389c:	e072      	b.n	8003984 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800389e:	2300      	movs	r3, #0
 80038a0:	e070      	b.n	8003984 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	3301      	adds	r3, #1
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fe78 	bl	80045a4 <WIZCHIP_READ>
 80038b4:	4603      	mov	r3, r0
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80038ba:	88ba      	ldrh	r2, [r7, #4]
 80038bc:	89bb      	ldrh	r3, [r7, #12]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d901      	bls.n	80038c6 <send+0x122>
 80038c2:	89bb      	ldrh	r3, [r7, #12]
 80038c4:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 ffc5 	bl	8004858 <getSn_TX_FSR>
 80038ce:	4603      	mov	r3, r0
 80038d0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	3301      	adds	r3, #1
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fe60 	bl	80045a4 <WIZCHIP_READ>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b17      	cmp	r3, #23
 80038ec:	d009      	beq.n	8003902 <send+0x15e>
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b1c      	cmp	r3, #28
 80038f2:	d006      	beq.n	8003902 <send+0x15e>
      {
         close(sn);
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fe0a 	bl	8003510 <close>
         return SOCKERR_SOCKSTATUS;
 80038fc:	f06f 0306 	mvn.w	r3, #6
 8003900:	e040      	b.n	8003984 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003902:	4b23      	ldr	r3, [pc, #140]	@ (8003990 <send+0x1ec>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	fa42 f303 	asr.w	r3, r2, r3
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <send+0x17e>
 8003916:	88ba      	ldrh	r2, [r7, #4]
 8003918:	89bb      	ldrh	r3, [r7, #12]
 800391a:	429a      	cmp	r2, r3
 800391c:	d901      	bls.n	8003922 <send+0x17e>
 800391e:	2300      	movs	r3, #0
 8003920:	e030      	b.n	8003984 <send+0x1e0>
      if(len <= freesize) break;
 8003922:	88ba      	ldrh	r2, [r7, #4]
 8003924:	89bb      	ldrh	r3, [r7, #12]
 8003926:	429a      	cmp	r2, r3
 8003928:	d900      	bls.n	800392c <send+0x188>
      freesize = getSn_TX_FSR(sn);
 800392a:	e7cc      	b.n	80038c6 <send+0x122>
      if(len <= freesize) break;
 800392c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800392e:	88ba      	ldrh	r2, [r7, #4]
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	6839      	ldr	r1, [r7, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f001 f821 	bl	800497c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	3301      	adds	r3, #1
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003946:	2120      	movs	r1, #32
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fe77 	bl	800463c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800394e:	bf00      	nop
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	3301      	adds	r3, #1
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fe21 	bl	80045a4 <WIZCHIP_READ>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f3      	bne.n	8003950 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	2201      	movs	r2, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	b21a      	sxth	r2, r3
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <send+0x1e8>)
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b21b      	sxth	r3, r3
 8003978:	4313      	orrs	r3, r2
 800397a:	b21b      	sxth	r3, r3
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b03      	ldr	r3, [pc, #12]	@ (800398c <send+0x1e8>)
 8003980:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003982:	88bb      	ldrh	r3, [r7, #4]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000e88 	.word	0x20000e88
 8003990:	20000e86 	.word	0x20000e86

08003994 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
 80039a0:	4613      	mov	r3, r2
 80039a2:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d902      	bls.n	80039b8 <recv+0x24>
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039b6:	e09b      	b.n	8003af0 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	3301      	adds	r3, #1
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fdef 	bl	80045a4 <WIZCHIP_READ>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d002      	beq.n	80039d6 <recv+0x42>
 80039d0:	f06f 0304 	mvn.w	r3, #4
 80039d4:	e08c      	b.n	8003af0 <recv+0x15c>
   CHECK_SOCKDATA();
 80039d6:	88bb      	ldrh	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <recv+0x4e>
 80039dc:	f06f 030d 	mvn.w	r3, #13
 80039e0:	e086      	b.n	8003af0 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3301      	adds	r3, #1
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fdd8 	bl	80045a4 <WIZCHIP_READ>
 80039f4:	4603      	mov	r3, r0
 80039f6:	029b      	lsls	r3, r3, #10
 80039f8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80039fa:	89ba      	ldrh	r2, [r7, #12]
 80039fc:	88bb      	ldrh	r3, [r7, #4]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d201      	bcs.n	8003a06 <recv+0x72>
 8003a02:	89bb      	ldrh	r3, [r7, #12]
 8003a04:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 ff6e 	bl	80048ea <getSn_RX_RSR>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3301      	adds	r3, #1
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fdc0 	bl	80045a4 <WIZCHIP_READ>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b17      	cmp	r3, #23
 8003a2c:	d026      	beq.n	8003a7c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b1c      	cmp	r3, #28
 8003a32:	d11c      	bne.n	8003a6e <recv+0xda>
            {
               if(recvsize != 0) break;
 8003a34:	89bb      	ldrh	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d133      	bne.n	8003aa2 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 ff0b 	bl	8004858 <getSn_TX_FSR>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461c      	mov	r4, r3
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fda6 	bl	80045a4 <WIZCHIP_READ>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	029b      	lsls	r3, r3, #10
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	d10d      	bne.n	8003a7c <recv+0xe8>
               {
                  close(sn);
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fd54 	bl	8003510 <close>
                  return SOCKERR_SOCKSTATUS;
 8003a68:	f06f 0306 	mvn.w	r3, #6
 8003a6c:	e040      	b.n	8003af0 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fd4d 	bl	8003510 <close>
               return SOCKERR_SOCKSTATUS;
 8003a76:	f06f 0306 	mvn.w	r3, #6
 8003a7a:	e039      	b.n	8003af0 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <recv+0x164>)
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	fa42 f303 	asr.w	r3, r2, r3
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <recv+0x106>
 8003a90:	89bb      	ldrh	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <recv+0x106>
 8003a96:	2300      	movs	r3, #0
 8003a98:	e02a      	b.n	8003af0 <recv+0x15c>
         if(recvsize != 0) break;
 8003a9a:	89bb      	ldrh	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8003aa0:	e7b1      	b.n	8003a06 <recv+0x72>
               if(recvsize != 0) break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <recv+0x114>
         if(recvsize != 0) break;
 8003aa6:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003aa8:	89ba      	ldrh	r2, [r7, #12]
 8003aaa:	88bb      	ldrh	r3, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d201      	bcs.n	8003ab4 <recv+0x120>
 8003ab0:	89bb      	ldrh	r3, [r7, #12]
 8003ab2:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003ab4:	88ba      	ldrh	r2, [r7, #4]
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 ffb8 	bl	8004a30 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003acc:	2140      	movs	r1, #64	@ 0x40
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fdb4 	bl	800463c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003ad4:	bf00      	nop
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	3301      	adds	r3, #1
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fd5e 	bl	80045a4 <WIZCHIP_READ>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f3      	bne.n	8003ad6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003aee:	88bb      	ldrh	r3, [r7, #4]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd90      	pop	{r4, r7, pc}
 8003af8:	20000e86 	.word	0x20000e86

08003afc <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d902      	bls.n	8003b22 <sendto+0x26>
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b20:	e11a      	b.n	8003d58 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	3301      	adds	r3, #1
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fd3a 	bl	80045a4 <WIZCHIP_READ>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	3b02      	subs	r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d902      	bls.n	8003b42 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003b3c:	f06f 0304 	mvn.w	r3, #4
 8003b40:	e10a      	b.n	8003d58 <sendto+0x25c>
         break;
 8003b42:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003b44:	89bb      	ldrh	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <sendto+0x54>
 8003b4a:	f06f 030d 	mvn.w	r3, #13
 8003b4e:	e103      	b.n	8003d58 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	3201      	adds	r2, #1
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	3202      	adds	r2, #2
 8003b6c:	7812      	ldrb	r2, [r2, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	3203      	adds	r2, #3
 8003b7a:	7812      	ldrb	r2, [r2, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10e      	bne.n	8003ba4 <sendto+0xa8>
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fd08 	bl	80045a4 <WIZCHIP_READ>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d002      	beq.n	8003ba4 <sendto+0xa8>
 8003b9e:	f06f 030b 	mvn.w	r3, #11
 8003ba2:	e0d9      	b.n	8003d58 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003ba4:	8c3b      	ldrh	r3, [r7, #32]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <sendto+0xcc>
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	3301      	adds	r3, #1
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fcf6 	bl	80045a4 <WIZCHIP_READ>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d002      	beq.n	8003bc8 <sendto+0xcc>
 8003bc2:	f06f 030a 	mvn.w	r3, #10
 8003bc6:	e0c7      	b.n	8003d58 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3301      	adds	r3, #1
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fce5 	bl	80045a4 <WIZCHIP_READ>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b42      	cmp	r3, #66	@ 0x42
 8003be2:	d008      	beq.n	8003bf6 <sendto+0xfa>
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b22      	cmp	r3, #34	@ 0x22
 8003be8:	d005      	beq.n	8003bf6 <sendto+0xfa>
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b32      	cmp	r3, #50	@ 0x32
 8003bee:	d002      	beq.n	8003bf6 <sendto+0xfa>
 8003bf0:	f06f 0306 	mvn.w	r3, #6
 8003bf4:	e0b0      	b.n	8003d58 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8003c02:	2204      	movs	r2, #4
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fdc6 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	3301      	adds	r3, #1
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c18:	461a      	mov	r2, r3
 8003c1a:	8c3b      	ldrh	r3, [r7, #32]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fd09 	bl	800463c <WIZCHIP_WRITE>
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	3301      	adds	r3, #1
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8003c36:	461a      	mov	r2, r3
 8003c38:	8c3b      	ldrh	r3, [r7, #32]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 fcfc 	bl	800463c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	3301      	adds	r3, #1
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fca7 	bl	80045a4 <WIZCHIP_READ>
 8003c56:	4603      	mov	r3, r0
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003c5c:	89ba      	ldrh	r2, [r7, #12]
 8003c5e:	8abb      	ldrh	r3, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d901      	bls.n	8003c68 <sendto+0x16c>
 8003c64:	8abb      	ldrh	r3, [r7, #20]
 8003c66:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fdf4 	bl	8004858 <getSn_TX_FSR>
 8003c70:	4603      	mov	r3, r0
 8003c72:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	3301      	adds	r3, #1
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fc8f 	bl	80045a4 <WIZCHIP_READ>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <sendto+0x196>
 8003c8c:	f06f 0303 	mvn.w	r3, #3
 8003c90:	e062      	b.n	8003d58 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003c92:	4b33      	ldr	r3, [pc, #204]	@ (8003d60 <sendto+0x264>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	fa42 f303 	asr.w	r3, r2, r3
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <sendto+0x1b6>
 8003ca6:	89ba      	ldrh	r2, [r7, #12]
 8003ca8:	8abb      	ldrh	r3, [r7, #20]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d901      	bls.n	8003cb2 <sendto+0x1b6>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e052      	b.n	8003d58 <sendto+0x25c>
      if(len <= freesize) break;
 8003cb2:	89ba      	ldrh	r2, [r7, #12]
 8003cb4:	8abb      	ldrh	r3, [r7, #20]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d900      	bls.n	8003cbc <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8003cba:	e7d5      	b.n	8003c68 <sendto+0x16c>
      if(len <= freesize) break;
 8003cbc:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8003cbe:	89ba      	ldrh	r2, [r7, #12]
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fe59 	bl	800497c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3301      	adds	r3, #1
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003cd6:	2120      	movs	r1, #32
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fcaf 	bl	800463c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003cde:	bf00      	nop
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fc59 	bl	80045a4 <WIZCHIP_READ>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f3      	bne.n	8003ce0 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fc4d 	bl	80045a4 <WIZCHIP_READ>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00c      	beq.n	8003d36 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3301      	adds	r3, #1
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003d28:	2110      	movs	r1, #16
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fc86 	bl	800463c <WIZCHIP_WRITE>
         break;
 8003d30:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003d32:	89bb      	ldrh	r3, [r7, #12]
 8003d34:	e010      	b.n	8003d58 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0db      	beq.n	8003cf8 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	3301      	adds	r3, #1
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003d4c:	2108      	movs	r1, #8
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fc74 	bl	800463c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003d54:	f06f 030c 	mvn.w	r3, #12
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000e86 	.word	0x20000e86

08003d64 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	4603      	mov	r3, r0
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	4613      	mov	r3, r2
 8003d74:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d902      	bls.n	8003d86 <recvfrom+0x22>
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d84:	e1d2      	b.n	800412c <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fc08 	bl	80045a4 <WIZCHIP_READ>
 8003d94:	4603      	mov	r3, r0
 8003d96:	777b      	strb	r3, [r7, #29]
 8003d98:	7f7b      	ldrb	r3, [r7, #29]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b02      	subs	r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d902      	bls.n	8003daa <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003da4:	f06f 0304 	mvn.w	r3, #4
 8003da8:	e1c0      	b.n	800412c <recvfrom+0x3c8>
         break;
 8003daa:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003dac:	89bb      	ldrh	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <recvfrom+0x54>
 8003db2:	f06f 030d 	mvn.w	r3, #13
 8003db6:	e1b9      	b.n	800412c <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	4a87      	ldr	r2, [pc, #540]	@ (8003fd8 <recvfrom+0x274>)
 8003dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d128      	bne.n	8003e16 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fd8f 	bl	80048ea <getSn_RX_RSR>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fbe1 	bl	80045a4 <WIZCHIP_READ>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <recvfrom+0x8a>
 8003de8:	f06f 0303 	mvn.w	r3, #3
 8003dec:	e19e      	b.n	800412c <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003dee:	4b7b      	ldr	r3, [pc, #492]	@ (8003fdc <recvfrom+0x278>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	fa42 f303 	asr.w	r3, r2, r3
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <recvfrom+0xa8>
 8003e02:	8bfb      	ldrh	r3, [r7, #30]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <recvfrom+0xa8>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e18f      	b.n	800412c <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8003e0c:	8bfb      	ldrh	r3, [r7, #30]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d100      	bne.n	8003e14 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003e12:	e7d7      	b.n	8003dc4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003e14:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003e16:	7f7b      	ldrb	r3, [r7, #29]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d078      	beq.n	8003f12 <recvfrom+0x1ae>
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	f300 8140 	bgt.w	80040a6 <recvfrom+0x342>
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <recvfrom+0xce>
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	f000 80da 	beq.w	8003fe4 <recvfrom+0x280>
 8003e30:	e139      	b.n	80040a6 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	4a68      	ldr	r2, [pc, #416]	@ (8003fd8 <recvfrom+0x274>)
 8003e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d151      	bne.n	8003ee2 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8003e3e:	f107 0114 	add.w	r1, r7, #20
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2208      	movs	r2, #8
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fdf2 	bl	8004a30 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3301      	adds	r3, #1
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e58:	2140      	movs	r1, #64	@ 0x40
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fbee 	bl	800463c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003e60:	bf00      	nop
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	3301      	adds	r3, #1
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fb98 	bl	80045a4 <WIZCHIP_READ>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f3      	bne.n	8003e62 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003e7a:	7d3a      	ldrb	r2, [r7, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3301      	adds	r3, #1
 8003e84:	7d7a      	ldrb	r2, [r7, #21]
 8003e86:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	7dba      	ldrb	r2, [r7, #22]
 8003e8e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3303      	adds	r3, #3
 8003e94:	7dfa      	ldrb	r2, [r7, #23]
 8003e96:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003e98:	7e3b      	ldrb	r3, [r7, #24]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	7e7a      	ldrb	r2, [r7, #25]
 8003eaa:	4413      	add	r3, r2
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003eb2:	7eba      	ldrb	r2, [r7, #26]
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4a47      	ldr	r2, [pc, #284]	@ (8003fd8 <recvfrom+0x274>)
 8003eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	4a45      	ldr	r2, [pc, #276]	@ (8003fd8 <recvfrom+0x274>)
 8003ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	7efb      	ldrb	r3, [r7, #27]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	b291      	uxth	r1, r2
 8003ed4:	4a40      	ldr	r2, [pc, #256]	@ (8003fd8 <recvfrom+0x274>)
 8003ed6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	4a40      	ldr	r2, [pc, #256]	@ (8003fe0 <recvfrom+0x27c>)
 8003ede:	2180      	movs	r1, #128	@ 0x80
 8003ee0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd8 <recvfrom+0x274>)
 8003ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eea:	89ba      	ldrh	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d202      	bcs.n	8003ef6 <recvfrom+0x192>
 8003ef0:	89bb      	ldrh	r3, [r7, #12]
 8003ef2:	83fb      	strh	r3, [r7, #30]
 8003ef4:	e004      	b.n	8003f00 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	4a37      	ldr	r2, [pc, #220]	@ (8003fd8 <recvfrom+0x274>)
 8003efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003efe:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003f00:	8bfb      	ldrh	r3, [r7, #30]
 8003f02:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003f04:	8bfa      	ldrh	r2, [r7, #30]
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fd90 	bl	8004a30 <wiz_recv_data>
			break;
 8003f10:	e0d5      	b.n	80040be <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	4a30      	ldr	r2, [pc, #192]	@ (8003fd8 <recvfrom+0x274>)
 8003f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d145      	bne.n	8003faa <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8003f1e:	f107 0114 	add.w	r1, r7, #20
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2202      	movs	r2, #2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fd82 	bl	8004a30 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	3301      	adds	r3, #1
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f38:	2140      	movs	r1, #64	@ 0x40
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fb7e 	bl	800463c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003f40:	bf00      	nop
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	3301      	adds	r3, #1
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fb28 	bl	80045a4 <WIZCHIP_READ>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f3      	bne.n	8003f42 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003f5a:	7d3a      	ldrb	r2, [r7, #20]
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd8 <recvfrom+0x274>)
 8003f62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd8 <recvfrom+0x274>)
 8003f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	7d7a      	ldrb	r2, [r7, #21]
 8003f74:	4413      	add	r3, r2
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	3a02      	subs	r2, #2
 8003f7c:	b291      	uxth	r1, r2
 8003f7e:	4a16      	ldr	r2, [pc, #88]	@ (8003fd8 <recvfrom+0x274>)
 8003f80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <recvfrom+0x274>)
 8003f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f8c:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d906      	bls.n	8003fa2 <recvfrom+0x23e>
   			{
   			   close(sn);
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff faba 	bl	8003510 <close>
   			   return SOCKFATAL_PACKLEN;
 8003f9c:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8003fa0:	e0c4      	b.n	800412c <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe0 <recvfrom+0x27c>)
 8003fa6:	2180      	movs	r1, #128	@ 0x80
 8003fa8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd8 <recvfrom+0x274>)
 8003fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fb2:	89ba      	ldrh	r2, [r7, #12]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d202      	bcs.n	8003fbe <recvfrom+0x25a>
 8003fb8:	89bb      	ldrh	r3, [r7, #12]
 8003fba:	83fb      	strh	r3, [r7, #30]
 8003fbc:	e004      	b.n	8003fc8 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	4a05      	ldr	r2, [pc, #20]	@ (8003fd8 <recvfrom+0x274>)
 8003fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fc6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003fc8:	8bfa      	ldrh	r2, [r7, #30]
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fd2e 	bl	8004a30 <wiz_recv_data>
		   break;
 8003fd4:	e073      	b.n	80040be <recvfrom+0x35a>
 8003fd6:	bf00      	nop
 8003fd8:	20000e8c 	.word	0x20000e8c
 8003fdc:	20000e86 	.word	0x20000e86
 8003fe0:	20000e9c 	.word	0x20000e9c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	4a53      	ldr	r2, [pc, #332]	@ (8004134 <recvfrom+0x3d0>)
 8003fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d144      	bne.n	800407a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8003ff0:	f107 0114 	add.w	r1, r7, #20
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2206      	movs	r2, #6
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fd19 	bl	8004a30 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	3301      	adds	r3, #1
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800400a:	2140      	movs	r1, #64	@ 0x40
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fb15 	bl	800463c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004012:	bf00      	nop
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	3301      	adds	r3, #1
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fabf 	bl	80045a4 <WIZCHIP_READ>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f3      	bne.n	8004014 <recvfrom+0x2b0>
   			addr[0] = head[0];
 800402c:	7d3a      	ldrb	r2, [r7, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3301      	adds	r3, #1
 8004036:	7d7a      	ldrb	r2, [r7, #21]
 8004038:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3302      	adds	r3, #2
 800403e:	7dba      	ldrb	r2, [r7, #22]
 8004040:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3303      	adds	r3, #3
 8004046:	7dfa      	ldrb	r2, [r7, #23]
 8004048:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800404a:	7e3a      	ldrb	r2, [r7, #24]
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	4611      	mov	r1, r2
 8004050:	4a38      	ldr	r2, [pc, #224]	@ (8004134 <recvfrom+0x3d0>)
 8004052:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	4a36      	ldr	r2, [pc, #216]	@ (8004134 <recvfrom+0x3d0>)
 800405a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	b29a      	uxth	r2, r3
 8004062:	7e7b      	ldrb	r3, [r7, #25]
 8004064:	4619      	mov	r1, r3
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	440a      	add	r2, r1
 800406a:	b291      	uxth	r1, r2
 800406c:	4a31      	ldr	r2, [pc, #196]	@ (8004134 <recvfrom+0x3d0>)
 800406e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	4a30      	ldr	r2, [pc, #192]	@ (8004138 <recvfrom+0x3d4>)
 8004076:	2180      	movs	r1, #128	@ 0x80
 8004078:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	4a2d      	ldr	r2, [pc, #180]	@ (8004134 <recvfrom+0x3d0>)
 800407e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004082:	89ba      	ldrh	r2, [r7, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d202      	bcs.n	800408e <recvfrom+0x32a>
 8004088:	89bb      	ldrh	r3, [r7, #12]
 800408a:	83fb      	strh	r3, [r7, #30]
 800408c:	e004      	b.n	8004098 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	4a28      	ldr	r2, [pc, #160]	@ (8004134 <recvfrom+0x3d0>)
 8004092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004096:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004098:	8bfa      	ldrh	r2, [r7, #30]
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fcc6 	bl	8004a30 <wiz_recv_data>
			break;
 80040a4:	e00b      	b.n	80040be <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80040a6:	8bfa      	ldrh	r2, [r7, #30]
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fd19 	bl	8004ae4 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	491f      	ldr	r1, [pc, #124]	@ (8004134 <recvfrom+0x3d0>)
 80040b6:	8bfa      	ldrh	r2, [r7, #30]
 80040b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80040bc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	3301      	adds	r3, #1
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040ca:	2140      	movs	r1, #64	@ 0x40
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fab5 	bl	800463c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80040d2:	bf00      	nop
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3301      	adds	r3, #1
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fa5f 	bl	80045a4 <WIZCHIP_READ>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f3      	bne.n	80040d4 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	4a11      	ldr	r2, [pc, #68]	@ (8004134 <recvfrom+0x3d0>)
 80040f0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	8bfa      	ldrh	r2, [r7, #30]
 80040f8:	1a8a      	subs	r2, r1, r2
 80040fa:	b291      	uxth	r1, r2
 80040fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004134 <recvfrom+0x3d0>)
 80040fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	4a0b      	ldr	r2, [pc, #44]	@ (8004134 <recvfrom+0x3d0>)
 8004106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	4a09      	ldr	r2, [pc, #36]	@ (8004138 <recvfrom+0x3d4>)
 8004112:	5cd2      	ldrb	r2, [r2, r3]
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	b2d1      	uxtb	r1, r2
 800411c:	4a06      	ldr	r2, [pc, #24]	@ (8004138 <recvfrom+0x3d4>)
 800411e:	54d1      	strb	r1, [r2, r3]
 8004120:	e003      	b.n	800412a <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	4a04      	ldr	r2, [pc, #16]	@ (8004138 <recvfrom+0x3d4>)
 8004126:	2100      	movs	r1, #0
 8004128:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800412a:	8bfb      	ldrh	r3, [r7, #30]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000e8c 	.word	0x20000e8c
 8004138:	20000e9c 	.word	0x20000e9c

0800413c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <HAL_MspInit+0x4c>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	4a0f      	ldr	r2, [pc, #60]	@ (8004188 <HAL_MspInit+0x4c>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004150:	6453      	str	r3, [r2, #68]	@ 0x44
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <HAL_MspInit+0x4c>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <HAL_MspInit+0x4c>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	4a08      	ldr	r2, [pc, #32]	@ (8004188 <HAL_MspInit+0x4c>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	@ 0x40
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_MspInit+0x4c>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800417a:	2007      	movs	r0, #7
 800417c:	f001 f8c2 	bl	8005304 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	@ 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <HAL_SPI_MspInit+0x84>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d12b      	bne.n	8004206 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	4b18      	ldr	r3, [pc, #96]	@ (8004214 <HAL_SPI_MspInit+0x88>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	4a17      	ldr	r2, [pc, #92]	@ (8004214 <HAL_SPI_MspInit+0x88>)
 80041b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041be:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <HAL_SPI_MspInit+0x88>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b11      	ldr	r3, [pc, #68]	@ (8004214 <HAL_SPI_MspInit+0x88>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	4a10      	ldr	r2, [pc, #64]	@ (8004214 <HAL_SPI_MspInit+0x88>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041da:	4b0e      	ldr	r3, [pc, #56]	@ (8004214 <HAL_SPI_MspInit+0x88>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80041e6:	23e0      	movs	r3, #224	@ 0xe0
 80041e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ea:	2302      	movs	r3, #2
 80041ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f2:	2303      	movs	r3, #3
 80041f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041f6:	2305      	movs	r3, #5
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	4619      	mov	r1, r3
 8004200:	4805      	ldr	r0, [pc, #20]	@ (8004218 <HAL_SPI_MspInit+0x8c>)
 8004202:	f001 f953 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004206:	bf00      	nop
 8004208:	3728      	adds	r7, #40	@ 0x28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40013000 	.word	0x40013000
 8004214:	40023800 	.word	0x40023800
 8004218:	40020000 	.word	0x40020000

0800421c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0b      	ldr	r2, [pc, #44]	@ (8004258 <HAL_TIM_Base_MspInit+0x3c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10d      	bne.n	800424a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <HAL_TIM_Base_MspInit+0x40>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	4a09      	ldr	r2, [pc, #36]	@ (800425c <HAL_TIM_Base_MspInit+0x40>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6453      	str	r3, [r2, #68]	@ 0x44
 800423e:	4b07      	ldr	r3, [pc, #28]	@ (800425c <HAL_TIM_Base_MspInit+0x40>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40023800 	.word	0x40023800

08004260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 030c 	add.w	r3, r7, #12
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a12      	ldr	r2, [pc, #72]	@ (80042c8 <HAL_TIM_MspPostInit+0x68>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d11e      	bne.n	80042c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <HAL_TIM_MspPostInit+0x6c>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	4a10      	ldr	r2, [pc, #64]	@ (80042cc <HAL_TIM_MspPostInit+0x6c>)
 800428c:	f043 0310 	orr.w	r3, r3, #16
 8004290:	6313      	str	r3, [r2, #48]	@ 0x30
 8004292:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <HAL_TIM_MspPostInit+0x6c>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800429e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2302      	movs	r3, #2
 80042a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042a8:	2302      	movs	r3, #2
 80042aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4619      	mov	r1, r3
 80042ba:	4805      	ldr	r0, [pc, #20]	@ (80042d0 <HAL_TIM_MspPostInit+0x70>)
 80042bc:	f001 f8f6 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80042c0:	bf00      	nop
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40021000 	.word	0x40021000

080042d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004368 <HAL_UART_MspInit+0x94>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d133      	bne.n	800435e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	4b1c      	ldr	r3, [pc, #112]	@ (800436c <HAL_UART_MspInit+0x98>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <HAL_UART_MspInit+0x98>)
 8004300:	f043 0320 	orr.w	r3, r3, #32
 8004304:	6453      	str	r3, [r2, #68]	@ 0x44
 8004306:	4b19      	ldr	r3, [pc, #100]	@ (800436c <HAL_UART_MspInit+0x98>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b15      	ldr	r3, [pc, #84]	@ (800436c <HAL_UART_MspInit+0x98>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	4a14      	ldr	r2, [pc, #80]	@ (800436c <HAL_UART_MspInit+0x98>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	6313      	str	r3, [r2, #48]	@ 0x30
 8004322:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_UART_MspInit+0x98>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800432e:	23c0      	movs	r3, #192	@ 0xc0
 8004330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433a:	2303      	movs	r3, #3
 800433c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800433e:	2308      	movs	r3, #8
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004342:	f107 0314 	add.w	r3, r7, #20
 8004346:	4619      	mov	r1, r3
 8004348:	4809      	ldr	r0, [pc, #36]	@ (8004370 <HAL_UART_MspInit+0x9c>)
 800434a:	f001 f8af 	bl	80054ac <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	2047      	movs	r0, #71	@ 0x47
 8004354:	f000 ffe1 	bl	800531a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004358:	2047      	movs	r0, #71	@ 0x47
 800435a:	f000 fffa 	bl	8005352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800435e:	bf00      	nop
 8004360:	3728      	adds	r7, #40	@ 0x28
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40011400 	.word	0x40011400
 800436c:	40023800 	.word	0x40023800
 8004370:	40020800 	.word	0x40020800

08004374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <NMI_Handler+0x4>

0800437c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <HardFault_Handler+0x4>

08004384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <MemManage_Handler+0x4>

0800438c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004390:	bf00      	nop
 8004392:	e7fd      	b.n	8004390 <BusFault_Handler+0x4>

08004394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <UsageFault_Handler+0x4>

0800439c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043ca:	f000 fe87 	bl	80050dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80043d6:	2001      	movs	r0, #1
 80043d8:	f001 fa1e 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}

080043e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80043e4:	4802      	ldr	r0, [pc, #8]	@ (80043f0 <USART6_IRQHandler+0x10>)
 80043e6:	f003 fceb 	bl	8007dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000734 	.word	0x20000734

080043f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return 1;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_kill>:

int _kill(int pid, int sig)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800440e:	f005 fd35 	bl	8009e7c <__errno>
 8004412:	4603      	mov	r3, r0
 8004414:	2216      	movs	r2, #22
 8004416:	601a      	str	r2, [r3, #0]
  return -1;
 8004418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <_exit>:

void _exit (int status)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800442c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ffe7 	bl	8004404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <_exit+0x12>

0800443a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e00a      	b.n	8004462 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800444c:	f3af 8000 	nop.w
 8004450:	4601      	mov	r1, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	60ba      	str	r2, [r7, #8]
 8004458:	b2ca      	uxtb	r2, r1
 800445a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3301      	adds	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	dbf0      	blt.n	800444c <_read+0x12>
  }

  return len;
 800446a:	687b      	ldr	r3, [r7, #4]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e009      	b.n	800449a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	60ba      	str	r2, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3301      	adds	r3, #1
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	dbf1      	blt.n	8004486 <_write+0x12>
  }
  return len;
 80044a2:	687b      	ldr	r3, [r7, #4]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_close>:

int _close(int file)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044d4:	605a      	str	r2, [r3, #4]
  return 0;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <_isatty>:

int _isatty(int file)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044ec:	2301      	movs	r3, #1
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800451c:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <_sbrk+0x5c>)
 800451e:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <_sbrk+0x60>)
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004528:	4b13      	ldr	r3, [pc, #76]	@ (8004578 <_sbrk+0x64>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004530:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <_sbrk+0x64>)
 8004532:	4a12      	ldr	r2, [pc, #72]	@ (800457c <_sbrk+0x68>)
 8004534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <_sbrk+0x64>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	429a      	cmp	r2, r3
 8004542:	d207      	bcs.n	8004554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004544:	f005 fc9a 	bl	8009e7c <__errno>
 8004548:	4603      	mov	r3, r0
 800454a:	220c      	movs	r2, #12
 800454c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004552:	e009      	b.n	8004568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004554:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <_sbrk+0x64>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800455a:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <_sbrk+0x64>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	4a05      	ldr	r2, [pc, #20]	@ (8004578 <_sbrk+0x64>)
 8004564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004566:	68fb      	ldr	r3, [r7, #12]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20020000 	.word	0x20020000
 8004574:	00000400 	.word	0x00000400
 8004578:	20000ea4 	.word	0x20000ea4
 800457c:	20001000 	.word	0x20001000

08004580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004584:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <SystemInit+0x20>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <SystemInit+0x20>)
 800458c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80045ac:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <WIZCHIP_READ+0x94>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80045b2:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <WIZCHIP_READ+0x94>)
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80045b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004638 <WIZCHIP_READ+0x94>)
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <WIZCHIP_READ+0x24>
 80045c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <WIZCHIP_READ+0x94>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d114      	bne.n	80045f2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80045c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004638 <WIZCHIP_READ+0x94>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	0c12      	lsrs	r2, r2, #16
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	4610      	mov	r0, r2
 80045d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80045d6:	4b18      	ldr	r3, [pc, #96]	@ (8004638 <WIZCHIP_READ+0x94>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	0a12      	lsrs	r2, r2, #8
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	4610      	mov	r0, r2
 80045e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80045e4:	4b14      	ldr	r3, [pc, #80]	@ (8004638 <WIZCHIP_READ+0x94>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	4610      	mov	r0, r2
 80045ee:	4798      	blx	r3
 80045f0:	e011      	b.n	8004616 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <WIZCHIP_READ+0x94>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	f107 020c 	add.w	r2, r7, #12
 8004610:	2103      	movs	r1, #3
 8004612:	4610      	mov	r0, r2
 8004614:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004616:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <WIZCHIP_READ+0x94>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4798      	blx	r3
 800461c:	4603      	mov	r3, r0
 800461e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004620:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <WIZCHIP_READ+0x94>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004626:	4b04      	ldr	r3, [pc, #16]	@ (8004638 <WIZCHIP_READ+0x94>)
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	4798      	blx	r3
   return ret;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000044 	.word	0x20000044

0800463c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004648:	4b22      	ldr	r3, [pc, #136]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800464e:	4b21      	ldr	r3, [pc, #132]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800465c:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d119      	bne.n	8004698 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	0c12      	lsrs	r2, r2, #16
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	4610      	mov	r0, r2
 8004670:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004672:	4b18      	ldr	r3, [pc, #96]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	0a12      	lsrs	r2, r2, #8
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	4610      	mov	r0, r2
 800467e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004680:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	4610      	mov	r0, r2
 800468a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800468c:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	4610      	mov	r0, r2
 8004694:	4798      	blx	r3
 8004696:	e013      	b.n	80046c0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	0c1b      	lsrs	r3, r3, #16
 800469c:	b2db      	uxtb	r3, r3
 800469e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80046b2:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	f107 020c 	add.w	r2, r7, #12
 80046ba:	2104      	movs	r1, #4
 80046bc:	4610      	mov	r0, r2
 80046be:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80046c0:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80046c6:	4b03      	ldr	r3, [pc, #12]	@ (80046d4 <WIZCHIP_WRITE+0x98>)
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	4798      	blx	r3
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000044 	.word	0x20000044

080046d8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80046e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4798      	blx	r3
   WIZCHIP.CS._select();
 80046ec:	4b29      	ldr	r3, [pc, #164]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80046f2:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <WIZCHIP_READ_BUF+0x2a>
 80046fa:	4b26      	ldr	r3, [pc, #152]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 80046fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d126      	bne.n	8004750 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	0c12      	lsrs	r2, r2, #16
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	4610      	mov	r0, r2
 800470e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004710:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	0a12      	lsrs	r2, r2, #8
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	4610      	mov	r0, r2
 800471c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800471e:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	4610      	mov	r0, r2
 8004728:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800472a:	2300      	movs	r3, #0
 800472c:	82fb      	strh	r3, [r7, #22]
 800472e:	e00a      	b.n	8004746 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004730:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	8afa      	ldrh	r2, [r7, #22]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	188c      	adds	r4, r1, r2
 800473a:	4798      	blx	r3
 800473c:	4603      	mov	r3, r0
 800473e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004740:	8afb      	ldrh	r3, [r7, #22]
 8004742:	3301      	adds	r3, #1
 8004744:	82fb      	strh	r3, [r7, #22]
 8004746:	8afa      	ldrh	r2, [r7, #22]
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3f0      	bcc.n	8004730 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800474e:	e017      	b.n	8004780 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	b2db      	uxtb	r3, r3
 8004756:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b2db      	uxtb	r3, r3
 800475e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004766:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	f107 0210 	add.w	r2, r7, #16
 800476e:	2103      	movs	r1, #3
 8004770:	4610      	mov	r0, r2
 8004772:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004774:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	4611      	mov	r1, r2
 800477c:	68b8      	ldr	r0, [r7, #8]
 800477e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004780:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004786:	4b03      	ldr	r3, [pc, #12]	@ (8004794 <WIZCHIP_READ_BUF+0xbc>)
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	4798      	blx	r3
}
 800478c:	bf00      	nop
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}
 8004794:	20000044 	.word	0x20000044

08004798 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80047a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4798      	blx	r3
   WIZCHIP.CS._select();
 80047ac:	4b29      	ldr	r3, [pc, #164]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80047ba:	4b26      	ldr	r3, [pc, #152]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d126      	bne.n	8004810 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80047c2:	4b24      	ldr	r3, [pc, #144]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	0c12      	lsrs	r2, r2, #16
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	4610      	mov	r0, r2
 80047ce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80047d0:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	0a12      	lsrs	r2, r2, #8
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	4610      	mov	r0, r2
 80047dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80047de:	4b1d      	ldr	r3, [pc, #116]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	4610      	mov	r0, r2
 80047e8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80047ea:	2300      	movs	r3, #0
 80047ec:	82fb      	strh	r3, [r7, #22]
 80047ee:	e00a      	b.n	8004806 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80047f0:	4b18      	ldr	r3, [pc, #96]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	8afa      	ldrh	r2, [r7, #22]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	440a      	add	r2, r1
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	4610      	mov	r0, r2
 80047fe:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004800:	8afb      	ldrh	r3, [r7, #22]
 8004802:	3301      	adds	r3, #1
 8004804:	82fb      	strh	r3, [r7, #22]
 8004806:	8afa      	ldrh	r2, [r7, #22]
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3f0      	bcc.n	80047f0 <WIZCHIP_WRITE_BUF+0x58>
 800480e:	e017      	b.n	8004840 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	b2db      	uxtb	r3, r3
 8004816:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	b2db      	uxtb	r3, r3
 800481e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 8004828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482a:	f107 0210 	add.w	r2, r7, #16
 800482e:	2103      	movs	r1, #3
 8004830:	4610      	mov	r0, r2
 8004832:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004834:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	4611      	mov	r1, r2
 800483c:	68b8      	ldr	r0, [r7, #8]
 800483e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004840:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004846:	4b03      	ldr	r3, [pc, #12]	@ (8004854 <WIZCHIP_WRITE_BUF+0xbc>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	4798      	blx	r3
}
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000044 	.word	0x20000044

08004858 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004862:	2300      	movs	r3, #0
 8004864:	81fb      	strh	r3, [r7, #14]
 8004866:	2300      	movs	r3, #0
 8004868:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	3301      	adds	r3, #1
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fe94 	bl	80045a4 <WIZCHIP_READ>
 800487c:	4603      	mov	r3, r0
 800487e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004880:	89bb      	ldrh	r3, [r7, #12]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	b29c      	uxth	r4, r3
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	3301      	adds	r3, #1
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fe86 	bl	80045a4 <WIZCHIP_READ>
 8004898:	4603      	mov	r3, r0
 800489a:	4423      	add	r3, r4
 800489c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800489e:	89bb      	ldrh	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d019      	beq.n	80048d8 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	3301      	adds	r3, #1
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fe77 	bl	80045a4 <WIZCHIP_READ>
 80048b6:	4603      	mov	r3, r0
 80048b8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	b29c      	uxth	r4, r3
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	3301      	adds	r3, #1
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fe69 	bl	80045a4 <WIZCHIP_READ>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4423      	add	r3, r4
 80048d6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80048d8:	89fa      	ldrh	r2, [r7, #14]
 80048da:	89bb      	ldrh	r3, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1c4      	bne.n	800486a <getSn_TX_FSR+0x12>
   return val;
 80048e0:	89fb      	ldrh	r3, [r7, #14]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd90      	pop	{r4, r7, pc}

080048ea <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80048ea:	b590      	push	{r4, r7, lr}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	81fb      	strh	r3, [r7, #14]
 80048f8:	2300      	movs	r3, #0
 80048fa:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3301      	adds	r3, #1
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fe4b 	bl	80045a4 <WIZCHIP_READ>
 800490e:	4603      	mov	r3, r0
 8004910:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004912:	89bb      	ldrh	r3, [r7, #12]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	b29c      	uxth	r4, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3301      	adds	r3, #1
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fe3d 	bl	80045a4 <WIZCHIP_READ>
 800492a:	4603      	mov	r3, r0
 800492c:	4423      	add	r3, r4
 800492e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004930:	89bb      	ldrh	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d019      	beq.n	800496a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	3301      	adds	r3, #1
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fe2e 	bl	80045a4 <WIZCHIP_READ>
 8004948:	4603      	mov	r3, r0
 800494a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800494c:	89fb      	ldrh	r3, [r7, #14]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	b29c      	uxth	r4, r3
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	3301      	adds	r3, #1
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fe20 	bl	80045a4 <WIZCHIP_READ>
 8004964:	4603      	mov	r3, r0
 8004966:	4423      	add	r3, r4
 8004968:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800496a:	89fa      	ldrh	r2, [r7, #14]
 800496c:	89bb      	ldrh	r3, [r7, #12]
 800496e:	429a      	cmp	r2, r3
 8004970:	d1c4      	bne.n	80048fc <getSn_RX_RSR+0x12>
   return val;
 8004972:	89fb      	ldrh	r3, [r7, #14]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bd90      	pop	{r4, r7, pc}

0800497c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	6039      	str	r1, [r7, #0]
 8004986:	71fb      	strb	r3, [r7, #7]
 8004988:	4613      	mov	r3, r2
 800498a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004994:	88bb      	ldrh	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d046      	beq.n	8004a28 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	3301      	adds	r3, #1
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fdfc 	bl	80045a4 <WIZCHIP_READ>
 80049ac:	4603      	mov	r3, r0
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	b29c      	uxth	r4, r3
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	3301      	adds	r3, #1
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fdf0 	bl	80045a4 <WIZCHIP_READ>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4423      	add	r3, r4
 80049c8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	79fa      	ldrb	r2, [r7, #7]
 80049d0:	0092      	lsls	r2, r2, #2
 80049d2:	3202      	adds	r2, #2
 80049d4:	00d2      	lsls	r2, r2, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80049da:	88bb      	ldrh	r3, [r7, #4]
 80049dc:	461a      	mov	r2, r3
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f7ff fed9 	bl	8004798 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80049e6:	89fa      	ldrh	r2, [r7, #14]
 80049e8:	88bb      	ldrh	r3, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	3301      	adds	r3, #1
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80049fa:	461a      	mov	r2, r3
 80049fc:	89fb      	ldrh	r3, [r7, #14]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f7ff fe18 	bl	800463c <WIZCHIP_WRITE>
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	3301      	adds	r3, #1
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8004a18:	461a      	mov	r2, r3
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7ff fe0b 	bl	800463c <WIZCHIP_WRITE>
 8004a26:	e000      	b.n	8004a2a <wiz_send_data+0xae>
   if(len == 0)  return;
 8004a28:	bf00      	nop
}
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}

08004a30 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	6039      	str	r1, [r7, #0]
 8004a3a:	71fb      	strb	r3, [r7, #7]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004a48:	88bb      	ldrh	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d046      	beq.n	8004adc <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	3301      	adds	r3, #1
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fda2 	bl	80045a4 <WIZCHIP_READ>
 8004a60:	4603      	mov	r3, r0
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	b29c      	uxth	r4, r3
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fd96 	bl	80045a4 <WIZCHIP_READ>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4423      	add	r3, r4
 8004a7c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	79fa      	ldrb	r2, [r7, #7]
 8004a84:	0092      	lsls	r2, r2, #2
 8004a86:	3203      	adds	r2, #3
 8004a88:	00d2      	lsls	r2, r2, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004a8e:	88bb      	ldrh	r3, [r7, #4]
 8004a90:	461a      	mov	r2, r3
 8004a92:	6839      	ldr	r1, [r7, #0]
 8004a94:	68b8      	ldr	r0, [r7, #8]
 8004a96:	f7ff fe1f 	bl	80046d8 <WIZCHIP_READ_BUF>
   ptr += len;
 8004a9a:	89fa      	ldrh	r2, [r7, #14]
 8004a9c:	88bb      	ldrh	r3, [r7, #4]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004aae:	461a      	mov	r2, r3
 8004ab0:	89fb      	ldrh	r3, [r7, #14]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7ff fdbe 	bl	800463c <WIZCHIP_WRITE>
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004acc:	461a      	mov	r2, r3
 8004ace:	89fb      	ldrh	r3, [r7, #14]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7ff fdb1 	bl	800463c <WIZCHIP_WRITE>
 8004ada:	e000      	b.n	8004ade <wiz_recv_data+0xae>
   if(len == 0) return;
 8004adc:	bf00      	nop
}
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd90      	pop	{r4, r7, pc}

08004ae4 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	460a      	mov	r2, r1
 8004aee:	71fb      	strb	r3, [r7, #7]
 8004af0:	4613      	mov	r3, r2
 8004af2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	3301      	adds	r3, #1
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fd4d 	bl	80045a4 <WIZCHIP_READ>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	b29c      	uxth	r4, r3
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	3301      	adds	r3, #1
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fd41 	bl	80045a4 <WIZCHIP_READ>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4423      	add	r3, r4
 8004b26:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004b28:	89fa      	ldrh	r2, [r7, #14]
 8004b2a:	88bb      	ldrh	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	3301      	adds	r3, #1
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	89fb      	ldrh	r3, [r7, #14]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7ff fd77 	bl	800463c <WIZCHIP_WRITE>
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	3301      	adds	r3, #1
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	89fb      	ldrh	r3, [r7, #14]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f7ff fd6a 	bl	800463c <WIZCHIP_WRITE>
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}

08004b70 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	2300      	movs	r3, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	807b      	strh	r3, [r7, #2]
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	807b      	strh	r3, [r7, #2]
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <reg_wizchip_cs_cbfunc+0x16>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <reg_wizchip_cs_cbfunc+0x40>)
 8004c50:	4a0a      	ldr	r2, [pc, #40]	@ (8004c7c <reg_wizchip_cs_cbfunc+0x44>)
 8004c52:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004c54:	4b08      	ldr	r3, [pc, #32]	@ (8004c78 <reg_wizchip_cs_cbfunc+0x40>)
 8004c56:	4a0a      	ldr	r2, [pc, #40]	@ (8004c80 <reg_wizchip_cs_cbfunc+0x48>)
 8004c58:	619a      	str	r2, [r3, #24]
 8004c5a:	e006      	b.n	8004c6a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004c5c:	4a06      	ldr	r2, [pc, #24]	@ (8004c78 <reg_wizchip_cs_cbfunc+0x40>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004c62:	4a05      	ldr	r2, [pc, #20]	@ (8004c78 <reg_wizchip_cs_cbfunc+0x40>)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6193      	str	r3, [r2, #24]
   }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000044 	.word	0x20000044
 8004c7c:	08004b8d 	.word	0x08004b8d
 8004c80:	08004b9b 	.word	0x08004b9b

08004c84 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004c8e:	bf00      	nop
 8004c90:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f9      	beq.n	8004c90 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <reg_wizchip_spi_cbfunc+0x24>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004ca8:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004caa:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <reg_wizchip_spi_cbfunc+0x50>)
 8004cac:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004cae:	4b08      	ldr	r3, [pc, #32]	@ (8004cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004cb0:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <reg_wizchip_spi_cbfunc+0x54>)
 8004cb2:	621a      	str	r2, [r3, #32]
 8004cb4:	e006      	b.n	8004cc4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004cb6:	4a06      	ldr	r2, [pc, #24]	@ (8004cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004cbc:	4a04      	ldr	r2, [pc, #16]	@ (8004cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6213      	str	r3, [r2, #32]
   }
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20000044 	.word	0x20000044
 8004cd4:	08004be1 	.word	0x08004be1
 8004cd8:	08004bf1 	.word	0x08004bf1

08004cdc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004ce6:	bf00      	nop
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f9      	beq.n	8004ce8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <reg_wizchip_spiburst_cbfunc+0x24>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004d00:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d02:	4a0a      	ldr	r2, [pc, #40]	@ (8004d2c <reg_wizchip_spiburst_cbfunc+0x50>)
 8004d04:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004d06:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d08:	4a09      	ldr	r2, [pc, #36]	@ (8004d30 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004d0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d0c:	e006      	b.n	8004d1c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004d0e:	4a06      	ldr	r2, [pc, #24]	@ (8004d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004d14:	4a04      	ldr	r2, [pc, #16]	@ (8004d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20000044 	.word	0x20000044
 8004d2c:	08004c07 	.word	0x08004c07
 8004d30:	08004c1f 	.word	0x08004c1f

08004d34 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004d3a:	1d3b      	adds	r3, r7, #4
 8004d3c:	2206      	movs	r2, #6
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004d44:	f7ff fcc8 	bl	80046d8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004d54:	f7ff fcc0 	bl	80046d8 <WIZCHIP_READ_BUF>
 8004d58:	f107 0310 	add.w	r3, r7, #16
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004d64:	f7ff fcb8 	bl	80046d8 <WIZCHIP_READ_BUF>
 8004d68:	f107 030c 	add.w	r3, r7, #12
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004d74:	f7ff fcb0 	bl	80046d8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004d78:	2180      	movs	r1, #128	@ 0x80
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f7ff fc5e 	bl	800463c <WIZCHIP_WRITE>
   getMR(); // for delay
 8004d80:	2000      	movs	r0, #0
 8004d82:	f7ff fc0f 	bl	80045a4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	2206      	movs	r2, #6
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004d90:	f7ff fd02 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004d94:	f107 0314 	add.w	r3, r7, #20
 8004d98:	2204      	movs	r2, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004da0:	f7ff fcfa 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004da4:	f107 0310 	add.w	r3, r7, #16
 8004da8:	2204      	movs	r2, #4
 8004daa:	4619      	mov	r1, r3
 8004dac:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004db0:	f7ff fcf2 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004db4:	f107 030c 	add.w	r3, r7, #12
 8004db8:	2204      	movs	r2, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004dc0:	f7ff fcea 	bl	8004798 <WIZCHIP_WRITE_BUF>
}
 8004dc4:	bf00      	nop
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004dda:	f7ff ffab 	bl	8004d34 <wizchip_sw_reset>
   if(txsize)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d03b      	beq.n	8004e5c <wizchip_init+0x90>
   {
      tmp = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	e015      	b.n	8004e1a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	781a      	ldrb	r2, [r3, #0]
 8004df8:	7bbb      	ldrb	r3, [r7, #14]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	dd02      	ble.n	8004e0e <wizchip_init+0x42>
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e0c:	e066      	b.n	8004edc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	3301      	adds	r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e1e:	2b07      	cmp	r3, #7
 8004e20:	dde5      	ble.n	8004dee <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e015      	b.n	8004e54 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	3301      	adds	r3, #1
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004e36:	4618      	mov	r0, r3
 8004e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4413      	add	r3, r2
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f7ff fbfa 	bl	800463c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e58:	2b07      	cmp	r3, #7
 8004e5a:	dde5      	ble.n	8004e28 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d03b      	beq.n	8004eda <wizchip_init+0x10e>
   {
      tmp = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
 8004e6a:	e015      	b.n	8004e98 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
 8004e78:	4413      	add	r3, r2
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	dd02      	ble.n	8004e8c <wizchip_init+0xc0>
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e8a:	e027      	b.n	8004edc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	3301      	adds	r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9c:	2b07      	cmp	r3, #7
 8004e9e:	dde5      	ble.n	8004e6c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	e015      	b.n	8004ed2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	3301      	adds	r3, #1
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f7ff fbbb 	bl	800463c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed6:	2b07      	cmp	r3, #7
 8004ed8:	dde5      	ble.n	8004ea6 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2206      	movs	r2, #6
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004ef6:	f7ff fc4f 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	330e      	adds	r3, #14
 8004efe:	2204      	movs	r2, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004f06:	f7ff fc47 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	330a      	adds	r3, #10
 8004f0e:	2204      	movs	r2, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004f16:	f7ff fc3f 	bl	8004798 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3306      	adds	r3, #6
 8004f1e:	2204      	movs	r2, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004f26:	f7ff fc37 	bl	8004798 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7c9a      	ldrb	r2, [r3, #18]
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <wizchip_setnetinfo+0x78>)
 8004f30:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7cda      	ldrb	r2, [r3, #19]
 8004f36:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <wizchip_setnetinfo+0x78>)
 8004f38:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7d1a      	ldrb	r2, [r3, #20]
 8004f3e:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <wizchip_setnetinfo+0x78>)
 8004f40:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	7d5a      	ldrb	r2, [r3, #21]
 8004f46:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <wizchip_setnetinfo+0x78>)
 8004f48:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7d9a      	ldrb	r2, [r3, #22]
 8004f4e:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <wizchip_setnetinfo+0x7c>)
 8004f50:	701a      	strb	r2, [r3, #0]
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000ea8 	.word	0x20000ea8
 8004f60:	20000eac 	.word	0x20000eac

08004f64 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2206      	movs	r2, #6
 8004f70:	4619      	mov	r1, r3
 8004f72:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004f76:	f7ff fbaf 	bl	80046d8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	330e      	adds	r3, #14
 8004f7e:	2204      	movs	r2, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004f86:	f7ff fba7 	bl	80046d8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	330a      	adds	r3, #10
 8004f8e:	2204      	movs	r2, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004f96:	f7ff fb9f 	bl	80046d8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3306      	adds	r3, #6
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004fa6:	f7ff fb97 	bl	80046d8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <wizchip_getnetinfo+0x78>)
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <wizchip_getnetinfo+0x78>)
 8004fb4:	785a      	ldrb	r2, [r3, #1]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004fba:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <wizchip_getnetinfo+0x78>)
 8004fbc:	789a      	ldrb	r2, [r3, #2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <wizchip_getnetinfo+0x78>)
 8004fc4:	78da      	ldrb	r2, [r3, #3]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004fca:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <wizchip_getnetinfo+0x7c>)
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	759a      	strb	r2, [r3, #22]
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000ea8 	.word	0x20000ea8
 8004fe0:	20000eac 	.word	0x20000eac

08004fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800501c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004fe8:	f7ff faca 	bl	8004580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fec:	480c      	ldr	r0, [pc, #48]	@ (8005020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004fee:	490d      	ldr	r1, [pc, #52]	@ (8005024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8005028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ff4:	e002      	b.n	8004ffc <LoopCopyDataInit>

08004ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ffa:	3304      	adds	r3, #4

08004ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005000:	d3f9      	bcc.n	8004ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005002:	4a0a      	ldr	r2, [pc, #40]	@ (800502c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005004:	4c0a      	ldr	r4, [pc, #40]	@ (8005030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005008:	e001      	b.n	800500e <LoopFillZerobss>

0800500a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800500a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800500c:	3204      	adds	r2, #4

0800500e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800500e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005010:	d3fb      	bcc.n	800500a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005012:	f004 ff39 	bl	8009e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005016:	f7fd fef1 	bl	8002dfc <main>
  bx  lr    
 800501a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800501c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005024:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8005028:	0800e3c4 	.word	0x0800e3c4
  ldr r2, =_sbss
 800502c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8005030:	20001000 	.word	0x20001000

08005034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005034:	e7fe      	b.n	8005034 <ADC_IRQHandler>
	...

08005038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800503c:	4b0e      	ldr	r3, [pc, #56]	@ (8005078 <HAL_Init+0x40>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0d      	ldr	r2, [pc, #52]	@ (8005078 <HAL_Init+0x40>)
 8005042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <HAL_Init+0x40>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a0a      	ldr	r2, [pc, #40]	@ (8005078 <HAL_Init+0x40>)
 800504e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005054:	4b08      	ldr	r3, [pc, #32]	@ (8005078 <HAL_Init+0x40>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a07      	ldr	r2, [pc, #28]	@ (8005078 <HAL_Init+0x40>)
 800505a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005060:	2003      	movs	r0, #3
 8005062:	f000 f94f 	bl	8005304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005066:	2000      	movs	r0, #0
 8005068:	f000 f808 	bl	800507c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800506c:	f7ff f866 	bl	800413c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023c00 	.word	0x40023c00

0800507c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005084:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <HAL_InitTick+0x54>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <HAL_InitTick+0x58>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005092:	fbb3 f3f1 	udiv	r3, r3, r1
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f967 	bl	800536e <HAL_SYSTICK_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00e      	b.n	80050c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b0f      	cmp	r3, #15
 80050ae:	d80a      	bhi.n	80050c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050b0:	2200      	movs	r2, #0
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050b8:	f000 f92f 	bl	800531a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050bc:	4a06      	ldr	r2, [pc, #24]	@ (80050d8 <HAL_InitTick+0x5c>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000040 	.word	0x20000040
 80050d4:	20000074 	.word	0x20000074
 80050d8:	20000070 	.word	0x20000070

080050dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_IncTick+0x20>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_IncTick+0x24>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4413      	add	r3, r2
 80050ec:	4a04      	ldr	r2, [pc, #16]	@ (8005100 <HAL_IncTick+0x24>)
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000074 	.word	0x20000074
 8005100:	20000eb0 	.word	0x20000eb0

08005104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return uwTick;
 8005108:	4b03      	ldr	r3, [pc, #12]	@ (8005118 <HAL_GetTick+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000eb0 	.word	0x20000eb0

0800511c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005124:	f7ff ffee 	bl	8005104 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005134:	d005      	beq.n	8005142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005136:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <HAL_Delay+0x44>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005142:	bf00      	nop
 8005144:	f7ff ffde 	bl	8005104 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d8f7      	bhi.n	8005144 <HAL_Delay+0x28>
  {
  }
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000074 	.word	0x20000074

08005164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005174:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005180:	4013      	ands	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800518c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005196:	4a04      	ldr	r2, [pc, #16]	@ (80051a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	60d3      	str	r3, [r2, #12]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051b0:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <__NVIC_GetPriorityGrouping+0x18>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	f003 0307 	and.w	r3, r3, #7
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	db0b      	blt.n	80051f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	f003 021f 	and.w	r2, r3, #31
 80051e0:	4907      	ldr	r1, [pc, #28]	@ (8005200 <__NVIC_EnableIRQ+0x38>)
 80051e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2001      	movs	r0, #1
 80051ea:	fa00 f202 	lsl.w	r2, r0, r2
 80051ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	e000e100 	.word	0xe000e100

08005204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005214:	2b00      	cmp	r3, #0
 8005216:	db0a      	blt.n	800522e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	490c      	ldr	r1, [pc, #48]	@ (8005250 <__NVIC_SetPriority+0x4c>)
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	0112      	lsls	r2, r2, #4
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	440b      	add	r3, r1
 8005228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800522c:	e00a      	b.n	8005244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	4908      	ldr	r1, [pc, #32]	@ (8005254 <__NVIC_SetPriority+0x50>)
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	3b04      	subs	r3, #4
 800523c:	0112      	lsls	r2, r2, #4
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	440b      	add	r3, r1
 8005242:	761a      	strb	r2, [r3, #24]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	e000e100 	.word	0xe000e100
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	@ 0x24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f1c3 0307 	rsb	r3, r3, #7
 8005272:	2b04      	cmp	r3, #4
 8005274:	bf28      	it	cs
 8005276:	2304      	movcs	r3, #4
 8005278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3304      	adds	r3, #4
 800527e:	2b06      	cmp	r3, #6
 8005280:	d902      	bls.n	8005288 <NVIC_EncodePriority+0x30>
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3b03      	subs	r3, #3
 8005286:	e000      	b.n	800528a <NVIC_EncodePriority+0x32>
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800528c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	43da      	mvns	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	401a      	ands	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	43d9      	mvns	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b0:	4313      	orrs	r3, r2
         );
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3724      	adds	r7, #36	@ 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052d0:	d301      	bcc.n	80052d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00f      	b.n	80052f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <SysTick_Config+0x40>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052de:	210f      	movs	r1, #15
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052e4:	f7ff ff8e 	bl	8005204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052e8:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <SysTick_Config+0x40>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ee:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <SysTick_Config+0x40>)
 80052f0:	2207      	movs	r2, #7
 80052f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	e000e010 	.word	0xe000e010

08005304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff29 	bl	8005164 <__NVIC_SetPriorityGrouping>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	4603      	mov	r3, r0
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800532c:	f7ff ff3e 	bl	80051ac <__NVIC_GetPriorityGrouping>
 8005330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	6978      	ldr	r0, [r7, #20]
 8005338:	f7ff ff8e 	bl	8005258 <NVIC_EncodePriority>
 800533c:	4602      	mov	r2, r0
 800533e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff ff5d 	bl	8005204 <__NVIC_SetPriority>
}
 800534a:	bf00      	nop
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	4603      	mov	r3, r0
 800535a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800535c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff ff31 	bl	80051c8 <__NVIC_EnableIRQ>
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ffa2 	bl	80052c0 <SysTick_Config>
 800537c:	4603      	mov	r3, r0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005392:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005394:	f7ff feb6 	bl	8005104 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d008      	beq.n	80053b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2280      	movs	r2, #128	@ 0x80
 80053aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e052      	b.n	800545e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0216 	bic.w	r2, r2, #22
 80053c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <HAL_DMA_Abort+0x62>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0208 	bic.w	r2, r2, #8
 80053f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005408:	e013      	b.n	8005432 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800540a:	f7ff fe7b 	bl	8005104 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b05      	cmp	r3, #5
 8005416:	d90c      	bls.n	8005432 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2203      	movs	r2, #3
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e015      	b.n	800545e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e4      	bne.n	800540a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005444:	223f      	movs	r2, #63	@ 0x3f
 8005446:	409a      	lsls	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d004      	beq.n	8005484 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2280      	movs	r2, #128	@ 0x80
 800547e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e00c      	b.n	800549e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2205      	movs	r2, #5
 8005488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	@ 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	e16b      	b.n	80057a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054c8:	2201      	movs	r2, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4013      	ands	r3, r2
 80054da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	f040 815a 	bne.w	800579a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d005      	beq.n	80054fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d130      	bne.n	8005560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	2203      	movs	r2, #3
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4013      	ands	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005534:	2201      	movs	r2, #1
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	4013      	ands	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 0201 	and.w	r2, r3, #1
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b03      	cmp	r3, #3
 800556a:	d017      	beq.n	800559c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2203      	movs	r2, #3
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d123      	bne.n	80055f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	08da      	lsrs	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3208      	adds	r2, #8
 80055b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	220f      	movs	r2, #15
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	08da      	lsrs	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3208      	adds	r2, #8
 80055ea:	69b9      	ldr	r1, [r7, #24]
 80055ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2203      	movs	r2, #3
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0203 	and.w	r2, r3, #3
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4313      	orrs	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80b4 	beq.w	800579a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b60      	ldr	r3, [pc, #384]	@ (80057b8 <HAL_GPIO_Init+0x30c>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	4a5f      	ldr	r2, [pc, #380]	@ (80057b8 <HAL_GPIO_Init+0x30c>)
 800563c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005640:	6453      	str	r3, [r2, #68]	@ 0x44
 8005642:	4b5d      	ldr	r3, [pc, #372]	@ (80057b8 <HAL_GPIO_Init+0x30c>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800564e:	4a5b      	ldr	r2, [pc, #364]	@ (80057bc <HAL_GPIO_Init+0x310>)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	3302      	adds	r3, #2
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	220f      	movs	r2, #15
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a52      	ldr	r2, [pc, #328]	@ (80057c0 <HAL_GPIO_Init+0x314>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d02b      	beq.n	80056d2 <HAL_GPIO_Init+0x226>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a51      	ldr	r2, [pc, #324]	@ (80057c4 <HAL_GPIO_Init+0x318>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d025      	beq.n	80056ce <HAL_GPIO_Init+0x222>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a50      	ldr	r2, [pc, #320]	@ (80057c8 <HAL_GPIO_Init+0x31c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01f      	beq.n	80056ca <HAL_GPIO_Init+0x21e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a4f      	ldr	r2, [pc, #316]	@ (80057cc <HAL_GPIO_Init+0x320>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d019      	beq.n	80056c6 <HAL_GPIO_Init+0x21a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a4e      	ldr	r2, [pc, #312]	@ (80057d0 <HAL_GPIO_Init+0x324>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_GPIO_Init+0x216>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a4d      	ldr	r2, [pc, #308]	@ (80057d4 <HAL_GPIO_Init+0x328>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00d      	beq.n	80056be <HAL_GPIO_Init+0x212>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a4c      	ldr	r2, [pc, #304]	@ (80057d8 <HAL_GPIO_Init+0x32c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <HAL_GPIO_Init+0x20e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a4b      	ldr	r2, [pc, #300]	@ (80057dc <HAL_GPIO_Init+0x330>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <HAL_GPIO_Init+0x20a>
 80056b2:	2307      	movs	r3, #7
 80056b4:	e00e      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056b6:	2308      	movs	r3, #8
 80056b8:	e00c      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056ba:	2306      	movs	r3, #6
 80056bc:	e00a      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056be:	2305      	movs	r3, #5
 80056c0:	e008      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056c2:	2304      	movs	r3, #4
 80056c4:	e006      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056c6:	2303      	movs	r3, #3
 80056c8:	e004      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e002      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056d2:	2300      	movs	r3, #0
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	f002 0203 	and.w	r2, r2, #3
 80056da:	0092      	lsls	r2, r2, #2
 80056dc:	4093      	lsls	r3, r2
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056e4:	4935      	ldr	r1, [pc, #212]	@ (80057bc <HAL_GPIO_Init+0x310>)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	3302      	adds	r3, #2
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056f2:	4b3b      	ldr	r3, [pc, #236]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005716:	4a32      	ldr	r2, [pc, #200]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800571c:	4b30      	ldr	r3, [pc, #192]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005740:	4a27      	ldr	r2, [pc, #156]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005746:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800576a:	4a1d      	ldr	r2, [pc, #116]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005770:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005794:	4a12      	ldr	r2, [pc, #72]	@ (80057e0 <HAL_GPIO_Init+0x334>)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	f67f ae90 	bls.w	80054c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3724      	adds	r7, #36	@ 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40013800 	.word	0x40013800
 80057c0:	40020000 	.word	0x40020000
 80057c4:	40020400 	.word	0x40020400
 80057c8:	40020800 	.word	0x40020800
 80057cc:	40020c00 	.word	0x40020c00
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40021400 	.word	0x40021400
 80057d8:	40021800 	.word	0x40021800
 80057dc:	40021c00 	.word	0x40021c00
 80057e0:	40013c00 	.word	0x40013c00

080057e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
 80057f0:	4613      	mov	r3, r2
 80057f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057f4:	787b      	ldrb	r3, [r7, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005800:	e003      	b.n	800580a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005802:	887b      	ldrh	r3, [r7, #2]
 8005804:	041a      	lsls	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	619a      	str	r2, [r3, #24]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005822:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800582e:	4a05      	ldr	r2, [pc, #20]	@ (8005844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fd fad2 	bl	8002de0 <HAL_GPIO_EXTI_Callback>
  }
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40013c00 	.word	0x40013c00

08005848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e267      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d075      	beq.n	8005952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005866:	4b88      	ldr	r3, [pc, #544]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b04      	cmp	r3, #4
 8005870:	d00c      	beq.n	800588c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005872:	4b85      	ldr	r3, [pc, #532]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800587a:	2b08      	cmp	r3, #8
 800587c:	d112      	bne.n	80058a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800587e:	4b82      	ldr	r3, [pc, #520]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800588a:	d10b      	bne.n	80058a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05b      	beq.n	8005950 <HAL_RCC_OscConfig+0x108>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d157      	bne.n	8005950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e242      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ac:	d106      	bne.n	80058bc <HAL_RCC_OscConfig+0x74>
 80058ae:	4b76      	ldr	r3, [pc, #472]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a75      	ldr	r2, [pc, #468]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e01d      	b.n	80058f8 <HAL_RCC_OscConfig+0xb0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x98>
 80058c6:	4b70      	ldr	r3, [pc, #448]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6f      	ldr	r2, [pc, #444]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6c      	ldr	r2, [pc, #432]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e00b      	b.n	80058f8 <HAL_RCC_OscConfig+0xb0>
 80058e0:	4b69      	ldr	r3, [pc, #420]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a68      	ldr	r2, [pc, #416]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b66      	ldr	r3, [pc, #408]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a65      	ldr	r2, [pc, #404]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d013      	beq.n	8005928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7ff fc00 	bl	8005104 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005908:	f7ff fbfc 	bl	8005104 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b64      	cmp	r3, #100	@ 0x64
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e207      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	4b5b      	ldr	r3, [pc, #364]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0xc0>
 8005926:	e014      	b.n	8005952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005928:	f7ff fbec 	bl	8005104 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005930:	f7ff fbe8 	bl	8005104 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b64      	cmp	r3, #100	@ 0x64
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e1f3      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005942:	4b51      	ldr	r3, [pc, #324]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0xe8>
 800594e:	e000      	b.n	8005952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d063      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800595e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800596a:	4b47      	ldr	r3, [pc, #284]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005972:	2b08      	cmp	r3, #8
 8005974:	d11c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005976:	4b44      	ldr	r3, [pc, #272]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d116      	bne.n	80059b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005982:	4b41      	ldr	r3, [pc, #260]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_RCC_OscConfig+0x152>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d001      	beq.n	800599a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e1c7      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4937      	ldr	r1, [pc, #220]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ae:	e03a      	b.n	8005a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d020      	beq.n	80059fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059b8:	4b34      	ldr	r3, [pc, #208]	@ (8005a8c <HAL_RCC_OscConfig+0x244>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7ff fba1 	bl	8005104 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c6:	f7ff fb9d 	bl	8005104 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e1a8      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e4:	4b28      	ldr	r3, [pc, #160]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4925      	ldr	r1, [pc, #148]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]
 80059f8:	e015      	b.n	8005a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fa:	4b24      	ldr	r3, [pc, #144]	@ (8005a8c <HAL_RCC_OscConfig+0x244>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7ff fb80 	bl	8005104 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a08:	f7ff fb7c 	bl	8005104 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e187      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d036      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d016      	beq.n	8005a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3a:	4b15      	ldr	r3, [pc, #84]	@ (8005a90 <HAL_RCC_OscConfig+0x248>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7ff fb60 	bl	8005104 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a48:	f7ff fb5c 	bl	8005104 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e167      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0x200>
 8005a66:	e01b      	b.n	8005aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a68:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <HAL_RCC_OscConfig+0x248>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6e:	f7ff fb49 	bl	8005104 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a74:	e00e      	b.n	8005a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a76:	f7ff fb45 	bl	8005104 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d907      	bls.n	8005a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e150      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	42470000 	.word	0x42470000
 8005a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a94:	4b88      	ldr	r3, [pc, #544]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ea      	bne.n	8005a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8097 	beq.w	8005bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab2:	4b81      	ldr	r3, [pc, #516]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10f      	bne.n	8005ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ace:	4b7a      	ldr	r3, [pc, #488]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ade:	4b77      	ldr	r3, [pc, #476]	@ (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d118      	bne.n	8005b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aea:	4b74      	ldr	r3, [pc, #464]	@ (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a73      	ldr	r2, [pc, #460]	@ (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005af6:	f7ff fb05 	bl	8005104 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afe:	f7ff fb01 	bl	8005104 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e10c      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b10:	4b6a      	ldr	r3, [pc, #424]	@ (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d106      	bne.n	8005b32 <HAL_RCC_OscConfig+0x2ea>
 8005b24:	4b64      	ldr	r3, [pc, #400]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b28:	4a63      	ldr	r2, [pc, #396]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b30:	e01c      	b.n	8005b6c <HAL_RCC_OscConfig+0x324>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d10c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x30c>
 8005b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b46:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b52:	e00b      	b.n	8005b6c <HAL_RCC_OscConfig+0x324>
 8005b54:	4b58      	ldr	r3, [pc, #352]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	4a57      	ldr	r2, [pc, #348]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b60:	4b55      	ldr	r3, [pc, #340]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b64:	4a54      	ldr	r2, [pc, #336]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b66:	f023 0304 	bic.w	r3, r3, #4
 8005b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7ff fac6 	bl	8005104 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b7c:	f7ff fac2 	bl	8005104 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0cb      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b92:	4b49      	ldr	r3, [pc, #292]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0ee      	beq.n	8005b7c <HAL_RCC_OscConfig+0x334>
 8005b9e:	e014      	b.n	8005bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba0:	f7ff fab0 	bl	8005104 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f7ff faac 	bl	8005104 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e0b5      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ee      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd0:	4b39      	ldr	r3, [pc, #228]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	4a38      	ldr	r2, [pc, #224]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80a1 	beq.w	8005d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005be6:	4b34      	ldr	r3, [pc, #208]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d05c      	beq.n	8005cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d141      	bne.n	8005c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfa:	4b31      	ldr	r3, [pc, #196]	@ (8005cc0 <HAL_RCC_OscConfig+0x478>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c00:	f7ff fa80 	bl	8005104 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c08:	f7ff fa7c 	bl	8005104 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e087      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1a:	4b27      	ldr	r3, [pc, #156]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	019b      	lsls	r3, r3, #6
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	491b      	ldr	r1, [pc, #108]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c50:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc0 <HAL_RCC_OscConfig+0x478>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c56:	f7ff fa55 	bl	8005104 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c5e:	f7ff fa51 	bl	8005104 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e05c      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c70:	4b11      	ldr	r3, [pc, #68]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x416>
 8005c7c:	e054      	b.n	8005d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7e:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <HAL_RCC_OscConfig+0x478>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7ff fa3e 	bl	8005104 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8c:	f7ff fa3a 	bl	8005104 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e045      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x444>
 8005caa:	e03d      	b.n	8005d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e038      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d34 <HAL_RCC_OscConfig+0x4ec>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d028      	beq.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d121      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d11a      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d111      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d107      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d001      	beq.n	8005d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800

08005d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0cc      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b68      	ldr	r3, [pc, #416]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d90c      	bls.n	8005d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b65      	ldr	r3, [pc, #404]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b63      	ldr	r3, [pc, #396]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0b8      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d8c:	4b59      	ldr	r3, [pc, #356]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a58      	ldr	r2, [pc, #352]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da4:	4b53      	ldr	r3, [pc, #332]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a52      	ldr	r2, [pc, #328]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db0:	4b50      	ldr	r3, [pc, #320]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	494d      	ldr	r1, [pc, #308]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d044      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd6:	4b47      	ldr	r3, [pc, #284]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d119      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e07f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d003      	beq.n	8005df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d107      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e06f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e06:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e067      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e16:	4b37      	ldr	r3, [pc, #220]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 0203 	bic.w	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4934      	ldr	r1, [pc, #208]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e28:	f7ff f96c 	bl	8005104 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e30:	f7ff f968 	bl	8005104 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e04f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e46:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 020c 	and.w	r2, r3, #12
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d1eb      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e58:	4b25      	ldr	r3, [pc, #148]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d20c      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b22      	ldr	r3, [pc, #136]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b20      	ldr	r3, [pc, #128]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e032      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e8c:	4b19      	ldr	r3, [pc, #100]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4916      	ldr	r1, [pc, #88]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eaa:	4b12      	ldr	r3, [pc, #72]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	490e      	ldr	r1, [pc, #56]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ebe:	f000 f821 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	490a      	ldr	r1, [pc, #40]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ed0:	5ccb      	ldrb	r3, [r1, r3]
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	4a09      	ldr	r2, [pc, #36]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eda:	4b09      	ldr	r3, [pc, #36]	@ (8005f00 <HAL_RCC_ClockConfig+0x1c8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f8cc 	bl	800507c <HAL_InitTick>

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40023c00 	.word	0x40023c00
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	0800defc 	.word	0x0800defc
 8005efc:	20000040 	.word	0x20000040
 8005f00:	20000070 	.word	0x20000070

08005f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f08:	b094      	sub	sp, #80	@ 0x50
 8005f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f10:	2300      	movs	r3, #0
 8005f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f14:	2300      	movs	r3, #0
 8005f16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f1c:	4b79      	ldr	r3, [pc, #484]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d00d      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x40>
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	f200 80e1 	bhi.w	80060f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x34>
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d003      	beq.n	8005f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f36:	e0db      	b.n	80060f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f38:	4b73      	ldr	r3, [pc, #460]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005f3c:	e0db      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f3e:	4b73      	ldr	r3, [pc, #460]	@ (800610c <HAL_RCC_GetSysClockFreq+0x208>)
 8005f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f42:	e0d8      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f44:	4b6f      	ldr	r3, [pc, #444]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d063      	beq.n	8006022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f6e:	2300      	movs	r3, #0
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	f04f 0000 	mov.w	r0, #0
 8005f7e:	f04f 0100 	mov.w	r1, #0
 8005f82:	0159      	lsls	r1, r3, #5
 8005f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f88:	0150      	lsls	r0, r2, #5
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4621      	mov	r1, r4
 8005f90:	1a51      	subs	r1, r2, r1
 8005f92:	6139      	str	r1, [r7, #16]
 8005f94:	4629      	mov	r1, r5
 8005f96:	eb63 0301 	sbc.w	r3, r3, r1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fa8:	4659      	mov	r1, fp
 8005faa:	018b      	lsls	r3, r1, #6
 8005fac:	4651      	mov	r1, sl
 8005fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	018a      	lsls	r2, r1, #6
 8005fb6:	4651      	mov	r1, sl
 8005fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fd6:	4690      	mov	r8, r2
 8005fd8:	4699      	mov	r9, r3
 8005fda:	4623      	mov	r3, r4
 8005fdc:	eb18 0303 	adds.w	r3, r8, r3
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	eb49 0303 	adc.w	r3, r9, r3
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	024b      	lsls	r3, r1, #9
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006000:	4621      	mov	r1, r4
 8006002:	024a      	lsls	r2, r1, #9
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800600a:	2200      	movs	r2, #0
 800600c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800600e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006014:	f7fa fe38 	bl	8000c88 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4613      	mov	r3, r2
 800601e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006020:	e058      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006022:	4b38      	ldr	r3, [pc, #224]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	099b      	lsrs	r3, r3, #6
 8006028:	2200      	movs	r2, #0
 800602a:	4618      	mov	r0, r3
 800602c:	4611      	mov	r1, r2
 800602e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	2300      	movs	r3, #0
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
 8006038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800603c:	4642      	mov	r2, r8
 800603e:	464b      	mov	r3, r9
 8006040:	f04f 0000 	mov.w	r0, #0
 8006044:	f04f 0100 	mov.w	r1, #0
 8006048:	0159      	lsls	r1, r3, #5
 800604a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800604e:	0150      	lsls	r0, r2, #5
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4641      	mov	r1, r8
 8006056:	ebb2 0a01 	subs.w	sl, r2, r1
 800605a:	4649      	mov	r1, r9
 800605c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800606c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006074:	ebb2 040a 	subs.w	r4, r2, sl
 8006078:	eb63 050b 	sbc.w	r5, r3, fp
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	00eb      	lsls	r3, r5, #3
 8006086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800608a:	00e2      	lsls	r2, r4, #3
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	4643      	mov	r3, r8
 8006092:	18e3      	adds	r3, r4, r3
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	464b      	mov	r3, r9
 8006098:	eb45 0303 	adc.w	r3, r5, r3
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060aa:	4629      	mov	r1, r5
 80060ac:	028b      	lsls	r3, r1, #10
 80060ae:	4621      	mov	r1, r4
 80060b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060b4:	4621      	mov	r1, r4
 80060b6:	028a      	lsls	r2, r1, #10
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060be:	2200      	movs	r2, #0
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	61fa      	str	r2, [r7, #28]
 80060c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c8:	f7fa fdde 	bl	8000c88 <__aeabi_uldivmod>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4613      	mov	r3, r2
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006104 <HAL_RCC_GetSysClockFreq+0x200>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	3301      	adds	r3, #1
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80060e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060ee:	e002      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x204>)
 80060f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3750      	adds	r7, #80	@ 0x50
 80060fc:	46bd      	mov	sp, r7
 80060fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006102:	bf00      	nop
 8006104:	40023800 	.word	0x40023800
 8006108:	00f42400 	.word	0x00f42400
 800610c:	007a1200 	.word	0x007a1200

08006110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006114:	4b03      	ldr	r3, [pc, #12]	@ (8006124 <HAL_RCC_GetHCLKFreq+0x14>)
 8006116:	681b      	ldr	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000040 	.word	0x20000040

08006128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800612c:	f7ff fff0 	bl	8006110 <HAL_RCC_GetHCLKFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b05      	ldr	r3, [pc, #20]	@ (8006148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	0a9b      	lsrs	r3, r3, #10
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	4903      	ldr	r1, [pc, #12]	@ (800614c <HAL_RCC_GetPCLK1Freq+0x24>)
 800613e:	5ccb      	ldrb	r3, [r1, r3]
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40023800 	.word	0x40023800
 800614c:	0800df0c 	.word	0x0800df0c

08006150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006154:	f7ff ffdc 	bl	8006110 <HAL_RCC_GetHCLKFreq>
 8006158:	4602      	mov	r2, r0
 800615a:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	0b5b      	lsrs	r3, r3, #13
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	4903      	ldr	r1, [pc, #12]	@ (8006174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006166:	5ccb      	ldrb	r3, [r1, r3]
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800616c:	4618      	mov	r0, r3
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40023800 	.word	0x40023800
 8006174:	0800df0c 	.word	0x0800df0c

08006178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e07b      	b.n	8006282 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	2b00      	cmp	r3, #0
 8006190:	d108      	bne.n	80061a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800619a:	d009      	beq.n	80061b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	61da      	str	r2, [r3, #28]
 80061a2:	e005      	b.n	80061b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fd ffde 	bl	800418c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006234:	ea42 0103 	orr.w	r1, r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	f003 0104 	and.w	r1, r3, #4
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	f003 0210 	and.w	r2, r3, #16
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b088      	sub	sp, #32
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_SPI_Transmit+0x22>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e12d      	b.n	8006508 <HAL_SPI_Transmit+0x27e>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062b4:	f7fe ff26 	bl	8005104 <HAL_GetTick>
 80062b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d002      	beq.n	80062d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
 80062cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062ce:	e116      	b.n	80064fe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_Transmit+0x52>
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062e0:	e10d      	b.n	80064fe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2203      	movs	r2, #3
 80062e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	88fa      	ldrh	r2, [r7, #6]
 80062fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006328:	d10f      	bne.n	800634a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006338:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006348:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006354:	2b40      	cmp	r3, #64	@ 0x40
 8006356:	d007      	beq.n	8006368 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006370:	d14f      	bne.n	8006412 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_SPI_Transmit+0xf6>
 800637a:	8afb      	ldrh	r3, [r7, #22]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d142      	bne.n	8006406 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063a4:	e02f      	b.n	8006406 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d112      	bne.n	80063da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b8:	881a      	ldrh	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c4:	1c9a      	adds	r2, r3, #2
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063d8:	e015      	b.n	8006406 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063da:	f7fe fe93 	bl	8005104 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d803      	bhi.n	80063f2 <HAL_SPI_Transmit+0x168>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063f0:	d102      	bne.n	80063f8 <HAL_SPI_Transmit+0x16e>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d106      	bne.n	8006406 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006404:	e07b      	b.n	80064fe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ca      	bne.n	80063a6 <HAL_SPI_Transmit+0x11c>
 8006410:	e050      	b.n	80064b4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_SPI_Transmit+0x196>
 800641a:	8afb      	ldrh	r3, [r7, #22]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d144      	bne.n	80064aa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006446:	e030      	b.n	80064aa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b02      	cmp	r3, #2
 8006454:	d113      	bne.n	800647e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800647c:	e015      	b.n	80064aa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647e:	f7fe fe41 	bl	8005104 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d803      	bhi.n	8006496 <HAL_SPI_Transmit+0x20c>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006494:	d102      	bne.n	800649c <HAL_SPI_Transmit+0x212>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064a8:	e029      	b.n	80064fe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1c9      	bne.n	8006448 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fbdf 	bl	8006c7c <SPI_EndRxTxTransaction>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e003      	b.n	80064fe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006506:	7ffb      	ldrb	r3, [r7, #31]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d002      	beq.n	8006536 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006530:	2302      	movs	r3, #2
 8006532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006534:	e0fb      	b.n	800672e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800653e:	d112      	bne.n	8006566 <HAL_SPI_Receive+0x56>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10e      	bne.n	8006566 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2204      	movs	r2, #4
 800654c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4613      	mov	r3, r2
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f8ef 	bl	8006740 <HAL_SPI_TransmitReceive>
 8006562:	4603      	mov	r3, r0
 8006564:	e0e8      	b.n	8006738 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_SPI_Receive+0x64>
 8006570:	2302      	movs	r3, #2
 8006572:	e0e1      	b.n	8006738 <HAL_SPI_Receive+0x228>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800657c:	f7fe fdc2 	bl	8005104 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_SPI_Receive+0x7e>
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006592:	e0cc      	b.n	800672e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2204      	movs	r2, #4
 8006598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	88fa      	ldrh	r2, [r7, #6]
 80065b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065da:	d10f      	bne.n	80065fc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006606:	2b40      	cmp	r3, #64	@ 0x40
 8006608:	d007      	beq.n	800661a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006618:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d16a      	bne.n	80066f8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006622:	e032      	b.n	800668a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b01      	cmp	r3, #1
 8006630:	d115      	bne.n	800665e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f103 020c 	add.w	r2, r3, #12
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800665c:	e015      	b.n	800668a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800665e:	f7fe fd51 	bl	8005104 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d803      	bhi.n	8006676 <HAL_SPI_Receive+0x166>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006674:	d102      	bne.n	800667c <HAL_SPI_Receive+0x16c>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006688:	e051      	b.n	800672e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1c7      	bne.n	8006624 <HAL_SPI_Receive+0x114>
 8006694:	e035      	b.n	8006702 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d113      	bne.n	80066cc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	b292      	uxth	r2, r2
 80066b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066ca:	e015      	b.n	80066f8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066cc:	f7fe fd1a 	bl	8005104 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d803      	bhi.n	80066e4 <HAL_SPI_Receive+0x1d4>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066e2:	d102      	bne.n	80066ea <HAL_SPI_Receive+0x1da>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80066f6:	e01a      	b.n	800672e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1c9      	bne.n	8006696 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fa52 	bl	8006bb0 <SPI_EndRxTransaction>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	75fb      	strb	r3, [r7, #23]
 8006724:	e003      	b.n	800672e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	@ 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800674e:	2301      	movs	r3, #1
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x26>
 8006762:	2302      	movs	r3, #2
 8006764:	e198      	b.n	8006a98 <HAL_SPI_TransmitReceive+0x358>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800676e:	f7fe fcc9 	bl	8005104 <HAL_GetTick>
 8006772:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006784:	887b      	ldrh	r3, [r7, #2]
 8006786:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006788:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800678c:	2b01      	cmp	r3, #1
 800678e:	d00f      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x70>
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006796:	d107      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x68>
 80067a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d003      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80067ae:	e16d      	b.n	8006a8c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x82>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x82>
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80067c8:	e160      	b.n	8006a8c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d003      	beq.n	80067de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2205      	movs	r2, #5
 80067da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	887a      	ldrh	r2, [r7, #2]
 80067ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	887a      	ldrh	r2, [r7, #2]
 80067f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	887a      	ldrh	r2, [r7, #2]
 8006800:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	887a      	ldrh	r2, [r7, #2]
 8006806:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681e:	2b40      	cmp	r3, #64	@ 0x40
 8006820:	d007      	beq.n	8006832 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800683a:	d17c      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_SPI_TransmitReceive+0x10a>
 8006844:	8b7b      	ldrh	r3, [r7, #26]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d16a      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	881a      	ldrh	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686e:	e057      	b.n	8006920 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	d11b      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x176>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d016      	beq.n	80068b6 <HAL_SPI_TransmitReceive+0x176>
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d113      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d119      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x1b8>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d014      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d8:	b292      	uxth	r2, r2
 80068da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e0:	1c9a      	adds	r2, r3, #2
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068f4:	2301      	movs	r3, #1
 80068f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068f8:	f7fe fc04 	bl	8005104 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006904:	429a      	cmp	r2, r3
 8006906:	d80b      	bhi.n	8006920 <HAL_SPI_TransmitReceive+0x1e0>
 8006908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800690e:	d007      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800691e:	e0b5      	b.n	8006a8c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1a2      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x130>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d19d      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x130>
 8006934:	e080      	b.n	8006a38 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_SPI_TransmitReceive+0x204>
 800693e:	8b7b      	ldrh	r3, [r7, #26]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d16f      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	7812      	ldrb	r2, [r2, #0]
 8006950:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800696a:	e05b      	b.n	8006a24 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d11c      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x274>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d017      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0x274>
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	2b01      	cmp	r3, #1
 8006988:	d114      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	330c      	adds	r3, #12
 8006994:	7812      	ldrb	r2, [r2, #0]
 8006996:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d119      	bne.n	80069f6 <HAL_SPI_TransmitReceive+0x2b6>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d014      	beq.n	80069f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069f2:	2301      	movs	r3, #1
 80069f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069f6:	f7fe fb85 	bl	8005104 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d803      	bhi.n	8006a0e <HAL_SPI_TransmitReceive+0x2ce>
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a0c:	d102      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x2d4>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006a22:	e033      	b.n	8006a8c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d19e      	bne.n	800696c <HAL_SPI_TransmitReceive+0x22c>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d199      	bne.n	800696c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f91d 	bl	8006c7c <SPI_EndRxTxTransaction>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d006      	beq.n	8006a56 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006a54:	e01a      	b.n	8006a8c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	e003      	b.n	8006a8c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006a94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3730      	adds	r7, #48	@ 0x30
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ab0:	f7fe fb28 	bl	8005104 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	4413      	add	r3, r2
 8006abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ac0:	f7fe fb20 	bl	8005104 <HAL_GetTick>
 8006ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ac6:	4b39      	ldr	r3, [pc, #228]	@ (8006bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	015b      	lsls	r3, r3, #5
 8006acc:	0d1b      	lsrs	r3, r3, #20
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	fb02 f303 	mul.w	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ad6:	e054      	b.n	8006b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ade:	d050      	beq.n	8006b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ae0:	f7fe fb10 	bl	8005104 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d902      	bls.n	8006af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d13d      	bne.n	8006b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b0e:	d111      	bne.n	8006b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b18:	d004      	beq.n	8006b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b22:	d107      	bne.n	8006b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b3c:	d10f      	bne.n	8006b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e017      	b.n	8006ba2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	bf0c      	ite	eq
 8006b92:	2301      	moveq	r3, #1
 8006b94:	2300      	movne	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d19b      	bne.n	8006ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3720      	adds	r7, #32
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000040 	.word	0x20000040

08006bb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bc4:	d111      	bne.n	8006bea <SPI_EndRxTransaction+0x3a>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bce:	d004      	beq.n	8006bda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd8:	d107      	bne.n	8006bea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006be8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bf2:	d12a      	bne.n	8006c4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfc:	d012      	beq.n	8006c24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2200      	movs	r2, #0
 8006c06:	2180      	movs	r1, #128	@ 0x80
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7ff ff49 	bl	8006aa0 <SPI_WaitFlagStateUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02d      	beq.n	8006c70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e026      	b.n	8006c72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ff36 	bl	8006aa0 <SPI_WaitFlagStateUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01a      	beq.n	8006c70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3e:	f043 0220 	orr.w	r2, r3, #32
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e013      	b.n	8006c72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	2101      	movs	r1, #1
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff ff23 	bl	8006aa0 <SPI_WaitFlagStateUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c64:	f043 0220 	orr.w	r2, r3, #32
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e000      	b.n	8006c72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	2102      	movs	r1, #2
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff ff04 	bl	8006aa0 <SPI_WaitFlagStateUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca2:	f043 0220 	orr.w	r2, r3, #32
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e032      	b.n	8006d14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006cae:	4b1b      	ldr	r3, [pc, #108]	@ (8006d1c <SPI_EndRxTxTransaction+0xa0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d20 <SPI_EndRxTxTransaction+0xa4>)
 8006cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb8:	0d5b      	lsrs	r3, r3, #21
 8006cba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ccc:	d112      	bne.n	8006cf4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2180      	movs	r1, #128	@ 0x80
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff fee1 	bl	8006aa0 <SPI_WaitFlagStateUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d016      	beq.n	8006d12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e00f      	b.n	8006d14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0a:	2b80      	cmp	r3, #128	@ 0x80
 8006d0c:	d0f2      	beq.n	8006cf4 <SPI_EndRxTxTransaction+0x78>
 8006d0e:	e000      	b.n	8006d12 <SPI_EndRxTxTransaction+0x96>
        break;
 8006d10:	bf00      	nop
  }

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000040 	.word	0x20000040
 8006d20:	165e9f81 	.word	0x165e9f81

08006d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e041      	b.n	8006dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fd fa66 	bl	800421c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f000 fb42 	bl	80073ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d001      	beq.n	8006ddc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e046      	b.n	8006e6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a23      	ldr	r2, [pc, #140]	@ (8006e78 <HAL_TIM_Base_Start+0xb4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d022      	beq.n	8006e34 <HAL_TIM_Base_Start+0x70>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006df6:	d01d      	beq.n	8006e34 <HAL_TIM_Base_Start+0x70>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e7c <HAL_TIM_Base_Start+0xb8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d018      	beq.n	8006e34 <HAL_TIM_Base_Start+0x70>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1e      	ldr	r2, [pc, #120]	@ (8006e80 <HAL_TIM_Base_Start+0xbc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d013      	beq.n	8006e34 <HAL_TIM_Base_Start+0x70>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1c      	ldr	r2, [pc, #112]	@ (8006e84 <HAL_TIM_Base_Start+0xc0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00e      	beq.n	8006e34 <HAL_TIM_Base_Start+0x70>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e88 <HAL_TIM_Base_Start+0xc4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d009      	beq.n	8006e34 <HAL_TIM_Base_Start+0x70>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a19      	ldr	r2, [pc, #100]	@ (8006e8c <HAL_TIM_Base_Start+0xc8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d004      	beq.n	8006e34 <HAL_TIM_Base_Start+0x70>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <HAL_TIM_Base_Start+0xcc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d111      	bne.n	8006e58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b06      	cmp	r3, #6
 8006e44:	d010      	beq.n	8006e68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0201 	orr.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e56:	e007      	b.n	8006e68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40000c00 	.word	0x40000c00
 8006e88:	40010400 	.word	0x40010400
 8006e8c:	40014000 	.word	0x40014000
 8006e90:	40001800 	.word	0x40001800

08006e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e041      	b.n	8006f2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f839 	bl	8006f32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f000 fa8a 	bl	80073ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <HAL_TIM_PWM_Start+0x24>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	bf14      	ite	ne
 8006f64:	2301      	movne	r3, #1
 8006f66:	2300      	moveq	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e022      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x6a>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d109      	bne.n	8006f86 <HAL_TIM_PWM_Start+0x3e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	bf14      	ite	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	2300      	moveq	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e015      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x6a>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d109      	bne.n	8006fa0 <HAL_TIM_PWM_Start+0x58>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	e008      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x6a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e07c      	b.n	80070b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <HAL_TIM_PWM_Start+0x82>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fc8:	e013      	b.n	8006ff2 <HAL_TIM_PWM_Start+0xaa>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d104      	bne.n	8006fda <HAL_TIM_PWM_Start+0x92>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fd8:	e00b      	b.n	8006ff2 <HAL_TIM_PWM_Start+0xaa>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_PWM_Start+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fe8:	e003      	b.n	8006ff2 <HAL_TIM_PWM_Start+0xaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fcec 	bl	80079d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a2d      	ldr	r2, [pc, #180]	@ (80070bc <HAL_TIM_PWM_Start+0x174>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d004      	beq.n	8007014 <HAL_TIM_PWM_Start+0xcc>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2c      	ldr	r2, [pc, #176]	@ (80070c0 <HAL_TIM_PWM_Start+0x178>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d101      	bne.n	8007018 <HAL_TIM_PWM_Start+0xd0>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_TIM_PWM_Start+0xd2>
 8007018:	2300      	movs	r3, #0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800702c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a22      	ldr	r2, [pc, #136]	@ (80070bc <HAL_TIM_PWM_Start+0x174>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d022      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007040:	d01d      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1f      	ldr	r2, [pc, #124]	@ (80070c4 <HAL_TIM_PWM_Start+0x17c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d018      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1d      	ldr	r2, [pc, #116]	@ (80070c8 <HAL_TIM_PWM_Start+0x180>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1c      	ldr	r2, [pc, #112]	@ (80070cc <HAL_TIM_PWM_Start+0x184>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a16      	ldr	r2, [pc, #88]	@ (80070c0 <HAL_TIM_PWM_Start+0x178>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a18      	ldr	r2, [pc, #96]	@ (80070d0 <HAL_TIM_PWM_Start+0x188>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_TIM_PWM_Start+0x136>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a16      	ldr	r2, [pc, #88]	@ (80070d4 <HAL_TIM_PWM_Start+0x18c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d111      	bne.n	80070a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d010      	beq.n	80070b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	e007      	b.n	80070b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40010400 	.word	0x40010400
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40001800 	.word	0x40001800

080070d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e0ae      	b.n	8007254 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b0c      	cmp	r3, #12
 8007102:	f200 809f 	bhi.w	8007244 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007106:	a201      	add	r2, pc, #4	@ (adr r2, 800710c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	08007141 	.word	0x08007141
 8007110:	08007245 	.word	0x08007245
 8007114:	08007245 	.word	0x08007245
 8007118:	08007245 	.word	0x08007245
 800711c:	08007181 	.word	0x08007181
 8007120:	08007245 	.word	0x08007245
 8007124:	08007245 	.word	0x08007245
 8007128:	08007245 	.word	0x08007245
 800712c:	080071c3 	.word	0x080071c3
 8007130:	08007245 	.word	0x08007245
 8007134:	08007245 	.word	0x08007245
 8007138:	08007245 	.word	0x08007245
 800713c:	08007203 	.word	0x08007203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f9fc 	bl	8007544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0208 	orr.w	r2, r2, #8
 800715a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0204 	bic.w	r2, r2, #4
 800716a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6999      	ldr	r1, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	619a      	str	r2, [r3, #24]
      break;
 800717e:	e064      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fa4c 	bl	8007624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800719a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6999      	ldr	r1, [r3, #24]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	021a      	lsls	r2, r3, #8
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	619a      	str	r2, [r3, #24]
      break;
 80071c0:	e043      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 faa1 	bl	8007710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0208 	orr.w	r2, r2, #8
 80071dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0204 	bic.w	r2, r2, #4
 80071ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69d9      	ldr	r1, [r3, #28]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	61da      	str	r2, [r3, #28]
      break;
 8007200:	e023      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 faf5 	bl	80077f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800721c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800722c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69d9      	ldr	r1, [r3, #28]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	021a      	lsls	r2, r3, #8
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	61da      	str	r2, [r3, #28]
      break;
 8007242:	e002      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
      break;
 8007248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIM_ConfigClockSource+0x1c>
 8007274:	2302      	movs	r3, #2
 8007276:	e0b4      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x186>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b0:	d03e      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0xd4>
 80072b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b6:	f200 8087 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072be:	f000 8086 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x172>
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c6:	d87f      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072c8:	2b70      	cmp	r3, #112	@ 0x70
 80072ca:	d01a      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0xa6>
 80072cc:	2b70      	cmp	r3, #112	@ 0x70
 80072ce:	d87b      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072d0:	2b60      	cmp	r3, #96	@ 0x60
 80072d2:	d050      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x11a>
 80072d4:	2b60      	cmp	r3, #96	@ 0x60
 80072d6:	d877      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072d8:	2b50      	cmp	r3, #80	@ 0x50
 80072da:	d03c      	beq.n	8007356 <HAL_TIM_ConfigClockSource+0xfa>
 80072dc:	2b50      	cmp	r3, #80	@ 0x50
 80072de:	d873      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	d058      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x13a>
 80072e4:	2b40      	cmp	r3, #64	@ 0x40
 80072e6:	d86f      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072e8:	2b30      	cmp	r3, #48	@ 0x30
 80072ea:	d064      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15a>
 80072ec:	2b30      	cmp	r3, #48	@ 0x30
 80072ee:	d86b      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d060      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15a>
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d867      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d05c      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15a>
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d05a      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15a>
 8007300:	e062      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007312:	f000 fb41 	bl	8007998 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	609a      	str	r2, [r3, #8]
      break;
 800732e:	e04f      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007340:	f000 fb2a 	bl	8007998 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007352:	609a      	str	r2, [r3, #8]
      break;
 8007354:	e03c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007362:	461a      	mov	r2, r3
 8007364:	f000 fa9e 	bl	80078a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2150      	movs	r1, #80	@ 0x50
 800736e:	4618      	mov	r0, r3
 8007370:	f000 faf7 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 8007374:	e02c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007382:	461a      	mov	r2, r3
 8007384:	f000 fabd 	bl	8007902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2160      	movs	r1, #96	@ 0x60
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fae7 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 8007394:	e01c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a2:	461a      	mov	r2, r3
 80073a4:	f000 fa7e 	bl	80078a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2140      	movs	r1, #64	@ 0x40
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fad7 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 80073b4:	e00c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f000 face 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 80073c6:	e003      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e000      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a46      	ldr	r2, [pc, #280]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	d00f      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a43      	ldr	r2, [pc, #268]	@ (800751c <TIM_Base_SetConfig+0x130>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00b      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a42      	ldr	r2, [pc, #264]	@ (8007520 <TIM_Base_SetConfig+0x134>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d007      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a41      	ldr	r2, [pc, #260]	@ (8007524 <TIM_Base_SetConfig+0x138>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a40      	ldr	r2, [pc, #256]	@ (8007528 <TIM_Base_SetConfig+0x13c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d108      	bne.n	800743e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a35      	ldr	r2, [pc, #212]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d02b      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744c:	d027      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a32      	ldr	r2, [pc, #200]	@ (800751c <TIM_Base_SetConfig+0x130>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d023      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a31      	ldr	r2, [pc, #196]	@ (8007520 <TIM_Base_SetConfig+0x134>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d01f      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a30      	ldr	r2, [pc, #192]	@ (8007524 <TIM_Base_SetConfig+0x138>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01b      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2f      	ldr	r2, [pc, #188]	@ (8007528 <TIM_Base_SetConfig+0x13c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d017      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a2e      	ldr	r2, [pc, #184]	@ (800752c <TIM_Base_SetConfig+0x140>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a2d      	ldr	r2, [pc, #180]	@ (8007530 <TIM_Base_SetConfig+0x144>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00f      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a2c      	ldr	r2, [pc, #176]	@ (8007534 <TIM_Base_SetConfig+0x148>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d00b      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2b      	ldr	r2, [pc, #172]	@ (8007538 <TIM_Base_SetConfig+0x14c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d007      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2a      	ldr	r2, [pc, #168]	@ (800753c <TIM_Base_SetConfig+0x150>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a29      	ldr	r2, [pc, #164]	@ (8007540 <TIM_Base_SetConfig+0x154>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d108      	bne.n	80074b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a10      	ldr	r2, [pc, #64]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a12      	ldr	r2, [pc, #72]	@ (8007528 <TIM_Base_SetConfig+0x13c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d103      	bne.n	80074ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d105      	bne.n	800750a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f023 0201 	bic.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	611a      	str	r2, [r3, #16]
  }
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40010000 	.word	0x40010000
 800751c:	40000400 	.word	0x40000400
 8007520:	40000800 	.word	0x40000800
 8007524:	40000c00 	.word	0x40000c00
 8007528:	40010400 	.word	0x40010400
 800752c:	40014000 	.word	0x40014000
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800
 8007538:	40001800 	.word	0x40001800
 800753c:	40001c00 	.word	0x40001c00
 8007540:	40002000 	.word	0x40002000

08007544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	f023 0201 	bic.w	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f023 0302 	bic.w	r3, r3, #2
 800758c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a20      	ldr	r2, [pc, #128]	@ (800761c <TIM_OC1_SetConfig+0xd8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_OC1_SetConfig+0x64>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007620 <TIM_OC1_SetConfig+0xdc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d10c      	bne.n	80075c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f023 0308 	bic.w	r3, r3, #8
 80075ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f023 0304 	bic.w	r3, r3, #4
 80075c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a15      	ldr	r2, [pc, #84]	@ (800761c <TIM_OC1_SetConfig+0xd8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_OC1_SetConfig+0x8e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a14      	ldr	r2, [pc, #80]	@ (8007620 <TIM_OC1_SetConfig+0xdc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d111      	bne.n	80075f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	621a      	str	r2, [r3, #32]
}
 8007610:	bf00      	nop
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	40010000 	.word	0x40010000
 8007620:	40010400 	.word	0x40010400

08007624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	f023 0210 	bic.w	r2, r3, #16
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800765a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f023 0320 	bic.w	r3, r3, #32
 800766e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a22      	ldr	r2, [pc, #136]	@ (8007708 <TIM_OC2_SetConfig+0xe4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_OC2_SetConfig+0x68>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a21      	ldr	r2, [pc, #132]	@ (800770c <TIM_OC2_SetConfig+0xe8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d10d      	bne.n	80076a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a17      	ldr	r2, [pc, #92]	@ (8007708 <TIM_OC2_SetConfig+0xe4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_OC2_SetConfig+0x94>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a16      	ldr	r2, [pc, #88]	@ (800770c <TIM_OC2_SetConfig+0xe8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d113      	bne.n	80076e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40010000 	.word	0x40010000
 800770c:	40010400 	.word	0x40010400

08007710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	021b      	lsls	r3, r3, #8
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a21      	ldr	r2, [pc, #132]	@ (80077f0 <TIM_OC3_SetConfig+0xe0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d003      	beq.n	8007776 <TIM_OC3_SetConfig+0x66>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a20      	ldr	r2, [pc, #128]	@ (80077f4 <TIM_OC3_SetConfig+0xe4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d10d      	bne.n	8007792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800777c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a16      	ldr	r2, [pc, #88]	@ (80077f0 <TIM_OC3_SetConfig+0xe0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_OC3_SetConfig+0x92>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a15      	ldr	r2, [pc, #84]	@ (80077f4 <TIM_OC3_SetConfig+0xe4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d113      	bne.n	80077ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	621a      	str	r2, [r3, #32]
}
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	40010000 	.word	0x40010000
 80077f4:	40010400 	.word	0x40010400

080077f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800782e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	031b      	lsls	r3, r3, #12
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a12      	ldr	r2, [pc, #72]	@ (800789c <TIM_OC4_SetConfig+0xa4>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d003      	beq.n	8007860 <TIM_OC4_SetConfig+0x68>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a11      	ldr	r2, [pc, #68]	@ (80078a0 <TIM_OC4_SetConfig+0xa8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d109      	bne.n	8007874 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	019b      	lsls	r3, r3, #6
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	621a      	str	r2, [r3, #32]
}
 800788e:	bf00      	nop
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40010000 	.word	0x40010000
 80078a0:	40010400 	.word	0x40010400

080078a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f023 0201 	bic.w	r2, r3, #1
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f023 030a 	bic.w	r3, r3, #10
 80078e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	621a      	str	r2, [r3, #32]
}
 80078f6:	bf00      	nop
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007902:	b480      	push	{r7}
 8007904:	b087      	sub	sp, #28
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	f023 0210 	bic.w	r2, r3, #16
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800792c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	031b      	lsls	r3, r3, #12
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800793e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	621a      	str	r2, [r3, #32]
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	f043 0307 	orr.w	r3, r3, #7
 8007984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	609a      	str	r2, [r3, #8]
}
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	021a      	lsls	r2, r3, #8
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4313      	orrs	r3, r2
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	609a      	str	r2, [r3, #8]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2201      	movs	r2, #1
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a1a      	ldr	r2, [r3, #32]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	43db      	mvns	r3, r3
 80079fa:	401a      	ands	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a1a      	ldr	r2, [r3, #32]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f003 031f 	and.w	r3, r3, #31
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a10:	431a      	orrs	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
	...

08007a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e05a      	b.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a21      	ldr	r2, [pc, #132]	@ (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d022      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a88:	d01d      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1b      	ldr	r2, [pc, #108]	@ (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a18      	ldr	r2, [pc, #96]	@ (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a17      	ldr	r2, [pc, #92]	@ (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	@ (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d10c      	bne.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40010000 	.word	0x40010000
 8007b04:	40000400 	.word	0x40000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	40000c00 	.word	0x40000c00
 8007b10:	40010400 	.word	0x40010400
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40001800 	.word	0x40001800

08007b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e03d      	b.n	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e042      	b.n	8007c58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fc fb74 	bl	80042d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2224      	movs	r2, #36	@ 0x24
 8007bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fdbd 	bl	8008784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695a      	ldr	r2, [r3, #20]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	@ 0x28
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	d175      	bne.n	8007d6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <HAL_UART_Transmit+0x2c>
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e06e      	b.n	8007d6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2221      	movs	r2, #33	@ 0x21
 8007c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c9e:	f7fd fa31 	bl	8005104 <HAL_GetTick>
 8007ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	88fa      	ldrh	r2, [r7, #6]
 8007ca8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	88fa      	ldrh	r2, [r7, #6]
 8007cae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cb8:	d108      	bne.n	8007ccc <HAL_UART_Transmit+0x6c>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	e003      	b.n	8007cd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007cd4:	e02e      	b.n	8007d34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2180      	movs	r1, #128	@ 0x80
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 fb1f 	bl	8008324 <UART_WaitOnFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e03a      	b.n	8007d6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10b      	bne.n	8007d16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	3302      	adds	r3, #2
 8007d12:	61bb      	str	r3, [r7, #24]
 8007d14:	e007      	b.n	8007d26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	781a      	ldrb	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	3301      	adds	r3, #1
 8007d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1cb      	bne.n	8007cd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2200      	movs	r2, #0
 8007d46:	2140      	movs	r1, #64	@ 0x40
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 faeb 	bl	8008324 <UART_WaitOnFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e006      	b.n	8007d6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e000      	b.n	8007d6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007d6c:	2302      	movs	r3, #2
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	4613      	mov	r3, r2
 8007d82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d112      	bne.n	8007db6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_UART_Receive_IT+0x26>
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e00b      	b.n	8007db8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	461a      	mov	r2, r3
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fb12 	bl	80083d6 <UART_Start_Receive_IT>
 8007db2:	4603      	mov	r3, r0
 8007db4:	e000      	b.n	8007db8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007db6:	2302      	movs	r3, #2
  }
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b0ba      	sub	sp, #232	@ 0xe8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10f      	bne.n	8007e26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <HAL_UART_IRQHandler+0x66>
 8007e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fbf2 	bl	8008608 <UART_Receive_IT>
      return;
 8007e24:	e25b      	b.n	80082de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80de 	beq.w	8007fec <HAL_UART_IRQHandler+0x22c>
 8007e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80d1 	beq.w	8007fec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_UART_IRQHandler+0xae>
 8007e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e66:	f043 0201 	orr.w	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00b      	beq.n	8007e92 <HAL_UART_IRQHandler+0xd2>
 8007e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8a:	f043 0202 	orr.w	r2, r3, #2
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <HAL_UART_IRQHandler+0xf6>
 8007e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eae:	f043 0204 	orr.w	r2, r3, #4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eba:	f003 0308 	and.w	r3, r3, #8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d011      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x126>
 8007ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d105      	bne.n	8007eda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d005      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ede:	f043 0208 	orr.w	r2, r3, #8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 81f2 	beq.w	80082d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d008      	beq.n	8007f0e <HAL_UART_IRQHandler+0x14e>
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fb7d 	bl	8008608 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f18:	2b40      	cmp	r3, #64	@ 0x40
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2a:	f003 0308 	and.w	r3, r3, #8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <HAL_UART_IRQHandler+0x17a>
 8007f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d04f      	beq.n	8007fda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa85 	bl	800844a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4a:	2b40      	cmp	r3, #64	@ 0x40
 8007f4c:	d141      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3314      	adds	r3, #20
 8007f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3314      	adds	r3, #20
 8007f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1d9      	bne.n	8007f4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d013      	beq.n	8007fca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80081a0 <HAL_UART_IRQHandler+0x3e0>)
 8007fa8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fd fa59 	bl	8005466 <HAL_DMA_Abort_IT>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d016      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc8:	e00e      	b.n	8007fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f994 	bl	80082f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd0:	e00a      	b.n	8007fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f990 	bl	80082f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd8:	e006      	b.n	8007fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f98c 	bl	80082f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007fe6:	e175      	b.n	80082d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe8:	bf00      	nop
    return;
 8007fea:	e173      	b.n	80082d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	f040 814f 	bne.w	8008294 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8148 	beq.w	8008294 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8141 	beq.w	8008294 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	60bb      	str	r3, [r7, #8]
 8008026:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008032:	2b40      	cmp	r3, #64	@ 0x40
 8008034:	f040 80b6 	bne.w	80081a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8145 	beq.w	80082d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008056:	429a      	cmp	r2, r3
 8008058:	f080 813e 	bcs.w	80082d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008062:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800806e:	f000 8088 	beq.w	8008182 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800808c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	330c      	adds	r3, #12
 800809a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800809e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1d9      	bne.n	8008072 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3314      	adds	r3, #20
 80080c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3314      	adds	r3, #20
 80080de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e1      	bne.n	80080be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3314      	adds	r3, #20
 8008100:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800810a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800810c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3314      	adds	r3, #20
 800811a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800811e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008120:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008124:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800812c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e3      	bne.n	80080fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	330c      	adds	r3, #12
 8008146:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008152:	f023 0310 	bic.w	r3, r3, #16
 8008156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008164:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008166:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008168:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800816a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800816c:	e841 2300 	strex	r3, r2, [r1]
 8008170:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e3      	bne.n	8008140 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817c:	4618      	mov	r0, r3
 800817e:	f7fd f902 	bl	8005386 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2202      	movs	r2, #2
 8008186:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008190:	b29b      	uxth	r3, r3
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	b29b      	uxth	r3, r3
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8b7 	bl	800830c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800819e:	e09b      	b.n	80082d8 <HAL_UART_IRQHandler+0x518>
 80081a0:	08008511 	.word	0x08008511
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 808e 	beq.w	80082dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8089 	beq.w	80082dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80081ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80081f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e3      	bne.n	80081ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3314      	adds	r3, #20
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	623b      	str	r3, [r7, #32]
   return(result);
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008226:	633a      	str	r2, [r7, #48]	@ 0x30
 8008228:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800822c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e3      	bne.n	8008202 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	330c      	adds	r3, #12
 800824e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	60fb      	str	r3, [r7, #12]
   return(result);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0310 	bic.w	r3, r3, #16
 800825e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	330c      	adds	r3, #12
 8008268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800826c:	61fa      	str	r2, [r7, #28]
 800826e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	69b9      	ldr	r1, [r7, #24]
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	617b      	str	r3, [r7, #20]
   return(result);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e3      	bne.n	8008248 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f83d 	bl	800830c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008292:	e023      	b.n	80082dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800829c:	2b00      	cmp	r3, #0
 800829e:	d009      	beq.n	80082b4 <HAL_UART_IRQHandler+0x4f4>
 80082a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f943 	bl	8008538 <UART_Transmit_IT>
    return;
 80082b2:	e014      	b.n	80082de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00e      	beq.n	80082de <HAL_UART_IRQHandler+0x51e>
 80082c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f983 	bl	80085d8 <UART_EndTransmit_IT>
    return;
 80082d2:	e004      	b.n	80082de <HAL_UART_IRQHandler+0x51e>
    return;
 80082d4:	bf00      	nop
 80082d6:	e002      	b.n	80082de <HAL_UART_IRQHandler+0x51e>
      return;
 80082d8:	bf00      	nop
 80082da:	e000      	b.n	80082de <HAL_UART_IRQHandler+0x51e>
      return;
 80082dc:	bf00      	nop
  }
}
 80082de:	37e8      	adds	r7, #232	@ 0xe8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	4613      	mov	r3, r2
 8008332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008334:	e03b      	b.n	80083ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800833c:	d037      	beq.n	80083ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800833e:	f7fc fee1 	bl	8005104 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	429a      	cmp	r2, r3
 800834c:	d302      	bcc.n	8008354 <UART_WaitOnFlagUntilTimeout+0x30>
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e03a      	b.n	80083ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f003 0304 	and.w	r3, r3, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	d023      	beq.n	80083ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b80      	cmp	r3, #128	@ 0x80
 800836a:	d020      	beq.n	80083ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b40      	cmp	r3, #64	@ 0x40
 8008370:	d01d      	beq.n	80083ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0308 	and.w	r3, r3, #8
 800837c:	2b08      	cmp	r3, #8
 800837e:	d116      	bne.n	80083ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 f857 	bl	800844a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2208      	movs	r2, #8
 80083a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e00f      	b.n	80083ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4013      	ands	r3, r2
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d0b4      	beq.n	8008336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4613      	mov	r3, r2
 80083e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2222      	movs	r2, #34	@ 0x22
 8008400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800841a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0220 	orr.w	r2, r2, #32
 800843a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800844a:	b480      	push	{r7}
 800844c:	b095      	sub	sp, #84	@ 0x54
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	330c      	adds	r3, #12
 8008470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008472:	643a      	str	r2, [r7, #64]	@ 0x40
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e5      	bne.n	8008452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3314      	adds	r3, #20
 800848c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	61fb      	str	r3, [r7, #28]
   return(result);
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	f023 0301 	bic.w	r3, r3, #1
 800849c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3314      	adds	r3, #20
 80084a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e5      	bne.n	8008486 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d119      	bne.n	80084f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	330c      	adds	r3, #12
 80084c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f023 0310 	bic.w	r3, r3, #16
 80084d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	330c      	adds	r3, #12
 80084e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084e2:	61ba      	str	r2, [r7, #24]
 80084e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6979      	ldr	r1, [r7, #20]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	613b      	str	r3, [r7, #16]
   return(result);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e5      	bne.n	80084c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008504:	bf00      	nop
 8008506:	3754      	adds	r7, #84	@ 0x54
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff fee4 	bl	80082f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b21      	cmp	r3, #33	@ 0x21
 800854a:	d13e      	bne.n	80085ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008554:	d114      	bne.n	8008580 <UART_Transmit_IT+0x48>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d110      	bne.n	8008580 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008572:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	1c9a      	adds	r2, r3, #2
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	621a      	str	r2, [r3, #32]
 800857e:	e008      	b.n	8008592 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	1c59      	adds	r1, r3, #1
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	6211      	str	r1, [r2, #32]
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008596:	b29b      	uxth	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	b29b      	uxth	r3, r3
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	4619      	mov	r1, r3
 80085a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10f      	bne.n	80085c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e000      	b.n	80085cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085ca:	2302      	movs	r3, #2
  }
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fe73 	bl	80082e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	@ 0x30
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b22      	cmp	r3, #34	@ 0x22
 800861a:	f040 80ae 	bne.w	800877a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008626:	d117      	bne.n	8008658 <UART_Receive_IT+0x50>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d113      	bne.n	8008658 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008630:	2300      	movs	r3, #0
 8008632:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008638:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	b29b      	uxth	r3, r3
 8008642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008646:	b29a      	uxth	r2, r3
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	1c9a      	adds	r2, r3, #2
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	629a      	str	r2, [r3, #40]	@ 0x28
 8008656:	e026      	b.n	80086a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800866a:	d007      	beq.n	800867c <UART_Receive_IT+0x74>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <UART_Receive_IT+0x82>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	b2da      	uxtb	r2, r3
 8008684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e008      	b.n	800869c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008696:	b2da      	uxtb	r2, r3
 8008698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	4619      	mov	r1, r3
 80086b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d15d      	bne.n	8008776 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0220 	bic.w	r2, r2, #32
 80086c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	695a      	ldr	r2, [r3, #20]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0201 	bic.w	r2, r2, #1
 80086e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d135      	bne.n	800876c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	330c      	adds	r3, #12
 800870c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	613b      	str	r3, [r7, #16]
   return(result);
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f023 0310 	bic.w	r3, r3, #16
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	330c      	adds	r3, #12
 8008724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008726:	623a      	str	r2, [r7, #32]
 8008728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	69f9      	ldr	r1, [r7, #28]
 800872c:	6a3a      	ldr	r2, [r7, #32]
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	61bb      	str	r3, [r7, #24]
   return(result);
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e5      	bne.n	8008706 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b10      	cmp	r3, #16
 8008746:	d10a      	bne.n	800875e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff fdd1 	bl	800830c <HAL_UARTEx_RxEventCallback>
 800876a:	e002      	b.n	8008772 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7fa facd 	bl	8002d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	e002      	b.n	800877c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3730      	adds	r7, #48	@ 0x30
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008788:	b0c0      	sub	sp, #256	@ 0x100
 800878a:	af00      	add	r7, sp, #0
 800878c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800879c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a0:	68d9      	ldr	r1, [r3, #12]
 80087a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	ea40 0301 	orr.w	r3, r0, r1
 80087ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80087dc:	f021 010c 	bic.w	r1, r1, #12
 80087e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087ea:	430b      	orrs	r3, r1
 80087ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80087fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087fe:	6999      	ldr	r1, [r3, #24]
 8008800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	ea40 0301 	orr.w	r3, r0, r1
 800880a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800880c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b8f      	ldr	r3, [pc, #572]	@ (8008a50 <UART_SetConfig+0x2cc>)
 8008814:	429a      	cmp	r2, r3
 8008816:	d005      	beq.n	8008824 <UART_SetConfig+0xa0>
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	4b8d      	ldr	r3, [pc, #564]	@ (8008a54 <UART_SetConfig+0x2d0>)
 8008820:	429a      	cmp	r2, r3
 8008822:	d104      	bne.n	800882e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008824:	f7fd fc94 	bl	8006150 <HAL_RCC_GetPCLK2Freq>
 8008828:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800882c:	e003      	b.n	8008836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800882e:	f7fd fc7b 	bl	8006128 <HAL_RCC_GetPCLK1Freq>
 8008832:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008840:	f040 810c 	bne.w	8008a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008848:	2200      	movs	r2, #0
 800884a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800884e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008856:	4622      	mov	r2, r4
 8008858:	462b      	mov	r3, r5
 800885a:	1891      	adds	r1, r2, r2
 800885c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800885e:	415b      	adcs	r3, r3
 8008860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008866:	4621      	mov	r1, r4
 8008868:	eb12 0801 	adds.w	r8, r2, r1
 800886c:	4629      	mov	r1, r5
 800886e:	eb43 0901 	adc.w	r9, r3, r1
 8008872:	f04f 0200 	mov.w	r2, #0
 8008876:	f04f 0300 	mov.w	r3, #0
 800887a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800887e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008886:	4690      	mov	r8, r2
 8008888:	4699      	mov	r9, r3
 800888a:	4623      	mov	r3, r4
 800888c:	eb18 0303 	adds.w	r3, r8, r3
 8008890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008894:	462b      	mov	r3, r5
 8008896:	eb49 0303 	adc.w	r3, r9, r3
 800889a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800889e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80088ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80088b2:	460b      	mov	r3, r1
 80088b4:	18db      	adds	r3, r3, r3
 80088b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80088b8:	4613      	mov	r3, r2
 80088ba:	eb42 0303 	adc.w	r3, r2, r3
 80088be:	657b      	str	r3, [r7, #84]	@ 0x54
 80088c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80088c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80088c8:	f7f8 f9de 	bl	8000c88 <__aeabi_uldivmod>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4b61      	ldr	r3, [pc, #388]	@ (8008a58 <UART_SetConfig+0x2d4>)
 80088d2:	fba3 2302 	umull	r2, r3, r3, r2
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	011c      	lsls	r4, r3, #4
 80088da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80088e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	1891      	adds	r1, r2, r2
 80088f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80088f4:	415b      	adcs	r3, r3
 80088f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80088fc:	4641      	mov	r1, r8
 80088fe:	eb12 0a01 	adds.w	sl, r2, r1
 8008902:	4649      	mov	r1, r9
 8008904:	eb43 0b01 	adc.w	fp, r3, r1
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800891c:	4692      	mov	sl, r2
 800891e:	469b      	mov	fp, r3
 8008920:	4643      	mov	r3, r8
 8008922:	eb1a 0303 	adds.w	r3, sl, r3
 8008926:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800892a:	464b      	mov	r3, r9
 800892c:	eb4b 0303 	adc.w	r3, fp, r3
 8008930:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008940:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008948:	460b      	mov	r3, r1
 800894a:	18db      	adds	r3, r3, r3
 800894c:	643b      	str	r3, [r7, #64]	@ 0x40
 800894e:	4613      	mov	r3, r2
 8008950:	eb42 0303 	adc.w	r3, r2, r3
 8008954:	647b      	str	r3, [r7, #68]	@ 0x44
 8008956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800895a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800895e:	f7f8 f993 	bl	8000c88 <__aeabi_uldivmod>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4611      	mov	r1, r2
 8008968:	4b3b      	ldr	r3, [pc, #236]	@ (8008a58 <UART_SetConfig+0x2d4>)
 800896a:	fba3 2301 	umull	r2, r3, r3, r1
 800896e:	095b      	lsrs	r3, r3, #5
 8008970:	2264      	movs	r2, #100	@ 0x64
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	1acb      	subs	r3, r1, r3
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800897e:	4b36      	ldr	r3, [pc, #216]	@ (8008a58 <UART_SetConfig+0x2d4>)
 8008980:	fba3 2302 	umull	r2, r3, r3, r2
 8008984:	095b      	lsrs	r3, r3, #5
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800898c:	441c      	add	r4, r3
 800898e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008992:	2200      	movs	r2, #0
 8008994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008998:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800899c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80089a0:	4642      	mov	r2, r8
 80089a2:	464b      	mov	r3, r9
 80089a4:	1891      	adds	r1, r2, r2
 80089a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80089a8:	415b      	adcs	r3, r3
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80089b0:	4641      	mov	r1, r8
 80089b2:	1851      	adds	r1, r2, r1
 80089b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80089b6:	4649      	mov	r1, r9
 80089b8:	414b      	adcs	r3, r1
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	f04f 0300 	mov.w	r3, #0
 80089c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80089c8:	4659      	mov	r1, fp
 80089ca:	00cb      	lsls	r3, r1, #3
 80089cc:	4651      	mov	r1, sl
 80089ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089d2:	4651      	mov	r1, sl
 80089d4:	00ca      	lsls	r2, r1, #3
 80089d6:	4610      	mov	r0, r2
 80089d8:	4619      	mov	r1, r3
 80089da:	4603      	mov	r3, r0
 80089dc:	4642      	mov	r2, r8
 80089de:	189b      	adds	r3, r3, r2
 80089e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089e4:	464b      	mov	r3, r9
 80089e6:	460a      	mov	r2, r1
 80089e8:	eb42 0303 	adc.w	r3, r2, r3
 80089ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a04:	460b      	mov	r3, r1
 8008a06:	18db      	adds	r3, r3, r3
 8008a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	eb42 0303 	adc.w	r3, r2, r3
 8008a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008a1a:	f7f8 f935 	bl	8000c88 <__aeabi_uldivmod>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4b0d      	ldr	r3, [pc, #52]	@ (8008a58 <UART_SetConfig+0x2d4>)
 8008a24:	fba3 1302 	umull	r1, r3, r3, r2
 8008a28:	095b      	lsrs	r3, r3, #5
 8008a2a:	2164      	movs	r1, #100	@ 0x64
 8008a2c:	fb01 f303 	mul.w	r3, r1, r3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	3332      	adds	r3, #50	@ 0x32
 8008a36:	4a08      	ldr	r2, [pc, #32]	@ (8008a58 <UART_SetConfig+0x2d4>)
 8008a38:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	f003 0207 	and.w	r2, r3, #7
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4422      	add	r2, r4
 8008a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a4c:	e106      	b.n	8008c5c <UART_SetConfig+0x4d8>
 8008a4e:	bf00      	nop
 8008a50:	40011000 	.word	0x40011000
 8008a54:	40011400 	.word	0x40011400
 8008a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008a6e:	4642      	mov	r2, r8
 8008a70:	464b      	mov	r3, r9
 8008a72:	1891      	adds	r1, r2, r2
 8008a74:	6239      	str	r1, [r7, #32]
 8008a76:	415b      	adcs	r3, r3
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a7e:	4641      	mov	r1, r8
 8008a80:	1854      	adds	r4, r2, r1
 8008a82:	4649      	mov	r1, r9
 8008a84:	eb43 0501 	adc.w	r5, r3, r1
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	00eb      	lsls	r3, r5, #3
 8008a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a96:	00e2      	lsls	r2, r4, #3
 8008a98:	4614      	mov	r4, r2
 8008a9a:	461d      	mov	r5, r3
 8008a9c:	4643      	mov	r3, r8
 8008a9e:	18e3      	adds	r3, r4, r3
 8008aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	eb45 0303 	adc.w	r3, r5, r3
 8008aaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008aba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008abe:	f04f 0200 	mov.w	r2, #0
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008aca:	4629      	mov	r1, r5
 8008acc:	008b      	lsls	r3, r1, #2
 8008ace:	4621      	mov	r1, r4
 8008ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	008a      	lsls	r2, r1, #2
 8008ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008adc:	f7f8 f8d4 	bl	8000c88 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4b60      	ldr	r3, [pc, #384]	@ (8008c68 <UART_SetConfig+0x4e4>)
 8008ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	011c      	lsls	r4, r3, #4
 8008aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008af8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	1891      	adds	r1, r2, r2
 8008b06:	61b9      	str	r1, [r7, #24]
 8008b08:	415b      	adcs	r3, r3
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b10:	4641      	mov	r1, r8
 8008b12:	1851      	adds	r1, r2, r1
 8008b14:	6139      	str	r1, [r7, #16]
 8008b16:	4649      	mov	r1, r9
 8008b18:	414b      	adcs	r3, r1
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	f04f 0200 	mov.w	r2, #0
 8008b20:	f04f 0300 	mov.w	r3, #0
 8008b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b28:	4659      	mov	r1, fp
 8008b2a:	00cb      	lsls	r3, r1, #3
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b32:	4651      	mov	r1, sl
 8008b34:	00ca      	lsls	r2, r1, #3
 8008b36:	4610      	mov	r0, r2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	189b      	adds	r3, r3, r2
 8008b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b44:	464b      	mov	r3, r9
 8008b46:	460a      	mov	r2, r1
 8008b48:	eb42 0303 	adc.w	r3, r2, r3
 8008b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	f04f 0300 	mov.w	r3, #0
 8008b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008b68:	4649      	mov	r1, r9
 8008b6a:	008b      	lsls	r3, r1, #2
 8008b6c:	4641      	mov	r1, r8
 8008b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b72:	4641      	mov	r1, r8
 8008b74:	008a      	lsls	r2, r1, #2
 8008b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008b7a:	f7f8 f885 	bl	8000c88 <__aeabi_uldivmod>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4611      	mov	r1, r2
 8008b84:	4b38      	ldr	r3, [pc, #224]	@ (8008c68 <UART_SetConfig+0x4e4>)
 8008b86:	fba3 2301 	umull	r2, r3, r3, r1
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	2264      	movs	r2, #100	@ 0x64
 8008b8e:	fb02 f303 	mul.w	r3, r2, r3
 8008b92:	1acb      	subs	r3, r1, r3
 8008b94:	011b      	lsls	r3, r3, #4
 8008b96:	3332      	adds	r3, #50	@ 0x32
 8008b98:	4a33      	ldr	r2, [pc, #204]	@ (8008c68 <UART_SetConfig+0x4e4>)
 8008b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ba4:	441c      	add	r4, r3
 8008ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008baa:	2200      	movs	r2, #0
 8008bac:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bae:	677a      	str	r2, [r7, #116]	@ 0x74
 8008bb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	464b      	mov	r3, r9
 8008bb8:	1891      	adds	r1, r2, r2
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	415b      	adcs	r3, r3
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bc4:	4641      	mov	r1, r8
 8008bc6:	1851      	adds	r1, r2, r1
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	4649      	mov	r1, r9
 8008bcc:	414b      	adcs	r3, r1
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	f04f 0200 	mov.w	r2, #0
 8008bd4:	f04f 0300 	mov.w	r3, #0
 8008bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bdc:	4659      	mov	r1, fp
 8008bde:	00cb      	lsls	r3, r1, #3
 8008be0:	4651      	mov	r1, sl
 8008be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008be6:	4651      	mov	r1, sl
 8008be8:	00ca      	lsls	r2, r1, #3
 8008bea:	4610      	mov	r0, r2
 8008bec:	4619      	mov	r1, r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	189b      	adds	r3, r3, r2
 8008bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	eb42 0303 	adc.w	r3, r2, r3
 8008bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008c18:	4649      	mov	r1, r9
 8008c1a:	008b      	lsls	r3, r1, #2
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c22:	4641      	mov	r1, r8
 8008c24:	008a      	lsls	r2, r1, #2
 8008c26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c2a:	f7f8 f82d 	bl	8000c88 <__aeabi_uldivmod>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4b0d      	ldr	r3, [pc, #52]	@ (8008c68 <UART_SetConfig+0x4e4>)
 8008c34:	fba3 1302 	umull	r1, r3, r3, r2
 8008c38:	095b      	lsrs	r3, r3, #5
 8008c3a:	2164      	movs	r1, #100	@ 0x64
 8008c3c:	fb01 f303 	mul.w	r3, r1, r3
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	3332      	adds	r3, #50	@ 0x32
 8008c46:	4a08      	ldr	r2, [pc, #32]	@ (8008c68 <UART_SetConfig+0x4e4>)
 8008c48:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	f003 020f 	and.w	r2, r3, #15
 8008c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4422      	add	r2, r4
 8008c5a:	609a      	str	r2, [r3, #8]
}
 8008c5c:	bf00      	nop
 8008c5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c62:	46bd      	mov	sp, r7
 8008c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c68:	51eb851f 	.word	0x51eb851f

08008c6c <atoi>:
 8008c6c:	220a      	movs	r2, #10
 8008c6e:	2100      	movs	r1, #0
 8008c70:	f000 b87c 	b.w	8008d6c <strtol>

08008c74 <_strtol_l.constprop.0>:
 8008c74:	2b24      	cmp	r3, #36	@ 0x24
 8008c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7a:	4686      	mov	lr, r0
 8008c7c:	4690      	mov	r8, r2
 8008c7e:	d801      	bhi.n	8008c84 <_strtol_l.constprop.0+0x10>
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d106      	bne.n	8008c92 <_strtol_l.constprop.0+0x1e>
 8008c84:	f001 f8fa 	bl	8009e7c <__errno>
 8008c88:	2316      	movs	r3, #22
 8008c8a:	6003      	str	r3, [r0, #0]
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c92:	4834      	ldr	r0, [pc, #208]	@ (8008d64 <_strtol_l.constprop.0+0xf0>)
 8008c94:	460d      	mov	r5, r1
 8008c96:	462a      	mov	r2, r5
 8008c98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c9c:	5d06      	ldrb	r6, [r0, r4]
 8008c9e:	f016 0608 	ands.w	r6, r6, #8
 8008ca2:	d1f8      	bne.n	8008c96 <_strtol_l.constprop.0+0x22>
 8008ca4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ca6:	d12d      	bne.n	8008d04 <_strtol_l.constprop.0+0x90>
 8008ca8:	782c      	ldrb	r4, [r5, #0]
 8008caa:	2601      	movs	r6, #1
 8008cac:	1c95      	adds	r5, r2, #2
 8008cae:	f033 0210 	bics.w	r2, r3, #16
 8008cb2:	d109      	bne.n	8008cc8 <_strtol_l.constprop.0+0x54>
 8008cb4:	2c30      	cmp	r4, #48	@ 0x30
 8008cb6:	d12a      	bne.n	8008d0e <_strtol_l.constprop.0+0x9a>
 8008cb8:	782a      	ldrb	r2, [r5, #0]
 8008cba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cbe:	2a58      	cmp	r2, #88	@ 0x58
 8008cc0:	d125      	bne.n	8008d0e <_strtol_l.constprop.0+0x9a>
 8008cc2:	786c      	ldrb	r4, [r5, #1]
 8008cc4:	2310      	movs	r3, #16
 8008cc6:	3502      	adds	r5, #2
 8008cc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ccc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	fbbc f9f3 	udiv	r9, ip, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ce0:	2f09      	cmp	r7, #9
 8008ce2:	d81b      	bhi.n	8008d1c <_strtol_l.constprop.0+0xa8>
 8008ce4:	463c      	mov	r4, r7
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	dd27      	ble.n	8008d3a <_strtol_l.constprop.0+0xc6>
 8008cea:	1c57      	adds	r7, r2, #1
 8008cec:	d007      	beq.n	8008cfe <_strtol_l.constprop.0+0x8a>
 8008cee:	4581      	cmp	r9, r0
 8008cf0:	d320      	bcc.n	8008d34 <_strtol_l.constprop.0+0xc0>
 8008cf2:	d101      	bne.n	8008cf8 <_strtol_l.constprop.0+0x84>
 8008cf4:	45a2      	cmp	sl, r4
 8008cf6:	db1d      	blt.n	8008d34 <_strtol_l.constprop.0+0xc0>
 8008cf8:	fb00 4003 	mla	r0, r0, r3, r4
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d02:	e7eb      	b.n	8008cdc <_strtol_l.constprop.0+0x68>
 8008d04:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d06:	bf04      	itt	eq
 8008d08:	782c      	ldrbeq	r4, [r5, #0]
 8008d0a:	1c95      	addeq	r5, r2, #2
 8008d0c:	e7cf      	b.n	8008cae <_strtol_l.constprop.0+0x3a>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1da      	bne.n	8008cc8 <_strtol_l.constprop.0+0x54>
 8008d12:	2c30      	cmp	r4, #48	@ 0x30
 8008d14:	bf0c      	ite	eq
 8008d16:	2308      	moveq	r3, #8
 8008d18:	230a      	movne	r3, #10
 8008d1a:	e7d5      	b.n	8008cc8 <_strtol_l.constprop.0+0x54>
 8008d1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d20:	2f19      	cmp	r7, #25
 8008d22:	d801      	bhi.n	8008d28 <_strtol_l.constprop.0+0xb4>
 8008d24:	3c37      	subs	r4, #55	@ 0x37
 8008d26:	e7de      	b.n	8008ce6 <_strtol_l.constprop.0+0x72>
 8008d28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d2c:	2f19      	cmp	r7, #25
 8008d2e:	d804      	bhi.n	8008d3a <_strtol_l.constprop.0+0xc6>
 8008d30:	3c57      	subs	r4, #87	@ 0x57
 8008d32:	e7d8      	b.n	8008ce6 <_strtol_l.constprop.0+0x72>
 8008d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d38:	e7e1      	b.n	8008cfe <_strtol_l.constprop.0+0x8a>
 8008d3a:	1c53      	adds	r3, r2, #1
 8008d3c:	d108      	bne.n	8008d50 <_strtol_l.constprop.0+0xdc>
 8008d3e:	2322      	movs	r3, #34	@ 0x22
 8008d40:	f8ce 3000 	str.w	r3, [lr]
 8008d44:	4660      	mov	r0, ip
 8008d46:	f1b8 0f00 	cmp.w	r8, #0
 8008d4a:	d0a0      	beq.n	8008c8e <_strtol_l.constprop.0+0x1a>
 8008d4c:	1e69      	subs	r1, r5, #1
 8008d4e:	e006      	b.n	8008d5e <_strtol_l.constprop.0+0xea>
 8008d50:	b106      	cbz	r6, 8008d54 <_strtol_l.constprop.0+0xe0>
 8008d52:	4240      	negs	r0, r0
 8008d54:	f1b8 0f00 	cmp.w	r8, #0
 8008d58:	d099      	beq.n	8008c8e <_strtol_l.constprop.0+0x1a>
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	d1f6      	bne.n	8008d4c <_strtol_l.constprop.0+0xd8>
 8008d5e:	f8c8 1000 	str.w	r1, [r8]
 8008d62:	e794      	b.n	8008c8e <_strtol_l.constprop.0+0x1a>
 8008d64:	0800df15 	.word	0x0800df15

08008d68 <_strtol_r>:
 8008d68:	f7ff bf84 	b.w	8008c74 <_strtol_l.constprop.0>

08008d6c <strtol>:
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	460a      	mov	r2, r1
 8008d70:	4601      	mov	r1, r0
 8008d72:	4802      	ldr	r0, [pc, #8]	@ (8008d7c <strtol+0x10>)
 8008d74:	6800      	ldr	r0, [r0, #0]
 8008d76:	f7ff bf7d 	b.w	8008c74 <_strtol_l.constprop.0>
 8008d7a:	bf00      	nop
 8008d7c:	20000084 	.word	0x20000084

08008d80 <__cvt>:
 8008d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	ec57 6b10 	vmov	r6, r7, d0
 8008d88:	2f00      	cmp	r7, #0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	463b      	mov	r3, r7
 8008d90:	bfbb      	ittet	lt
 8008d92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d96:	461f      	movlt	r7, r3
 8008d98:	2300      	movge	r3, #0
 8008d9a:	232d      	movlt	r3, #45	@ 0x2d
 8008d9c:	700b      	strb	r3, [r1, #0]
 8008d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008da0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008da4:	4691      	mov	r9, r2
 8008da6:	f023 0820 	bic.w	r8, r3, #32
 8008daa:	bfbc      	itt	lt
 8008dac:	4632      	movlt	r2, r6
 8008dae:	4616      	movlt	r6, r2
 8008db0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008db4:	d005      	beq.n	8008dc2 <__cvt+0x42>
 8008db6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008dba:	d100      	bne.n	8008dbe <__cvt+0x3e>
 8008dbc:	3401      	adds	r4, #1
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	e000      	b.n	8008dc4 <__cvt+0x44>
 8008dc2:	2103      	movs	r1, #3
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	ab02      	add	r3, sp, #8
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	ec47 6b10 	vmov	d0, r6, r7
 8008dd0:	4653      	mov	r3, sl
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	f001 f92c 	bl	800a030 <_dtoa_r>
 8008dd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ddc:	4605      	mov	r5, r0
 8008dde:	d119      	bne.n	8008e14 <__cvt+0x94>
 8008de0:	f019 0f01 	tst.w	r9, #1
 8008de4:	d00e      	beq.n	8008e04 <__cvt+0x84>
 8008de6:	eb00 0904 	add.w	r9, r0, r4
 8008dea:	2200      	movs	r2, #0
 8008dec:	2300      	movs	r3, #0
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008df6:	b108      	cbz	r0, 8008dfc <__cvt+0x7c>
 8008df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008dfc:	2230      	movs	r2, #48	@ 0x30
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	454b      	cmp	r3, r9
 8008e02:	d31e      	bcc.n	8008e42 <__cvt+0xc2>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e08:	1b5b      	subs	r3, r3, r5
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	b004      	add	sp, #16
 8008e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e18:	eb00 0904 	add.w	r9, r0, r4
 8008e1c:	d1e5      	bne.n	8008dea <__cvt+0x6a>
 8008e1e:	7803      	ldrb	r3, [r0, #0]
 8008e20:	2b30      	cmp	r3, #48	@ 0x30
 8008e22:	d10a      	bne.n	8008e3a <__cvt+0xba>
 8008e24:	2200      	movs	r2, #0
 8008e26:	2300      	movs	r3, #0
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7f7 fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e30:	b918      	cbnz	r0, 8008e3a <__cvt+0xba>
 8008e32:	f1c4 0401 	rsb	r4, r4, #1
 8008e36:	f8ca 4000 	str.w	r4, [sl]
 8008e3a:	f8da 3000 	ldr.w	r3, [sl]
 8008e3e:	4499      	add	r9, r3
 8008e40:	e7d3      	b.n	8008dea <__cvt+0x6a>
 8008e42:	1c59      	adds	r1, r3, #1
 8008e44:	9103      	str	r1, [sp, #12]
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e7d9      	b.n	8008dfe <__cvt+0x7e>

08008e4a <__exponent>:
 8008e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	bfba      	itte	lt
 8008e50:	4249      	neglt	r1, r1
 8008e52:	232d      	movlt	r3, #45	@ 0x2d
 8008e54:	232b      	movge	r3, #43	@ 0x2b
 8008e56:	2909      	cmp	r1, #9
 8008e58:	7002      	strb	r2, [r0, #0]
 8008e5a:	7043      	strb	r3, [r0, #1]
 8008e5c:	dd29      	ble.n	8008eb2 <__exponent+0x68>
 8008e5e:	f10d 0307 	add.w	r3, sp, #7
 8008e62:	461d      	mov	r5, r3
 8008e64:	270a      	movs	r7, #10
 8008e66:	461a      	mov	r2, r3
 8008e68:	fbb1 f6f7 	udiv	r6, r1, r7
 8008e6c:	fb07 1416 	mls	r4, r7, r6, r1
 8008e70:	3430      	adds	r4, #48	@ 0x30
 8008e72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008e76:	460c      	mov	r4, r1
 8008e78:	2c63      	cmp	r4, #99	@ 0x63
 8008e7a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008e7e:	4631      	mov	r1, r6
 8008e80:	dcf1      	bgt.n	8008e66 <__exponent+0x1c>
 8008e82:	3130      	adds	r1, #48	@ 0x30
 8008e84:	1e94      	subs	r4, r2, #2
 8008e86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e8a:	1c41      	adds	r1, r0, #1
 8008e8c:	4623      	mov	r3, r4
 8008e8e:	42ab      	cmp	r3, r5
 8008e90:	d30a      	bcc.n	8008ea8 <__exponent+0x5e>
 8008e92:	f10d 0309 	add.w	r3, sp, #9
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	42ac      	cmp	r4, r5
 8008e9a:	bf88      	it	hi
 8008e9c:	2300      	movhi	r3, #0
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	4403      	add	r3, r0
 8008ea2:	1a18      	subs	r0, r3, r0
 8008ea4:	b003      	add	sp, #12
 8008ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008eac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008eb0:	e7ed      	b.n	8008e8e <__exponent+0x44>
 8008eb2:	2330      	movs	r3, #48	@ 0x30
 8008eb4:	3130      	adds	r1, #48	@ 0x30
 8008eb6:	7083      	strb	r3, [r0, #2]
 8008eb8:	70c1      	strb	r1, [r0, #3]
 8008eba:	1d03      	adds	r3, r0, #4
 8008ebc:	e7f1      	b.n	8008ea2 <__exponent+0x58>
	...

08008ec0 <_printf_float>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	b08d      	sub	sp, #52	@ 0x34
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ecc:	4616      	mov	r6, r2
 8008ece:	461f      	mov	r7, r3
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	f000 ff89 	bl	8009de8 <_localeconv_r>
 8008ed6:	6803      	ldr	r3, [r0, #0]
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7f7 f9c8 	bl	8000270 <strlen>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ee8:	9005      	str	r0, [sp, #20]
 8008eea:	3307      	adds	r3, #7
 8008eec:	f023 0307 	bic.w	r3, r3, #7
 8008ef0:	f103 0208 	add.w	r2, r3, #8
 8008ef4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8008efc:	f8c8 2000 	str.w	r2, [r8]
 8008f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f16:	4b9c      	ldr	r3, [pc, #624]	@ (8009188 <_printf_float+0x2c8>)
 8008f18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f1c:	f7f7 fe06 	bl	8000b2c <__aeabi_dcmpun>
 8008f20:	bb70      	cbnz	r0, 8008f80 <_printf_float+0xc0>
 8008f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f26:	4b98      	ldr	r3, [pc, #608]	@ (8009188 <_printf_float+0x2c8>)
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f2c:	f7f7 fde0 	bl	8000af0 <__aeabi_dcmple>
 8008f30:	bb30      	cbnz	r0, 8008f80 <_printf_float+0xc0>
 8008f32:	2200      	movs	r2, #0
 8008f34:	2300      	movs	r3, #0
 8008f36:	4640      	mov	r0, r8
 8008f38:	4649      	mov	r1, r9
 8008f3a:	f7f7 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8008f3e:	b110      	cbz	r0, 8008f46 <_printf_float+0x86>
 8008f40:	232d      	movs	r3, #45	@ 0x2d
 8008f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f46:	4a91      	ldr	r2, [pc, #580]	@ (800918c <_printf_float+0x2cc>)
 8008f48:	4b91      	ldr	r3, [pc, #580]	@ (8009190 <_printf_float+0x2d0>)
 8008f4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f4e:	bf94      	ite	ls
 8008f50:	4690      	movls	r8, r2
 8008f52:	4698      	movhi	r8, r3
 8008f54:	2303      	movs	r3, #3
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	f02b 0304 	bic.w	r3, fp, #4
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	f04f 0900 	mov.w	r9, #0
 8008f62:	9700      	str	r7, [sp, #0]
 8008f64:	4633      	mov	r3, r6
 8008f66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f9d2 	bl	8009314 <_printf_common>
 8008f70:	3001      	adds	r0, #1
 8008f72:	f040 808d 	bne.w	8009090 <_printf_float+0x1d0>
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f7a:	b00d      	add	sp, #52	@ 0x34
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	4640      	mov	r0, r8
 8008f86:	4649      	mov	r1, r9
 8008f88:	f7f7 fdd0 	bl	8000b2c <__aeabi_dcmpun>
 8008f8c:	b140      	cbz	r0, 8008fa0 <_printf_float+0xe0>
 8008f8e:	464b      	mov	r3, r9
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfbc      	itt	lt
 8008f94:	232d      	movlt	r3, #45	@ 0x2d
 8008f96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8009194 <_printf_float+0x2d4>)
 8008f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8009198 <_printf_float+0x2d8>)
 8008f9e:	e7d4      	b.n	8008f4a <_printf_float+0x8a>
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008fa6:	9206      	str	r2, [sp, #24]
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	d13b      	bne.n	8009024 <_printf_float+0x164>
 8008fac:	2306      	movs	r3, #6
 8008fae:	6063      	str	r3, [r4, #4]
 8008fb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6022      	str	r2, [r4, #0]
 8008fb8:	9303      	str	r3, [sp, #12]
 8008fba:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008fc0:	ab09      	add	r3, sp, #36	@ 0x24
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	6861      	ldr	r1, [r4, #4]
 8008fc6:	ec49 8b10 	vmov	d0, r8, r9
 8008fca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f7ff fed6 	bl	8008d80 <__cvt>
 8008fd4:	9b06      	ldr	r3, [sp, #24]
 8008fd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fd8:	2b47      	cmp	r3, #71	@ 0x47
 8008fda:	4680      	mov	r8, r0
 8008fdc:	d129      	bne.n	8009032 <_printf_float+0x172>
 8008fde:	1cc8      	adds	r0, r1, #3
 8008fe0:	db02      	blt.n	8008fe8 <_printf_float+0x128>
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	dd41      	ble.n	800906c <_printf_float+0x1ac>
 8008fe8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008fec:	fa5f fa8a 	uxtb.w	sl, sl
 8008ff0:	3901      	subs	r1, #1
 8008ff2:	4652      	mov	r2, sl
 8008ff4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ff8:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ffa:	f7ff ff26 	bl	8008e4a <__exponent>
 8008ffe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009000:	1813      	adds	r3, r2, r0
 8009002:	2a01      	cmp	r2, #1
 8009004:	4681      	mov	r9, r0
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	dc02      	bgt.n	8009010 <_printf_float+0x150>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	07d2      	lsls	r2, r2, #31
 800900e:	d501      	bpl.n	8009014 <_printf_float+0x154>
 8009010:	3301      	adds	r3, #1
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0a2      	beq.n	8008f62 <_printf_float+0xa2>
 800901c:	232d      	movs	r3, #45	@ 0x2d
 800901e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009022:	e79e      	b.n	8008f62 <_printf_float+0xa2>
 8009024:	9a06      	ldr	r2, [sp, #24]
 8009026:	2a47      	cmp	r2, #71	@ 0x47
 8009028:	d1c2      	bne.n	8008fb0 <_printf_float+0xf0>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1c0      	bne.n	8008fb0 <_printf_float+0xf0>
 800902e:	2301      	movs	r3, #1
 8009030:	e7bd      	b.n	8008fae <_printf_float+0xee>
 8009032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009036:	d9db      	bls.n	8008ff0 <_printf_float+0x130>
 8009038:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800903c:	d118      	bne.n	8009070 <_printf_float+0x1b0>
 800903e:	2900      	cmp	r1, #0
 8009040:	6863      	ldr	r3, [r4, #4]
 8009042:	dd0b      	ble.n	800905c <_printf_float+0x19c>
 8009044:	6121      	str	r1, [r4, #16]
 8009046:	b913      	cbnz	r3, 800904e <_printf_float+0x18e>
 8009048:	6822      	ldr	r2, [r4, #0]
 800904a:	07d0      	lsls	r0, r2, #31
 800904c:	d502      	bpl.n	8009054 <_printf_float+0x194>
 800904e:	3301      	adds	r3, #1
 8009050:	440b      	add	r3, r1
 8009052:	6123      	str	r3, [r4, #16]
 8009054:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	e7db      	b.n	8009014 <_printf_float+0x154>
 800905c:	b913      	cbnz	r3, 8009064 <_printf_float+0x1a4>
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	07d2      	lsls	r2, r2, #31
 8009062:	d501      	bpl.n	8009068 <_printf_float+0x1a8>
 8009064:	3302      	adds	r3, #2
 8009066:	e7f4      	b.n	8009052 <_printf_float+0x192>
 8009068:	2301      	movs	r3, #1
 800906a:	e7f2      	b.n	8009052 <_printf_float+0x192>
 800906c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009072:	4299      	cmp	r1, r3
 8009074:	db05      	blt.n	8009082 <_printf_float+0x1c2>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	6121      	str	r1, [r4, #16]
 800907a:	07d8      	lsls	r0, r3, #31
 800907c:	d5ea      	bpl.n	8009054 <_printf_float+0x194>
 800907e:	1c4b      	adds	r3, r1, #1
 8009080:	e7e7      	b.n	8009052 <_printf_float+0x192>
 8009082:	2900      	cmp	r1, #0
 8009084:	bfd4      	ite	le
 8009086:	f1c1 0202 	rsble	r2, r1, #2
 800908a:	2201      	movgt	r2, #1
 800908c:	4413      	add	r3, r2
 800908e:	e7e0      	b.n	8009052 <_printf_float+0x192>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	055a      	lsls	r2, r3, #21
 8009094:	d407      	bmi.n	80090a6 <_printf_float+0x1e6>
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	4642      	mov	r2, r8
 800909a:	4631      	mov	r1, r6
 800909c:	4628      	mov	r0, r5
 800909e:	47b8      	blx	r7
 80090a0:	3001      	adds	r0, #1
 80090a2:	d12b      	bne.n	80090fc <_printf_float+0x23c>
 80090a4:	e767      	b.n	8008f76 <_printf_float+0xb6>
 80090a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80090aa:	f240 80dd 	bls.w	8009268 <_printf_float+0x3a8>
 80090ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090b2:	2200      	movs	r2, #0
 80090b4:	2300      	movs	r3, #0
 80090b6:	f7f7 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d033      	beq.n	8009126 <_printf_float+0x266>
 80090be:	4a37      	ldr	r2, [pc, #220]	@ (800919c <_printf_float+0x2dc>)
 80090c0:	2301      	movs	r3, #1
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	f43f af54 	beq.w	8008f76 <_printf_float+0xb6>
 80090ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80090d2:	4543      	cmp	r3, r8
 80090d4:	db02      	blt.n	80090dc <_printf_float+0x21c>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	07d8      	lsls	r0, r3, #31
 80090da:	d50f      	bpl.n	80090fc <_printf_float+0x23c>
 80090dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090e0:	4631      	mov	r1, r6
 80090e2:	4628      	mov	r0, r5
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f af45 	beq.w	8008f76 <_printf_float+0xb6>
 80090ec:	f04f 0900 	mov.w	r9, #0
 80090f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80090f4:	f104 0a1a 	add.w	sl, r4, #26
 80090f8:	45c8      	cmp	r8, r9
 80090fa:	dc09      	bgt.n	8009110 <_printf_float+0x250>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	079b      	lsls	r3, r3, #30
 8009100:	f100 8103 	bmi.w	800930a <_printf_float+0x44a>
 8009104:	68e0      	ldr	r0, [r4, #12]
 8009106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009108:	4298      	cmp	r0, r3
 800910a:	bfb8      	it	lt
 800910c:	4618      	movlt	r0, r3
 800910e:	e734      	b.n	8008f7a <_printf_float+0xba>
 8009110:	2301      	movs	r3, #1
 8009112:	4652      	mov	r2, sl
 8009114:	4631      	mov	r1, r6
 8009116:	4628      	mov	r0, r5
 8009118:	47b8      	blx	r7
 800911a:	3001      	adds	r0, #1
 800911c:	f43f af2b 	beq.w	8008f76 <_printf_float+0xb6>
 8009120:	f109 0901 	add.w	r9, r9, #1
 8009124:	e7e8      	b.n	80090f8 <_printf_float+0x238>
 8009126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	dc39      	bgt.n	80091a0 <_printf_float+0x2e0>
 800912c:	4a1b      	ldr	r2, [pc, #108]	@ (800919c <_printf_float+0x2dc>)
 800912e:	2301      	movs	r3, #1
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	f43f af1d 	beq.w	8008f76 <_printf_float+0xb6>
 800913c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009140:	ea59 0303 	orrs.w	r3, r9, r3
 8009144:	d102      	bne.n	800914c <_printf_float+0x28c>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	07d9      	lsls	r1, r3, #31
 800914a:	d5d7      	bpl.n	80090fc <_printf_float+0x23c>
 800914c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009150:	4631      	mov	r1, r6
 8009152:	4628      	mov	r0, r5
 8009154:	47b8      	blx	r7
 8009156:	3001      	adds	r0, #1
 8009158:	f43f af0d 	beq.w	8008f76 <_printf_float+0xb6>
 800915c:	f04f 0a00 	mov.w	sl, #0
 8009160:	f104 0b1a 	add.w	fp, r4, #26
 8009164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009166:	425b      	negs	r3, r3
 8009168:	4553      	cmp	r3, sl
 800916a:	dc01      	bgt.n	8009170 <_printf_float+0x2b0>
 800916c:	464b      	mov	r3, r9
 800916e:	e793      	b.n	8009098 <_printf_float+0x1d8>
 8009170:	2301      	movs	r3, #1
 8009172:	465a      	mov	r2, fp
 8009174:	4631      	mov	r1, r6
 8009176:	4628      	mov	r0, r5
 8009178:	47b8      	blx	r7
 800917a:	3001      	adds	r0, #1
 800917c:	f43f aefb 	beq.w	8008f76 <_printf_float+0xb6>
 8009180:	f10a 0a01 	add.w	sl, sl, #1
 8009184:	e7ee      	b.n	8009164 <_printf_float+0x2a4>
 8009186:	bf00      	nop
 8009188:	7fefffff 	.word	0x7fefffff
 800918c:	0800e015 	.word	0x0800e015
 8009190:	0800e019 	.word	0x0800e019
 8009194:	0800e01d 	.word	0x0800e01d
 8009198:	0800e021 	.word	0x0800e021
 800919c:	0800e347 	.word	0x0800e347
 80091a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091a6:	4553      	cmp	r3, sl
 80091a8:	bfa8      	it	ge
 80091aa:	4653      	movge	r3, sl
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	4699      	mov	r9, r3
 80091b0:	dc36      	bgt.n	8009220 <_printf_float+0x360>
 80091b2:	f04f 0b00 	mov.w	fp, #0
 80091b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ba:	f104 021a 	add.w	r2, r4, #26
 80091be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091c0:	9306      	str	r3, [sp, #24]
 80091c2:	eba3 0309 	sub.w	r3, r3, r9
 80091c6:	455b      	cmp	r3, fp
 80091c8:	dc31      	bgt.n	800922e <_printf_float+0x36e>
 80091ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091cc:	459a      	cmp	sl, r3
 80091ce:	dc3a      	bgt.n	8009246 <_printf_float+0x386>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	07da      	lsls	r2, r3, #31
 80091d4:	d437      	bmi.n	8009246 <_printf_float+0x386>
 80091d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d8:	ebaa 0903 	sub.w	r9, sl, r3
 80091dc:	9b06      	ldr	r3, [sp, #24]
 80091de:	ebaa 0303 	sub.w	r3, sl, r3
 80091e2:	4599      	cmp	r9, r3
 80091e4:	bfa8      	it	ge
 80091e6:	4699      	movge	r9, r3
 80091e8:	f1b9 0f00 	cmp.w	r9, #0
 80091ec:	dc33      	bgt.n	8009256 <_printf_float+0x396>
 80091ee:	f04f 0800 	mov.w	r8, #0
 80091f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091f6:	f104 0b1a 	add.w	fp, r4, #26
 80091fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fc:	ebaa 0303 	sub.w	r3, sl, r3
 8009200:	eba3 0309 	sub.w	r3, r3, r9
 8009204:	4543      	cmp	r3, r8
 8009206:	f77f af79 	ble.w	80090fc <_printf_float+0x23c>
 800920a:	2301      	movs	r3, #1
 800920c:	465a      	mov	r2, fp
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	f43f aeae 	beq.w	8008f76 <_printf_float+0xb6>
 800921a:	f108 0801 	add.w	r8, r8, #1
 800921e:	e7ec      	b.n	80091fa <_printf_float+0x33a>
 8009220:	4642      	mov	r2, r8
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	d1c2      	bne.n	80091b2 <_printf_float+0x2f2>
 800922c:	e6a3      	b.n	8008f76 <_printf_float+0xb6>
 800922e:	2301      	movs	r3, #1
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	9206      	str	r2, [sp, #24]
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f ae9c 	beq.w	8008f76 <_printf_float+0xb6>
 800923e:	9a06      	ldr	r2, [sp, #24]
 8009240:	f10b 0b01 	add.w	fp, fp, #1
 8009244:	e7bb      	b.n	80091be <_printf_float+0x2fe>
 8009246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	d1c0      	bne.n	80091d6 <_printf_float+0x316>
 8009254:	e68f      	b.n	8008f76 <_printf_float+0xb6>
 8009256:	9a06      	ldr	r2, [sp, #24]
 8009258:	464b      	mov	r3, r9
 800925a:	4442      	add	r2, r8
 800925c:	4631      	mov	r1, r6
 800925e:	4628      	mov	r0, r5
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	d1c3      	bne.n	80091ee <_printf_float+0x32e>
 8009266:	e686      	b.n	8008f76 <_printf_float+0xb6>
 8009268:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800926c:	f1ba 0f01 	cmp.w	sl, #1
 8009270:	dc01      	bgt.n	8009276 <_printf_float+0x3b6>
 8009272:	07db      	lsls	r3, r3, #31
 8009274:	d536      	bpl.n	80092e4 <_printf_float+0x424>
 8009276:	2301      	movs	r3, #1
 8009278:	4642      	mov	r2, r8
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	f43f ae78 	beq.w	8008f76 <_printf_float+0xb6>
 8009286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800928a:	4631      	mov	r1, r6
 800928c:	4628      	mov	r0, r5
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f ae70 	beq.w	8008f76 <_printf_float+0xb6>
 8009296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800929a:	2200      	movs	r2, #0
 800929c:	2300      	movs	r3, #0
 800929e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80092a2:	f7f7 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80092a6:	b9c0      	cbnz	r0, 80092da <_printf_float+0x41a>
 80092a8:	4653      	mov	r3, sl
 80092aa:	f108 0201 	add.w	r2, r8, #1
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	d10c      	bne.n	80092d2 <_printf_float+0x412>
 80092b8:	e65d      	b.n	8008f76 <_printf_float+0xb6>
 80092ba:	2301      	movs	r3, #1
 80092bc:	465a      	mov	r2, fp
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f ae56 	beq.w	8008f76 <_printf_float+0xb6>
 80092ca:	f108 0801 	add.w	r8, r8, #1
 80092ce:	45d0      	cmp	r8, sl
 80092d0:	dbf3      	blt.n	80092ba <_printf_float+0x3fa>
 80092d2:	464b      	mov	r3, r9
 80092d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80092d8:	e6df      	b.n	800909a <_printf_float+0x1da>
 80092da:	f04f 0800 	mov.w	r8, #0
 80092de:	f104 0b1a 	add.w	fp, r4, #26
 80092e2:	e7f4      	b.n	80092ce <_printf_float+0x40e>
 80092e4:	2301      	movs	r3, #1
 80092e6:	4642      	mov	r2, r8
 80092e8:	e7e1      	b.n	80092ae <_printf_float+0x3ee>
 80092ea:	2301      	movs	r3, #1
 80092ec:	464a      	mov	r2, r9
 80092ee:	4631      	mov	r1, r6
 80092f0:	4628      	mov	r0, r5
 80092f2:	47b8      	blx	r7
 80092f4:	3001      	adds	r0, #1
 80092f6:	f43f ae3e 	beq.w	8008f76 <_printf_float+0xb6>
 80092fa:	f108 0801 	add.w	r8, r8, #1
 80092fe:	68e3      	ldr	r3, [r4, #12]
 8009300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009302:	1a5b      	subs	r3, r3, r1
 8009304:	4543      	cmp	r3, r8
 8009306:	dcf0      	bgt.n	80092ea <_printf_float+0x42a>
 8009308:	e6fc      	b.n	8009104 <_printf_float+0x244>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	f104 0919 	add.w	r9, r4, #25
 8009312:	e7f4      	b.n	80092fe <_printf_float+0x43e>

08009314 <_printf_common>:
 8009314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	4616      	mov	r6, r2
 800931a:	4698      	mov	r8, r3
 800931c:	688a      	ldr	r2, [r1, #8]
 800931e:	690b      	ldr	r3, [r1, #16]
 8009320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009324:	4293      	cmp	r3, r2
 8009326:	bfb8      	it	lt
 8009328:	4613      	movlt	r3, r2
 800932a:	6033      	str	r3, [r6, #0]
 800932c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009330:	4607      	mov	r7, r0
 8009332:	460c      	mov	r4, r1
 8009334:	b10a      	cbz	r2, 800933a <_printf_common+0x26>
 8009336:	3301      	adds	r3, #1
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	0699      	lsls	r1, r3, #26
 800933e:	bf42      	ittt	mi
 8009340:	6833      	ldrmi	r3, [r6, #0]
 8009342:	3302      	addmi	r3, #2
 8009344:	6033      	strmi	r3, [r6, #0]
 8009346:	6825      	ldr	r5, [r4, #0]
 8009348:	f015 0506 	ands.w	r5, r5, #6
 800934c:	d106      	bne.n	800935c <_printf_common+0x48>
 800934e:	f104 0a19 	add.w	sl, r4, #25
 8009352:	68e3      	ldr	r3, [r4, #12]
 8009354:	6832      	ldr	r2, [r6, #0]
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	42ab      	cmp	r3, r5
 800935a:	dc26      	bgt.n	80093aa <_printf_common+0x96>
 800935c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	3b00      	subs	r3, #0
 8009364:	bf18      	it	ne
 8009366:	2301      	movne	r3, #1
 8009368:	0692      	lsls	r2, r2, #26
 800936a:	d42b      	bmi.n	80093c4 <_printf_common+0xb0>
 800936c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009370:	4641      	mov	r1, r8
 8009372:	4638      	mov	r0, r7
 8009374:	47c8      	blx	r9
 8009376:	3001      	adds	r0, #1
 8009378:	d01e      	beq.n	80093b8 <_printf_common+0xa4>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	f003 0306 	and.w	r3, r3, #6
 8009382:	2b04      	cmp	r3, #4
 8009384:	bf02      	ittt	eq
 8009386:	68e5      	ldreq	r5, [r4, #12]
 8009388:	6833      	ldreq	r3, [r6, #0]
 800938a:	1aed      	subeq	r5, r5, r3
 800938c:	68a3      	ldr	r3, [r4, #8]
 800938e:	bf0c      	ite	eq
 8009390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009394:	2500      	movne	r5, #0
 8009396:	4293      	cmp	r3, r2
 8009398:	bfc4      	itt	gt
 800939a:	1a9b      	subgt	r3, r3, r2
 800939c:	18ed      	addgt	r5, r5, r3
 800939e:	2600      	movs	r6, #0
 80093a0:	341a      	adds	r4, #26
 80093a2:	42b5      	cmp	r5, r6
 80093a4:	d11a      	bne.n	80093dc <_printf_common+0xc8>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e008      	b.n	80093bc <_printf_common+0xa8>
 80093aa:	2301      	movs	r3, #1
 80093ac:	4652      	mov	r2, sl
 80093ae:	4641      	mov	r1, r8
 80093b0:	4638      	mov	r0, r7
 80093b2:	47c8      	blx	r9
 80093b4:	3001      	adds	r0, #1
 80093b6:	d103      	bne.n	80093c0 <_printf_common+0xac>
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c0:	3501      	adds	r5, #1
 80093c2:	e7c6      	b.n	8009352 <_printf_common+0x3e>
 80093c4:	18e1      	adds	r1, r4, r3
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	2030      	movs	r0, #48	@ 0x30
 80093ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093ce:	4422      	add	r2, r4
 80093d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093d8:	3302      	adds	r3, #2
 80093da:	e7c7      	b.n	800936c <_printf_common+0x58>
 80093dc:	2301      	movs	r3, #1
 80093de:	4622      	mov	r2, r4
 80093e0:	4641      	mov	r1, r8
 80093e2:	4638      	mov	r0, r7
 80093e4:	47c8      	blx	r9
 80093e6:	3001      	adds	r0, #1
 80093e8:	d0e6      	beq.n	80093b8 <_printf_common+0xa4>
 80093ea:	3601      	adds	r6, #1
 80093ec:	e7d9      	b.n	80093a2 <_printf_common+0x8e>
	...

080093f0 <_printf_i>:
 80093f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	7e0f      	ldrb	r7, [r1, #24]
 80093f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093f8:	2f78      	cmp	r7, #120	@ 0x78
 80093fa:	4691      	mov	r9, r2
 80093fc:	4680      	mov	r8, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	469a      	mov	sl, r3
 8009402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009406:	d807      	bhi.n	8009418 <_printf_i+0x28>
 8009408:	2f62      	cmp	r7, #98	@ 0x62
 800940a:	d80a      	bhi.n	8009422 <_printf_i+0x32>
 800940c:	2f00      	cmp	r7, #0
 800940e:	f000 80d2 	beq.w	80095b6 <_printf_i+0x1c6>
 8009412:	2f58      	cmp	r7, #88	@ 0x58
 8009414:	f000 80b9 	beq.w	800958a <_printf_i+0x19a>
 8009418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800941c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009420:	e03a      	b.n	8009498 <_printf_i+0xa8>
 8009422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009426:	2b15      	cmp	r3, #21
 8009428:	d8f6      	bhi.n	8009418 <_printf_i+0x28>
 800942a:	a101      	add	r1, pc, #4	@ (adr r1, 8009430 <_printf_i+0x40>)
 800942c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009430:	08009489 	.word	0x08009489
 8009434:	0800949d 	.word	0x0800949d
 8009438:	08009419 	.word	0x08009419
 800943c:	08009419 	.word	0x08009419
 8009440:	08009419 	.word	0x08009419
 8009444:	08009419 	.word	0x08009419
 8009448:	0800949d 	.word	0x0800949d
 800944c:	08009419 	.word	0x08009419
 8009450:	08009419 	.word	0x08009419
 8009454:	08009419 	.word	0x08009419
 8009458:	08009419 	.word	0x08009419
 800945c:	0800959d 	.word	0x0800959d
 8009460:	080094c7 	.word	0x080094c7
 8009464:	08009557 	.word	0x08009557
 8009468:	08009419 	.word	0x08009419
 800946c:	08009419 	.word	0x08009419
 8009470:	080095bf 	.word	0x080095bf
 8009474:	08009419 	.word	0x08009419
 8009478:	080094c7 	.word	0x080094c7
 800947c:	08009419 	.word	0x08009419
 8009480:	08009419 	.word	0x08009419
 8009484:	0800955f 	.word	0x0800955f
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	1d1a      	adds	r2, r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6032      	str	r2, [r6, #0]
 8009490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009498:	2301      	movs	r3, #1
 800949a:	e09d      	b.n	80095d8 <_printf_i+0x1e8>
 800949c:	6833      	ldr	r3, [r6, #0]
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	1d19      	adds	r1, r3, #4
 80094a2:	6031      	str	r1, [r6, #0]
 80094a4:	0606      	lsls	r6, r0, #24
 80094a6:	d501      	bpl.n	80094ac <_printf_i+0xbc>
 80094a8:	681d      	ldr	r5, [r3, #0]
 80094aa:	e003      	b.n	80094b4 <_printf_i+0xc4>
 80094ac:	0645      	lsls	r5, r0, #25
 80094ae:	d5fb      	bpl.n	80094a8 <_printf_i+0xb8>
 80094b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094b4:	2d00      	cmp	r5, #0
 80094b6:	da03      	bge.n	80094c0 <_printf_i+0xd0>
 80094b8:	232d      	movs	r3, #45	@ 0x2d
 80094ba:	426d      	negs	r5, r5
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c0:	4859      	ldr	r0, [pc, #356]	@ (8009628 <_printf_i+0x238>)
 80094c2:	230a      	movs	r3, #10
 80094c4:	e011      	b.n	80094ea <_printf_i+0xfa>
 80094c6:	6821      	ldr	r1, [r4, #0]
 80094c8:	6833      	ldr	r3, [r6, #0]
 80094ca:	0608      	lsls	r0, r1, #24
 80094cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80094d0:	d402      	bmi.n	80094d8 <_printf_i+0xe8>
 80094d2:	0649      	lsls	r1, r1, #25
 80094d4:	bf48      	it	mi
 80094d6:	b2ad      	uxthmi	r5, r5
 80094d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80094da:	4853      	ldr	r0, [pc, #332]	@ (8009628 <_printf_i+0x238>)
 80094dc:	6033      	str	r3, [r6, #0]
 80094de:	bf14      	ite	ne
 80094e0:	230a      	movne	r3, #10
 80094e2:	2308      	moveq	r3, #8
 80094e4:	2100      	movs	r1, #0
 80094e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094ea:	6866      	ldr	r6, [r4, #4]
 80094ec:	60a6      	str	r6, [r4, #8]
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	bfa2      	ittt	ge
 80094f2:	6821      	ldrge	r1, [r4, #0]
 80094f4:	f021 0104 	bicge.w	r1, r1, #4
 80094f8:	6021      	strge	r1, [r4, #0]
 80094fa:	b90d      	cbnz	r5, 8009500 <_printf_i+0x110>
 80094fc:	2e00      	cmp	r6, #0
 80094fe:	d04b      	beq.n	8009598 <_printf_i+0x1a8>
 8009500:	4616      	mov	r6, r2
 8009502:	fbb5 f1f3 	udiv	r1, r5, r3
 8009506:	fb03 5711 	mls	r7, r3, r1, r5
 800950a:	5dc7      	ldrb	r7, [r0, r7]
 800950c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009510:	462f      	mov	r7, r5
 8009512:	42bb      	cmp	r3, r7
 8009514:	460d      	mov	r5, r1
 8009516:	d9f4      	bls.n	8009502 <_printf_i+0x112>
 8009518:	2b08      	cmp	r3, #8
 800951a:	d10b      	bne.n	8009534 <_printf_i+0x144>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	07df      	lsls	r7, r3, #31
 8009520:	d508      	bpl.n	8009534 <_printf_i+0x144>
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	6861      	ldr	r1, [r4, #4]
 8009526:	4299      	cmp	r1, r3
 8009528:	bfde      	ittt	le
 800952a:	2330      	movle	r3, #48	@ 0x30
 800952c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009530:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009534:	1b92      	subs	r2, r2, r6
 8009536:	6122      	str	r2, [r4, #16]
 8009538:	f8cd a000 	str.w	sl, [sp]
 800953c:	464b      	mov	r3, r9
 800953e:	aa03      	add	r2, sp, #12
 8009540:	4621      	mov	r1, r4
 8009542:	4640      	mov	r0, r8
 8009544:	f7ff fee6 	bl	8009314 <_printf_common>
 8009548:	3001      	adds	r0, #1
 800954a:	d14a      	bne.n	80095e2 <_printf_i+0x1f2>
 800954c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009550:	b004      	add	sp, #16
 8009552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	f043 0320 	orr.w	r3, r3, #32
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	4833      	ldr	r0, [pc, #204]	@ (800962c <_printf_i+0x23c>)
 8009560:	2778      	movs	r7, #120	@ 0x78
 8009562:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	6831      	ldr	r1, [r6, #0]
 800956a:	061f      	lsls	r7, r3, #24
 800956c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009570:	d402      	bmi.n	8009578 <_printf_i+0x188>
 8009572:	065f      	lsls	r7, r3, #25
 8009574:	bf48      	it	mi
 8009576:	b2ad      	uxthmi	r5, r5
 8009578:	6031      	str	r1, [r6, #0]
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	bf44      	itt	mi
 800957e:	f043 0320 	orrmi.w	r3, r3, #32
 8009582:	6023      	strmi	r3, [r4, #0]
 8009584:	b11d      	cbz	r5, 800958e <_printf_i+0x19e>
 8009586:	2310      	movs	r3, #16
 8009588:	e7ac      	b.n	80094e4 <_printf_i+0xf4>
 800958a:	4827      	ldr	r0, [pc, #156]	@ (8009628 <_printf_i+0x238>)
 800958c:	e7e9      	b.n	8009562 <_printf_i+0x172>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	f023 0320 	bic.w	r3, r3, #32
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	e7f6      	b.n	8009586 <_printf_i+0x196>
 8009598:	4616      	mov	r6, r2
 800959a:	e7bd      	b.n	8009518 <_printf_i+0x128>
 800959c:	6833      	ldr	r3, [r6, #0]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	6961      	ldr	r1, [r4, #20]
 80095a2:	1d18      	adds	r0, r3, #4
 80095a4:	6030      	str	r0, [r6, #0]
 80095a6:	062e      	lsls	r6, r5, #24
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	d501      	bpl.n	80095b0 <_printf_i+0x1c0>
 80095ac:	6019      	str	r1, [r3, #0]
 80095ae:	e002      	b.n	80095b6 <_printf_i+0x1c6>
 80095b0:	0668      	lsls	r0, r5, #25
 80095b2:	d5fb      	bpl.n	80095ac <_printf_i+0x1bc>
 80095b4:	8019      	strh	r1, [r3, #0]
 80095b6:	2300      	movs	r3, #0
 80095b8:	6123      	str	r3, [r4, #16]
 80095ba:	4616      	mov	r6, r2
 80095bc:	e7bc      	b.n	8009538 <_printf_i+0x148>
 80095be:	6833      	ldr	r3, [r6, #0]
 80095c0:	1d1a      	adds	r2, r3, #4
 80095c2:	6032      	str	r2, [r6, #0]
 80095c4:	681e      	ldr	r6, [r3, #0]
 80095c6:	6862      	ldr	r2, [r4, #4]
 80095c8:	2100      	movs	r1, #0
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7f6 fe00 	bl	80001d0 <memchr>
 80095d0:	b108      	cbz	r0, 80095d6 <_printf_i+0x1e6>
 80095d2:	1b80      	subs	r0, r0, r6
 80095d4:	6060      	str	r0, [r4, #4]
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	2300      	movs	r3, #0
 80095dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095e0:	e7aa      	b.n	8009538 <_printf_i+0x148>
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	4632      	mov	r2, r6
 80095e6:	4649      	mov	r1, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	47d0      	blx	sl
 80095ec:	3001      	adds	r0, #1
 80095ee:	d0ad      	beq.n	800954c <_printf_i+0x15c>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	079b      	lsls	r3, r3, #30
 80095f4:	d413      	bmi.n	800961e <_printf_i+0x22e>
 80095f6:	68e0      	ldr	r0, [r4, #12]
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	4298      	cmp	r0, r3
 80095fc:	bfb8      	it	lt
 80095fe:	4618      	movlt	r0, r3
 8009600:	e7a6      	b.n	8009550 <_printf_i+0x160>
 8009602:	2301      	movs	r3, #1
 8009604:	4632      	mov	r2, r6
 8009606:	4649      	mov	r1, r9
 8009608:	4640      	mov	r0, r8
 800960a:	47d0      	blx	sl
 800960c:	3001      	adds	r0, #1
 800960e:	d09d      	beq.n	800954c <_printf_i+0x15c>
 8009610:	3501      	adds	r5, #1
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	9903      	ldr	r1, [sp, #12]
 8009616:	1a5b      	subs	r3, r3, r1
 8009618:	42ab      	cmp	r3, r5
 800961a:	dcf2      	bgt.n	8009602 <_printf_i+0x212>
 800961c:	e7eb      	b.n	80095f6 <_printf_i+0x206>
 800961e:	2500      	movs	r5, #0
 8009620:	f104 0619 	add.w	r6, r4, #25
 8009624:	e7f5      	b.n	8009612 <_printf_i+0x222>
 8009626:	bf00      	nop
 8009628:	0800e025 	.word	0x0800e025
 800962c:	0800e036 	.word	0x0800e036

08009630 <_scanf_float>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	b087      	sub	sp, #28
 8009636:	4617      	mov	r7, r2
 8009638:	9303      	str	r3, [sp, #12]
 800963a:	688b      	ldr	r3, [r1, #8]
 800963c:	1e5a      	subs	r2, r3, #1
 800963e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009642:	bf81      	itttt	hi
 8009644:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009648:	eb03 0b05 	addhi.w	fp, r3, r5
 800964c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009650:	608b      	strhi	r3, [r1, #8]
 8009652:	680b      	ldr	r3, [r1, #0]
 8009654:	460a      	mov	r2, r1
 8009656:	f04f 0500 	mov.w	r5, #0
 800965a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800965e:	f842 3b1c 	str.w	r3, [r2], #28
 8009662:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009666:	4680      	mov	r8, r0
 8009668:	460c      	mov	r4, r1
 800966a:	bf98      	it	ls
 800966c:	f04f 0b00 	movls.w	fp, #0
 8009670:	9201      	str	r2, [sp, #4]
 8009672:	4616      	mov	r6, r2
 8009674:	46aa      	mov	sl, r5
 8009676:	46a9      	mov	r9, r5
 8009678:	9502      	str	r5, [sp, #8]
 800967a:	68a2      	ldr	r2, [r4, #8]
 800967c:	b152      	cbz	r2, 8009694 <_scanf_float+0x64>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b4e      	cmp	r3, #78	@ 0x4e
 8009684:	d864      	bhi.n	8009750 <_scanf_float+0x120>
 8009686:	2b40      	cmp	r3, #64	@ 0x40
 8009688:	d83c      	bhi.n	8009704 <_scanf_float+0xd4>
 800968a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800968e:	b2c8      	uxtb	r0, r1
 8009690:	280e      	cmp	r0, #14
 8009692:	d93a      	bls.n	800970a <_scanf_float+0xda>
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	d003      	beq.n	80096a2 <_scanf_float+0x72>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80096a6:	f1ba 0f01 	cmp.w	sl, #1
 80096aa:	f200 8117 	bhi.w	80098dc <_scanf_float+0x2ac>
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	429e      	cmp	r6, r3
 80096b2:	f200 8108 	bhi.w	80098c6 <_scanf_float+0x296>
 80096b6:	2001      	movs	r0, #1
 80096b8:	b007      	add	sp, #28
 80096ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096be:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80096c2:	2a0d      	cmp	r2, #13
 80096c4:	d8e6      	bhi.n	8009694 <_scanf_float+0x64>
 80096c6:	a101      	add	r1, pc, #4	@ (adr r1, 80096cc <_scanf_float+0x9c>)
 80096c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096cc:	08009813 	.word	0x08009813
 80096d0:	08009695 	.word	0x08009695
 80096d4:	08009695 	.word	0x08009695
 80096d8:	08009695 	.word	0x08009695
 80096dc:	08009873 	.word	0x08009873
 80096e0:	0800984b 	.word	0x0800984b
 80096e4:	08009695 	.word	0x08009695
 80096e8:	08009695 	.word	0x08009695
 80096ec:	08009821 	.word	0x08009821
 80096f0:	08009695 	.word	0x08009695
 80096f4:	08009695 	.word	0x08009695
 80096f8:	08009695 	.word	0x08009695
 80096fc:	08009695 	.word	0x08009695
 8009700:	080097d9 	.word	0x080097d9
 8009704:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009708:	e7db      	b.n	80096c2 <_scanf_float+0x92>
 800970a:	290e      	cmp	r1, #14
 800970c:	d8c2      	bhi.n	8009694 <_scanf_float+0x64>
 800970e:	a001      	add	r0, pc, #4	@ (adr r0, 8009714 <_scanf_float+0xe4>)
 8009710:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009714:	080097c9 	.word	0x080097c9
 8009718:	08009695 	.word	0x08009695
 800971c:	080097c9 	.word	0x080097c9
 8009720:	0800985f 	.word	0x0800985f
 8009724:	08009695 	.word	0x08009695
 8009728:	08009771 	.word	0x08009771
 800972c:	080097af 	.word	0x080097af
 8009730:	080097af 	.word	0x080097af
 8009734:	080097af 	.word	0x080097af
 8009738:	080097af 	.word	0x080097af
 800973c:	080097af 	.word	0x080097af
 8009740:	080097af 	.word	0x080097af
 8009744:	080097af 	.word	0x080097af
 8009748:	080097af 	.word	0x080097af
 800974c:	080097af 	.word	0x080097af
 8009750:	2b6e      	cmp	r3, #110	@ 0x6e
 8009752:	d809      	bhi.n	8009768 <_scanf_float+0x138>
 8009754:	2b60      	cmp	r3, #96	@ 0x60
 8009756:	d8b2      	bhi.n	80096be <_scanf_float+0x8e>
 8009758:	2b54      	cmp	r3, #84	@ 0x54
 800975a:	d07b      	beq.n	8009854 <_scanf_float+0x224>
 800975c:	2b59      	cmp	r3, #89	@ 0x59
 800975e:	d199      	bne.n	8009694 <_scanf_float+0x64>
 8009760:	2d07      	cmp	r5, #7
 8009762:	d197      	bne.n	8009694 <_scanf_float+0x64>
 8009764:	2508      	movs	r5, #8
 8009766:	e02c      	b.n	80097c2 <_scanf_float+0x192>
 8009768:	2b74      	cmp	r3, #116	@ 0x74
 800976a:	d073      	beq.n	8009854 <_scanf_float+0x224>
 800976c:	2b79      	cmp	r3, #121	@ 0x79
 800976e:	e7f6      	b.n	800975e <_scanf_float+0x12e>
 8009770:	6821      	ldr	r1, [r4, #0]
 8009772:	05c8      	lsls	r0, r1, #23
 8009774:	d51b      	bpl.n	80097ae <_scanf_float+0x17e>
 8009776:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800977a:	6021      	str	r1, [r4, #0]
 800977c:	f109 0901 	add.w	r9, r9, #1
 8009780:	f1bb 0f00 	cmp.w	fp, #0
 8009784:	d003      	beq.n	800978e <_scanf_float+0x15e>
 8009786:	3201      	adds	r2, #1
 8009788:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800978c:	60a2      	str	r2, [r4, #8]
 800978e:	68a3      	ldr	r3, [r4, #8]
 8009790:	3b01      	subs	r3, #1
 8009792:	60a3      	str	r3, [r4, #8]
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	3301      	adds	r3, #1
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3b01      	subs	r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	607b      	str	r3, [r7, #4]
 80097a2:	f340 8087 	ble.w	80098b4 <_scanf_float+0x284>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	e765      	b.n	800967a <_scanf_float+0x4a>
 80097ae:	eb1a 0105 	adds.w	r1, sl, r5
 80097b2:	f47f af6f 	bne.w	8009694 <_scanf_float+0x64>
 80097b6:	6822      	ldr	r2, [r4, #0]
 80097b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80097bc:	6022      	str	r2, [r4, #0]
 80097be:	460d      	mov	r5, r1
 80097c0:	468a      	mov	sl, r1
 80097c2:	f806 3b01 	strb.w	r3, [r6], #1
 80097c6:	e7e2      	b.n	800978e <_scanf_float+0x15e>
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	0610      	lsls	r0, r2, #24
 80097cc:	f57f af62 	bpl.w	8009694 <_scanf_float+0x64>
 80097d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	e7f4      	b.n	80097c2 <_scanf_float+0x192>
 80097d8:	f1ba 0f00 	cmp.w	sl, #0
 80097dc:	d10e      	bne.n	80097fc <_scanf_float+0x1cc>
 80097de:	f1b9 0f00 	cmp.w	r9, #0
 80097e2:	d10e      	bne.n	8009802 <_scanf_float+0x1d2>
 80097e4:	6822      	ldr	r2, [r4, #0]
 80097e6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80097ea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80097ee:	d108      	bne.n	8009802 <_scanf_float+0x1d2>
 80097f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	f04f 0a01 	mov.w	sl, #1
 80097fa:	e7e2      	b.n	80097c2 <_scanf_float+0x192>
 80097fc:	f1ba 0f02 	cmp.w	sl, #2
 8009800:	d055      	beq.n	80098ae <_scanf_float+0x27e>
 8009802:	2d01      	cmp	r5, #1
 8009804:	d002      	beq.n	800980c <_scanf_float+0x1dc>
 8009806:	2d04      	cmp	r5, #4
 8009808:	f47f af44 	bne.w	8009694 <_scanf_float+0x64>
 800980c:	3501      	adds	r5, #1
 800980e:	b2ed      	uxtb	r5, r5
 8009810:	e7d7      	b.n	80097c2 <_scanf_float+0x192>
 8009812:	f1ba 0f01 	cmp.w	sl, #1
 8009816:	f47f af3d 	bne.w	8009694 <_scanf_float+0x64>
 800981a:	f04f 0a02 	mov.w	sl, #2
 800981e:	e7d0      	b.n	80097c2 <_scanf_float+0x192>
 8009820:	b97d      	cbnz	r5, 8009842 <_scanf_float+0x212>
 8009822:	f1b9 0f00 	cmp.w	r9, #0
 8009826:	f47f af38 	bne.w	800969a <_scanf_float+0x6a>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009830:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009834:	f040 8108 	bne.w	8009a48 <_scanf_float+0x418>
 8009838:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800983c:	6022      	str	r2, [r4, #0]
 800983e:	2501      	movs	r5, #1
 8009840:	e7bf      	b.n	80097c2 <_scanf_float+0x192>
 8009842:	2d03      	cmp	r5, #3
 8009844:	d0e2      	beq.n	800980c <_scanf_float+0x1dc>
 8009846:	2d05      	cmp	r5, #5
 8009848:	e7de      	b.n	8009808 <_scanf_float+0x1d8>
 800984a:	2d02      	cmp	r5, #2
 800984c:	f47f af22 	bne.w	8009694 <_scanf_float+0x64>
 8009850:	2503      	movs	r5, #3
 8009852:	e7b6      	b.n	80097c2 <_scanf_float+0x192>
 8009854:	2d06      	cmp	r5, #6
 8009856:	f47f af1d 	bne.w	8009694 <_scanf_float+0x64>
 800985a:	2507      	movs	r5, #7
 800985c:	e7b1      	b.n	80097c2 <_scanf_float+0x192>
 800985e:	6822      	ldr	r2, [r4, #0]
 8009860:	0591      	lsls	r1, r2, #22
 8009862:	f57f af17 	bpl.w	8009694 <_scanf_float+0x64>
 8009866:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800986a:	6022      	str	r2, [r4, #0]
 800986c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009870:	e7a7      	b.n	80097c2 <_scanf_float+0x192>
 8009872:	6822      	ldr	r2, [r4, #0]
 8009874:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009878:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800987c:	d006      	beq.n	800988c <_scanf_float+0x25c>
 800987e:	0550      	lsls	r0, r2, #21
 8009880:	f57f af08 	bpl.w	8009694 <_scanf_float+0x64>
 8009884:	f1b9 0f00 	cmp.w	r9, #0
 8009888:	f000 80de 	beq.w	8009a48 <_scanf_float+0x418>
 800988c:	0591      	lsls	r1, r2, #22
 800988e:	bf58      	it	pl
 8009890:	9902      	ldrpl	r1, [sp, #8]
 8009892:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009896:	bf58      	it	pl
 8009898:	eba9 0101 	subpl.w	r1, r9, r1
 800989c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80098a0:	bf58      	it	pl
 80098a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	f04f 0900 	mov.w	r9, #0
 80098ac:	e789      	b.n	80097c2 <_scanf_float+0x192>
 80098ae:	f04f 0a03 	mov.w	sl, #3
 80098b2:	e786      	b.n	80097c2 <_scanf_float+0x192>
 80098b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098b8:	4639      	mov	r1, r7
 80098ba:	4640      	mov	r0, r8
 80098bc:	4798      	blx	r3
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f aedb 	beq.w	800967a <_scanf_float+0x4a>
 80098c4:	e6e6      	b.n	8009694 <_scanf_float+0x64>
 80098c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098ce:	463a      	mov	r2, r7
 80098d0:	4640      	mov	r0, r8
 80098d2:	4798      	blx	r3
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	e6e8      	b.n	80096ae <_scanf_float+0x7e>
 80098dc:	1e6b      	subs	r3, r5, #1
 80098de:	2b06      	cmp	r3, #6
 80098e0:	d824      	bhi.n	800992c <_scanf_float+0x2fc>
 80098e2:	2d02      	cmp	r5, #2
 80098e4:	d836      	bhi.n	8009954 <_scanf_float+0x324>
 80098e6:	9b01      	ldr	r3, [sp, #4]
 80098e8:	429e      	cmp	r6, r3
 80098ea:	f67f aee4 	bls.w	80096b6 <_scanf_float+0x86>
 80098ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098f6:	463a      	mov	r2, r7
 80098f8:	4640      	mov	r0, r8
 80098fa:	4798      	blx	r3
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	3b01      	subs	r3, #1
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	e7f0      	b.n	80098e6 <_scanf_float+0x2b6>
 8009904:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009908:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800990c:	463a      	mov	r2, r7
 800990e:	4640      	mov	r0, r8
 8009910:	4798      	blx	r3
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	3b01      	subs	r3, #1
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800991c:	fa5f fa8a 	uxtb.w	sl, sl
 8009920:	f1ba 0f02 	cmp.w	sl, #2
 8009924:	d1ee      	bne.n	8009904 <_scanf_float+0x2d4>
 8009926:	3d03      	subs	r5, #3
 8009928:	b2ed      	uxtb	r5, r5
 800992a:	1b76      	subs	r6, r6, r5
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	05da      	lsls	r2, r3, #23
 8009930:	d530      	bpl.n	8009994 <_scanf_float+0x364>
 8009932:	055b      	lsls	r3, r3, #21
 8009934:	d511      	bpl.n	800995a <_scanf_float+0x32a>
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	429e      	cmp	r6, r3
 800993a:	f67f aebc 	bls.w	80096b6 <_scanf_float+0x86>
 800993e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009946:	463a      	mov	r2, r7
 8009948:	4640      	mov	r0, r8
 800994a:	4798      	blx	r3
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	3b01      	subs	r3, #1
 8009950:	6123      	str	r3, [r4, #16]
 8009952:	e7f0      	b.n	8009936 <_scanf_float+0x306>
 8009954:	46aa      	mov	sl, r5
 8009956:	46b3      	mov	fp, r6
 8009958:	e7de      	b.n	8009918 <_scanf_float+0x2e8>
 800995a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	2965      	cmp	r1, #101	@ 0x65
 8009962:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009966:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	d00c      	beq.n	8009988 <_scanf_float+0x358>
 800996e:	2945      	cmp	r1, #69	@ 0x45
 8009970:	d00a      	beq.n	8009988 <_scanf_float+0x358>
 8009972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009976:	463a      	mov	r2, r7
 8009978:	4640      	mov	r0, r8
 800997a:	4798      	blx	r3
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009982:	3b01      	subs	r3, #1
 8009984:	1eb5      	subs	r5, r6, #2
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800998c:	463a      	mov	r2, r7
 800998e:	4640      	mov	r0, r8
 8009990:	4798      	blx	r3
 8009992:	462e      	mov	r6, r5
 8009994:	6822      	ldr	r2, [r4, #0]
 8009996:	f012 0210 	ands.w	r2, r2, #16
 800999a:	d001      	beq.n	80099a0 <_scanf_float+0x370>
 800999c:	2000      	movs	r0, #0
 800999e:	e68b      	b.n	80096b8 <_scanf_float+0x88>
 80099a0:	7032      	strb	r2, [r6, #0]
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80099a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099ac:	d11c      	bne.n	80099e8 <_scanf_float+0x3b8>
 80099ae:	9b02      	ldr	r3, [sp, #8]
 80099b0:	454b      	cmp	r3, r9
 80099b2:	eba3 0209 	sub.w	r2, r3, r9
 80099b6:	d123      	bne.n	8009a00 <_scanf_float+0x3d0>
 80099b8:	9901      	ldr	r1, [sp, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	4640      	mov	r0, r8
 80099be:	f002 fcaf 	bl	800c320 <_strtod_r>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f011 0f02 	tst.w	r1, #2
 80099cc:	ec57 6b10 	vmov	r6, r7, d0
 80099d0:	f103 0204 	add.w	r2, r3, #4
 80099d4:	d01f      	beq.n	8009a16 <_scanf_float+0x3e6>
 80099d6:	9903      	ldr	r1, [sp, #12]
 80099d8:	600a      	str	r2, [r1, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	e9c3 6700 	strd	r6, r7, [r3]
 80099e0:	68e3      	ldr	r3, [r4, #12]
 80099e2:	3301      	adds	r3, #1
 80099e4:	60e3      	str	r3, [r4, #12]
 80099e6:	e7d9      	b.n	800999c <_scanf_float+0x36c>
 80099e8:	9b04      	ldr	r3, [sp, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0e4      	beq.n	80099b8 <_scanf_float+0x388>
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	230a      	movs	r3, #10
 80099f2:	3101      	adds	r1, #1
 80099f4:	4640      	mov	r0, r8
 80099f6:	f7ff f9b7 	bl	8008d68 <_strtol_r>
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	9e05      	ldr	r6, [sp, #20]
 80099fe:	1ac2      	subs	r2, r0, r3
 8009a00:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009a04:	429e      	cmp	r6, r3
 8009a06:	bf28      	it	cs
 8009a08:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009a0c:	4910      	ldr	r1, [pc, #64]	@ (8009a50 <_scanf_float+0x420>)
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f000 f8f6 	bl	8009c00 <siprintf>
 8009a14:	e7d0      	b.n	80099b8 <_scanf_float+0x388>
 8009a16:	f011 0f04 	tst.w	r1, #4
 8009a1a:	9903      	ldr	r1, [sp, #12]
 8009a1c:	600a      	str	r2, [r1, #0]
 8009a1e:	d1dc      	bne.n	80099da <_scanf_float+0x3aa>
 8009a20:	681d      	ldr	r5, [r3, #0]
 8009a22:	4632      	mov	r2, r6
 8009a24:	463b      	mov	r3, r7
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f7 f87f 	bl	8000b2c <__aeabi_dcmpun>
 8009a2e:	b128      	cbz	r0, 8009a3c <_scanf_float+0x40c>
 8009a30:	4808      	ldr	r0, [pc, #32]	@ (8009a54 <_scanf_float+0x424>)
 8009a32:	f000 fa51 	bl	8009ed8 <nanf>
 8009a36:	ed85 0a00 	vstr	s0, [r5]
 8009a3a:	e7d1      	b.n	80099e0 <_scanf_float+0x3b0>
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f7 f8d2 	bl	8000be8 <__aeabi_d2f>
 8009a44:	6028      	str	r0, [r5, #0]
 8009a46:	e7cb      	b.n	80099e0 <_scanf_float+0x3b0>
 8009a48:	f04f 0900 	mov.w	r9, #0
 8009a4c:	e629      	b.n	80096a2 <_scanf_float+0x72>
 8009a4e:	bf00      	nop
 8009a50:	0800e047 	.word	0x0800e047
 8009a54:	0800e0f8 	.word	0x0800e0f8

08009a58 <std>:
 8009a58:	2300      	movs	r3, #0
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a66:	6083      	str	r3, [r0, #8]
 8009a68:	8181      	strh	r1, [r0, #12]
 8009a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a6c:	81c2      	strh	r2, [r0, #14]
 8009a6e:	6183      	str	r3, [r0, #24]
 8009a70:	4619      	mov	r1, r3
 8009a72:	2208      	movs	r2, #8
 8009a74:	305c      	adds	r0, #92	@ 0x5c
 8009a76:	f000 f952 	bl	8009d1e <memset>
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <std+0x58>)
 8009a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <std+0x5c>)
 8009a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <std+0x60>)
 8009a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a86:	4b0d      	ldr	r3, [pc, #52]	@ (8009abc <std+0x64>)
 8009a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <std+0x68>)
 8009a8c:	6224      	str	r4, [r4, #32]
 8009a8e:	429c      	cmp	r4, r3
 8009a90:	d006      	beq.n	8009aa0 <std+0x48>
 8009a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a96:	4294      	cmp	r4, r2
 8009a98:	d002      	beq.n	8009aa0 <std+0x48>
 8009a9a:	33d0      	adds	r3, #208	@ 0xd0
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	d105      	bne.n	8009aac <std+0x54>
 8009aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa8:	f000 ba12 	b.w	8009ed0 <__retarget_lock_init_recursive>
 8009aac:	bd10      	pop	{r4, pc}
 8009aae:	bf00      	nop
 8009ab0:	08009c95 	.word	0x08009c95
 8009ab4:	08009cbb 	.word	0x08009cbb
 8009ab8:	08009cf3 	.word	0x08009cf3
 8009abc:	08009d17 	.word	0x08009d17
 8009ac0:	20000eb4 	.word	0x20000eb4

08009ac4 <stdio_exit_handler>:
 8009ac4:	4a02      	ldr	r2, [pc, #8]	@ (8009ad0 <stdio_exit_handler+0xc>)
 8009ac6:	4903      	ldr	r1, [pc, #12]	@ (8009ad4 <stdio_exit_handler+0x10>)
 8009ac8:	4803      	ldr	r0, [pc, #12]	@ (8009ad8 <stdio_exit_handler+0x14>)
 8009aca:	f000 b869 	b.w	8009ba0 <_fwalk_sglue>
 8009ace:	bf00      	nop
 8009ad0:	20000078 	.word	0x20000078
 8009ad4:	0800cf9d 	.word	0x0800cf9d
 8009ad8:	20000088 	.word	0x20000088

08009adc <cleanup_stdio>:
 8009adc:	6841      	ldr	r1, [r0, #4]
 8009ade:	4b0c      	ldr	r3, [pc, #48]	@ (8009b10 <cleanup_stdio+0x34>)
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	b510      	push	{r4, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	d001      	beq.n	8009aec <cleanup_stdio+0x10>
 8009ae8:	f003 fa58 	bl	800cf9c <_fflush_r>
 8009aec:	68a1      	ldr	r1, [r4, #8]
 8009aee:	4b09      	ldr	r3, [pc, #36]	@ (8009b14 <cleanup_stdio+0x38>)
 8009af0:	4299      	cmp	r1, r3
 8009af2:	d002      	beq.n	8009afa <cleanup_stdio+0x1e>
 8009af4:	4620      	mov	r0, r4
 8009af6:	f003 fa51 	bl	800cf9c <_fflush_r>
 8009afa:	68e1      	ldr	r1, [r4, #12]
 8009afc:	4b06      	ldr	r3, [pc, #24]	@ (8009b18 <cleanup_stdio+0x3c>)
 8009afe:	4299      	cmp	r1, r3
 8009b00:	d004      	beq.n	8009b0c <cleanup_stdio+0x30>
 8009b02:	4620      	mov	r0, r4
 8009b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b08:	f003 ba48 	b.w	800cf9c <_fflush_r>
 8009b0c:	bd10      	pop	{r4, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000eb4 	.word	0x20000eb4
 8009b14:	20000f1c 	.word	0x20000f1c
 8009b18:	20000f84 	.word	0x20000f84

08009b1c <global_stdio_init.part.0>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b4c <global_stdio_init.part.0+0x30>)
 8009b20:	4c0b      	ldr	r4, [pc, #44]	@ (8009b50 <global_stdio_init.part.0+0x34>)
 8009b22:	4a0c      	ldr	r2, [pc, #48]	@ (8009b54 <global_stdio_init.part.0+0x38>)
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	4620      	mov	r0, r4
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2104      	movs	r1, #4
 8009b2c:	f7ff ff94 	bl	8009a58 <std>
 8009b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b34:	2201      	movs	r2, #1
 8009b36:	2109      	movs	r1, #9
 8009b38:	f7ff ff8e 	bl	8009a58 <std>
 8009b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b40:	2202      	movs	r2, #2
 8009b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b46:	2112      	movs	r1, #18
 8009b48:	f7ff bf86 	b.w	8009a58 <std>
 8009b4c:	20000fec 	.word	0x20000fec
 8009b50:	20000eb4 	.word	0x20000eb4
 8009b54:	08009ac5 	.word	0x08009ac5

08009b58 <__sfp_lock_acquire>:
 8009b58:	4801      	ldr	r0, [pc, #4]	@ (8009b60 <__sfp_lock_acquire+0x8>)
 8009b5a:	f000 b9ba 	b.w	8009ed2 <__retarget_lock_acquire_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20000ff5 	.word	0x20000ff5

08009b64 <__sfp_lock_release>:
 8009b64:	4801      	ldr	r0, [pc, #4]	@ (8009b6c <__sfp_lock_release+0x8>)
 8009b66:	f000 b9b5 	b.w	8009ed4 <__retarget_lock_release_recursive>
 8009b6a:	bf00      	nop
 8009b6c:	20000ff5 	.word	0x20000ff5

08009b70 <__sinit>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	4604      	mov	r4, r0
 8009b74:	f7ff fff0 	bl	8009b58 <__sfp_lock_acquire>
 8009b78:	6a23      	ldr	r3, [r4, #32]
 8009b7a:	b11b      	cbz	r3, 8009b84 <__sinit+0x14>
 8009b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b80:	f7ff bff0 	b.w	8009b64 <__sfp_lock_release>
 8009b84:	4b04      	ldr	r3, [pc, #16]	@ (8009b98 <__sinit+0x28>)
 8009b86:	6223      	str	r3, [r4, #32]
 8009b88:	4b04      	ldr	r3, [pc, #16]	@ (8009b9c <__sinit+0x2c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1f5      	bne.n	8009b7c <__sinit+0xc>
 8009b90:	f7ff ffc4 	bl	8009b1c <global_stdio_init.part.0>
 8009b94:	e7f2      	b.n	8009b7c <__sinit+0xc>
 8009b96:	bf00      	nop
 8009b98:	08009add 	.word	0x08009add
 8009b9c:	20000fec 	.word	0x20000fec

08009ba0 <_fwalk_sglue>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	4688      	mov	r8, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	2600      	movs	r6, #0
 8009bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8009bb4:	d505      	bpl.n	8009bc2 <_fwalk_sglue+0x22>
 8009bb6:	6824      	ldr	r4, [r4, #0]
 8009bb8:	2c00      	cmp	r4, #0
 8009bba:	d1f7      	bne.n	8009bac <_fwalk_sglue+0xc>
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc2:	89ab      	ldrh	r3, [r5, #12]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d907      	bls.n	8009bd8 <_fwalk_sglue+0x38>
 8009bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	d003      	beq.n	8009bd8 <_fwalk_sglue+0x38>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	47c0      	blx	r8
 8009bd6:	4306      	orrs	r6, r0
 8009bd8:	3568      	adds	r5, #104	@ 0x68
 8009bda:	e7e9      	b.n	8009bb0 <_fwalk_sglue+0x10>

08009bdc <iprintf>:
 8009bdc:	b40f      	push	{r0, r1, r2, r3}
 8009bde:	b507      	push	{r0, r1, r2, lr}
 8009be0:	4906      	ldr	r1, [pc, #24]	@ (8009bfc <iprintf+0x20>)
 8009be2:	ab04      	add	r3, sp, #16
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bea:	6881      	ldr	r1, [r0, #8]
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	f002 feeb 	bl	800c9c8 <_vfiprintf_r>
 8009bf2:	b003      	add	sp, #12
 8009bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf8:	b004      	add	sp, #16
 8009bfa:	4770      	bx	lr
 8009bfc:	20000084 	.word	0x20000084

08009c00 <siprintf>:
 8009c00:	b40e      	push	{r1, r2, r3}
 8009c02:	b500      	push	{lr}
 8009c04:	b09c      	sub	sp, #112	@ 0x70
 8009c06:	ab1d      	add	r3, sp, #116	@ 0x74
 8009c08:	9002      	str	r0, [sp, #8]
 8009c0a:	9006      	str	r0, [sp, #24]
 8009c0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c10:	4809      	ldr	r0, [pc, #36]	@ (8009c38 <siprintf+0x38>)
 8009c12:	9107      	str	r1, [sp, #28]
 8009c14:	9104      	str	r1, [sp, #16]
 8009c16:	4909      	ldr	r1, [pc, #36]	@ (8009c3c <siprintf+0x3c>)
 8009c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c1c:	9105      	str	r1, [sp, #20]
 8009c1e:	6800      	ldr	r0, [r0, #0]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	a902      	add	r1, sp, #8
 8009c24:	f002 fbde 	bl	800c3e4 <_svfiprintf_r>
 8009c28:	9b02      	ldr	r3, [sp, #8]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	b01c      	add	sp, #112	@ 0x70
 8009c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c34:	b003      	add	sp, #12
 8009c36:	4770      	bx	lr
 8009c38:	20000084 	.word	0x20000084
 8009c3c:	ffff0208 	.word	0xffff0208

08009c40 <siscanf>:
 8009c40:	b40e      	push	{r1, r2, r3}
 8009c42:	b530      	push	{r4, r5, lr}
 8009c44:	b09c      	sub	sp, #112	@ 0x70
 8009c46:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009c48:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009c4c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009c50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009c54:	9002      	str	r0, [sp, #8]
 8009c56:	9006      	str	r0, [sp, #24]
 8009c58:	f7f6 fb0a 	bl	8000270 <strlen>
 8009c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c8c <siscanf+0x4c>)
 8009c5e:	9003      	str	r0, [sp, #12]
 8009c60:	9007      	str	r0, [sp, #28]
 8009c62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c64:	480a      	ldr	r0, [pc, #40]	@ (8009c90 <siscanf+0x50>)
 8009c66:	9401      	str	r4, [sp, #4]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8009c6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c72:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c76:	462a      	mov	r2, r5
 8009c78:	4623      	mov	r3, r4
 8009c7a:	a902      	add	r1, sp, #8
 8009c7c:	6800      	ldr	r0, [r0, #0]
 8009c7e:	f002 fd05 	bl	800c68c <__ssvfiscanf_r>
 8009c82:	b01c      	add	sp, #112	@ 0x70
 8009c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c88:	b003      	add	sp, #12
 8009c8a:	4770      	bx	lr
 8009c8c:	08009cb7 	.word	0x08009cb7
 8009c90:	20000084 	.word	0x20000084

08009c94 <__sread>:
 8009c94:	b510      	push	{r4, lr}
 8009c96:	460c      	mov	r4, r1
 8009c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9c:	f000 f8ca 	bl	8009e34 <_read_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	bfab      	itete	ge
 8009ca4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca8:	181b      	addge	r3, r3, r0
 8009caa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cae:	bfac      	ite	ge
 8009cb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cb2:	81a3      	strhlt	r3, [r4, #12]
 8009cb4:	bd10      	pop	{r4, pc}

08009cb6 <__seofread>:
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	4770      	bx	lr

08009cba <__swrite>:
 8009cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	461f      	mov	r7, r3
 8009cc0:	898b      	ldrh	r3, [r1, #12]
 8009cc2:	05db      	lsls	r3, r3, #23
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	4616      	mov	r6, r2
 8009cca:	d505      	bpl.n	8009cd8 <__swrite+0x1e>
 8009ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f000 f89c 	bl	8009e10 <_lseek_r>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	4628      	mov	r0, r5
 8009cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cee:	f000 b8b3 	b.w	8009e58 <_write_r>

08009cf2 <__sseek>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f000 f889 	bl	8009e10 <_lseek_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	bf15      	itete	ne
 8009d04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d0e:	81a3      	strheq	r3, [r4, #12]
 8009d10:	bf18      	it	ne
 8009d12:	81a3      	strhne	r3, [r4, #12]
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <__sclose>:
 8009d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1a:	f000 b869 	b.w	8009df0 <_close_r>

08009d1e <memset>:
 8009d1e:	4402      	add	r2, r0
 8009d20:	4603      	mov	r3, r0
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d100      	bne.n	8009d28 <memset+0xa>
 8009d26:	4770      	bx	lr
 8009d28:	f803 1b01 	strb.w	r1, [r3], #1
 8009d2c:	e7f9      	b.n	8009d22 <memset+0x4>
	...

08009d30 <strtok>:
 8009d30:	4b16      	ldr	r3, [pc, #88]	@ (8009d8c <strtok+0x5c>)
 8009d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d36:	681f      	ldr	r7, [r3, #0]
 8009d38:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	460e      	mov	r6, r1
 8009d3e:	b9ec      	cbnz	r4, 8009d7c <strtok+0x4c>
 8009d40:	2050      	movs	r0, #80	@ 0x50
 8009d42:	f000 ff83 	bl	800ac4c <malloc>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6478      	str	r0, [r7, #68]	@ 0x44
 8009d4a:	b920      	cbnz	r0, 8009d56 <strtok+0x26>
 8009d4c:	4b10      	ldr	r3, [pc, #64]	@ (8009d90 <strtok+0x60>)
 8009d4e:	4811      	ldr	r0, [pc, #68]	@ (8009d94 <strtok+0x64>)
 8009d50:	215b      	movs	r1, #91	@ 0x5b
 8009d52:	f000 f8c7 	bl	8009ee4 <__assert_func>
 8009d56:	e9c0 4400 	strd	r4, r4, [r0]
 8009d5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009d5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009d62:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009d66:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009d6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009d6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009d72:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009d76:	6184      	str	r4, [r0, #24]
 8009d78:	7704      	strb	r4, [r0, #28]
 8009d7a:	6244      	str	r4, [r0, #36]	@ 0x24
 8009d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	2301      	movs	r3, #1
 8009d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d88:	f000 b806 	b.w	8009d98 <__strtok_r>
 8009d8c:	20000084 	.word	0x20000084
 8009d90:	0800e04c 	.word	0x0800e04c
 8009d94:	0800e063 	.word	0x0800e063

08009d98 <__strtok_r>:
 8009d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	b908      	cbnz	r0, 8009da2 <__strtok_r+0xa>
 8009d9e:	6814      	ldr	r4, [r2, #0]
 8009da0:	b144      	cbz	r4, 8009db4 <__strtok_r+0x1c>
 8009da2:	4620      	mov	r0, r4
 8009da4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009da8:	460f      	mov	r7, r1
 8009daa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009dae:	b91e      	cbnz	r6, 8009db8 <__strtok_r+0x20>
 8009db0:	b965      	cbnz	r5, 8009dcc <__strtok_r+0x34>
 8009db2:	6015      	str	r5, [r2, #0]
 8009db4:	2000      	movs	r0, #0
 8009db6:	e005      	b.n	8009dc4 <__strtok_r+0x2c>
 8009db8:	42b5      	cmp	r5, r6
 8009dba:	d1f6      	bne.n	8009daa <__strtok_r+0x12>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1f0      	bne.n	8009da2 <__strtok_r+0xa>
 8009dc0:	6014      	str	r4, [r2, #0]
 8009dc2:	7003      	strb	r3, [r0, #0]
 8009dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc6:	461c      	mov	r4, r3
 8009dc8:	e00c      	b.n	8009de4 <__strtok_r+0x4c>
 8009dca:	b915      	cbnz	r5, 8009dd2 <__strtok_r+0x3a>
 8009dcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009dd0:	460e      	mov	r6, r1
 8009dd2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009dd6:	42ab      	cmp	r3, r5
 8009dd8:	d1f7      	bne.n	8009dca <__strtok_r+0x32>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d0f3      	beq.n	8009dc6 <__strtok_r+0x2e>
 8009dde:	2300      	movs	r3, #0
 8009de0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009de4:	6014      	str	r4, [r2, #0]
 8009de6:	e7ed      	b.n	8009dc4 <__strtok_r+0x2c>

08009de8 <_localeconv_r>:
 8009de8:	4800      	ldr	r0, [pc, #0]	@ (8009dec <_localeconv_r+0x4>)
 8009dea:	4770      	bx	lr
 8009dec:	200001c4 	.word	0x200001c4

08009df0 <_close_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d06      	ldr	r5, [pc, #24]	@ (8009e0c <_close_r+0x1c>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7fa fb56 	bl	80044ac <_close>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_close_r+0x1a>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_close_r+0x1a>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20000ff0 	.word	0x20000ff0

08009e10 <_lseek_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d07      	ldr	r5, [pc, #28]	@ (8009e30 <_lseek_r+0x20>)
 8009e14:	4604      	mov	r4, r0
 8009e16:	4608      	mov	r0, r1
 8009e18:	4611      	mov	r1, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	602a      	str	r2, [r5, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f7fa fb6b 	bl	80044fa <_lseek>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_lseek_r+0x1e>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_lseek_r+0x1e>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20000ff0 	.word	0x20000ff0

08009e34 <_read_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	@ (8009e54 <_read_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7fa faf9 	bl	800443a <_read>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_read_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_read_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	20000ff0 	.word	0x20000ff0

08009e58 <_write_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	@ (8009e78 <_write_r+0x20>)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f7fa fb04 	bl	8004474 <_write>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_write_r+0x1e>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_write_r+0x1e>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	20000ff0 	.word	0x20000ff0

08009e7c <__errno>:
 8009e7c:	4b01      	ldr	r3, [pc, #4]	@ (8009e84 <__errno+0x8>)
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000084 	.word	0x20000084

08009e88 <__libc_init_array>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8009ec0 <__libc_init_array+0x38>)
 8009e8c:	4c0d      	ldr	r4, [pc, #52]	@ (8009ec4 <__libc_init_array+0x3c>)
 8009e8e:	1b64      	subs	r4, r4, r5
 8009e90:	10a4      	asrs	r4, r4, #2
 8009e92:	2600      	movs	r6, #0
 8009e94:	42a6      	cmp	r6, r4
 8009e96:	d109      	bne.n	8009eac <__libc_init_array+0x24>
 8009e98:	4d0b      	ldr	r5, [pc, #44]	@ (8009ec8 <__libc_init_array+0x40>)
 8009e9a:	4c0c      	ldr	r4, [pc, #48]	@ (8009ecc <__libc_init_array+0x44>)
 8009e9c:	f003 fef6 	bl	800dc8c <_init>
 8009ea0:	1b64      	subs	r4, r4, r5
 8009ea2:	10a4      	asrs	r4, r4, #2
 8009ea4:	2600      	movs	r6, #0
 8009ea6:	42a6      	cmp	r6, r4
 8009ea8:	d105      	bne.n	8009eb6 <__libc_init_array+0x2e>
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb0:	4798      	blx	r3
 8009eb2:	3601      	adds	r6, #1
 8009eb4:	e7ee      	b.n	8009e94 <__libc_init_array+0xc>
 8009eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eba:	4798      	blx	r3
 8009ebc:	3601      	adds	r6, #1
 8009ebe:	e7f2      	b.n	8009ea6 <__libc_init_array+0x1e>
 8009ec0:	0800e3bc 	.word	0x0800e3bc
 8009ec4:	0800e3bc 	.word	0x0800e3bc
 8009ec8:	0800e3bc 	.word	0x0800e3bc
 8009ecc:	0800e3c0 	.word	0x0800e3c0

08009ed0 <__retarget_lock_init_recursive>:
 8009ed0:	4770      	bx	lr

08009ed2 <__retarget_lock_acquire_recursive>:
 8009ed2:	4770      	bx	lr

08009ed4 <__retarget_lock_release_recursive>:
 8009ed4:	4770      	bx	lr
	...

08009ed8 <nanf>:
 8009ed8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ee0 <nanf+0x8>
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	7fc00000 	.word	0x7fc00000

08009ee4 <__assert_func>:
 8009ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4b09      	ldr	r3, [pc, #36]	@ (8009f10 <__assert_func+0x2c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4605      	mov	r5, r0
 8009ef0:	68d8      	ldr	r0, [r3, #12]
 8009ef2:	b954      	cbnz	r4, 8009f0a <__assert_func+0x26>
 8009ef4:	4b07      	ldr	r3, [pc, #28]	@ (8009f14 <__assert_func+0x30>)
 8009ef6:	461c      	mov	r4, r3
 8009ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009efc:	9100      	str	r1, [sp, #0]
 8009efe:	462b      	mov	r3, r5
 8009f00:	4905      	ldr	r1, [pc, #20]	@ (8009f18 <__assert_func+0x34>)
 8009f02:	f003 f873 	bl	800cfec <fiprintf>
 8009f06:	f003 f9df 	bl	800d2c8 <abort>
 8009f0a:	4b04      	ldr	r3, [pc, #16]	@ (8009f1c <__assert_func+0x38>)
 8009f0c:	e7f4      	b.n	8009ef8 <__assert_func+0x14>
 8009f0e:	bf00      	nop
 8009f10:	20000084 	.word	0x20000084
 8009f14:	0800e0f8 	.word	0x0800e0f8
 8009f18:	0800e0ca 	.word	0x0800e0ca
 8009f1c:	0800e0bd 	.word	0x0800e0bd

08009f20 <quorem>:
 8009f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	6903      	ldr	r3, [r0, #16]
 8009f26:	690c      	ldr	r4, [r1, #16]
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	db7e      	blt.n	800a02c <quorem+0x10c>
 8009f2e:	3c01      	subs	r4, #1
 8009f30:	f101 0814 	add.w	r8, r1, #20
 8009f34:	00a3      	lsls	r3, r4, #2
 8009f36:	f100 0514 	add.w	r5, r0, #20
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f52:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f56:	d32e      	bcc.n	8009fb6 <quorem+0x96>
 8009f58:	f04f 0a00 	mov.w	sl, #0
 8009f5c:	46c4      	mov	ip, r8
 8009f5e:	46ae      	mov	lr, r5
 8009f60:	46d3      	mov	fp, sl
 8009f62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f66:	b298      	uxth	r0, r3
 8009f68:	fb06 a000 	mla	r0, r6, r0, sl
 8009f6c:	0c02      	lsrs	r2, r0, #16
 8009f6e:	0c1b      	lsrs	r3, r3, #16
 8009f70:	fb06 2303 	mla	r3, r6, r3, r2
 8009f74:	f8de 2000 	ldr.w	r2, [lr]
 8009f78:	b280      	uxth	r0, r0
 8009f7a:	b292      	uxth	r2, r2
 8009f7c:	1a12      	subs	r2, r2, r0
 8009f7e:	445a      	add	r2, fp
 8009f80:	f8de 0000 	ldr.w	r0, [lr]
 8009f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f92:	b292      	uxth	r2, r2
 8009f94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f98:	45e1      	cmp	r9, ip
 8009f9a:	f84e 2b04 	str.w	r2, [lr], #4
 8009f9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009fa2:	d2de      	bcs.n	8009f62 <quorem+0x42>
 8009fa4:	9b00      	ldr	r3, [sp, #0]
 8009fa6:	58eb      	ldr	r3, [r5, r3]
 8009fa8:	b92b      	cbnz	r3, 8009fb6 <quorem+0x96>
 8009faa:	9b01      	ldr	r3, [sp, #4]
 8009fac:	3b04      	subs	r3, #4
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	d32f      	bcc.n	800a014 <quorem+0xf4>
 8009fb4:	613c      	str	r4, [r7, #16]
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f001 f9c2 	bl	800b340 <__mcmp>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	db25      	blt.n	800a00c <quorem+0xec>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fc8:	f8d1 c000 	ldr.w	ip, [r1]
 8009fcc:	fa1f fe82 	uxth.w	lr, r2
 8009fd0:	fa1f f38c 	uxth.w	r3, ip
 8009fd4:	eba3 030e 	sub.w	r3, r3, lr
 8009fd8:	4403      	add	r3, r0
 8009fda:	0c12      	lsrs	r2, r2, #16
 8009fdc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009fe0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fea:	45c1      	cmp	r9, r8
 8009fec:	f841 3b04 	str.w	r3, [r1], #4
 8009ff0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ff4:	d2e6      	bcs.n	8009fc4 <quorem+0xa4>
 8009ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ffe:	b922      	cbnz	r2, 800a00a <quorem+0xea>
 800a000:	3b04      	subs	r3, #4
 800a002:	429d      	cmp	r5, r3
 800a004:	461a      	mov	r2, r3
 800a006:	d30b      	bcc.n	800a020 <quorem+0x100>
 800a008:	613c      	str	r4, [r7, #16]
 800a00a:	3601      	adds	r6, #1
 800a00c:	4630      	mov	r0, r6
 800a00e:	b003      	add	sp, #12
 800a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	6812      	ldr	r2, [r2, #0]
 800a016:	3b04      	subs	r3, #4
 800a018:	2a00      	cmp	r2, #0
 800a01a:	d1cb      	bne.n	8009fb4 <quorem+0x94>
 800a01c:	3c01      	subs	r4, #1
 800a01e:	e7c6      	b.n	8009fae <quorem+0x8e>
 800a020:	6812      	ldr	r2, [r2, #0]
 800a022:	3b04      	subs	r3, #4
 800a024:	2a00      	cmp	r2, #0
 800a026:	d1ef      	bne.n	800a008 <quorem+0xe8>
 800a028:	3c01      	subs	r4, #1
 800a02a:	e7ea      	b.n	800a002 <quorem+0xe2>
 800a02c:	2000      	movs	r0, #0
 800a02e:	e7ee      	b.n	800a00e <quorem+0xee>

0800a030 <_dtoa_r>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	69c7      	ldr	r7, [r0, #28]
 800a036:	b099      	sub	sp, #100	@ 0x64
 800a038:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a03c:	ec55 4b10 	vmov	r4, r5, d0
 800a040:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a042:	9109      	str	r1, [sp, #36]	@ 0x24
 800a044:	4683      	mov	fp, r0
 800a046:	920e      	str	r2, [sp, #56]	@ 0x38
 800a048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a04a:	b97f      	cbnz	r7, 800a06c <_dtoa_r+0x3c>
 800a04c:	2010      	movs	r0, #16
 800a04e:	f000 fdfd 	bl	800ac4c <malloc>
 800a052:	4602      	mov	r2, r0
 800a054:	f8cb 001c 	str.w	r0, [fp, #28]
 800a058:	b920      	cbnz	r0, 800a064 <_dtoa_r+0x34>
 800a05a:	4ba7      	ldr	r3, [pc, #668]	@ (800a2f8 <_dtoa_r+0x2c8>)
 800a05c:	21ef      	movs	r1, #239	@ 0xef
 800a05e:	48a7      	ldr	r0, [pc, #668]	@ (800a2fc <_dtoa_r+0x2cc>)
 800a060:	f7ff ff40 	bl	8009ee4 <__assert_func>
 800a064:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a068:	6007      	str	r7, [r0, #0]
 800a06a:	60c7      	str	r7, [r0, #12]
 800a06c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a070:	6819      	ldr	r1, [r3, #0]
 800a072:	b159      	cbz	r1, 800a08c <_dtoa_r+0x5c>
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	604a      	str	r2, [r1, #4]
 800a078:	2301      	movs	r3, #1
 800a07a:	4093      	lsls	r3, r2
 800a07c:	608b      	str	r3, [r1, #8]
 800a07e:	4658      	mov	r0, fp
 800a080:	f000 feda 	bl	800ae38 <_Bfree>
 800a084:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	1e2b      	subs	r3, r5, #0
 800a08e:	bfb9      	ittee	lt
 800a090:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a094:	9303      	strlt	r3, [sp, #12]
 800a096:	2300      	movge	r3, #0
 800a098:	6033      	strge	r3, [r6, #0]
 800a09a:	9f03      	ldr	r7, [sp, #12]
 800a09c:	4b98      	ldr	r3, [pc, #608]	@ (800a300 <_dtoa_r+0x2d0>)
 800a09e:	bfbc      	itt	lt
 800a0a0:	2201      	movlt	r2, #1
 800a0a2:	6032      	strlt	r2, [r6, #0]
 800a0a4:	43bb      	bics	r3, r7
 800a0a6:	d112      	bne.n	800a0ce <_dtoa_r+0x9e>
 800a0a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0b4:	4323      	orrs	r3, r4
 800a0b6:	f000 854d 	beq.w	800ab54 <_dtoa_r+0xb24>
 800a0ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a314 <_dtoa_r+0x2e4>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 854f 	beq.w	800ab64 <_dtoa_r+0xb34>
 800a0c6:	f10a 0303 	add.w	r3, sl, #3
 800a0ca:	f000 bd49 	b.w	800ab60 <_dtoa_r+0xb30>
 800a0ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	ec51 0b17 	vmov	r0, r1, d7
 800a0d8:	2300      	movs	r3, #0
 800a0da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a0de:	f7f6 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0e2:	4680      	mov	r8, r0
 800a0e4:	b158      	cbz	r0, 800a0fe <_dtoa_r+0xce>
 800a0e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0ee:	b113      	cbz	r3, 800a0f6 <_dtoa_r+0xc6>
 800a0f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a0f2:	4b84      	ldr	r3, [pc, #528]	@ (800a304 <_dtoa_r+0x2d4>)
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a318 <_dtoa_r+0x2e8>
 800a0fa:	f000 bd33 	b.w	800ab64 <_dtoa_r+0xb34>
 800a0fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a102:	aa16      	add	r2, sp, #88	@ 0x58
 800a104:	a917      	add	r1, sp, #92	@ 0x5c
 800a106:	4658      	mov	r0, fp
 800a108:	f001 fa3a 	bl	800b580 <__d2b>
 800a10c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a110:	4681      	mov	r9, r0
 800a112:	2e00      	cmp	r6, #0
 800a114:	d077      	beq.n	800a206 <_dtoa_r+0x1d6>
 800a116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a118:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a11c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a124:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a128:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a12c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a130:	4619      	mov	r1, r3
 800a132:	2200      	movs	r2, #0
 800a134:	4b74      	ldr	r3, [pc, #464]	@ (800a308 <_dtoa_r+0x2d8>)
 800a136:	f7f6 f8a7 	bl	8000288 <__aeabi_dsub>
 800a13a:	a369      	add	r3, pc, #420	@ (adr r3, 800a2e0 <_dtoa_r+0x2b0>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f7f6 fa5a 	bl	80005f8 <__aeabi_dmul>
 800a144:	a368      	add	r3, pc, #416	@ (adr r3, 800a2e8 <_dtoa_r+0x2b8>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	f7f6 f89f 	bl	800028c <__adddf3>
 800a14e:	4604      	mov	r4, r0
 800a150:	4630      	mov	r0, r6
 800a152:	460d      	mov	r5, r1
 800a154:	f7f6 f9e6 	bl	8000524 <__aeabi_i2d>
 800a158:	a365      	add	r3, pc, #404	@ (adr r3, 800a2f0 <_dtoa_r+0x2c0>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f7f6 fa4b 	bl	80005f8 <__aeabi_dmul>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4620      	mov	r0, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	f7f6 f88f 	bl	800028c <__adddf3>
 800a16e:	4604      	mov	r4, r0
 800a170:	460d      	mov	r5, r1
 800a172:	f7f6 fcf1 	bl	8000b58 <__aeabi_d2iz>
 800a176:	2200      	movs	r2, #0
 800a178:	4607      	mov	r7, r0
 800a17a:	2300      	movs	r3, #0
 800a17c:	4620      	mov	r0, r4
 800a17e:	4629      	mov	r1, r5
 800a180:	f7f6 fcac 	bl	8000adc <__aeabi_dcmplt>
 800a184:	b140      	cbz	r0, 800a198 <_dtoa_r+0x168>
 800a186:	4638      	mov	r0, r7
 800a188:	f7f6 f9cc 	bl	8000524 <__aeabi_i2d>
 800a18c:	4622      	mov	r2, r4
 800a18e:	462b      	mov	r3, r5
 800a190:	f7f6 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a194:	b900      	cbnz	r0, 800a198 <_dtoa_r+0x168>
 800a196:	3f01      	subs	r7, #1
 800a198:	2f16      	cmp	r7, #22
 800a19a:	d851      	bhi.n	800a240 <_dtoa_r+0x210>
 800a19c:	4b5b      	ldr	r3, [pc, #364]	@ (800a30c <_dtoa_r+0x2dc>)
 800a19e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1aa:	f7f6 fc97 	bl	8000adc <__aeabi_dcmplt>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d048      	beq.n	800a244 <_dtoa_r+0x214>
 800a1b2:	3f01      	subs	r7, #1
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a1ba:	1b9b      	subs	r3, r3, r6
 800a1bc:	1e5a      	subs	r2, r3, #1
 800a1be:	bf44      	itt	mi
 800a1c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a1c4:	2300      	movmi	r3, #0
 800a1c6:	9208      	str	r2, [sp, #32]
 800a1c8:	bf54      	ite	pl
 800a1ca:	f04f 0800 	movpl.w	r8, #0
 800a1ce:	9308      	strmi	r3, [sp, #32]
 800a1d0:	2f00      	cmp	r7, #0
 800a1d2:	db39      	blt.n	800a248 <_dtoa_r+0x218>
 800a1d4:	9b08      	ldr	r3, [sp, #32]
 800a1d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a1d8:	443b      	add	r3, r7
 800a1da:	9308      	str	r3, [sp, #32]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e2:	2b09      	cmp	r3, #9
 800a1e4:	d864      	bhi.n	800a2b0 <_dtoa_r+0x280>
 800a1e6:	2b05      	cmp	r3, #5
 800a1e8:	bfc4      	itt	gt
 800a1ea:	3b04      	subgt	r3, #4
 800a1ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f0:	f1a3 0302 	sub.w	r3, r3, #2
 800a1f4:	bfcc      	ite	gt
 800a1f6:	2400      	movgt	r4, #0
 800a1f8:	2401      	movle	r4, #1
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d863      	bhi.n	800a2c6 <_dtoa_r+0x296>
 800a1fe:	e8df f003 	tbb	[pc, r3]
 800a202:	372a      	.short	0x372a
 800a204:	5535      	.short	0x5535
 800a206:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a20a:	441e      	add	r6, r3
 800a20c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a210:	2b20      	cmp	r3, #32
 800a212:	bfc1      	itttt	gt
 800a214:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a218:	409f      	lslgt	r7, r3
 800a21a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a21e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a222:	bfd6      	itet	le
 800a224:	f1c3 0320 	rsble	r3, r3, #32
 800a228:	ea47 0003 	orrgt.w	r0, r7, r3
 800a22c:	fa04 f003 	lslle.w	r0, r4, r3
 800a230:	f7f6 f968 	bl	8000504 <__aeabi_ui2d>
 800a234:	2201      	movs	r2, #1
 800a236:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a23a:	3e01      	subs	r6, #1
 800a23c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a23e:	e777      	b.n	800a130 <_dtoa_r+0x100>
 800a240:	2301      	movs	r3, #1
 800a242:	e7b8      	b.n	800a1b6 <_dtoa_r+0x186>
 800a244:	9012      	str	r0, [sp, #72]	@ 0x48
 800a246:	e7b7      	b.n	800a1b8 <_dtoa_r+0x188>
 800a248:	427b      	negs	r3, r7
 800a24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a24c:	2300      	movs	r3, #0
 800a24e:	eba8 0807 	sub.w	r8, r8, r7
 800a252:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a254:	e7c4      	b.n	800a1e0 <_dtoa_r+0x1b0>
 800a256:	2300      	movs	r3, #0
 800a258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a25a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dc35      	bgt.n	800a2cc <_dtoa_r+0x29c>
 800a260:	2301      	movs	r3, #1
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	9307      	str	r3, [sp, #28]
 800a266:	461a      	mov	r2, r3
 800a268:	920e      	str	r2, [sp, #56]	@ 0x38
 800a26a:	e00b      	b.n	800a284 <_dtoa_r+0x254>
 800a26c:	2301      	movs	r3, #1
 800a26e:	e7f3      	b.n	800a258 <_dtoa_r+0x228>
 800a270:	2300      	movs	r3, #0
 800a272:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a276:	18fb      	adds	r3, r7, r3
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	9307      	str	r3, [sp, #28]
 800a280:	bfb8      	it	lt
 800a282:	2301      	movlt	r3, #1
 800a284:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a288:	2100      	movs	r1, #0
 800a28a:	2204      	movs	r2, #4
 800a28c:	f102 0514 	add.w	r5, r2, #20
 800a290:	429d      	cmp	r5, r3
 800a292:	d91f      	bls.n	800a2d4 <_dtoa_r+0x2a4>
 800a294:	6041      	str	r1, [r0, #4]
 800a296:	4658      	mov	r0, fp
 800a298:	f000 fd8e 	bl	800adb8 <_Balloc>
 800a29c:	4682      	mov	sl, r0
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d13c      	bne.n	800a31c <_dtoa_r+0x2ec>
 800a2a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a310 <_dtoa_r+0x2e0>)
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a2aa:	e6d8      	b.n	800a05e <_dtoa_r+0x2e>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e7e0      	b.n	800a272 <_dtoa_r+0x242>
 800a2b0:	2401      	movs	r4, #1
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a2b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2312      	movs	r3, #18
 800a2c4:	e7d0      	b.n	800a268 <_dtoa_r+0x238>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2ca:	e7f5      	b.n	800a2b8 <_dtoa_r+0x288>
 800a2cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	9307      	str	r3, [sp, #28]
 800a2d2:	e7d7      	b.n	800a284 <_dtoa_r+0x254>
 800a2d4:	3101      	adds	r1, #1
 800a2d6:	0052      	lsls	r2, r2, #1
 800a2d8:	e7d8      	b.n	800a28c <_dtoa_r+0x25c>
 800a2da:	bf00      	nop
 800a2dc:	f3af 8000 	nop.w
 800a2e0:	636f4361 	.word	0x636f4361
 800a2e4:	3fd287a7 	.word	0x3fd287a7
 800a2e8:	8b60c8b3 	.word	0x8b60c8b3
 800a2ec:	3fc68a28 	.word	0x3fc68a28
 800a2f0:	509f79fb 	.word	0x509f79fb
 800a2f4:	3fd34413 	.word	0x3fd34413
 800a2f8:	0800e04c 	.word	0x0800e04c
 800a2fc:	0800e106 	.word	0x0800e106
 800a300:	7ff00000 	.word	0x7ff00000
 800a304:	0800e348 	.word	0x0800e348
 800a308:	3ff80000 	.word	0x3ff80000
 800a30c:	0800e200 	.word	0x0800e200
 800a310:	0800e15e 	.word	0x0800e15e
 800a314:	0800e102 	.word	0x0800e102
 800a318:	0800e347 	.word	0x0800e347
 800a31c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a320:	6018      	str	r0, [r3, #0]
 800a322:	9b07      	ldr	r3, [sp, #28]
 800a324:	2b0e      	cmp	r3, #14
 800a326:	f200 80a4 	bhi.w	800a472 <_dtoa_r+0x442>
 800a32a:	2c00      	cmp	r4, #0
 800a32c:	f000 80a1 	beq.w	800a472 <_dtoa_r+0x442>
 800a330:	2f00      	cmp	r7, #0
 800a332:	dd33      	ble.n	800a39c <_dtoa_r+0x36c>
 800a334:	4bad      	ldr	r3, [pc, #692]	@ (800a5ec <_dtoa_r+0x5bc>)
 800a336:	f007 020f 	and.w	r2, r7, #15
 800a33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a33e:	ed93 7b00 	vldr	d7, [r3]
 800a342:	05f8      	lsls	r0, r7, #23
 800a344:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a348:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a34c:	d516      	bpl.n	800a37c <_dtoa_r+0x34c>
 800a34e:	4ba8      	ldr	r3, [pc, #672]	@ (800a5f0 <_dtoa_r+0x5c0>)
 800a350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a358:	f7f6 fa78 	bl	800084c <__aeabi_ddiv>
 800a35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a360:	f004 040f 	and.w	r4, r4, #15
 800a364:	2603      	movs	r6, #3
 800a366:	4da2      	ldr	r5, [pc, #648]	@ (800a5f0 <_dtoa_r+0x5c0>)
 800a368:	b954      	cbnz	r4, 800a380 <_dtoa_r+0x350>
 800a36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a372:	f7f6 fa6b 	bl	800084c <__aeabi_ddiv>
 800a376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a37a:	e028      	b.n	800a3ce <_dtoa_r+0x39e>
 800a37c:	2602      	movs	r6, #2
 800a37e:	e7f2      	b.n	800a366 <_dtoa_r+0x336>
 800a380:	07e1      	lsls	r1, r4, #31
 800a382:	d508      	bpl.n	800a396 <_dtoa_r+0x366>
 800a384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a394:	3601      	adds	r6, #1
 800a396:	1064      	asrs	r4, r4, #1
 800a398:	3508      	adds	r5, #8
 800a39a:	e7e5      	b.n	800a368 <_dtoa_r+0x338>
 800a39c:	f000 80d2 	beq.w	800a544 <_dtoa_r+0x514>
 800a3a0:	427c      	negs	r4, r7
 800a3a2:	4b92      	ldr	r3, [pc, #584]	@ (800a5ec <_dtoa_r+0x5bc>)
 800a3a4:	4d92      	ldr	r5, [pc, #584]	@ (800a5f0 <_dtoa_r+0x5c0>)
 800a3a6:	f004 020f 	and.w	r2, r4, #15
 800a3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3b6:	f7f6 f91f 	bl	80005f8 <__aeabi_dmul>
 800a3ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3be:	1124      	asrs	r4, r4, #4
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2602      	movs	r6, #2
 800a3c4:	2c00      	cmp	r4, #0
 800a3c6:	f040 80b2 	bne.w	800a52e <_dtoa_r+0x4fe>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1d3      	bne.n	800a376 <_dtoa_r+0x346>
 800a3ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 80b7 	beq.w	800a548 <_dtoa_r+0x518>
 800a3da:	4b86      	ldr	r3, [pc, #536]	@ (800a5f4 <_dtoa_r+0x5c4>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	f7f6 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f000 80ae 	beq.w	800a548 <_dtoa_r+0x518>
 800a3ec:	9b07      	ldr	r3, [sp, #28]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 80aa 	beq.w	800a548 <_dtoa_r+0x518>
 800a3f4:	9b00      	ldr	r3, [sp, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dd37      	ble.n	800a46a <_dtoa_r+0x43a>
 800a3fa:	1e7b      	subs	r3, r7, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	4620      	mov	r0, r4
 800a400:	4b7d      	ldr	r3, [pc, #500]	@ (800a5f8 <_dtoa_r+0x5c8>)
 800a402:	2200      	movs	r2, #0
 800a404:	4629      	mov	r1, r5
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a40e:	9c00      	ldr	r4, [sp, #0]
 800a410:	3601      	adds	r6, #1
 800a412:	4630      	mov	r0, r6
 800a414:	f7f6 f886 	bl	8000524 <__aeabi_i2d>
 800a418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a41c:	f7f6 f8ec 	bl	80005f8 <__aeabi_dmul>
 800a420:	4b76      	ldr	r3, [pc, #472]	@ (800a5fc <_dtoa_r+0x5cc>)
 800a422:	2200      	movs	r2, #0
 800a424:	f7f5 ff32 	bl	800028c <__adddf3>
 800a428:	4605      	mov	r5, r0
 800a42a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a42e:	2c00      	cmp	r4, #0
 800a430:	f040 808d 	bne.w	800a54e <_dtoa_r+0x51e>
 800a434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a438:	4b71      	ldr	r3, [pc, #452]	@ (800a600 <_dtoa_r+0x5d0>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	f7f5 ff24 	bl	8000288 <__aeabi_dsub>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a448:	462a      	mov	r2, r5
 800a44a:	4633      	mov	r3, r6
 800a44c:	f7f6 fb64 	bl	8000b18 <__aeabi_dcmpgt>
 800a450:	2800      	cmp	r0, #0
 800a452:	f040 828b 	bne.w	800a96c <_dtoa_r+0x93c>
 800a456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45a:	462a      	mov	r2, r5
 800a45c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a460:	f7f6 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800a464:	2800      	cmp	r0, #0
 800a466:	f040 8128 	bne.w	800a6ba <_dtoa_r+0x68a>
 800a46a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a46e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a474:	2b00      	cmp	r3, #0
 800a476:	f2c0 815a 	blt.w	800a72e <_dtoa_r+0x6fe>
 800a47a:	2f0e      	cmp	r7, #14
 800a47c:	f300 8157 	bgt.w	800a72e <_dtoa_r+0x6fe>
 800a480:	4b5a      	ldr	r3, [pc, #360]	@ (800a5ec <_dtoa_r+0x5bc>)
 800a482:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a486:	ed93 7b00 	vldr	d7, [r3]
 800a48a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	ed8d 7b00 	vstr	d7, [sp]
 800a492:	da03      	bge.n	800a49c <_dtoa_r+0x46c>
 800a494:	9b07      	ldr	r3, [sp, #28]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f340 8101 	ble.w	800a69e <_dtoa_r+0x66e>
 800a49c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4a0:	4656      	mov	r6, sl
 800a4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f6 f9cf 	bl	800084c <__aeabi_ddiv>
 800a4ae:	f7f6 fb53 	bl	8000b58 <__aeabi_d2iz>
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	f7f6 f836 	bl	8000524 <__aeabi_i2d>
 800a4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4bc:	f7f6 f89c 	bl	80005f8 <__aeabi_dmul>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a4cc:	f7f5 fedc 	bl	8000288 <__aeabi_dsub>
 800a4d0:	f806 4b01 	strb.w	r4, [r6], #1
 800a4d4:	9d07      	ldr	r5, [sp, #28]
 800a4d6:	eba6 040a 	sub.w	r4, r6, sl
 800a4da:	42a5      	cmp	r5, r4
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	f040 8117 	bne.w	800a712 <_dtoa_r+0x6e2>
 800a4e4:	f7f5 fed2 	bl	800028c <__adddf3>
 800a4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	460d      	mov	r5, r1
 800a4f0:	f7f6 fb12 	bl	8000b18 <__aeabi_dcmpgt>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	f040 80f9 	bne.w	800a6ec <_dtoa_r+0x6bc>
 800a4fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	f7f6 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a506:	b118      	cbz	r0, 800a510 <_dtoa_r+0x4e0>
 800a508:	f018 0f01 	tst.w	r8, #1
 800a50c:	f040 80ee 	bne.w	800a6ec <_dtoa_r+0x6bc>
 800a510:	4649      	mov	r1, r9
 800a512:	4658      	mov	r0, fp
 800a514:	f000 fc90 	bl	800ae38 <_Bfree>
 800a518:	2300      	movs	r3, #0
 800a51a:	7033      	strb	r3, [r6, #0]
 800a51c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a51e:	3701      	adds	r7, #1
 800a520:	601f      	str	r7, [r3, #0]
 800a522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 831d 	beq.w	800ab64 <_dtoa_r+0xb34>
 800a52a:	601e      	str	r6, [r3, #0]
 800a52c:	e31a      	b.n	800ab64 <_dtoa_r+0xb34>
 800a52e:	07e2      	lsls	r2, r4, #31
 800a530:	d505      	bpl.n	800a53e <_dtoa_r+0x50e>
 800a532:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a536:	f7f6 f85f 	bl	80005f8 <__aeabi_dmul>
 800a53a:	3601      	adds	r6, #1
 800a53c:	2301      	movs	r3, #1
 800a53e:	1064      	asrs	r4, r4, #1
 800a540:	3508      	adds	r5, #8
 800a542:	e73f      	b.n	800a3c4 <_dtoa_r+0x394>
 800a544:	2602      	movs	r6, #2
 800a546:	e742      	b.n	800a3ce <_dtoa_r+0x39e>
 800a548:	9c07      	ldr	r4, [sp, #28]
 800a54a:	9704      	str	r7, [sp, #16]
 800a54c:	e761      	b.n	800a412 <_dtoa_r+0x3e2>
 800a54e:	4b27      	ldr	r3, [pc, #156]	@ (800a5ec <_dtoa_r+0x5bc>)
 800a550:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a556:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a55a:	4454      	add	r4, sl
 800a55c:	2900      	cmp	r1, #0
 800a55e:	d053      	beq.n	800a608 <_dtoa_r+0x5d8>
 800a560:	4928      	ldr	r1, [pc, #160]	@ (800a604 <_dtoa_r+0x5d4>)
 800a562:	2000      	movs	r0, #0
 800a564:	f7f6 f972 	bl	800084c <__aeabi_ddiv>
 800a568:	4633      	mov	r3, r6
 800a56a:	462a      	mov	r2, r5
 800a56c:	f7f5 fe8c 	bl	8000288 <__aeabi_dsub>
 800a570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a574:	4656      	mov	r6, sl
 800a576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a57a:	f7f6 faed 	bl	8000b58 <__aeabi_d2iz>
 800a57e:	4605      	mov	r5, r0
 800a580:	f7f5 ffd0 	bl	8000524 <__aeabi_i2d>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58c:	f7f5 fe7c 	bl	8000288 <__aeabi_dsub>
 800a590:	3530      	adds	r5, #48	@ 0x30
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a59a:	f806 5b01 	strb.w	r5, [r6], #1
 800a59e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5a2:	f7f6 fa9b 	bl	8000adc <__aeabi_dcmplt>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d171      	bne.n	800a68e <_dtoa_r+0x65e>
 800a5aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ae:	4911      	ldr	r1, [pc, #68]	@ (800a5f4 <_dtoa_r+0x5c4>)
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	f7f5 fe69 	bl	8000288 <__aeabi_dsub>
 800a5b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5ba:	f7f6 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f040 8095 	bne.w	800a6ee <_dtoa_r+0x6be>
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	f43f af50 	beq.w	800a46a <_dtoa_r+0x43a>
 800a5ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f8 <_dtoa_r+0x5c8>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f7f6 f811 	bl	80005f8 <__aeabi_dmul>
 800a5d6:	4b08      	ldr	r3, [pc, #32]	@ (800a5f8 <_dtoa_r+0x5c8>)
 800a5d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5dc:	2200      	movs	r2, #0
 800a5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e2:	f7f6 f809 	bl	80005f8 <__aeabi_dmul>
 800a5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ea:	e7c4      	b.n	800a576 <_dtoa_r+0x546>
 800a5ec:	0800e200 	.word	0x0800e200
 800a5f0:	0800e1d8 	.word	0x0800e1d8
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	40240000 	.word	0x40240000
 800a5fc:	401c0000 	.word	0x401c0000
 800a600:	40140000 	.word	0x40140000
 800a604:	3fe00000 	.word	0x3fe00000
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a614:	9415      	str	r4, [sp, #84]	@ 0x54
 800a616:	4656      	mov	r6, sl
 800a618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a61c:	f7f6 fa9c 	bl	8000b58 <__aeabi_d2iz>
 800a620:	4605      	mov	r5, r0
 800a622:	f7f5 ff7f 	bl	8000524 <__aeabi_i2d>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a62e:	f7f5 fe2b 	bl	8000288 <__aeabi_dsub>
 800a632:	3530      	adds	r5, #48	@ 0x30
 800a634:	f806 5b01 	strb.w	r5, [r6], #1
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	42a6      	cmp	r6, r4
 800a63e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	d124      	bne.n	800a692 <_dtoa_r+0x662>
 800a648:	4bac      	ldr	r3, [pc, #688]	@ (800a8fc <_dtoa_r+0x8cc>)
 800a64a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a64e:	f7f5 fe1d 	bl	800028c <__adddf3>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a65a:	f7f6 fa5d 	bl	8000b18 <__aeabi_dcmpgt>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d145      	bne.n	800a6ee <_dtoa_r+0x6be>
 800a662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a666:	49a5      	ldr	r1, [pc, #660]	@ (800a8fc <_dtoa_r+0x8cc>)
 800a668:	2000      	movs	r0, #0
 800a66a:	f7f5 fe0d 	bl	8000288 <__aeabi_dsub>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a676:	f7f6 fa31 	bl	8000adc <__aeabi_dcmplt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	f43f aef5 	beq.w	800a46a <_dtoa_r+0x43a>
 800a680:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a682:	1e73      	subs	r3, r6, #1
 800a684:	9315      	str	r3, [sp, #84]	@ 0x54
 800a686:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a68a:	2b30      	cmp	r3, #48	@ 0x30
 800a68c:	d0f8      	beq.n	800a680 <_dtoa_r+0x650>
 800a68e:	9f04      	ldr	r7, [sp, #16]
 800a690:	e73e      	b.n	800a510 <_dtoa_r+0x4e0>
 800a692:	4b9b      	ldr	r3, [pc, #620]	@ (800a900 <_dtoa_r+0x8d0>)
 800a694:	f7f5 ffb0 	bl	80005f8 <__aeabi_dmul>
 800a698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a69c:	e7bc      	b.n	800a618 <_dtoa_r+0x5e8>
 800a69e:	d10c      	bne.n	800a6ba <_dtoa_r+0x68a>
 800a6a0:	4b98      	ldr	r3, [pc, #608]	@ (800a904 <_dtoa_r+0x8d4>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6a8:	f7f5 ffa6 	bl	80005f8 <__aeabi_dmul>
 800a6ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6b0:	f7f6 fa28 	bl	8000b04 <__aeabi_dcmpge>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	f000 8157 	beq.w	800a968 <_dtoa_r+0x938>
 800a6ba:	2400      	movs	r4, #0
 800a6bc:	4625      	mov	r5, r4
 800a6be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	9304      	str	r3, [sp, #16]
 800a6c4:	4656      	mov	r6, sl
 800a6c6:	2700      	movs	r7, #0
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4658      	mov	r0, fp
 800a6cc:	f000 fbb4 	bl	800ae38 <_Bfree>
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	d0dc      	beq.n	800a68e <_dtoa_r+0x65e>
 800a6d4:	b12f      	cbz	r7, 800a6e2 <_dtoa_r+0x6b2>
 800a6d6:	42af      	cmp	r7, r5
 800a6d8:	d003      	beq.n	800a6e2 <_dtoa_r+0x6b2>
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4658      	mov	r0, fp
 800a6de:	f000 fbab 	bl	800ae38 <_Bfree>
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4658      	mov	r0, fp
 800a6e6:	f000 fba7 	bl	800ae38 <_Bfree>
 800a6ea:	e7d0      	b.n	800a68e <_dtoa_r+0x65e>
 800a6ec:	9704      	str	r7, [sp, #16]
 800a6ee:	4633      	mov	r3, r6
 800a6f0:	461e      	mov	r6, r3
 800a6f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6f6:	2a39      	cmp	r2, #57	@ 0x39
 800a6f8:	d107      	bne.n	800a70a <_dtoa_r+0x6da>
 800a6fa:	459a      	cmp	sl, r3
 800a6fc:	d1f8      	bne.n	800a6f0 <_dtoa_r+0x6c0>
 800a6fe:	9a04      	ldr	r2, [sp, #16]
 800a700:	3201      	adds	r2, #1
 800a702:	9204      	str	r2, [sp, #16]
 800a704:	2230      	movs	r2, #48	@ 0x30
 800a706:	f88a 2000 	strb.w	r2, [sl]
 800a70a:	781a      	ldrb	r2, [r3, #0]
 800a70c:	3201      	adds	r2, #1
 800a70e:	701a      	strb	r2, [r3, #0]
 800a710:	e7bd      	b.n	800a68e <_dtoa_r+0x65e>
 800a712:	4b7b      	ldr	r3, [pc, #492]	@ (800a900 <_dtoa_r+0x8d0>)
 800a714:	2200      	movs	r2, #0
 800a716:	f7f5 ff6f 	bl	80005f8 <__aeabi_dmul>
 800a71a:	2200      	movs	r2, #0
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	460d      	mov	r5, r1
 800a722:	f7f6 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a726:	2800      	cmp	r0, #0
 800a728:	f43f aebb 	beq.w	800a4a2 <_dtoa_r+0x472>
 800a72c:	e6f0      	b.n	800a510 <_dtoa_r+0x4e0>
 800a72e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a730:	2a00      	cmp	r2, #0
 800a732:	f000 80db 	beq.w	800a8ec <_dtoa_r+0x8bc>
 800a736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a738:	2a01      	cmp	r2, #1
 800a73a:	f300 80bf 	bgt.w	800a8bc <_dtoa_r+0x88c>
 800a73e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a740:	2a00      	cmp	r2, #0
 800a742:	f000 80b7 	beq.w	800a8b4 <_dtoa_r+0x884>
 800a746:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a74a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a74c:	4646      	mov	r6, r8
 800a74e:	9a08      	ldr	r2, [sp, #32]
 800a750:	2101      	movs	r1, #1
 800a752:	441a      	add	r2, r3
 800a754:	4658      	mov	r0, fp
 800a756:	4498      	add	r8, r3
 800a758:	9208      	str	r2, [sp, #32]
 800a75a:	f000 fc6b 	bl	800b034 <__i2b>
 800a75e:	4605      	mov	r5, r0
 800a760:	b15e      	cbz	r6, 800a77a <_dtoa_r+0x74a>
 800a762:	9b08      	ldr	r3, [sp, #32]
 800a764:	2b00      	cmp	r3, #0
 800a766:	dd08      	ble.n	800a77a <_dtoa_r+0x74a>
 800a768:	42b3      	cmp	r3, r6
 800a76a:	9a08      	ldr	r2, [sp, #32]
 800a76c:	bfa8      	it	ge
 800a76e:	4633      	movge	r3, r6
 800a770:	eba8 0803 	sub.w	r8, r8, r3
 800a774:	1af6      	subs	r6, r6, r3
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	9308      	str	r3, [sp, #32]
 800a77a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a77c:	b1f3      	cbz	r3, 800a7bc <_dtoa_r+0x78c>
 800a77e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 80b7 	beq.w	800a8f4 <_dtoa_r+0x8c4>
 800a786:	b18c      	cbz	r4, 800a7ac <_dtoa_r+0x77c>
 800a788:	4629      	mov	r1, r5
 800a78a:	4622      	mov	r2, r4
 800a78c:	4658      	mov	r0, fp
 800a78e:	f000 fd11 	bl	800b1b4 <__pow5mult>
 800a792:	464a      	mov	r2, r9
 800a794:	4601      	mov	r1, r0
 800a796:	4605      	mov	r5, r0
 800a798:	4658      	mov	r0, fp
 800a79a:	f000 fc61 	bl	800b060 <__multiply>
 800a79e:	4649      	mov	r1, r9
 800a7a0:	9004      	str	r0, [sp, #16]
 800a7a2:	4658      	mov	r0, fp
 800a7a4:	f000 fb48 	bl	800ae38 <_Bfree>
 800a7a8:	9b04      	ldr	r3, [sp, #16]
 800a7aa:	4699      	mov	r9, r3
 800a7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ae:	1b1a      	subs	r2, r3, r4
 800a7b0:	d004      	beq.n	800a7bc <_dtoa_r+0x78c>
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	4658      	mov	r0, fp
 800a7b6:	f000 fcfd 	bl	800b1b4 <__pow5mult>
 800a7ba:	4681      	mov	r9, r0
 800a7bc:	2101      	movs	r1, #1
 800a7be:	4658      	mov	r0, fp
 800a7c0:	f000 fc38 	bl	800b034 <__i2b>
 800a7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 81cf 	beq.w	800ab6c <_dtoa_r+0xb3c>
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	4658      	mov	r0, fp
 800a7d4:	f000 fcee 	bl	800b1b4 <__pow5mult>
 800a7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	4604      	mov	r4, r0
 800a7de:	f300 8095 	bgt.w	800a90c <_dtoa_r+0x8dc>
 800a7e2:	9b02      	ldr	r3, [sp, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f040 8087 	bne.w	800a8f8 <_dtoa_r+0x8c8>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 8089 	bne.w	800a908 <_dtoa_r+0x8d8>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7fc:	0d1b      	lsrs	r3, r3, #20
 800a7fe:	051b      	lsls	r3, r3, #20
 800a800:	b12b      	cbz	r3, 800a80e <_dtoa_r+0x7de>
 800a802:	9b08      	ldr	r3, [sp, #32]
 800a804:	3301      	adds	r3, #1
 800a806:	9308      	str	r3, [sp, #32]
 800a808:	f108 0801 	add.w	r8, r8, #1
 800a80c:	2301      	movs	r3, #1
 800a80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 81b0 	beq.w	800ab78 <_dtoa_r+0xb48>
 800a818:	6923      	ldr	r3, [r4, #16]
 800a81a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a81e:	6918      	ldr	r0, [r3, #16]
 800a820:	f000 fbbc 	bl	800af9c <__hi0bits>
 800a824:	f1c0 0020 	rsb	r0, r0, #32
 800a828:	9b08      	ldr	r3, [sp, #32]
 800a82a:	4418      	add	r0, r3
 800a82c:	f010 001f 	ands.w	r0, r0, #31
 800a830:	d077      	beq.n	800a922 <_dtoa_r+0x8f2>
 800a832:	f1c0 0320 	rsb	r3, r0, #32
 800a836:	2b04      	cmp	r3, #4
 800a838:	dd6b      	ble.n	800a912 <_dtoa_r+0x8e2>
 800a83a:	9b08      	ldr	r3, [sp, #32]
 800a83c:	f1c0 001c 	rsb	r0, r0, #28
 800a840:	4403      	add	r3, r0
 800a842:	4480      	add	r8, r0
 800a844:	4406      	add	r6, r0
 800a846:	9308      	str	r3, [sp, #32]
 800a848:	f1b8 0f00 	cmp.w	r8, #0
 800a84c:	dd05      	ble.n	800a85a <_dtoa_r+0x82a>
 800a84e:	4649      	mov	r1, r9
 800a850:	4642      	mov	r2, r8
 800a852:	4658      	mov	r0, fp
 800a854:	f000 fd08 	bl	800b268 <__lshift>
 800a858:	4681      	mov	r9, r0
 800a85a:	9b08      	ldr	r3, [sp, #32]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	dd05      	ble.n	800a86c <_dtoa_r+0x83c>
 800a860:	4621      	mov	r1, r4
 800a862:	461a      	mov	r2, r3
 800a864:	4658      	mov	r0, fp
 800a866:	f000 fcff 	bl	800b268 <__lshift>
 800a86a:	4604      	mov	r4, r0
 800a86c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d059      	beq.n	800a926 <_dtoa_r+0x8f6>
 800a872:	4621      	mov	r1, r4
 800a874:	4648      	mov	r0, r9
 800a876:	f000 fd63 	bl	800b340 <__mcmp>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	da53      	bge.n	800a926 <_dtoa_r+0x8f6>
 800a87e:	1e7b      	subs	r3, r7, #1
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	4649      	mov	r1, r9
 800a884:	2300      	movs	r3, #0
 800a886:	220a      	movs	r2, #10
 800a888:	4658      	mov	r0, fp
 800a88a:	f000 faf7 	bl	800ae7c <__multadd>
 800a88e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a890:	4681      	mov	r9, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 8172 	beq.w	800ab7c <_dtoa_r+0xb4c>
 800a898:	2300      	movs	r3, #0
 800a89a:	4629      	mov	r1, r5
 800a89c:	220a      	movs	r2, #10
 800a89e:	4658      	mov	r0, fp
 800a8a0:	f000 faec 	bl	800ae7c <__multadd>
 800a8a4:	9b00      	ldr	r3, [sp, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	dc67      	bgt.n	800a97c <_dtoa_r+0x94c>
 800a8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	dc41      	bgt.n	800a936 <_dtoa_r+0x906>
 800a8b2:	e063      	b.n	800a97c <_dtoa_r+0x94c>
 800a8b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a8b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a8ba:	e746      	b.n	800a74a <_dtoa_r+0x71a>
 800a8bc:	9b07      	ldr	r3, [sp, #28]
 800a8be:	1e5c      	subs	r4, r3, #1
 800a8c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	bfbf      	itttt	lt
 800a8c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a8c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a8ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a8cc:	1ae3      	sublt	r3, r4, r3
 800a8ce:	bfb4      	ite	lt
 800a8d0:	18d2      	addlt	r2, r2, r3
 800a8d2:	1b1c      	subge	r4, r3, r4
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	bfbc      	itt	lt
 800a8d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a8da:	2400      	movlt	r4, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	bfb5      	itete	lt
 800a8e0:	eba8 0603 	sublt.w	r6, r8, r3
 800a8e4:	9b07      	ldrge	r3, [sp, #28]
 800a8e6:	2300      	movlt	r3, #0
 800a8e8:	4646      	movge	r6, r8
 800a8ea:	e730      	b.n	800a74e <_dtoa_r+0x71e>
 800a8ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a8f0:	4646      	mov	r6, r8
 800a8f2:	e735      	b.n	800a760 <_dtoa_r+0x730>
 800a8f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8f6:	e75c      	b.n	800a7b2 <_dtoa_r+0x782>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e788      	b.n	800a80e <_dtoa_r+0x7de>
 800a8fc:	3fe00000 	.word	0x3fe00000
 800a900:	40240000 	.word	0x40240000
 800a904:	40140000 	.word	0x40140000
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	e780      	b.n	800a80e <_dtoa_r+0x7de>
 800a90c:	2300      	movs	r3, #0
 800a90e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a910:	e782      	b.n	800a818 <_dtoa_r+0x7e8>
 800a912:	d099      	beq.n	800a848 <_dtoa_r+0x818>
 800a914:	9a08      	ldr	r2, [sp, #32]
 800a916:	331c      	adds	r3, #28
 800a918:	441a      	add	r2, r3
 800a91a:	4498      	add	r8, r3
 800a91c:	441e      	add	r6, r3
 800a91e:	9208      	str	r2, [sp, #32]
 800a920:	e792      	b.n	800a848 <_dtoa_r+0x818>
 800a922:	4603      	mov	r3, r0
 800a924:	e7f6      	b.n	800a914 <_dtoa_r+0x8e4>
 800a926:	9b07      	ldr	r3, [sp, #28]
 800a928:	9704      	str	r7, [sp, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	dc20      	bgt.n	800a970 <_dtoa_r+0x940>
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a932:	2b02      	cmp	r3, #2
 800a934:	dd1e      	ble.n	800a974 <_dtoa_r+0x944>
 800a936:	9b00      	ldr	r3, [sp, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f47f aec0 	bne.w	800a6be <_dtoa_r+0x68e>
 800a93e:	4621      	mov	r1, r4
 800a940:	2205      	movs	r2, #5
 800a942:	4658      	mov	r0, fp
 800a944:	f000 fa9a 	bl	800ae7c <__multadd>
 800a948:	4601      	mov	r1, r0
 800a94a:	4604      	mov	r4, r0
 800a94c:	4648      	mov	r0, r9
 800a94e:	f000 fcf7 	bl	800b340 <__mcmp>
 800a952:	2800      	cmp	r0, #0
 800a954:	f77f aeb3 	ble.w	800a6be <_dtoa_r+0x68e>
 800a958:	4656      	mov	r6, sl
 800a95a:	2331      	movs	r3, #49	@ 0x31
 800a95c:	f806 3b01 	strb.w	r3, [r6], #1
 800a960:	9b04      	ldr	r3, [sp, #16]
 800a962:	3301      	adds	r3, #1
 800a964:	9304      	str	r3, [sp, #16]
 800a966:	e6ae      	b.n	800a6c6 <_dtoa_r+0x696>
 800a968:	9c07      	ldr	r4, [sp, #28]
 800a96a:	9704      	str	r7, [sp, #16]
 800a96c:	4625      	mov	r5, r4
 800a96e:	e7f3      	b.n	800a958 <_dtoa_r+0x928>
 800a970:	9b07      	ldr	r3, [sp, #28]
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 8104 	beq.w	800ab84 <_dtoa_r+0xb54>
 800a97c:	2e00      	cmp	r6, #0
 800a97e:	dd05      	ble.n	800a98c <_dtoa_r+0x95c>
 800a980:	4629      	mov	r1, r5
 800a982:	4632      	mov	r2, r6
 800a984:	4658      	mov	r0, fp
 800a986:	f000 fc6f 	bl	800b268 <__lshift>
 800a98a:	4605      	mov	r5, r0
 800a98c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d05a      	beq.n	800aa48 <_dtoa_r+0xa18>
 800a992:	6869      	ldr	r1, [r5, #4]
 800a994:	4658      	mov	r0, fp
 800a996:	f000 fa0f 	bl	800adb8 <_Balloc>
 800a99a:	4606      	mov	r6, r0
 800a99c:	b928      	cbnz	r0, 800a9aa <_dtoa_r+0x97a>
 800a99e:	4b84      	ldr	r3, [pc, #528]	@ (800abb0 <_dtoa_r+0xb80>)
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a9a6:	f7ff bb5a 	b.w	800a05e <_dtoa_r+0x2e>
 800a9aa:	692a      	ldr	r2, [r5, #16]
 800a9ac:	3202      	adds	r2, #2
 800a9ae:	0092      	lsls	r2, r2, #2
 800a9b0:	f105 010c 	add.w	r1, r5, #12
 800a9b4:	300c      	adds	r0, #12
 800a9b6:	f002 fc6f 	bl	800d298 <memcpy>
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4658      	mov	r0, fp
 800a9c0:	f000 fc52 	bl	800b268 <__lshift>
 800a9c4:	f10a 0301 	add.w	r3, sl, #1
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	9b00      	ldr	r3, [sp, #0]
 800a9cc:	4453      	add	r3, sl
 800a9ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	462f      	mov	r7, r5
 800a9d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9da:	4605      	mov	r5, r0
 800a9dc:	9b07      	ldr	r3, [sp, #28]
 800a9de:	4621      	mov	r1, r4
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	4648      	mov	r0, r9
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	f7ff fa9b 	bl	8009f20 <quorem>
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	9002      	str	r0, [sp, #8]
 800a9ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9f2:	4648      	mov	r0, r9
 800a9f4:	f000 fca4 	bl	800b340 <__mcmp>
 800a9f8:	462a      	mov	r2, r5
 800a9fa:	9008      	str	r0, [sp, #32]
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4658      	mov	r0, fp
 800aa00:	f000 fcba 	bl	800b378 <__mdiff>
 800aa04:	68c2      	ldr	r2, [r0, #12]
 800aa06:	4606      	mov	r6, r0
 800aa08:	bb02      	cbnz	r2, 800aa4c <_dtoa_r+0xa1c>
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	4648      	mov	r0, r9
 800aa0e:	f000 fc97 	bl	800b340 <__mcmp>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4631      	mov	r1, r6
 800aa16:	4658      	mov	r0, fp
 800aa18:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa1a:	f000 fa0d 	bl	800ae38 <_Bfree>
 800aa1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa22:	9e07      	ldr	r6, [sp, #28]
 800aa24:	ea43 0102 	orr.w	r1, r3, r2
 800aa28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa2a:	4319      	orrs	r1, r3
 800aa2c:	d110      	bne.n	800aa50 <_dtoa_r+0xa20>
 800aa2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa32:	d029      	beq.n	800aa88 <_dtoa_r+0xa58>
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dd02      	ble.n	800aa40 <_dtoa_r+0xa10>
 800aa3a:	9b02      	ldr	r3, [sp, #8]
 800aa3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aa40:	9b00      	ldr	r3, [sp, #0]
 800aa42:	f883 8000 	strb.w	r8, [r3]
 800aa46:	e63f      	b.n	800a6c8 <_dtoa_r+0x698>
 800aa48:	4628      	mov	r0, r5
 800aa4a:	e7bb      	b.n	800a9c4 <_dtoa_r+0x994>
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	e7e1      	b.n	800aa14 <_dtoa_r+0x9e4>
 800aa50:	9b08      	ldr	r3, [sp, #32]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	db04      	blt.n	800aa60 <_dtoa_r+0xa30>
 800aa56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa5c:	430b      	orrs	r3, r1
 800aa5e:	d120      	bne.n	800aaa2 <_dtoa_r+0xa72>
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	dded      	ble.n	800aa40 <_dtoa_r+0xa10>
 800aa64:	4649      	mov	r1, r9
 800aa66:	2201      	movs	r2, #1
 800aa68:	4658      	mov	r0, fp
 800aa6a:	f000 fbfd 	bl	800b268 <__lshift>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4681      	mov	r9, r0
 800aa72:	f000 fc65 	bl	800b340 <__mcmp>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	dc03      	bgt.n	800aa82 <_dtoa_r+0xa52>
 800aa7a:	d1e1      	bne.n	800aa40 <_dtoa_r+0xa10>
 800aa7c:	f018 0f01 	tst.w	r8, #1
 800aa80:	d0de      	beq.n	800aa40 <_dtoa_r+0xa10>
 800aa82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa86:	d1d8      	bne.n	800aa3a <_dtoa_r+0xa0a>
 800aa88:	9a00      	ldr	r2, [sp, #0]
 800aa8a:	2339      	movs	r3, #57	@ 0x39
 800aa8c:	7013      	strb	r3, [r2, #0]
 800aa8e:	4633      	mov	r3, r6
 800aa90:	461e      	mov	r6, r3
 800aa92:	3b01      	subs	r3, #1
 800aa94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa98:	2a39      	cmp	r2, #57	@ 0x39
 800aa9a:	d052      	beq.n	800ab42 <_dtoa_r+0xb12>
 800aa9c:	3201      	adds	r2, #1
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	e612      	b.n	800a6c8 <_dtoa_r+0x698>
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	dd07      	ble.n	800aab6 <_dtoa_r+0xa86>
 800aaa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aaaa:	d0ed      	beq.n	800aa88 <_dtoa_r+0xa58>
 800aaac:	9a00      	ldr	r2, [sp, #0]
 800aaae:	f108 0301 	add.w	r3, r8, #1
 800aab2:	7013      	strb	r3, [r2, #0]
 800aab4:	e608      	b.n	800a6c8 <_dtoa_r+0x698>
 800aab6:	9b07      	ldr	r3, [sp, #28]
 800aab8:	9a07      	ldr	r2, [sp, #28]
 800aaba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aabe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d028      	beq.n	800ab16 <_dtoa_r+0xae6>
 800aac4:	4649      	mov	r1, r9
 800aac6:	2300      	movs	r3, #0
 800aac8:	220a      	movs	r2, #10
 800aaca:	4658      	mov	r0, fp
 800aacc:	f000 f9d6 	bl	800ae7c <__multadd>
 800aad0:	42af      	cmp	r7, r5
 800aad2:	4681      	mov	r9, r0
 800aad4:	f04f 0300 	mov.w	r3, #0
 800aad8:	f04f 020a 	mov.w	r2, #10
 800aadc:	4639      	mov	r1, r7
 800aade:	4658      	mov	r0, fp
 800aae0:	d107      	bne.n	800aaf2 <_dtoa_r+0xac2>
 800aae2:	f000 f9cb 	bl	800ae7c <__multadd>
 800aae6:	4607      	mov	r7, r0
 800aae8:	4605      	mov	r5, r0
 800aaea:	9b07      	ldr	r3, [sp, #28]
 800aaec:	3301      	adds	r3, #1
 800aaee:	9307      	str	r3, [sp, #28]
 800aaf0:	e774      	b.n	800a9dc <_dtoa_r+0x9ac>
 800aaf2:	f000 f9c3 	bl	800ae7c <__multadd>
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4607      	mov	r7, r0
 800aafa:	2300      	movs	r3, #0
 800aafc:	220a      	movs	r2, #10
 800aafe:	4658      	mov	r0, fp
 800ab00:	f000 f9bc 	bl	800ae7c <__multadd>
 800ab04:	4605      	mov	r5, r0
 800ab06:	e7f0      	b.n	800aaea <_dtoa_r+0xaba>
 800ab08:	9b00      	ldr	r3, [sp, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bfcc      	ite	gt
 800ab0e:	461e      	movgt	r6, r3
 800ab10:	2601      	movle	r6, #1
 800ab12:	4456      	add	r6, sl
 800ab14:	2700      	movs	r7, #0
 800ab16:	4649      	mov	r1, r9
 800ab18:	2201      	movs	r2, #1
 800ab1a:	4658      	mov	r0, fp
 800ab1c:	f000 fba4 	bl	800b268 <__lshift>
 800ab20:	4621      	mov	r1, r4
 800ab22:	4681      	mov	r9, r0
 800ab24:	f000 fc0c 	bl	800b340 <__mcmp>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	dcb0      	bgt.n	800aa8e <_dtoa_r+0xa5e>
 800ab2c:	d102      	bne.n	800ab34 <_dtoa_r+0xb04>
 800ab2e:	f018 0f01 	tst.w	r8, #1
 800ab32:	d1ac      	bne.n	800aa8e <_dtoa_r+0xa5e>
 800ab34:	4633      	mov	r3, r6
 800ab36:	461e      	mov	r6, r3
 800ab38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab3c:	2a30      	cmp	r2, #48	@ 0x30
 800ab3e:	d0fa      	beq.n	800ab36 <_dtoa_r+0xb06>
 800ab40:	e5c2      	b.n	800a6c8 <_dtoa_r+0x698>
 800ab42:	459a      	cmp	sl, r3
 800ab44:	d1a4      	bne.n	800aa90 <_dtoa_r+0xa60>
 800ab46:	9b04      	ldr	r3, [sp, #16]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	2331      	movs	r3, #49	@ 0x31
 800ab4e:	f88a 3000 	strb.w	r3, [sl]
 800ab52:	e5b9      	b.n	800a6c8 <_dtoa_r+0x698>
 800ab54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800abb4 <_dtoa_r+0xb84>
 800ab5a:	b11b      	cbz	r3, 800ab64 <_dtoa_r+0xb34>
 800ab5c:	f10a 0308 	add.w	r3, sl, #8
 800ab60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	4650      	mov	r0, sl
 800ab66:	b019      	add	sp, #100	@ 0x64
 800ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	f77f ae37 	ble.w	800a7e2 <_dtoa_r+0x7b2>
 800ab74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab78:	2001      	movs	r0, #1
 800ab7a:	e655      	b.n	800a828 <_dtoa_r+0x7f8>
 800ab7c:	9b00      	ldr	r3, [sp, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f77f aed6 	ble.w	800a930 <_dtoa_r+0x900>
 800ab84:	4656      	mov	r6, sl
 800ab86:	4621      	mov	r1, r4
 800ab88:	4648      	mov	r0, r9
 800ab8a:	f7ff f9c9 	bl	8009f20 <quorem>
 800ab8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab92:	f806 8b01 	strb.w	r8, [r6], #1
 800ab96:	9b00      	ldr	r3, [sp, #0]
 800ab98:	eba6 020a 	sub.w	r2, r6, sl
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	ddb3      	ble.n	800ab08 <_dtoa_r+0xad8>
 800aba0:	4649      	mov	r1, r9
 800aba2:	2300      	movs	r3, #0
 800aba4:	220a      	movs	r2, #10
 800aba6:	4658      	mov	r0, fp
 800aba8:	f000 f968 	bl	800ae7c <__multadd>
 800abac:	4681      	mov	r9, r0
 800abae:	e7ea      	b.n	800ab86 <_dtoa_r+0xb56>
 800abb0:	0800e15e 	.word	0x0800e15e
 800abb4:	0800e0f9 	.word	0x0800e0f9

0800abb8 <_free_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4605      	mov	r5, r0
 800abbc:	2900      	cmp	r1, #0
 800abbe:	d041      	beq.n	800ac44 <_free_r+0x8c>
 800abc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc4:	1f0c      	subs	r4, r1, #4
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bfb8      	it	lt
 800abca:	18e4      	addlt	r4, r4, r3
 800abcc:	f000 f8e8 	bl	800ada0 <__malloc_lock>
 800abd0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac48 <_free_r+0x90>)
 800abd2:	6813      	ldr	r3, [r2, #0]
 800abd4:	b933      	cbnz	r3, 800abe4 <_free_r+0x2c>
 800abd6:	6063      	str	r3, [r4, #4]
 800abd8:	6014      	str	r4, [r2, #0]
 800abda:	4628      	mov	r0, r5
 800abdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abe0:	f000 b8e4 	b.w	800adac <__malloc_unlock>
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	d908      	bls.n	800abfa <_free_r+0x42>
 800abe8:	6820      	ldr	r0, [r4, #0]
 800abea:	1821      	adds	r1, r4, r0
 800abec:	428b      	cmp	r3, r1
 800abee:	bf01      	itttt	eq
 800abf0:	6819      	ldreq	r1, [r3, #0]
 800abf2:	685b      	ldreq	r3, [r3, #4]
 800abf4:	1809      	addeq	r1, r1, r0
 800abf6:	6021      	streq	r1, [r4, #0]
 800abf8:	e7ed      	b.n	800abd6 <_free_r+0x1e>
 800abfa:	461a      	mov	r2, r3
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	b10b      	cbz	r3, 800ac04 <_free_r+0x4c>
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d9fa      	bls.n	800abfa <_free_r+0x42>
 800ac04:	6811      	ldr	r1, [r2, #0]
 800ac06:	1850      	adds	r0, r2, r1
 800ac08:	42a0      	cmp	r0, r4
 800ac0a:	d10b      	bne.n	800ac24 <_free_r+0x6c>
 800ac0c:	6820      	ldr	r0, [r4, #0]
 800ac0e:	4401      	add	r1, r0
 800ac10:	1850      	adds	r0, r2, r1
 800ac12:	4283      	cmp	r3, r0
 800ac14:	6011      	str	r1, [r2, #0]
 800ac16:	d1e0      	bne.n	800abda <_free_r+0x22>
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	6053      	str	r3, [r2, #4]
 800ac1e:	4408      	add	r0, r1
 800ac20:	6010      	str	r0, [r2, #0]
 800ac22:	e7da      	b.n	800abda <_free_r+0x22>
 800ac24:	d902      	bls.n	800ac2c <_free_r+0x74>
 800ac26:	230c      	movs	r3, #12
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	e7d6      	b.n	800abda <_free_r+0x22>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	1821      	adds	r1, r4, r0
 800ac30:	428b      	cmp	r3, r1
 800ac32:	bf04      	itt	eq
 800ac34:	6819      	ldreq	r1, [r3, #0]
 800ac36:	685b      	ldreq	r3, [r3, #4]
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	bf04      	itt	eq
 800ac3c:	1809      	addeq	r1, r1, r0
 800ac3e:	6021      	streq	r1, [r4, #0]
 800ac40:	6054      	str	r4, [r2, #4]
 800ac42:	e7ca      	b.n	800abda <_free_r+0x22>
 800ac44:	bd38      	pop	{r3, r4, r5, pc}
 800ac46:	bf00      	nop
 800ac48:	20000ffc 	.word	0x20000ffc

0800ac4c <malloc>:
 800ac4c:	4b02      	ldr	r3, [pc, #8]	@ (800ac58 <malloc+0xc>)
 800ac4e:	4601      	mov	r1, r0
 800ac50:	6818      	ldr	r0, [r3, #0]
 800ac52:	f000 b825 	b.w	800aca0 <_malloc_r>
 800ac56:	bf00      	nop
 800ac58:	20000084 	.word	0x20000084

0800ac5c <sbrk_aligned>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	4e0f      	ldr	r6, [pc, #60]	@ (800ac9c <sbrk_aligned+0x40>)
 800ac60:	460c      	mov	r4, r1
 800ac62:	6831      	ldr	r1, [r6, #0]
 800ac64:	4605      	mov	r5, r0
 800ac66:	b911      	cbnz	r1, 800ac6e <sbrk_aligned+0x12>
 800ac68:	f002 fb06 	bl	800d278 <_sbrk_r>
 800ac6c:	6030      	str	r0, [r6, #0]
 800ac6e:	4621      	mov	r1, r4
 800ac70:	4628      	mov	r0, r5
 800ac72:	f002 fb01 	bl	800d278 <_sbrk_r>
 800ac76:	1c43      	adds	r3, r0, #1
 800ac78:	d103      	bne.n	800ac82 <sbrk_aligned+0x26>
 800ac7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ac7e:	4620      	mov	r0, r4
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
 800ac82:	1cc4      	adds	r4, r0, #3
 800ac84:	f024 0403 	bic.w	r4, r4, #3
 800ac88:	42a0      	cmp	r0, r4
 800ac8a:	d0f8      	beq.n	800ac7e <sbrk_aligned+0x22>
 800ac8c:	1a21      	subs	r1, r4, r0
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f002 faf2 	bl	800d278 <_sbrk_r>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d1f2      	bne.n	800ac7e <sbrk_aligned+0x22>
 800ac98:	e7ef      	b.n	800ac7a <sbrk_aligned+0x1e>
 800ac9a:	bf00      	nop
 800ac9c:	20000ff8 	.word	0x20000ff8

0800aca0 <_malloc_r>:
 800aca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	1ccd      	adds	r5, r1, #3
 800aca6:	f025 0503 	bic.w	r5, r5, #3
 800acaa:	3508      	adds	r5, #8
 800acac:	2d0c      	cmp	r5, #12
 800acae:	bf38      	it	cc
 800acb0:	250c      	movcc	r5, #12
 800acb2:	2d00      	cmp	r5, #0
 800acb4:	4606      	mov	r6, r0
 800acb6:	db01      	blt.n	800acbc <_malloc_r+0x1c>
 800acb8:	42a9      	cmp	r1, r5
 800acba:	d904      	bls.n	800acc6 <_malloc_r+0x26>
 800acbc:	230c      	movs	r3, #12
 800acbe:	6033      	str	r3, [r6, #0]
 800acc0:	2000      	movs	r0, #0
 800acc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad9c <_malloc_r+0xfc>
 800acca:	f000 f869 	bl	800ada0 <__malloc_lock>
 800acce:	f8d8 3000 	ldr.w	r3, [r8]
 800acd2:	461c      	mov	r4, r3
 800acd4:	bb44      	cbnz	r4, 800ad28 <_malloc_r+0x88>
 800acd6:	4629      	mov	r1, r5
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff ffbf 	bl	800ac5c <sbrk_aligned>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	4604      	mov	r4, r0
 800ace2:	d158      	bne.n	800ad96 <_malloc_r+0xf6>
 800ace4:	f8d8 4000 	ldr.w	r4, [r8]
 800ace8:	4627      	mov	r7, r4
 800acea:	2f00      	cmp	r7, #0
 800acec:	d143      	bne.n	800ad76 <_malloc_r+0xd6>
 800acee:	2c00      	cmp	r4, #0
 800acf0:	d04b      	beq.n	800ad8a <_malloc_r+0xea>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	4639      	mov	r1, r7
 800acf6:	4630      	mov	r0, r6
 800acf8:	eb04 0903 	add.w	r9, r4, r3
 800acfc:	f002 fabc 	bl	800d278 <_sbrk_r>
 800ad00:	4581      	cmp	r9, r0
 800ad02:	d142      	bne.n	800ad8a <_malloc_r+0xea>
 800ad04:	6821      	ldr	r1, [r4, #0]
 800ad06:	1a6d      	subs	r5, r5, r1
 800ad08:	4629      	mov	r1, r5
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f7ff ffa6 	bl	800ac5c <sbrk_aligned>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d03a      	beq.n	800ad8a <_malloc_r+0xea>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	442b      	add	r3, r5
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	bb62      	cbnz	r2, 800ad7c <_malloc_r+0xdc>
 800ad22:	f8c8 7000 	str.w	r7, [r8]
 800ad26:	e00f      	b.n	800ad48 <_malloc_r+0xa8>
 800ad28:	6822      	ldr	r2, [r4, #0]
 800ad2a:	1b52      	subs	r2, r2, r5
 800ad2c:	d420      	bmi.n	800ad70 <_malloc_r+0xd0>
 800ad2e:	2a0b      	cmp	r2, #11
 800ad30:	d917      	bls.n	800ad62 <_malloc_r+0xc2>
 800ad32:	1961      	adds	r1, r4, r5
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	6025      	str	r5, [r4, #0]
 800ad38:	bf18      	it	ne
 800ad3a:	6059      	strne	r1, [r3, #4]
 800ad3c:	6863      	ldr	r3, [r4, #4]
 800ad3e:	bf08      	it	eq
 800ad40:	f8c8 1000 	streq.w	r1, [r8]
 800ad44:	5162      	str	r2, [r4, r5]
 800ad46:	604b      	str	r3, [r1, #4]
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f000 f82f 	bl	800adac <__malloc_unlock>
 800ad4e:	f104 000b 	add.w	r0, r4, #11
 800ad52:	1d23      	adds	r3, r4, #4
 800ad54:	f020 0007 	bic.w	r0, r0, #7
 800ad58:	1ac2      	subs	r2, r0, r3
 800ad5a:	bf1c      	itt	ne
 800ad5c:	1a1b      	subne	r3, r3, r0
 800ad5e:	50a3      	strne	r3, [r4, r2]
 800ad60:	e7af      	b.n	800acc2 <_malloc_r+0x22>
 800ad62:	6862      	ldr	r2, [r4, #4]
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	bf0c      	ite	eq
 800ad68:	f8c8 2000 	streq.w	r2, [r8]
 800ad6c:	605a      	strne	r2, [r3, #4]
 800ad6e:	e7eb      	b.n	800ad48 <_malloc_r+0xa8>
 800ad70:	4623      	mov	r3, r4
 800ad72:	6864      	ldr	r4, [r4, #4]
 800ad74:	e7ae      	b.n	800acd4 <_malloc_r+0x34>
 800ad76:	463c      	mov	r4, r7
 800ad78:	687f      	ldr	r7, [r7, #4]
 800ad7a:	e7b6      	b.n	800acea <_malloc_r+0x4a>
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d1fb      	bne.n	800ad7c <_malloc_r+0xdc>
 800ad84:	2300      	movs	r3, #0
 800ad86:	6053      	str	r3, [r2, #4]
 800ad88:	e7de      	b.n	800ad48 <_malloc_r+0xa8>
 800ad8a:	230c      	movs	r3, #12
 800ad8c:	6033      	str	r3, [r6, #0]
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f000 f80c 	bl	800adac <__malloc_unlock>
 800ad94:	e794      	b.n	800acc0 <_malloc_r+0x20>
 800ad96:	6005      	str	r5, [r0, #0]
 800ad98:	e7d6      	b.n	800ad48 <_malloc_r+0xa8>
 800ad9a:	bf00      	nop
 800ad9c:	20000ffc 	.word	0x20000ffc

0800ada0 <__malloc_lock>:
 800ada0:	4801      	ldr	r0, [pc, #4]	@ (800ada8 <__malloc_lock+0x8>)
 800ada2:	f7ff b896 	b.w	8009ed2 <__retarget_lock_acquire_recursive>
 800ada6:	bf00      	nop
 800ada8:	20000ff4 	.word	0x20000ff4

0800adac <__malloc_unlock>:
 800adac:	4801      	ldr	r0, [pc, #4]	@ (800adb4 <__malloc_unlock+0x8>)
 800adae:	f7ff b891 	b.w	8009ed4 <__retarget_lock_release_recursive>
 800adb2:	bf00      	nop
 800adb4:	20000ff4 	.word	0x20000ff4

0800adb8 <_Balloc>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	69c6      	ldr	r6, [r0, #28]
 800adbc:	4604      	mov	r4, r0
 800adbe:	460d      	mov	r5, r1
 800adc0:	b976      	cbnz	r6, 800ade0 <_Balloc+0x28>
 800adc2:	2010      	movs	r0, #16
 800adc4:	f7ff ff42 	bl	800ac4c <malloc>
 800adc8:	4602      	mov	r2, r0
 800adca:	61e0      	str	r0, [r4, #28]
 800adcc:	b920      	cbnz	r0, 800add8 <_Balloc+0x20>
 800adce:	4b18      	ldr	r3, [pc, #96]	@ (800ae30 <_Balloc+0x78>)
 800add0:	4818      	ldr	r0, [pc, #96]	@ (800ae34 <_Balloc+0x7c>)
 800add2:	216b      	movs	r1, #107	@ 0x6b
 800add4:	f7ff f886 	bl	8009ee4 <__assert_func>
 800add8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800addc:	6006      	str	r6, [r0, #0]
 800adde:	60c6      	str	r6, [r0, #12]
 800ade0:	69e6      	ldr	r6, [r4, #28]
 800ade2:	68f3      	ldr	r3, [r6, #12]
 800ade4:	b183      	cbz	r3, 800ae08 <_Balloc+0x50>
 800ade6:	69e3      	ldr	r3, [r4, #28]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adee:	b9b8      	cbnz	r0, 800ae20 <_Balloc+0x68>
 800adf0:	2101      	movs	r1, #1
 800adf2:	fa01 f605 	lsl.w	r6, r1, r5
 800adf6:	1d72      	adds	r2, r6, #5
 800adf8:	0092      	lsls	r2, r2, #2
 800adfa:	4620      	mov	r0, r4
 800adfc:	f002 fa6b 	bl	800d2d6 <_calloc_r>
 800ae00:	b160      	cbz	r0, 800ae1c <_Balloc+0x64>
 800ae02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae06:	e00e      	b.n	800ae26 <_Balloc+0x6e>
 800ae08:	2221      	movs	r2, #33	@ 0x21
 800ae0a:	2104      	movs	r1, #4
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f002 fa62 	bl	800d2d6 <_calloc_r>
 800ae12:	69e3      	ldr	r3, [r4, #28]
 800ae14:	60f0      	str	r0, [r6, #12]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e4      	bne.n	800ade6 <_Balloc+0x2e>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	6802      	ldr	r2, [r0, #0]
 800ae22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae26:	2300      	movs	r3, #0
 800ae28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae2c:	e7f7      	b.n	800ae1e <_Balloc+0x66>
 800ae2e:	bf00      	nop
 800ae30:	0800e04c 	.word	0x0800e04c
 800ae34:	0800e16f 	.word	0x0800e16f

0800ae38 <_Bfree>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	69c6      	ldr	r6, [r0, #28]
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	b976      	cbnz	r6, 800ae60 <_Bfree+0x28>
 800ae42:	2010      	movs	r0, #16
 800ae44:	f7ff ff02 	bl	800ac4c <malloc>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	61e8      	str	r0, [r5, #28]
 800ae4c:	b920      	cbnz	r0, 800ae58 <_Bfree+0x20>
 800ae4e:	4b09      	ldr	r3, [pc, #36]	@ (800ae74 <_Bfree+0x3c>)
 800ae50:	4809      	ldr	r0, [pc, #36]	@ (800ae78 <_Bfree+0x40>)
 800ae52:	218f      	movs	r1, #143	@ 0x8f
 800ae54:	f7ff f846 	bl	8009ee4 <__assert_func>
 800ae58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae5c:	6006      	str	r6, [r0, #0]
 800ae5e:	60c6      	str	r6, [r0, #12]
 800ae60:	b13c      	cbz	r4, 800ae72 <_Bfree+0x3a>
 800ae62:	69eb      	ldr	r3, [r5, #28]
 800ae64:	6862      	ldr	r2, [r4, #4]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae6c:	6021      	str	r1, [r4, #0]
 800ae6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	0800e04c 	.word	0x0800e04c
 800ae78:	0800e16f 	.word	0x0800e16f

0800ae7c <__multadd>:
 800ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae80:	690d      	ldr	r5, [r1, #16]
 800ae82:	4607      	mov	r7, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	461e      	mov	r6, r3
 800ae88:	f101 0c14 	add.w	ip, r1, #20
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	f8dc 3000 	ldr.w	r3, [ip]
 800ae92:	b299      	uxth	r1, r3
 800ae94:	fb02 6101 	mla	r1, r2, r1, r6
 800ae98:	0c1e      	lsrs	r6, r3, #16
 800ae9a:	0c0b      	lsrs	r3, r1, #16
 800ae9c:	fb02 3306 	mla	r3, r2, r6, r3
 800aea0:	b289      	uxth	r1, r1
 800aea2:	3001      	adds	r0, #1
 800aea4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aea8:	4285      	cmp	r5, r0
 800aeaa:	f84c 1b04 	str.w	r1, [ip], #4
 800aeae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aeb2:	dcec      	bgt.n	800ae8e <__multadd+0x12>
 800aeb4:	b30e      	cbz	r6, 800aefa <__multadd+0x7e>
 800aeb6:	68a3      	ldr	r3, [r4, #8]
 800aeb8:	42ab      	cmp	r3, r5
 800aeba:	dc19      	bgt.n	800aef0 <__multadd+0x74>
 800aebc:	6861      	ldr	r1, [r4, #4]
 800aebe:	4638      	mov	r0, r7
 800aec0:	3101      	adds	r1, #1
 800aec2:	f7ff ff79 	bl	800adb8 <_Balloc>
 800aec6:	4680      	mov	r8, r0
 800aec8:	b928      	cbnz	r0, 800aed6 <__multadd+0x5a>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b0c      	ldr	r3, [pc, #48]	@ (800af00 <__multadd+0x84>)
 800aece:	480d      	ldr	r0, [pc, #52]	@ (800af04 <__multadd+0x88>)
 800aed0:	21ba      	movs	r1, #186	@ 0xba
 800aed2:	f7ff f807 	bl	8009ee4 <__assert_func>
 800aed6:	6922      	ldr	r2, [r4, #16]
 800aed8:	3202      	adds	r2, #2
 800aeda:	f104 010c 	add.w	r1, r4, #12
 800aede:	0092      	lsls	r2, r2, #2
 800aee0:	300c      	adds	r0, #12
 800aee2:	f002 f9d9 	bl	800d298 <memcpy>
 800aee6:	4621      	mov	r1, r4
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7ff ffa5 	bl	800ae38 <_Bfree>
 800aeee:	4644      	mov	r4, r8
 800aef0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aef4:	3501      	adds	r5, #1
 800aef6:	615e      	str	r6, [r3, #20]
 800aef8:	6125      	str	r5, [r4, #16]
 800aefa:	4620      	mov	r0, r4
 800aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af00:	0800e15e 	.word	0x0800e15e
 800af04:	0800e16f 	.word	0x0800e16f

0800af08 <__s2b>:
 800af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af0c:	460c      	mov	r4, r1
 800af0e:	4615      	mov	r5, r2
 800af10:	461f      	mov	r7, r3
 800af12:	2209      	movs	r2, #9
 800af14:	3308      	adds	r3, #8
 800af16:	4606      	mov	r6, r0
 800af18:	fb93 f3f2 	sdiv	r3, r3, r2
 800af1c:	2100      	movs	r1, #0
 800af1e:	2201      	movs	r2, #1
 800af20:	429a      	cmp	r2, r3
 800af22:	db09      	blt.n	800af38 <__s2b+0x30>
 800af24:	4630      	mov	r0, r6
 800af26:	f7ff ff47 	bl	800adb8 <_Balloc>
 800af2a:	b940      	cbnz	r0, 800af3e <__s2b+0x36>
 800af2c:	4602      	mov	r2, r0
 800af2e:	4b19      	ldr	r3, [pc, #100]	@ (800af94 <__s2b+0x8c>)
 800af30:	4819      	ldr	r0, [pc, #100]	@ (800af98 <__s2b+0x90>)
 800af32:	21d3      	movs	r1, #211	@ 0xd3
 800af34:	f7fe ffd6 	bl	8009ee4 <__assert_func>
 800af38:	0052      	lsls	r2, r2, #1
 800af3a:	3101      	adds	r1, #1
 800af3c:	e7f0      	b.n	800af20 <__s2b+0x18>
 800af3e:	9b08      	ldr	r3, [sp, #32]
 800af40:	6143      	str	r3, [r0, #20]
 800af42:	2d09      	cmp	r5, #9
 800af44:	f04f 0301 	mov.w	r3, #1
 800af48:	6103      	str	r3, [r0, #16]
 800af4a:	dd16      	ble.n	800af7a <__s2b+0x72>
 800af4c:	f104 0909 	add.w	r9, r4, #9
 800af50:	46c8      	mov	r8, r9
 800af52:	442c      	add	r4, r5
 800af54:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af58:	4601      	mov	r1, r0
 800af5a:	3b30      	subs	r3, #48	@ 0x30
 800af5c:	220a      	movs	r2, #10
 800af5e:	4630      	mov	r0, r6
 800af60:	f7ff ff8c 	bl	800ae7c <__multadd>
 800af64:	45a0      	cmp	r8, r4
 800af66:	d1f5      	bne.n	800af54 <__s2b+0x4c>
 800af68:	f1a5 0408 	sub.w	r4, r5, #8
 800af6c:	444c      	add	r4, r9
 800af6e:	1b2d      	subs	r5, r5, r4
 800af70:	1963      	adds	r3, r4, r5
 800af72:	42bb      	cmp	r3, r7
 800af74:	db04      	blt.n	800af80 <__s2b+0x78>
 800af76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7a:	340a      	adds	r4, #10
 800af7c:	2509      	movs	r5, #9
 800af7e:	e7f6      	b.n	800af6e <__s2b+0x66>
 800af80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af84:	4601      	mov	r1, r0
 800af86:	3b30      	subs	r3, #48	@ 0x30
 800af88:	220a      	movs	r2, #10
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ff76 	bl	800ae7c <__multadd>
 800af90:	e7ee      	b.n	800af70 <__s2b+0x68>
 800af92:	bf00      	nop
 800af94:	0800e15e 	.word	0x0800e15e
 800af98:	0800e16f 	.word	0x0800e16f

0800af9c <__hi0bits>:
 800af9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afa0:	4603      	mov	r3, r0
 800afa2:	bf36      	itet	cc
 800afa4:	0403      	lslcc	r3, r0, #16
 800afa6:	2000      	movcs	r0, #0
 800afa8:	2010      	movcc	r0, #16
 800afaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afae:	bf3c      	itt	cc
 800afb0:	021b      	lslcc	r3, r3, #8
 800afb2:	3008      	addcc	r0, #8
 800afb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afb8:	bf3c      	itt	cc
 800afba:	011b      	lslcc	r3, r3, #4
 800afbc:	3004      	addcc	r0, #4
 800afbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afc2:	bf3c      	itt	cc
 800afc4:	009b      	lslcc	r3, r3, #2
 800afc6:	3002      	addcc	r0, #2
 800afc8:	2b00      	cmp	r3, #0
 800afca:	db05      	blt.n	800afd8 <__hi0bits+0x3c>
 800afcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800afd0:	f100 0001 	add.w	r0, r0, #1
 800afd4:	bf08      	it	eq
 800afd6:	2020      	moveq	r0, #32
 800afd8:	4770      	bx	lr

0800afda <__lo0bits>:
 800afda:	6803      	ldr	r3, [r0, #0]
 800afdc:	4602      	mov	r2, r0
 800afde:	f013 0007 	ands.w	r0, r3, #7
 800afe2:	d00b      	beq.n	800affc <__lo0bits+0x22>
 800afe4:	07d9      	lsls	r1, r3, #31
 800afe6:	d421      	bmi.n	800b02c <__lo0bits+0x52>
 800afe8:	0798      	lsls	r0, r3, #30
 800afea:	bf49      	itett	mi
 800afec:	085b      	lsrmi	r3, r3, #1
 800afee:	089b      	lsrpl	r3, r3, #2
 800aff0:	2001      	movmi	r0, #1
 800aff2:	6013      	strmi	r3, [r2, #0]
 800aff4:	bf5c      	itt	pl
 800aff6:	6013      	strpl	r3, [r2, #0]
 800aff8:	2002      	movpl	r0, #2
 800affa:	4770      	bx	lr
 800affc:	b299      	uxth	r1, r3
 800affe:	b909      	cbnz	r1, 800b004 <__lo0bits+0x2a>
 800b000:	0c1b      	lsrs	r3, r3, #16
 800b002:	2010      	movs	r0, #16
 800b004:	b2d9      	uxtb	r1, r3
 800b006:	b909      	cbnz	r1, 800b00c <__lo0bits+0x32>
 800b008:	3008      	adds	r0, #8
 800b00a:	0a1b      	lsrs	r3, r3, #8
 800b00c:	0719      	lsls	r1, r3, #28
 800b00e:	bf04      	itt	eq
 800b010:	091b      	lsreq	r3, r3, #4
 800b012:	3004      	addeq	r0, #4
 800b014:	0799      	lsls	r1, r3, #30
 800b016:	bf04      	itt	eq
 800b018:	089b      	lsreq	r3, r3, #2
 800b01a:	3002      	addeq	r0, #2
 800b01c:	07d9      	lsls	r1, r3, #31
 800b01e:	d403      	bmi.n	800b028 <__lo0bits+0x4e>
 800b020:	085b      	lsrs	r3, r3, #1
 800b022:	f100 0001 	add.w	r0, r0, #1
 800b026:	d003      	beq.n	800b030 <__lo0bits+0x56>
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	4770      	bx	lr
 800b02c:	2000      	movs	r0, #0
 800b02e:	4770      	bx	lr
 800b030:	2020      	movs	r0, #32
 800b032:	4770      	bx	lr

0800b034 <__i2b>:
 800b034:	b510      	push	{r4, lr}
 800b036:	460c      	mov	r4, r1
 800b038:	2101      	movs	r1, #1
 800b03a:	f7ff febd 	bl	800adb8 <_Balloc>
 800b03e:	4602      	mov	r2, r0
 800b040:	b928      	cbnz	r0, 800b04e <__i2b+0x1a>
 800b042:	4b05      	ldr	r3, [pc, #20]	@ (800b058 <__i2b+0x24>)
 800b044:	4805      	ldr	r0, [pc, #20]	@ (800b05c <__i2b+0x28>)
 800b046:	f240 1145 	movw	r1, #325	@ 0x145
 800b04a:	f7fe ff4b 	bl	8009ee4 <__assert_func>
 800b04e:	2301      	movs	r3, #1
 800b050:	6144      	str	r4, [r0, #20]
 800b052:	6103      	str	r3, [r0, #16]
 800b054:	bd10      	pop	{r4, pc}
 800b056:	bf00      	nop
 800b058:	0800e15e 	.word	0x0800e15e
 800b05c:	0800e16f 	.word	0x0800e16f

0800b060 <__multiply>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	4614      	mov	r4, r2
 800b066:	690a      	ldr	r2, [r1, #16]
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	bfa8      	it	ge
 800b06e:	4623      	movge	r3, r4
 800b070:	460f      	mov	r7, r1
 800b072:	bfa4      	itt	ge
 800b074:	460c      	movge	r4, r1
 800b076:	461f      	movge	r7, r3
 800b078:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b07c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b080:	68a3      	ldr	r3, [r4, #8]
 800b082:	6861      	ldr	r1, [r4, #4]
 800b084:	eb0a 0609 	add.w	r6, sl, r9
 800b088:	42b3      	cmp	r3, r6
 800b08a:	b085      	sub	sp, #20
 800b08c:	bfb8      	it	lt
 800b08e:	3101      	addlt	r1, #1
 800b090:	f7ff fe92 	bl	800adb8 <_Balloc>
 800b094:	b930      	cbnz	r0, 800b0a4 <__multiply+0x44>
 800b096:	4602      	mov	r2, r0
 800b098:	4b44      	ldr	r3, [pc, #272]	@ (800b1ac <__multiply+0x14c>)
 800b09a:	4845      	ldr	r0, [pc, #276]	@ (800b1b0 <__multiply+0x150>)
 800b09c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0a0:	f7fe ff20 	bl	8009ee4 <__assert_func>
 800b0a4:	f100 0514 	add.w	r5, r0, #20
 800b0a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4543      	cmp	r3, r8
 800b0b2:	d321      	bcc.n	800b0f8 <__multiply+0x98>
 800b0b4:	f107 0114 	add.w	r1, r7, #20
 800b0b8:	f104 0214 	add.w	r2, r4, #20
 800b0bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b0c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b0c4:	9302      	str	r3, [sp, #8]
 800b0c6:	1b13      	subs	r3, r2, r4
 800b0c8:	3b15      	subs	r3, #21
 800b0ca:	f023 0303 	bic.w	r3, r3, #3
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	f104 0715 	add.w	r7, r4, #21
 800b0d4:	42ba      	cmp	r2, r7
 800b0d6:	bf38      	it	cc
 800b0d8:	2304      	movcc	r3, #4
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	9b02      	ldr	r3, [sp, #8]
 800b0de:	9103      	str	r1, [sp, #12]
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	d80c      	bhi.n	800b0fe <__multiply+0x9e>
 800b0e4:	2e00      	cmp	r6, #0
 800b0e6:	dd03      	ble.n	800b0f0 <__multiply+0x90>
 800b0e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d05b      	beq.n	800b1a8 <__multiply+0x148>
 800b0f0:	6106      	str	r6, [r0, #16]
 800b0f2:	b005      	add	sp, #20
 800b0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f8:	f843 2b04 	str.w	r2, [r3], #4
 800b0fc:	e7d8      	b.n	800b0b0 <__multiply+0x50>
 800b0fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800b102:	f1ba 0f00 	cmp.w	sl, #0
 800b106:	d024      	beq.n	800b152 <__multiply+0xf2>
 800b108:	f104 0e14 	add.w	lr, r4, #20
 800b10c:	46a9      	mov	r9, r5
 800b10e:	f04f 0c00 	mov.w	ip, #0
 800b112:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b116:	f8d9 3000 	ldr.w	r3, [r9]
 800b11a:	fa1f fb87 	uxth.w	fp, r7
 800b11e:	b29b      	uxth	r3, r3
 800b120:	fb0a 330b 	mla	r3, sl, fp, r3
 800b124:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b128:	f8d9 7000 	ldr.w	r7, [r9]
 800b12c:	4463      	add	r3, ip
 800b12e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b132:	fb0a c70b 	mla	r7, sl, fp, ip
 800b136:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b140:	4572      	cmp	r2, lr
 800b142:	f849 3b04 	str.w	r3, [r9], #4
 800b146:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b14a:	d8e2      	bhi.n	800b112 <__multiply+0xb2>
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	f845 c003 	str.w	ip, [r5, r3]
 800b152:	9b03      	ldr	r3, [sp, #12]
 800b154:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b158:	3104      	adds	r1, #4
 800b15a:	f1b9 0f00 	cmp.w	r9, #0
 800b15e:	d021      	beq.n	800b1a4 <__multiply+0x144>
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	f104 0c14 	add.w	ip, r4, #20
 800b166:	46ae      	mov	lr, r5
 800b168:	f04f 0a00 	mov.w	sl, #0
 800b16c:	f8bc b000 	ldrh.w	fp, [ip]
 800b170:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b174:	fb09 770b 	mla	r7, r9, fp, r7
 800b178:	4457      	add	r7, sl
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b180:	f84e 3b04 	str.w	r3, [lr], #4
 800b184:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b188:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b18c:	f8be 3000 	ldrh.w	r3, [lr]
 800b190:	fb09 330a 	mla	r3, r9, sl, r3
 800b194:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b198:	4562      	cmp	r2, ip
 800b19a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b19e:	d8e5      	bhi.n	800b16c <__multiply+0x10c>
 800b1a0:	9f01      	ldr	r7, [sp, #4]
 800b1a2:	51eb      	str	r3, [r5, r7]
 800b1a4:	3504      	adds	r5, #4
 800b1a6:	e799      	b.n	800b0dc <__multiply+0x7c>
 800b1a8:	3e01      	subs	r6, #1
 800b1aa:	e79b      	b.n	800b0e4 <__multiply+0x84>
 800b1ac:	0800e15e 	.word	0x0800e15e
 800b1b0:	0800e16f 	.word	0x0800e16f

0800b1b4 <__pow5mult>:
 800b1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	4615      	mov	r5, r2
 800b1ba:	f012 0203 	ands.w	r2, r2, #3
 800b1be:	4607      	mov	r7, r0
 800b1c0:	460e      	mov	r6, r1
 800b1c2:	d007      	beq.n	800b1d4 <__pow5mult+0x20>
 800b1c4:	4c25      	ldr	r4, [pc, #148]	@ (800b25c <__pow5mult+0xa8>)
 800b1c6:	3a01      	subs	r2, #1
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1ce:	f7ff fe55 	bl	800ae7c <__multadd>
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	10ad      	asrs	r5, r5, #2
 800b1d6:	d03d      	beq.n	800b254 <__pow5mult+0xa0>
 800b1d8:	69fc      	ldr	r4, [r7, #28]
 800b1da:	b97c      	cbnz	r4, 800b1fc <__pow5mult+0x48>
 800b1dc:	2010      	movs	r0, #16
 800b1de:	f7ff fd35 	bl	800ac4c <malloc>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	61f8      	str	r0, [r7, #28]
 800b1e6:	b928      	cbnz	r0, 800b1f4 <__pow5mult+0x40>
 800b1e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b260 <__pow5mult+0xac>)
 800b1ea:	481e      	ldr	r0, [pc, #120]	@ (800b264 <__pow5mult+0xb0>)
 800b1ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b1f0:	f7fe fe78 	bl	8009ee4 <__assert_func>
 800b1f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1f8:	6004      	str	r4, [r0, #0]
 800b1fa:	60c4      	str	r4, [r0, #12]
 800b1fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b204:	b94c      	cbnz	r4, 800b21a <__pow5mult+0x66>
 800b206:	f240 2171 	movw	r1, #625	@ 0x271
 800b20a:	4638      	mov	r0, r7
 800b20c:	f7ff ff12 	bl	800b034 <__i2b>
 800b210:	2300      	movs	r3, #0
 800b212:	f8c8 0008 	str.w	r0, [r8, #8]
 800b216:	4604      	mov	r4, r0
 800b218:	6003      	str	r3, [r0, #0]
 800b21a:	f04f 0900 	mov.w	r9, #0
 800b21e:	07eb      	lsls	r3, r5, #31
 800b220:	d50a      	bpl.n	800b238 <__pow5mult+0x84>
 800b222:	4631      	mov	r1, r6
 800b224:	4622      	mov	r2, r4
 800b226:	4638      	mov	r0, r7
 800b228:	f7ff ff1a 	bl	800b060 <__multiply>
 800b22c:	4631      	mov	r1, r6
 800b22e:	4680      	mov	r8, r0
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff fe01 	bl	800ae38 <_Bfree>
 800b236:	4646      	mov	r6, r8
 800b238:	106d      	asrs	r5, r5, #1
 800b23a:	d00b      	beq.n	800b254 <__pow5mult+0xa0>
 800b23c:	6820      	ldr	r0, [r4, #0]
 800b23e:	b938      	cbnz	r0, 800b250 <__pow5mult+0x9c>
 800b240:	4622      	mov	r2, r4
 800b242:	4621      	mov	r1, r4
 800b244:	4638      	mov	r0, r7
 800b246:	f7ff ff0b 	bl	800b060 <__multiply>
 800b24a:	6020      	str	r0, [r4, #0]
 800b24c:	f8c0 9000 	str.w	r9, [r0]
 800b250:	4604      	mov	r4, r0
 800b252:	e7e4      	b.n	800b21e <__pow5mult+0x6a>
 800b254:	4630      	mov	r0, r6
 800b256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25a:	bf00      	nop
 800b25c:	0800e1c8 	.word	0x0800e1c8
 800b260:	0800e04c 	.word	0x0800e04c
 800b264:	0800e16f 	.word	0x0800e16f

0800b268 <__lshift>:
 800b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	460c      	mov	r4, r1
 800b26e:	6849      	ldr	r1, [r1, #4]
 800b270:	6923      	ldr	r3, [r4, #16]
 800b272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b276:	68a3      	ldr	r3, [r4, #8]
 800b278:	4607      	mov	r7, r0
 800b27a:	4691      	mov	r9, r2
 800b27c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b280:	f108 0601 	add.w	r6, r8, #1
 800b284:	42b3      	cmp	r3, r6
 800b286:	db0b      	blt.n	800b2a0 <__lshift+0x38>
 800b288:	4638      	mov	r0, r7
 800b28a:	f7ff fd95 	bl	800adb8 <_Balloc>
 800b28e:	4605      	mov	r5, r0
 800b290:	b948      	cbnz	r0, 800b2a6 <__lshift+0x3e>
 800b292:	4602      	mov	r2, r0
 800b294:	4b28      	ldr	r3, [pc, #160]	@ (800b338 <__lshift+0xd0>)
 800b296:	4829      	ldr	r0, [pc, #164]	@ (800b33c <__lshift+0xd4>)
 800b298:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b29c:	f7fe fe22 	bl	8009ee4 <__assert_func>
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	e7ee      	b.n	800b284 <__lshift+0x1c>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f100 0114 	add.w	r1, r0, #20
 800b2ac:	f100 0210 	add.w	r2, r0, #16
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	4553      	cmp	r3, sl
 800b2b4:	db33      	blt.n	800b31e <__lshift+0xb6>
 800b2b6:	6920      	ldr	r0, [r4, #16]
 800b2b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2bc:	f104 0314 	add.w	r3, r4, #20
 800b2c0:	f019 091f 	ands.w	r9, r9, #31
 800b2c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2cc:	d02b      	beq.n	800b326 <__lshift+0xbe>
 800b2ce:	f1c9 0e20 	rsb	lr, r9, #32
 800b2d2:	468a      	mov	sl, r1
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2dc:	4310      	orrs	r0, r2
 800b2de:	f84a 0b04 	str.w	r0, [sl], #4
 800b2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e6:	459c      	cmp	ip, r3
 800b2e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2ec:	d8f3      	bhi.n	800b2d6 <__lshift+0x6e>
 800b2ee:	ebac 0304 	sub.w	r3, ip, r4
 800b2f2:	3b15      	subs	r3, #21
 800b2f4:	f023 0303 	bic.w	r3, r3, #3
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	f104 0015 	add.w	r0, r4, #21
 800b2fe:	4584      	cmp	ip, r0
 800b300:	bf38      	it	cc
 800b302:	2304      	movcc	r3, #4
 800b304:	50ca      	str	r2, [r1, r3]
 800b306:	b10a      	cbz	r2, 800b30c <__lshift+0xa4>
 800b308:	f108 0602 	add.w	r6, r8, #2
 800b30c:	3e01      	subs	r6, #1
 800b30e:	4638      	mov	r0, r7
 800b310:	612e      	str	r6, [r5, #16]
 800b312:	4621      	mov	r1, r4
 800b314:	f7ff fd90 	bl	800ae38 <_Bfree>
 800b318:	4628      	mov	r0, r5
 800b31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b322:	3301      	adds	r3, #1
 800b324:	e7c5      	b.n	800b2b2 <__lshift+0x4a>
 800b326:	3904      	subs	r1, #4
 800b328:	f853 2b04 	ldr.w	r2, [r3], #4
 800b32c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b330:	459c      	cmp	ip, r3
 800b332:	d8f9      	bhi.n	800b328 <__lshift+0xc0>
 800b334:	e7ea      	b.n	800b30c <__lshift+0xa4>
 800b336:	bf00      	nop
 800b338:	0800e15e 	.word	0x0800e15e
 800b33c:	0800e16f 	.word	0x0800e16f

0800b340 <__mcmp>:
 800b340:	690a      	ldr	r2, [r1, #16]
 800b342:	4603      	mov	r3, r0
 800b344:	6900      	ldr	r0, [r0, #16]
 800b346:	1a80      	subs	r0, r0, r2
 800b348:	b530      	push	{r4, r5, lr}
 800b34a:	d10e      	bne.n	800b36a <__mcmp+0x2a>
 800b34c:	3314      	adds	r3, #20
 800b34e:	3114      	adds	r1, #20
 800b350:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b354:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b358:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b35c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b360:	4295      	cmp	r5, r2
 800b362:	d003      	beq.n	800b36c <__mcmp+0x2c>
 800b364:	d205      	bcs.n	800b372 <__mcmp+0x32>
 800b366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b36a:	bd30      	pop	{r4, r5, pc}
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	d3f3      	bcc.n	800b358 <__mcmp+0x18>
 800b370:	e7fb      	b.n	800b36a <__mcmp+0x2a>
 800b372:	2001      	movs	r0, #1
 800b374:	e7f9      	b.n	800b36a <__mcmp+0x2a>
	...

0800b378 <__mdiff>:
 800b378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	4689      	mov	r9, r1
 800b37e:	4606      	mov	r6, r0
 800b380:	4611      	mov	r1, r2
 800b382:	4648      	mov	r0, r9
 800b384:	4614      	mov	r4, r2
 800b386:	f7ff ffdb 	bl	800b340 <__mcmp>
 800b38a:	1e05      	subs	r5, r0, #0
 800b38c:	d112      	bne.n	800b3b4 <__mdiff+0x3c>
 800b38e:	4629      	mov	r1, r5
 800b390:	4630      	mov	r0, r6
 800b392:	f7ff fd11 	bl	800adb8 <_Balloc>
 800b396:	4602      	mov	r2, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <__mdiff+0x2e>
 800b39a:	4b3f      	ldr	r3, [pc, #252]	@ (800b498 <__mdiff+0x120>)
 800b39c:	f240 2137 	movw	r1, #567	@ 0x237
 800b3a0:	483e      	ldr	r0, [pc, #248]	@ (800b49c <__mdiff+0x124>)
 800b3a2:	f7fe fd9f 	bl	8009ee4 <__assert_func>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	b003      	add	sp, #12
 800b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	bfbc      	itt	lt
 800b3b6:	464b      	movlt	r3, r9
 800b3b8:	46a1      	movlt	r9, r4
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b3c0:	bfba      	itte	lt
 800b3c2:	461c      	movlt	r4, r3
 800b3c4:	2501      	movlt	r5, #1
 800b3c6:	2500      	movge	r5, #0
 800b3c8:	f7ff fcf6 	bl	800adb8 <_Balloc>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	b918      	cbnz	r0, 800b3d8 <__mdiff+0x60>
 800b3d0:	4b31      	ldr	r3, [pc, #196]	@ (800b498 <__mdiff+0x120>)
 800b3d2:	f240 2145 	movw	r1, #581	@ 0x245
 800b3d6:	e7e3      	b.n	800b3a0 <__mdiff+0x28>
 800b3d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3dc:	6926      	ldr	r6, [r4, #16]
 800b3de:	60c5      	str	r5, [r0, #12]
 800b3e0:	f109 0310 	add.w	r3, r9, #16
 800b3e4:	f109 0514 	add.w	r5, r9, #20
 800b3e8:	f104 0e14 	add.w	lr, r4, #20
 800b3ec:	f100 0b14 	add.w	fp, r0, #20
 800b3f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b3f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	46d9      	mov	r9, fp
 800b3fc:	f04f 0c00 	mov.w	ip, #0
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b406:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	fa1f f38a 	uxth.w	r3, sl
 800b410:	4619      	mov	r1, r3
 800b412:	b283      	uxth	r3, r0
 800b414:	1acb      	subs	r3, r1, r3
 800b416:	0c00      	lsrs	r0, r0, #16
 800b418:	4463      	add	r3, ip
 800b41a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b41e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b422:	b29b      	uxth	r3, r3
 800b424:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b428:	4576      	cmp	r6, lr
 800b42a:	f849 3b04 	str.w	r3, [r9], #4
 800b42e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b432:	d8e5      	bhi.n	800b400 <__mdiff+0x88>
 800b434:	1b33      	subs	r3, r6, r4
 800b436:	3b15      	subs	r3, #21
 800b438:	f023 0303 	bic.w	r3, r3, #3
 800b43c:	3415      	adds	r4, #21
 800b43e:	3304      	adds	r3, #4
 800b440:	42a6      	cmp	r6, r4
 800b442:	bf38      	it	cc
 800b444:	2304      	movcc	r3, #4
 800b446:	441d      	add	r5, r3
 800b448:	445b      	add	r3, fp
 800b44a:	461e      	mov	r6, r3
 800b44c:	462c      	mov	r4, r5
 800b44e:	4544      	cmp	r4, r8
 800b450:	d30e      	bcc.n	800b470 <__mdiff+0xf8>
 800b452:	f108 0103 	add.w	r1, r8, #3
 800b456:	1b49      	subs	r1, r1, r5
 800b458:	f021 0103 	bic.w	r1, r1, #3
 800b45c:	3d03      	subs	r5, #3
 800b45e:	45a8      	cmp	r8, r5
 800b460:	bf38      	it	cc
 800b462:	2100      	movcc	r1, #0
 800b464:	440b      	add	r3, r1
 800b466:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b46a:	b191      	cbz	r1, 800b492 <__mdiff+0x11a>
 800b46c:	6117      	str	r7, [r2, #16]
 800b46e:	e79d      	b.n	800b3ac <__mdiff+0x34>
 800b470:	f854 1b04 	ldr.w	r1, [r4], #4
 800b474:	46e6      	mov	lr, ip
 800b476:	0c08      	lsrs	r0, r1, #16
 800b478:	fa1c fc81 	uxtah	ip, ip, r1
 800b47c:	4471      	add	r1, lr
 800b47e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b482:	b289      	uxth	r1, r1
 800b484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b488:	f846 1b04 	str.w	r1, [r6], #4
 800b48c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b490:	e7dd      	b.n	800b44e <__mdiff+0xd6>
 800b492:	3f01      	subs	r7, #1
 800b494:	e7e7      	b.n	800b466 <__mdiff+0xee>
 800b496:	bf00      	nop
 800b498:	0800e15e 	.word	0x0800e15e
 800b49c:	0800e16f 	.word	0x0800e16f

0800b4a0 <__ulp>:
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	ed8d 0b00 	vstr	d0, [sp]
 800b4a6:	9a01      	ldr	r2, [sp, #4]
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e8 <__ulp+0x48>)
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dc08      	bgt.n	800b4c6 <__ulp+0x26>
 800b4b4:	425b      	negs	r3, r3
 800b4b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b4ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4be:	da04      	bge.n	800b4ca <__ulp+0x2a>
 800b4c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b4c4:	4113      	asrs	r3, r2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	e008      	b.n	800b4dc <__ulp+0x3c>
 800b4ca:	f1a2 0314 	sub.w	r3, r2, #20
 800b4ce:	2b1e      	cmp	r3, #30
 800b4d0:	bfda      	itte	le
 800b4d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b4d6:	40da      	lsrle	r2, r3
 800b4d8:	2201      	movgt	r2, #1
 800b4da:	2300      	movs	r3, #0
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	ec41 0b10 	vmov	d0, r0, r1
 800b4e4:	b002      	add	sp, #8
 800b4e6:	4770      	bx	lr
 800b4e8:	7ff00000 	.word	0x7ff00000

0800b4ec <__b2d>:
 800b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f0:	6906      	ldr	r6, [r0, #16]
 800b4f2:	f100 0814 	add.w	r8, r0, #20
 800b4f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b4fa:	1f37      	subs	r7, r6, #4
 800b4fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b500:	4610      	mov	r0, r2
 800b502:	f7ff fd4b 	bl	800af9c <__hi0bits>
 800b506:	f1c0 0320 	rsb	r3, r0, #32
 800b50a:	280a      	cmp	r0, #10
 800b50c:	600b      	str	r3, [r1, #0]
 800b50e:	491b      	ldr	r1, [pc, #108]	@ (800b57c <__b2d+0x90>)
 800b510:	dc15      	bgt.n	800b53e <__b2d+0x52>
 800b512:	f1c0 0c0b 	rsb	ip, r0, #11
 800b516:	fa22 f30c 	lsr.w	r3, r2, ip
 800b51a:	45b8      	cmp	r8, r7
 800b51c:	ea43 0501 	orr.w	r5, r3, r1
 800b520:	bf34      	ite	cc
 800b522:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b526:	2300      	movcs	r3, #0
 800b528:	3015      	adds	r0, #21
 800b52a:	fa02 f000 	lsl.w	r0, r2, r0
 800b52e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b532:	4303      	orrs	r3, r0
 800b534:	461c      	mov	r4, r3
 800b536:	ec45 4b10 	vmov	d0, r4, r5
 800b53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53e:	45b8      	cmp	r8, r7
 800b540:	bf3a      	itte	cc
 800b542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b546:	f1a6 0708 	subcc.w	r7, r6, #8
 800b54a:	2300      	movcs	r3, #0
 800b54c:	380b      	subs	r0, #11
 800b54e:	d012      	beq.n	800b576 <__b2d+0x8a>
 800b550:	f1c0 0120 	rsb	r1, r0, #32
 800b554:	fa23 f401 	lsr.w	r4, r3, r1
 800b558:	4082      	lsls	r2, r0
 800b55a:	4322      	orrs	r2, r4
 800b55c:	4547      	cmp	r7, r8
 800b55e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b562:	bf8c      	ite	hi
 800b564:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b568:	2200      	movls	r2, #0
 800b56a:	4083      	lsls	r3, r0
 800b56c:	40ca      	lsrs	r2, r1
 800b56e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b572:	4313      	orrs	r3, r2
 800b574:	e7de      	b.n	800b534 <__b2d+0x48>
 800b576:	ea42 0501 	orr.w	r5, r2, r1
 800b57a:	e7db      	b.n	800b534 <__b2d+0x48>
 800b57c:	3ff00000 	.word	0x3ff00000

0800b580 <__d2b>:
 800b580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b584:	460f      	mov	r7, r1
 800b586:	2101      	movs	r1, #1
 800b588:	ec59 8b10 	vmov	r8, r9, d0
 800b58c:	4616      	mov	r6, r2
 800b58e:	f7ff fc13 	bl	800adb8 <_Balloc>
 800b592:	4604      	mov	r4, r0
 800b594:	b930      	cbnz	r0, 800b5a4 <__d2b+0x24>
 800b596:	4602      	mov	r2, r0
 800b598:	4b23      	ldr	r3, [pc, #140]	@ (800b628 <__d2b+0xa8>)
 800b59a:	4824      	ldr	r0, [pc, #144]	@ (800b62c <__d2b+0xac>)
 800b59c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b5a0:	f7fe fca0 	bl	8009ee4 <__assert_func>
 800b5a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ac:	b10d      	cbz	r5, 800b5b2 <__d2b+0x32>
 800b5ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5b2:	9301      	str	r3, [sp, #4]
 800b5b4:	f1b8 0300 	subs.w	r3, r8, #0
 800b5b8:	d023      	beq.n	800b602 <__d2b+0x82>
 800b5ba:	4668      	mov	r0, sp
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	f7ff fd0c 	bl	800afda <__lo0bits>
 800b5c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5c6:	b1d0      	cbz	r0, 800b5fe <__d2b+0x7e>
 800b5c8:	f1c0 0320 	rsb	r3, r0, #32
 800b5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d0:	430b      	orrs	r3, r1
 800b5d2:	40c2      	lsrs	r2, r0
 800b5d4:	6163      	str	r3, [r4, #20]
 800b5d6:	9201      	str	r2, [sp, #4]
 800b5d8:	9b01      	ldr	r3, [sp, #4]
 800b5da:	61a3      	str	r3, [r4, #24]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	bf0c      	ite	eq
 800b5e0:	2201      	moveq	r2, #1
 800b5e2:	2202      	movne	r2, #2
 800b5e4:	6122      	str	r2, [r4, #16]
 800b5e6:	b1a5      	cbz	r5, 800b612 <__d2b+0x92>
 800b5e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5ec:	4405      	add	r5, r0
 800b5ee:	603d      	str	r5, [r7, #0]
 800b5f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5f4:	6030      	str	r0, [r6, #0]
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	b003      	add	sp, #12
 800b5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5fe:	6161      	str	r1, [r4, #20]
 800b600:	e7ea      	b.n	800b5d8 <__d2b+0x58>
 800b602:	a801      	add	r0, sp, #4
 800b604:	f7ff fce9 	bl	800afda <__lo0bits>
 800b608:	9b01      	ldr	r3, [sp, #4]
 800b60a:	6163      	str	r3, [r4, #20]
 800b60c:	3020      	adds	r0, #32
 800b60e:	2201      	movs	r2, #1
 800b610:	e7e8      	b.n	800b5e4 <__d2b+0x64>
 800b612:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b616:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b61a:	6038      	str	r0, [r7, #0]
 800b61c:	6918      	ldr	r0, [r3, #16]
 800b61e:	f7ff fcbd 	bl	800af9c <__hi0bits>
 800b622:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b626:	e7e5      	b.n	800b5f4 <__d2b+0x74>
 800b628:	0800e15e 	.word	0x0800e15e
 800b62c:	0800e16f 	.word	0x0800e16f

0800b630 <__ratio>:
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	b085      	sub	sp, #20
 800b636:	e9cd 1000 	strd	r1, r0, [sp]
 800b63a:	a902      	add	r1, sp, #8
 800b63c:	f7ff ff56 	bl	800b4ec <__b2d>
 800b640:	9800      	ldr	r0, [sp, #0]
 800b642:	a903      	add	r1, sp, #12
 800b644:	ec55 4b10 	vmov	r4, r5, d0
 800b648:	f7ff ff50 	bl	800b4ec <__b2d>
 800b64c:	9b01      	ldr	r3, [sp, #4]
 800b64e:	6919      	ldr	r1, [r3, #16]
 800b650:	9b00      	ldr	r3, [sp, #0]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	1ac9      	subs	r1, r1, r3
 800b656:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b65a:	1a9b      	subs	r3, r3, r2
 800b65c:	ec5b ab10 	vmov	sl, fp, d0
 800b660:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b664:	2b00      	cmp	r3, #0
 800b666:	bfce      	itee	gt
 800b668:	462a      	movgt	r2, r5
 800b66a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b66e:	465a      	movle	r2, fp
 800b670:	462f      	mov	r7, r5
 800b672:	46d9      	mov	r9, fp
 800b674:	bfcc      	ite	gt
 800b676:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b67a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b67e:	464b      	mov	r3, r9
 800b680:	4652      	mov	r2, sl
 800b682:	4620      	mov	r0, r4
 800b684:	4639      	mov	r1, r7
 800b686:	f7f5 f8e1 	bl	800084c <__aeabi_ddiv>
 800b68a:	ec41 0b10 	vmov	d0, r0, r1
 800b68e:	b005      	add	sp, #20
 800b690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b694 <__copybits>:
 800b694:	3901      	subs	r1, #1
 800b696:	b570      	push	{r4, r5, r6, lr}
 800b698:	1149      	asrs	r1, r1, #5
 800b69a:	6914      	ldr	r4, [r2, #16]
 800b69c:	3101      	adds	r1, #1
 800b69e:	f102 0314 	add.w	r3, r2, #20
 800b6a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6aa:	1f05      	subs	r5, r0, #4
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	d30c      	bcc.n	800b6ca <__copybits+0x36>
 800b6b0:	1aa3      	subs	r3, r4, r2
 800b6b2:	3b11      	subs	r3, #17
 800b6b4:	f023 0303 	bic.w	r3, r3, #3
 800b6b8:	3211      	adds	r2, #17
 800b6ba:	42a2      	cmp	r2, r4
 800b6bc:	bf88      	it	hi
 800b6be:	2300      	movhi	r3, #0
 800b6c0:	4418      	add	r0, r3
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4288      	cmp	r0, r1
 800b6c6:	d305      	bcc.n	800b6d4 <__copybits+0x40>
 800b6c8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6d2:	e7eb      	b.n	800b6ac <__copybits+0x18>
 800b6d4:	f840 3b04 	str.w	r3, [r0], #4
 800b6d8:	e7f4      	b.n	800b6c4 <__copybits+0x30>

0800b6da <__any_on>:
 800b6da:	f100 0214 	add.w	r2, r0, #20
 800b6de:	6900      	ldr	r0, [r0, #16]
 800b6e0:	114b      	asrs	r3, r1, #5
 800b6e2:	4298      	cmp	r0, r3
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	db11      	blt.n	800b70c <__any_on+0x32>
 800b6e8:	dd0a      	ble.n	800b700 <__any_on+0x26>
 800b6ea:	f011 011f 	ands.w	r1, r1, #31
 800b6ee:	d007      	beq.n	800b700 <__any_on+0x26>
 800b6f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6f4:	fa24 f001 	lsr.w	r0, r4, r1
 800b6f8:	fa00 f101 	lsl.w	r1, r0, r1
 800b6fc:	428c      	cmp	r4, r1
 800b6fe:	d10b      	bne.n	800b718 <__any_on+0x3e>
 800b700:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b704:	4293      	cmp	r3, r2
 800b706:	d803      	bhi.n	800b710 <__any_on+0x36>
 800b708:	2000      	movs	r0, #0
 800b70a:	bd10      	pop	{r4, pc}
 800b70c:	4603      	mov	r3, r0
 800b70e:	e7f7      	b.n	800b700 <__any_on+0x26>
 800b710:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b714:	2900      	cmp	r1, #0
 800b716:	d0f5      	beq.n	800b704 <__any_on+0x2a>
 800b718:	2001      	movs	r0, #1
 800b71a:	e7f6      	b.n	800b70a <__any_on+0x30>

0800b71c <sulp>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	4604      	mov	r4, r0
 800b720:	460d      	mov	r5, r1
 800b722:	ec45 4b10 	vmov	d0, r4, r5
 800b726:	4616      	mov	r6, r2
 800b728:	f7ff feba 	bl	800b4a0 <__ulp>
 800b72c:	ec51 0b10 	vmov	r0, r1, d0
 800b730:	b17e      	cbz	r6, 800b752 <sulp+0x36>
 800b732:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b736:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	dd09      	ble.n	800b752 <sulp+0x36>
 800b73e:	051b      	lsls	r3, r3, #20
 800b740:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b744:	2400      	movs	r4, #0
 800b746:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b74a:	4622      	mov	r2, r4
 800b74c:	462b      	mov	r3, r5
 800b74e:	f7f4 ff53 	bl	80005f8 <__aeabi_dmul>
 800b752:	ec41 0b10 	vmov	d0, r0, r1
 800b756:	bd70      	pop	{r4, r5, r6, pc}

0800b758 <_strtod_l>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	b09f      	sub	sp, #124	@ 0x7c
 800b75e:	460c      	mov	r4, r1
 800b760:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b762:	2200      	movs	r2, #0
 800b764:	921a      	str	r2, [sp, #104]	@ 0x68
 800b766:	9005      	str	r0, [sp, #20]
 800b768:	f04f 0a00 	mov.w	sl, #0
 800b76c:	f04f 0b00 	mov.w	fp, #0
 800b770:	460a      	mov	r2, r1
 800b772:	9219      	str	r2, [sp, #100]	@ 0x64
 800b774:	7811      	ldrb	r1, [r2, #0]
 800b776:	292b      	cmp	r1, #43	@ 0x2b
 800b778:	d04a      	beq.n	800b810 <_strtod_l+0xb8>
 800b77a:	d838      	bhi.n	800b7ee <_strtod_l+0x96>
 800b77c:	290d      	cmp	r1, #13
 800b77e:	d832      	bhi.n	800b7e6 <_strtod_l+0x8e>
 800b780:	2908      	cmp	r1, #8
 800b782:	d832      	bhi.n	800b7ea <_strtod_l+0x92>
 800b784:	2900      	cmp	r1, #0
 800b786:	d03b      	beq.n	800b800 <_strtod_l+0xa8>
 800b788:	2200      	movs	r2, #0
 800b78a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b78c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b78e:	782a      	ldrb	r2, [r5, #0]
 800b790:	2a30      	cmp	r2, #48	@ 0x30
 800b792:	f040 80b3 	bne.w	800b8fc <_strtod_l+0x1a4>
 800b796:	786a      	ldrb	r2, [r5, #1]
 800b798:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b79c:	2a58      	cmp	r2, #88	@ 0x58
 800b79e:	d16e      	bne.n	800b87e <_strtod_l+0x126>
 800b7a0:	9302      	str	r3, [sp, #8]
 800b7a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	4a8e      	ldr	r2, [pc, #568]	@ (800b9e4 <_strtod_l+0x28c>)
 800b7ac:	9805      	ldr	r0, [sp, #20]
 800b7ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b7b0:	a919      	add	r1, sp, #100	@ 0x64
 800b7b2:	f001 fe0b 	bl	800d3cc <__gethex>
 800b7b6:	f010 060f 	ands.w	r6, r0, #15
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	d005      	beq.n	800b7ca <_strtod_l+0x72>
 800b7be:	2e06      	cmp	r6, #6
 800b7c0:	d128      	bne.n	800b814 <_strtod_l+0xbc>
 800b7c2:	3501      	adds	r5, #1
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b7c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f040 858e 	bne.w	800c2ee <_strtod_l+0xb96>
 800b7d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7d4:	b1cb      	cbz	r3, 800b80a <_strtod_l+0xb2>
 800b7d6:	4652      	mov	r2, sl
 800b7d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b7dc:	ec43 2b10 	vmov	d0, r2, r3
 800b7e0:	b01f      	add	sp, #124	@ 0x7c
 800b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e6:	2920      	cmp	r1, #32
 800b7e8:	d1ce      	bne.n	800b788 <_strtod_l+0x30>
 800b7ea:	3201      	adds	r2, #1
 800b7ec:	e7c1      	b.n	800b772 <_strtod_l+0x1a>
 800b7ee:	292d      	cmp	r1, #45	@ 0x2d
 800b7f0:	d1ca      	bne.n	800b788 <_strtod_l+0x30>
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b7f6:	1c51      	adds	r1, r2, #1
 800b7f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7fa:	7852      	ldrb	r2, [r2, #1]
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	d1c5      	bne.n	800b78c <_strtod_l+0x34>
 800b800:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b802:	9419      	str	r4, [sp, #100]	@ 0x64
 800b804:	2b00      	cmp	r3, #0
 800b806:	f040 8570 	bne.w	800c2ea <_strtod_l+0xb92>
 800b80a:	4652      	mov	r2, sl
 800b80c:	465b      	mov	r3, fp
 800b80e:	e7e5      	b.n	800b7dc <_strtod_l+0x84>
 800b810:	2100      	movs	r1, #0
 800b812:	e7ef      	b.n	800b7f4 <_strtod_l+0x9c>
 800b814:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b816:	b13a      	cbz	r2, 800b828 <_strtod_l+0xd0>
 800b818:	2135      	movs	r1, #53	@ 0x35
 800b81a:	a81c      	add	r0, sp, #112	@ 0x70
 800b81c:	f7ff ff3a 	bl	800b694 <__copybits>
 800b820:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b822:	9805      	ldr	r0, [sp, #20]
 800b824:	f7ff fb08 	bl	800ae38 <_Bfree>
 800b828:	3e01      	subs	r6, #1
 800b82a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b82c:	2e04      	cmp	r6, #4
 800b82e:	d806      	bhi.n	800b83e <_strtod_l+0xe6>
 800b830:	e8df f006 	tbb	[pc, r6]
 800b834:	201d0314 	.word	0x201d0314
 800b838:	14          	.byte	0x14
 800b839:	00          	.byte	0x00
 800b83a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b83e:	05e1      	lsls	r1, r4, #23
 800b840:	bf48      	it	mi
 800b842:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b84a:	0d1b      	lsrs	r3, r3, #20
 800b84c:	051b      	lsls	r3, r3, #20
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1bb      	bne.n	800b7ca <_strtod_l+0x72>
 800b852:	f7fe fb13 	bl	8009e7c <__errno>
 800b856:	2322      	movs	r3, #34	@ 0x22
 800b858:	6003      	str	r3, [r0, #0]
 800b85a:	e7b6      	b.n	800b7ca <_strtod_l+0x72>
 800b85c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b860:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b864:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b868:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b86c:	e7e7      	b.n	800b83e <_strtod_l+0xe6>
 800b86e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b9ec <_strtod_l+0x294>
 800b872:	e7e4      	b.n	800b83e <_strtod_l+0xe6>
 800b874:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b878:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b87c:	e7df      	b.n	800b83e <_strtod_l+0xe6>
 800b87e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	9219      	str	r2, [sp, #100]	@ 0x64
 800b884:	785b      	ldrb	r3, [r3, #1]
 800b886:	2b30      	cmp	r3, #48	@ 0x30
 800b888:	d0f9      	beq.n	800b87e <_strtod_l+0x126>
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d09d      	beq.n	800b7ca <_strtod_l+0x72>
 800b88e:	2301      	movs	r3, #1
 800b890:	9309      	str	r3, [sp, #36]	@ 0x24
 800b892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b894:	930c      	str	r3, [sp, #48]	@ 0x30
 800b896:	2300      	movs	r3, #0
 800b898:	9308      	str	r3, [sp, #32]
 800b89a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b89c:	461f      	mov	r7, r3
 800b89e:	220a      	movs	r2, #10
 800b8a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b8a2:	7805      	ldrb	r5, [r0, #0]
 800b8a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b8a8:	b2d9      	uxtb	r1, r3
 800b8aa:	2909      	cmp	r1, #9
 800b8ac:	d928      	bls.n	800b900 <_strtod_l+0x1a8>
 800b8ae:	494e      	ldr	r1, [pc, #312]	@ (800b9e8 <_strtod_l+0x290>)
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f001 fccf 	bl	800d254 <strncmp>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d032      	beq.n	800b920 <_strtod_l+0x1c8>
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	462a      	mov	r2, r5
 800b8be:	4681      	mov	r9, r0
 800b8c0:	463d      	mov	r5, r7
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2a65      	cmp	r2, #101	@ 0x65
 800b8c6:	d001      	beq.n	800b8cc <_strtod_l+0x174>
 800b8c8:	2a45      	cmp	r2, #69	@ 0x45
 800b8ca:	d114      	bne.n	800b8f6 <_strtod_l+0x19e>
 800b8cc:	b91d      	cbnz	r5, 800b8d6 <_strtod_l+0x17e>
 800b8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8d0:	4302      	orrs	r2, r0
 800b8d2:	d095      	beq.n	800b800 <_strtod_l+0xa8>
 800b8d4:	2500      	movs	r5, #0
 800b8d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b8d8:	1c62      	adds	r2, r4, #1
 800b8da:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8dc:	7862      	ldrb	r2, [r4, #1]
 800b8de:	2a2b      	cmp	r2, #43	@ 0x2b
 800b8e0:	d077      	beq.n	800b9d2 <_strtod_l+0x27a>
 800b8e2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b8e4:	d07b      	beq.n	800b9de <_strtod_l+0x286>
 800b8e6:	f04f 0c00 	mov.w	ip, #0
 800b8ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b8ee:	2909      	cmp	r1, #9
 800b8f0:	f240 8082 	bls.w	800b9f8 <_strtod_l+0x2a0>
 800b8f4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b8f6:	f04f 0800 	mov.w	r8, #0
 800b8fa:	e0a2      	b.n	800ba42 <_strtod_l+0x2ea>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e7c7      	b.n	800b890 <_strtod_l+0x138>
 800b900:	2f08      	cmp	r7, #8
 800b902:	bfd5      	itete	le
 800b904:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b906:	9908      	ldrgt	r1, [sp, #32]
 800b908:	fb02 3301 	mlale	r3, r2, r1, r3
 800b90c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b910:	f100 0001 	add.w	r0, r0, #1
 800b914:	bfd4      	ite	le
 800b916:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b918:	9308      	strgt	r3, [sp, #32]
 800b91a:	3701      	adds	r7, #1
 800b91c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b91e:	e7bf      	b.n	800b8a0 <_strtod_l+0x148>
 800b920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	9219      	str	r2, [sp, #100]	@ 0x64
 800b926:	785a      	ldrb	r2, [r3, #1]
 800b928:	b37f      	cbz	r7, 800b98a <_strtod_l+0x232>
 800b92a:	4681      	mov	r9, r0
 800b92c:	463d      	mov	r5, r7
 800b92e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b932:	2b09      	cmp	r3, #9
 800b934:	d912      	bls.n	800b95c <_strtod_l+0x204>
 800b936:	2301      	movs	r3, #1
 800b938:	e7c4      	b.n	800b8c4 <_strtod_l+0x16c>
 800b93a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b93c:	1c5a      	adds	r2, r3, #1
 800b93e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b940:	785a      	ldrb	r2, [r3, #1]
 800b942:	3001      	adds	r0, #1
 800b944:	2a30      	cmp	r2, #48	@ 0x30
 800b946:	d0f8      	beq.n	800b93a <_strtod_l+0x1e2>
 800b948:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b94c:	2b08      	cmp	r3, #8
 800b94e:	f200 84d3 	bhi.w	800c2f8 <_strtod_l+0xba0>
 800b952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b954:	930c      	str	r3, [sp, #48]	@ 0x30
 800b956:	4681      	mov	r9, r0
 800b958:	2000      	movs	r0, #0
 800b95a:	4605      	mov	r5, r0
 800b95c:	3a30      	subs	r2, #48	@ 0x30
 800b95e:	f100 0301 	add.w	r3, r0, #1
 800b962:	d02a      	beq.n	800b9ba <_strtod_l+0x262>
 800b964:	4499      	add	r9, r3
 800b966:	eb00 0c05 	add.w	ip, r0, r5
 800b96a:	462b      	mov	r3, r5
 800b96c:	210a      	movs	r1, #10
 800b96e:	4563      	cmp	r3, ip
 800b970:	d10d      	bne.n	800b98e <_strtod_l+0x236>
 800b972:	1c69      	adds	r1, r5, #1
 800b974:	4401      	add	r1, r0
 800b976:	4428      	add	r0, r5
 800b978:	2808      	cmp	r0, #8
 800b97a:	dc16      	bgt.n	800b9aa <_strtod_l+0x252>
 800b97c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b97e:	230a      	movs	r3, #10
 800b980:	fb03 2300 	mla	r3, r3, r0, r2
 800b984:	930a      	str	r3, [sp, #40]	@ 0x28
 800b986:	2300      	movs	r3, #0
 800b988:	e018      	b.n	800b9bc <_strtod_l+0x264>
 800b98a:	4638      	mov	r0, r7
 800b98c:	e7da      	b.n	800b944 <_strtod_l+0x1ec>
 800b98e:	2b08      	cmp	r3, #8
 800b990:	f103 0301 	add.w	r3, r3, #1
 800b994:	dc03      	bgt.n	800b99e <_strtod_l+0x246>
 800b996:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b998:	434e      	muls	r6, r1
 800b99a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b99c:	e7e7      	b.n	800b96e <_strtod_l+0x216>
 800b99e:	2b10      	cmp	r3, #16
 800b9a0:	bfde      	ittt	le
 800b9a2:	9e08      	ldrle	r6, [sp, #32]
 800b9a4:	434e      	mulle	r6, r1
 800b9a6:	9608      	strle	r6, [sp, #32]
 800b9a8:	e7e1      	b.n	800b96e <_strtod_l+0x216>
 800b9aa:	280f      	cmp	r0, #15
 800b9ac:	dceb      	bgt.n	800b986 <_strtod_l+0x22e>
 800b9ae:	9808      	ldr	r0, [sp, #32]
 800b9b0:	230a      	movs	r3, #10
 800b9b2:	fb03 2300 	mla	r3, r3, r0, r2
 800b9b6:	9308      	str	r3, [sp, #32]
 800b9b8:	e7e5      	b.n	800b986 <_strtod_l+0x22e>
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9be:	1c50      	adds	r0, r2, #1
 800b9c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b9c2:	7852      	ldrb	r2, [r2, #1]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	e7b1      	b.n	800b92e <_strtod_l+0x1d6>
 800b9ca:	f04f 0900 	mov.w	r9, #0
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e77d      	b.n	800b8ce <_strtod_l+0x176>
 800b9d2:	f04f 0c00 	mov.w	ip, #0
 800b9d6:	1ca2      	adds	r2, r4, #2
 800b9d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9da:	78a2      	ldrb	r2, [r4, #2]
 800b9dc:	e785      	b.n	800b8ea <_strtod_l+0x192>
 800b9de:	f04f 0c01 	mov.w	ip, #1
 800b9e2:	e7f8      	b.n	800b9d6 <_strtod_l+0x27e>
 800b9e4:	0800e2e0 	.word	0x0800e2e0
 800b9e8:	0800e2c8 	.word	0x0800e2c8
 800b9ec:	7ff00000 	.word	0x7ff00000
 800b9f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9f2:	1c51      	adds	r1, r2, #1
 800b9f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9f6:	7852      	ldrb	r2, [r2, #1]
 800b9f8:	2a30      	cmp	r2, #48	@ 0x30
 800b9fa:	d0f9      	beq.n	800b9f0 <_strtod_l+0x298>
 800b9fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ba00:	2908      	cmp	r1, #8
 800ba02:	f63f af78 	bhi.w	800b8f6 <_strtod_l+0x19e>
 800ba06:	3a30      	subs	r2, #48	@ 0x30
 800ba08:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ba0e:	f04f 080a 	mov.w	r8, #10
 800ba12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba14:	1c56      	adds	r6, r2, #1
 800ba16:	9619      	str	r6, [sp, #100]	@ 0x64
 800ba18:	7852      	ldrb	r2, [r2, #1]
 800ba1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ba1e:	f1be 0f09 	cmp.w	lr, #9
 800ba22:	d939      	bls.n	800ba98 <_strtod_l+0x340>
 800ba24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba26:	1a76      	subs	r6, r6, r1
 800ba28:	2e08      	cmp	r6, #8
 800ba2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ba2e:	dc03      	bgt.n	800ba38 <_strtod_l+0x2e0>
 800ba30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba32:	4588      	cmp	r8, r1
 800ba34:	bfa8      	it	ge
 800ba36:	4688      	movge	r8, r1
 800ba38:	f1bc 0f00 	cmp.w	ip, #0
 800ba3c:	d001      	beq.n	800ba42 <_strtod_l+0x2ea>
 800ba3e:	f1c8 0800 	rsb	r8, r8, #0
 800ba42:	2d00      	cmp	r5, #0
 800ba44:	d14e      	bne.n	800bae4 <_strtod_l+0x38c>
 800ba46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba48:	4308      	orrs	r0, r1
 800ba4a:	f47f aebe 	bne.w	800b7ca <_strtod_l+0x72>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f47f aed6 	bne.w	800b800 <_strtod_l+0xa8>
 800ba54:	2a69      	cmp	r2, #105	@ 0x69
 800ba56:	d028      	beq.n	800baaa <_strtod_l+0x352>
 800ba58:	dc25      	bgt.n	800baa6 <_strtod_l+0x34e>
 800ba5a:	2a49      	cmp	r2, #73	@ 0x49
 800ba5c:	d025      	beq.n	800baaa <_strtod_l+0x352>
 800ba5e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ba60:	f47f aece 	bne.w	800b800 <_strtod_l+0xa8>
 800ba64:	499b      	ldr	r1, [pc, #620]	@ (800bcd4 <_strtod_l+0x57c>)
 800ba66:	a819      	add	r0, sp, #100	@ 0x64
 800ba68:	f001 fed2 	bl	800d810 <__match>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	f43f aec7 	beq.w	800b800 <_strtod_l+0xa8>
 800ba72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b28      	cmp	r3, #40	@ 0x28
 800ba78:	d12e      	bne.n	800bad8 <_strtod_l+0x380>
 800ba7a:	4997      	ldr	r1, [pc, #604]	@ (800bcd8 <_strtod_l+0x580>)
 800ba7c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba7e:	a819      	add	r0, sp, #100	@ 0x64
 800ba80:	f001 feda 	bl	800d838 <__hexnan>
 800ba84:	2805      	cmp	r0, #5
 800ba86:	d127      	bne.n	800bad8 <_strtod_l+0x380>
 800ba88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ba8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ba92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ba96:	e698      	b.n	800b7ca <_strtod_l+0x72>
 800ba98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba9a:	fb08 2101 	mla	r1, r8, r1, r2
 800ba9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800baa2:	920e      	str	r2, [sp, #56]	@ 0x38
 800baa4:	e7b5      	b.n	800ba12 <_strtod_l+0x2ba>
 800baa6:	2a6e      	cmp	r2, #110	@ 0x6e
 800baa8:	e7da      	b.n	800ba60 <_strtod_l+0x308>
 800baaa:	498c      	ldr	r1, [pc, #560]	@ (800bcdc <_strtod_l+0x584>)
 800baac:	a819      	add	r0, sp, #100	@ 0x64
 800baae:	f001 feaf 	bl	800d810 <__match>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f43f aea4 	beq.w	800b800 <_strtod_l+0xa8>
 800bab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baba:	4989      	ldr	r1, [pc, #548]	@ (800bce0 <_strtod_l+0x588>)
 800babc:	3b01      	subs	r3, #1
 800babe:	a819      	add	r0, sp, #100	@ 0x64
 800bac0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bac2:	f001 fea5 	bl	800d810 <__match>
 800bac6:	b910      	cbnz	r0, 800bace <_strtod_l+0x376>
 800bac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baca:	3301      	adds	r3, #1
 800bacc:	9319      	str	r3, [sp, #100]	@ 0x64
 800bace:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bcf0 <_strtod_l+0x598>
 800bad2:	f04f 0a00 	mov.w	sl, #0
 800bad6:	e678      	b.n	800b7ca <_strtod_l+0x72>
 800bad8:	4882      	ldr	r0, [pc, #520]	@ (800bce4 <_strtod_l+0x58c>)
 800bada:	f001 fbed 	bl	800d2b8 <nan>
 800bade:	ec5b ab10 	vmov	sl, fp, d0
 800bae2:	e672      	b.n	800b7ca <_strtod_l+0x72>
 800bae4:	eba8 0309 	sub.w	r3, r8, r9
 800bae8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800baea:	9309      	str	r3, [sp, #36]	@ 0x24
 800baec:	2f00      	cmp	r7, #0
 800baee:	bf08      	it	eq
 800baf0:	462f      	moveq	r7, r5
 800baf2:	2d10      	cmp	r5, #16
 800baf4:	462c      	mov	r4, r5
 800baf6:	bfa8      	it	ge
 800baf8:	2410      	movge	r4, #16
 800bafa:	f7f4 fd03 	bl	8000504 <__aeabi_ui2d>
 800bafe:	2d09      	cmp	r5, #9
 800bb00:	4682      	mov	sl, r0
 800bb02:	468b      	mov	fp, r1
 800bb04:	dc13      	bgt.n	800bb2e <_strtod_l+0x3d6>
 800bb06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f43f ae5e 	beq.w	800b7ca <_strtod_l+0x72>
 800bb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb10:	dd78      	ble.n	800bc04 <_strtod_l+0x4ac>
 800bb12:	2b16      	cmp	r3, #22
 800bb14:	dc5f      	bgt.n	800bbd6 <_strtod_l+0x47e>
 800bb16:	4974      	ldr	r1, [pc, #464]	@ (800bce8 <_strtod_l+0x590>)
 800bb18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb20:	4652      	mov	r2, sl
 800bb22:	465b      	mov	r3, fp
 800bb24:	f7f4 fd68 	bl	80005f8 <__aeabi_dmul>
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	e64d      	b.n	800b7ca <_strtod_l+0x72>
 800bb2e:	4b6e      	ldr	r3, [pc, #440]	@ (800bce8 <_strtod_l+0x590>)
 800bb30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bb38:	f7f4 fd5e 	bl	80005f8 <__aeabi_dmul>
 800bb3c:	4682      	mov	sl, r0
 800bb3e:	9808      	ldr	r0, [sp, #32]
 800bb40:	468b      	mov	fp, r1
 800bb42:	f7f4 fcdf 	bl	8000504 <__aeabi_ui2d>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4650      	mov	r0, sl
 800bb4c:	4659      	mov	r1, fp
 800bb4e:	f7f4 fb9d 	bl	800028c <__adddf3>
 800bb52:	2d0f      	cmp	r5, #15
 800bb54:	4682      	mov	sl, r0
 800bb56:	468b      	mov	fp, r1
 800bb58:	ddd5      	ble.n	800bb06 <_strtod_l+0x3ae>
 800bb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5c:	1b2c      	subs	r4, r5, r4
 800bb5e:	441c      	add	r4, r3
 800bb60:	2c00      	cmp	r4, #0
 800bb62:	f340 8096 	ble.w	800bc92 <_strtod_l+0x53a>
 800bb66:	f014 030f 	ands.w	r3, r4, #15
 800bb6a:	d00a      	beq.n	800bb82 <_strtod_l+0x42a>
 800bb6c:	495e      	ldr	r1, [pc, #376]	@ (800bce8 <_strtod_l+0x590>)
 800bb6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb72:	4652      	mov	r2, sl
 800bb74:	465b      	mov	r3, fp
 800bb76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7a:	f7f4 fd3d 	bl	80005f8 <__aeabi_dmul>
 800bb7e:	4682      	mov	sl, r0
 800bb80:	468b      	mov	fp, r1
 800bb82:	f034 040f 	bics.w	r4, r4, #15
 800bb86:	d073      	beq.n	800bc70 <_strtod_l+0x518>
 800bb88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bb8c:	dd48      	ble.n	800bc20 <_strtod_l+0x4c8>
 800bb8e:	2400      	movs	r4, #0
 800bb90:	46a0      	mov	r8, r4
 800bb92:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb94:	46a1      	mov	r9, r4
 800bb96:	9a05      	ldr	r2, [sp, #20]
 800bb98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bcf0 <_strtod_l+0x598>
 800bb9c:	2322      	movs	r3, #34	@ 0x22
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	f04f 0a00 	mov.w	sl, #0
 800bba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f43f ae0f 	beq.w	800b7ca <_strtod_l+0x72>
 800bbac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbae:	9805      	ldr	r0, [sp, #20]
 800bbb0:	f7ff f942 	bl	800ae38 <_Bfree>
 800bbb4:	9805      	ldr	r0, [sp, #20]
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	f7ff f93e 	bl	800ae38 <_Bfree>
 800bbbc:	9805      	ldr	r0, [sp, #20]
 800bbbe:	4641      	mov	r1, r8
 800bbc0:	f7ff f93a 	bl	800ae38 <_Bfree>
 800bbc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbc6:	9805      	ldr	r0, [sp, #20]
 800bbc8:	f7ff f936 	bl	800ae38 <_Bfree>
 800bbcc:	9805      	ldr	r0, [sp, #20]
 800bbce:	4621      	mov	r1, r4
 800bbd0:	f7ff f932 	bl	800ae38 <_Bfree>
 800bbd4:	e5f9      	b.n	800b7ca <_strtod_l+0x72>
 800bbd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	dbbc      	blt.n	800bb5a <_strtod_l+0x402>
 800bbe0:	4c41      	ldr	r4, [pc, #260]	@ (800bce8 <_strtod_l+0x590>)
 800bbe2:	f1c5 050f 	rsb	r5, r5, #15
 800bbe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bbea:	4652      	mov	r2, sl
 800bbec:	465b      	mov	r3, fp
 800bbee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbf2:	f7f4 fd01 	bl	80005f8 <__aeabi_dmul>
 800bbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf8:	1b5d      	subs	r5, r3, r5
 800bbfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bbfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc02:	e78f      	b.n	800bb24 <_strtod_l+0x3cc>
 800bc04:	3316      	adds	r3, #22
 800bc06:	dba8      	blt.n	800bb5a <_strtod_l+0x402>
 800bc08:	4b37      	ldr	r3, [pc, #220]	@ (800bce8 <_strtod_l+0x590>)
 800bc0a:	eba9 0808 	sub.w	r8, r9, r8
 800bc0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bc12:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bc16:	4650      	mov	r0, sl
 800bc18:	4659      	mov	r1, fp
 800bc1a:	f7f4 fe17 	bl	800084c <__aeabi_ddiv>
 800bc1e:	e783      	b.n	800bb28 <_strtod_l+0x3d0>
 800bc20:	4b32      	ldr	r3, [pc, #200]	@ (800bcec <_strtod_l+0x594>)
 800bc22:	9308      	str	r3, [sp, #32]
 800bc24:	2300      	movs	r3, #0
 800bc26:	1124      	asrs	r4, r4, #4
 800bc28:	4650      	mov	r0, sl
 800bc2a:	4659      	mov	r1, fp
 800bc2c:	461e      	mov	r6, r3
 800bc2e:	2c01      	cmp	r4, #1
 800bc30:	dc21      	bgt.n	800bc76 <_strtod_l+0x51e>
 800bc32:	b10b      	cbz	r3, 800bc38 <_strtod_l+0x4e0>
 800bc34:	4682      	mov	sl, r0
 800bc36:	468b      	mov	fp, r1
 800bc38:	492c      	ldr	r1, [pc, #176]	@ (800bcec <_strtod_l+0x594>)
 800bc3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bc3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bc42:	4652      	mov	r2, sl
 800bc44:	465b      	mov	r3, fp
 800bc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	4b28      	ldr	r3, [pc, #160]	@ (800bcf0 <_strtod_l+0x598>)
 800bc50:	460a      	mov	r2, r1
 800bc52:	400b      	ands	r3, r1
 800bc54:	4927      	ldr	r1, [pc, #156]	@ (800bcf4 <_strtod_l+0x59c>)
 800bc56:	428b      	cmp	r3, r1
 800bc58:	4682      	mov	sl, r0
 800bc5a:	d898      	bhi.n	800bb8e <_strtod_l+0x436>
 800bc5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bc60:	428b      	cmp	r3, r1
 800bc62:	bf86      	itte	hi
 800bc64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bcf8 <_strtod_l+0x5a0>
 800bc68:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800bc6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bc70:	2300      	movs	r3, #0
 800bc72:	9308      	str	r3, [sp, #32]
 800bc74:	e07a      	b.n	800bd6c <_strtod_l+0x614>
 800bc76:	07e2      	lsls	r2, r4, #31
 800bc78:	d505      	bpl.n	800bc86 <_strtod_l+0x52e>
 800bc7a:	9b08      	ldr	r3, [sp, #32]
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fcba 	bl	80005f8 <__aeabi_dmul>
 800bc84:	2301      	movs	r3, #1
 800bc86:	9a08      	ldr	r2, [sp, #32]
 800bc88:	3208      	adds	r2, #8
 800bc8a:	3601      	adds	r6, #1
 800bc8c:	1064      	asrs	r4, r4, #1
 800bc8e:	9208      	str	r2, [sp, #32]
 800bc90:	e7cd      	b.n	800bc2e <_strtod_l+0x4d6>
 800bc92:	d0ed      	beq.n	800bc70 <_strtod_l+0x518>
 800bc94:	4264      	negs	r4, r4
 800bc96:	f014 020f 	ands.w	r2, r4, #15
 800bc9a:	d00a      	beq.n	800bcb2 <_strtod_l+0x55a>
 800bc9c:	4b12      	ldr	r3, [pc, #72]	@ (800bce8 <_strtod_l+0x590>)
 800bc9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bca2:	4650      	mov	r0, sl
 800bca4:	4659      	mov	r1, fp
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	f7f4 fdcf 	bl	800084c <__aeabi_ddiv>
 800bcae:	4682      	mov	sl, r0
 800bcb0:	468b      	mov	fp, r1
 800bcb2:	1124      	asrs	r4, r4, #4
 800bcb4:	d0dc      	beq.n	800bc70 <_strtod_l+0x518>
 800bcb6:	2c1f      	cmp	r4, #31
 800bcb8:	dd20      	ble.n	800bcfc <_strtod_l+0x5a4>
 800bcba:	2400      	movs	r4, #0
 800bcbc:	46a0      	mov	r8, r4
 800bcbe:	940a      	str	r4, [sp, #40]	@ 0x28
 800bcc0:	46a1      	mov	r9, r4
 800bcc2:	9a05      	ldr	r2, [sp, #20]
 800bcc4:	2322      	movs	r3, #34	@ 0x22
 800bcc6:	f04f 0a00 	mov.w	sl, #0
 800bcca:	f04f 0b00 	mov.w	fp, #0
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	e768      	b.n	800bba4 <_strtod_l+0x44c>
 800bcd2:	bf00      	nop
 800bcd4:	0800e022 	.word	0x0800e022
 800bcd8:	0800e2cc 	.word	0x0800e2cc
 800bcdc:	0800e01a 	.word	0x0800e01a
 800bce0:	0800e0fc 	.word	0x0800e0fc
 800bce4:	0800e0f8 	.word	0x0800e0f8
 800bce8:	0800e200 	.word	0x0800e200
 800bcec:	0800e1d8 	.word	0x0800e1d8
 800bcf0:	7ff00000 	.word	0x7ff00000
 800bcf4:	7ca00000 	.word	0x7ca00000
 800bcf8:	7fefffff 	.word	0x7fefffff
 800bcfc:	f014 0310 	ands.w	r3, r4, #16
 800bd00:	bf18      	it	ne
 800bd02:	236a      	movne	r3, #106	@ 0x6a
 800bd04:	4ea9      	ldr	r6, [pc, #676]	@ (800bfac <_strtod_l+0x854>)
 800bd06:	9308      	str	r3, [sp, #32]
 800bd08:	4650      	mov	r0, sl
 800bd0a:	4659      	mov	r1, fp
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	07e2      	lsls	r2, r4, #31
 800bd10:	d504      	bpl.n	800bd1c <_strtod_l+0x5c4>
 800bd12:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd16:	f7f4 fc6f 	bl	80005f8 <__aeabi_dmul>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	1064      	asrs	r4, r4, #1
 800bd1e:	f106 0608 	add.w	r6, r6, #8
 800bd22:	d1f4      	bne.n	800bd0e <_strtod_l+0x5b6>
 800bd24:	b10b      	cbz	r3, 800bd2a <_strtod_l+0x5d2>
 800bd26:	4682      	mov	sl, r0
 800bd28:	468b      	mov	fp, r1
 800bd2a:	9b08      	ldr	r3, [sp, #32]
 800bd2c:	b1b3      	cbz	r3, 800bd5c <_strtod_l+0x604>
 800bd2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bd32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	4659      	mov	r1, fp
 800bd3a:	dd0f      	ble.n	800bd5c <_strtod_l+0x604>
 800bd3c:	2b1f      	cmp	r3, #31
 800bd3e:	dd55      	ble.n	800bdec <_strtod_l+0x694>
 800bd40:	2b34      	cmp	r3, #52	@ 0x34
 800bd42:	bfde      	ittt	le
 800bd44:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800bd48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bd4c:	4093      	lslle	r3, r2
 800bd4e:	f04f 0a00 	mov.w	sl, #0
 800bd52:	bfcc      	ite	gt
 800bd54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bd58:	ea03 0b01 	andle.w	fp, r3, r1
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2300      	movs	r3, #0
 800bd60:	4650      	mov	r0, sl
 800bd62:	4659      	mov	r1, fp
 800bd64:	f7f4 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d1a6      	bne.n	800bcba <_strtod_l+0x562>
 800bd6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd72:	9805      	ldr	r0, [sp, #20]
 800bd74:	462b      	mov	r3, r5
 800bd76:	463a      	mov	r2, r7
 800bd78:	f7ff f8c6 	bl	800af08 <__s2b>
 800bd7c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f43f af05 	beq.w	800bb8e <_strtod_l+0x436>
 800bd84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd86:	2a00      	cmp	r2, #0
 800bd88:	eba9 0308 	sub.w	r3, r9, r8
 800bd8c:	bfa8      	it	ge
 800bd8e:	2300      	movge	r3, #0
 800bd90:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd92:	2400      	movs	r4, #0
 800bd94:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd98:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd9a:	46a0      	mov	r8, r4
 800bd9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd9e:	9805      	ldr	r0, [sp, #20]
 800bda0:	6859      	ldr	r1, [r3, #4]
 800bda2:	f7ff f809 	bl	800adb8 <_Balloc>
 800bda6:	4681      	mov	r9, r0
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	f43f aef4 	beq.w	800bb96 <_strtod_l+0x43e>
 800bdae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdb0:	691a      	ldr	r2, [r3, #16]
 800bdb2:	3202      	adds	r2, #2
 800bdb4:	f103 010c 	add.w	r1, r3, #12
 800bdb8:	0092      	lsls	r2, r2, #2
 800bdba:	300c      	adds	r0, #12
 800bdbc:	f001 fa6c 	bl	800d298 <memcpy>
 800bdc0:	ec4b ab10 	vmov	d0, sl, fp
 800bdc4:	9805      	ldr	r0, [sp, #20]
 800bdc6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bdc8:	a91b      	add	r1, sp, #108	@ 0x6c
 800bdca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bdce:	f7ff fbd7 	bl	800b580 <__d2b>
 800bdd2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	f43f aede 	beq.w	800bb96 <_strtod_l+0x43e>
 800bdda:	9805      	ldr	r0, [sp, #20]
 800bddc:	2101      	movs	r1, #1
 800bdde:	f7ff f929 	bl	800b034 <__i2b>
 800bde2:	4680      	mov	r8, r0
 800bde4:	b948      	cbnz	r0, 800bdfa <_strtod_l+0x6a2>
 800bde6:	f04f 0800 	mov.w	r8, #0
 800bdea:	e6d4      	b.n	800bb96 <_strtod_l+0x43e>
 800bdec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdf0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf4:	ea03 0a0a 	and.w	sl, r3, sl
 800bdf8:	e7b0      	b.n	800bd5c <_strtod_l+0x604>
 800bdfa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bdfc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	bfab      	itete	ge
 800be02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800be04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800be06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800be08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800be0a:	bfac      	ite	ge
 800be0c:	18ef      	addge	r7, r5, r3
 800be0e:	1b5e      	sublt	r6, r3, r5
 800be10:	9b08      	ldr	r3, [sp, #32]
 800be12:	1aed      	subs	r5, r5, r3
 800be14:	4415      	add	r5, r2
 800be16:	4b66      	ldr	r3, [pc, #408]	@ (800bfb0 <_strtod_l+0x858>)
 800be18:	3d01      	subs	r5, #1
 800be1a:	429d      	cmp	r5, r3
 800be1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800be20:	da50      	bge.n	800bec4 <_strtod_l+0x76c>
 800be22:	1b5b      	subs	r3, r3, r5
 800be24:	2b1f      	cmp	r3, #31
 800be26:	eba2 0203 	sub.w	r2, r2, r3
 800be2a:	f04f 0101 	mov.w	r1, #1
 800be2e:	dc3d      	bgt.n	800beac <_strtod_l+0x754>
 800be30:	fa01 f303 	lsl.w	r3, r1, r3
 800be34:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be36:	2300      	movs	r3, #0
 800be38:	9310      	str	r3, [sp, #64]	@ 0x40
 800be3a:	18bd      	adds	r5, r7, r2
 800be3c:	9b08      	ldr	r3, [sp, #32]
 800be3e:	42af      	cmp	r7, r5
 800be40:	4416      	add	r6, r2
 800be42:	441e      	add	r6, r3
 800be44:	463b      	mov	r3, r7
 800be46:	bfa8      	it	ge
 800be48:	462b      	movge	r3, r5
 800be4a:	42b3      	cmp	r3, r6
 800be4c:	bfa8      	it	ge
 800be4e:	4633      	movge	r3, r6
 800be50:	2b00      	cmp	r3, #0
 800be52:	bfc2      	ittt	gt
 800be54:	1aed      	subgt	r5, r5, r3
 800be56:	1af6      	subgt	r6, r6, r3
 800be58:	1aff      	subgt	r7, r7, r3
 800be5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	dd16      	ble.n	800be8e <_strtod_l+0x736>
 800be60:	4641      	mov	r1, r8
 800be62:	9805      	ldr	r0, [sp, #20]
 800be64:	461a      	mov	r2, r3
 800be66:	f7ff f9a5 	bl	800b1b4 <__pow5mult>
 800be6a:	4680      	mov	r8, r0
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d0ba      	beq.n	800bde6 <_strtod_l+0x68e>
 800be70:	4601      	mov	r1, r0
 800be72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be74:	9805      	ldr	r0, [sp, #20]
 800be76:	f7ff f8f3 	bl	800b060 <__multiply>
 800be7a:	900e      	str	r0, [sp, #56]	@ 0x38
 800be7c:	2800      	cmp	r0, #0
 800be7e:	f43f ae8a 	beq.w	800bb96 <_strtod_l+0x43e>
 800be82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be84:	9805      	ldr	r0, [sp, #20]
 800be86:	f7fe ffd7 	bl	800ae38 <_Bfree>
 800be8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800be8e:	2d00      	cmp	r5, #0
 800be90:	dc1d      	bgt.n	800bece <_strtod_l+0x776>
 800be92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd23      	ble.n	800bee0 <_strtod_l+0x788>
 800be98:	4649      	mov	r1, r9
 800be9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800be9c:	9805      	ldr	r0, [sp, #20]
 800be9e:	f7ff f989 	bl	800b1b4 <__pow5mult>
 800bea2:	4681      	mov	r9, r0
 800bea4:	b9e0      	cbnz	r0, 800bee0 <_strtod_l+0x788>
 800bea6:	f04f 0900 	mov.w	r9, #0
 800beaa:	e674      	b.n	800bb96 <_strtod_l+0x43e>
 800beac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800beb0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800beb4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800beb8:	35e2      	adds	r5, #226	@ 0xe2
 800beba:	fa01 f305 	lsl.w	r3, r1, r5
 800bebe:	9310      	str	r3, [sp, #64]	@ 0x40
 800bec0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bec2:	e7ba      	b.n	800be3a <_strtod_l+0x6e2>
 800bec4:	2300      	movs	r3, #0
 800bec6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bec8:	2301      	movs	r3, #1
 800beca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800becc:	e7b5      	b.n	800be3a <_strtod_l+0x6e2>
 800bece:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bed0:	9805      	ldr	r0, [sp, #20]
 800bed2:	462a      	mov	r2, r5
 800bed4:	f7ff f9c8 	bl	800b268 <__lshift>
 800bed8:	901a      	str	r0, [sp, #104]	@ 0x68
 800beda:	2800      	cmp	r0, #0
 800bedc:	d1d9      	bne.n	800be92 <_strtod_l+0x73a>
 800bede:	e65a      	b.n	800bb96 <_strtod_l+0x43e>
 800bee0:	2e00      	cmp	r6, #0
 800bee2:	dd07      	ble.n	800bef4 <_strtod_l+0x79c>
 800bee4:	4649      	mov	r1, r9
 800bee6:	9805      	ldr	r0, [sp, #20]
 800bee8:	4632      	mov	r2, r6
 800beea:	f7ff f9bd 	bl	800b268 <__lshift>
 800beee:	4681      	mov	r9, r0
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d0d8      	beq.n	800bea6 <_strtod_l+0x74e>
 800bef4:	2f00      	cmp	r7, #0
 800bef6:	dd08      	ble.n	800bf0a <_strtod_l+0x7b2>
 800bef8:	4641      	mov	r1, r8
 800befa:	9805      	ldr	r0, [sp, #20]
 800befc:	463a      	mov	r2, r7
 800befe:	f7ff f9b3 	bl	800b268 <__lshift>
 800bf02:	4680      	mov	r8, r0
 800bf04:	2800      	cmp	r0, #0
 800bf06:	f43f ae46 	beq.w	800bb96 <_strtod_l+0x43e>
 800bf0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf0c:	9805      	ldr	r0, [sp, #20]
 800bf0e:	464a      	mov	r2, r9
 800bf10:	f7ff fa32 	bl	800b378 <__mdiff>
 800bf14:	4604      	mov	r4, r0
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f ae3d 	beq.w	800bb96 <_strtod_l+0x43e>
 800bf1c:	68c3      	ldr	r3, [r0, #12]
 800bf1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf20:	2300      	movs	r3, #0
 800bf22:	60c3      	str	r3, [r0, #12]
 800bf24:	4641      	mov	r1, r8
 800bf26:	f7ff fa0b 	bl	800b340 <__mcmp>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	da46      	bge.n	800bfbc <_strtod_l+0x864>
 800bf2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf30:	ea53 030a 	orrs.w	r3, r3, sl
 800bf34:	d16c      	bne.n	800c010 <_strtod_l+0x8b8>
 800bf36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d168      	bne.n	800c010 <_strtod_l+0x8b8>
 800bf3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf42:	0d1b      	lsrs	r3, r3, #20
 800bf44:	051b      	lsls	r3, r3, #20
 800bf46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf4a:	d961      	bls.n	800c010 <_strtod_l+0x8b8>
 800bf4c:	6963      	ldr	r3, [r4, #20]
 800bf4e:	b913      	cbnz	r3, 800bf56 <_strtod_l+0x7fe>
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	dd5c      	ble.n	800c010 <_strtod_l+0x8b8>
 800bf56:	4621      	mov	r1, r4
 800bf58:	2201      	movs	r2, #1
 800bf5a:	9805      	ldr	r0, [sp, #20]
 800bf5c:	f7ff f984 	bl	800b268 <__lshift>
 800bf60:	4641      	mov	r1, r8
 800bf62:	4604      	mov	r4, r0
 800bf64:	f7ff f9ec 	bl	800b340 <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	dd51      	ble.n	800c010 <_strtod_l+0x8b8>
 800bf6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf70:	9a08      	ldr	r2, [sp, #32]
 800bf72:	0d1b      	lsrs	r3, r3, #20
 800bf74:	051b      	lsls	r3, r3, #20
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	d06b      	beq.n	800c052 <_strtod_l+0x8fa>
 800bf7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf7e:	d868      	bhi.n	800c052 <_strtod_l+0x8fa>
 800bf80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bf84:	f67f ae9d 	bls.w	800bcc2 <_strtod_l+0x56a>
 800bf88:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <_strtod_l+0x85c>)
 800bf8a:	4650      	mov	r0, sl
 800bf8c:	4659      	mov	r1, fp
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f7f4 fb32 	bl	80005f8 <__aeabi_dmul>
 800bf94:	4b08      	ldr	r3, [pc, #32]	@ (800bfb8 <_strtod_l+0x860>)
 800bf96:	400b      	ands	r3, r1
 800bf98:	4682      	mov	sl, r0
 800bf9a:	468b      	mov	fp, r1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f47f ae05 	bne.w	800bbac <_strtod_l+0x454>
 800bfa2:	9a05      	ldr	r2, [sp, #20]
 800bfa4:	2322      	movs	r3, #34	@ 0x22
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	e600      	b.n	800bbac <_strtod_l+0x454>
 800bfaa:	bf00      	nop
 800bfac:	0800e2f8 	.word	0x0800e2f8
 800bfb0:	fffffc02 	.word	0xfffffc02
 800bfb4:	39500000 	.word	0x39500000
 800bfb8:	7ff00000 	.word	0x7ff00000
 800bfbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bfc0:	d165      	bne.n	800c08e <_strtod_l+0x936>
 800bfc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bfc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfc8:	b35a      	cbz	r2, 800c022 <_strtod_l+0x8ca>
 800bfca:	4a9f      	ldr	r2, [pc, #636]	@ (800c248 <_strtod_l+0xaf0>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d12b      	bne.n	800c028 <_strtod_l+0x8d0>
 800bfd0:	9b08      	ldr	r3, [sp, #32]
 800bfd2:	4651      	mov	r1, sl
 800bfd4:	b303      	cbz	r3, 800c018 <_strtod_l+0x8c0>
 800bfd6:	4b9d      	ldr	r3, [pc, #628]	@ (800c24c <_strtod_l+0xaf4>)
 800bfd8:	465a      	mov	r2, fp
 800bfda:	4013      	ands	r3, r2
 800bfdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bfe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfe4:	d81b      	bhi.n	800c01e <_strtod_l+0x8c6>
 800bfe6:	0d1b      	lsrs	r3, r3, #20
 800bfe8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bfec:	fa02 f303 	lsl.w	r3, r2, r3
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d119      	bne.n	800c028 <_strtod_l+0x8d0>
 800bff4:	4b96      	ldr	r3, [pc, #600]	@ (800c250 <_strtod_l+0xaf8>)
 800bff6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d102      	bne.n	800c002 <_strtod_l+0x8aa>
 800bffc:	3101      	adds	r1, #1
 800bffe:	f43f adca 	beq.w	800bb96 <_strtod_l+0x43e>
 800c002:	4b92      	ldr	r3, [pc, #584]	@ (800c24c <_strtod_l+0xaf4>)
 800c004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c006:	401a      	ands	r2, r3
 800c008:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c00c:	f04f 0a00 	mov.w	sl, #0
 800c010:	9b08      	ldr	r3, [sp, #32]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1b8      	bne.n	800bf88 <_strtod_l+0x830>
 800c016:	e5c9      	b.n	800bbac <_strtod_l+0x454>
 800c018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c01c:	e7e8      	b.n	800bff0 <_strtod_l+0x898>
 800c01e:	4613      	mov	r3, r2
 800c020:	e7e6      	b.n	800bff0 <_strtod_l+0x898>
 800c022:	ea53 030a 	orrs.w	r3, r3, sl
 800c026:	d0a1      	beq.n	800bf6c <_strtod_l+0x814>
 800c028:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c02a:	b1db      	cbz	r3, 800c064 <_strtod_l+0x90c>
 800c02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c02e:	4213      	tst	r3, r2
 800c030:	d0ee      	beq.n	800c010 <_strtod_l+0x8b8>
 800c032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c034:	9a08      	ldr	r2, [sp, #32]
 800c036:	4650      	mov	r0, sl
 800c038:	4659      	mov	r1, fp
 800c03a:	b1bb      	cbz	r3, 800c06c <_strtod_l+0x914>
 800c03c:	f7ff fb6e 	bl	800b71c <sulp>
 800c040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c044:	ec53 2b10 	vmov	r2, r3, d0
 800c048:	f7f4 f920 	bl	800028c <__adddf3>
 800c04c:	4682      	mov	sl, r0
 800c04e:	468b      	mov	fp, r1
 800c050:	e7de      	b.n	800c010 <_strtod_l+0x8b8>
 800c052:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c056:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c05a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c05e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c062:	e7d5      	b.n	800c010 <_strtod_l+0x8b8>
 800c064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c066:	ea13 0f0a 	tst.w	r3, sl
 800c06a:	e7e1      	b.n	800c030 <_strtod_l+0x8d8>
 800c06c:	f7ff fb56 	bl	800b71c <sulp>
 800c070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c074:	ec53 2b10 	vmov	r2, r3, d0
 800c078:	f7f4 f906 	bl	8000288 <__aeabi_dsub>
 800c07c:	2200      	movs	r2, #0
 800c07e:	2300      	movs	r3, #0
 800c080:	4682      	mov	sl, r0
 800c082:	468b      	mov	fp, r1
 800c084:	f7f4 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d0c1      	beq.n	800c010 <_strtod_l+0x8b8>
 800c08c:	e619      	b.n	800bcc2 <_strtod_l+0x56a>
 800c08e:	4641      	mov	r1, r8
 800c090:	4620      	mov	r0, r4
 800c092:	f7ff facd 	bl	800b630 <__ratio>
 800c096:	ec57 6b10 	vmov	r6, r7, d0
 800c09a:	2200      	movs	r2, #0
 800c09c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	4639      	mov	r1, r7
 800c0a4:	f7f4 fd24 	bl	8000af0 <__aeabi_dcmple>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d06f      	beq.n	800c18c <_strtod_l+0xa34>
 800c0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d17a      	bne.n	800c1a8 <_strtod_l+0xa50>
 800c0b2:	f1ba 0f00 	cmp.w	sl, #0
 800c0b6:	d158      	bne.n	800c16a <_strtod_l+0xa12>
 800c0b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d15a      	bne.n	800c178 <_strtod_l+0xa20>
 800c0c2:	4b64      	ldr	r3, [pc, #400]	@ (800c254 <_strtod_l+0xafc>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	f7f4 fd07 	bl	8000adc <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d159      	bne.n	800c186 <_strtod_l+0xa2e>
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	4b60      	ldr	r3, [pc, #384]	@ (800c258 <_strtod_l+0xb00>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f7f4 fa8d 	bl	80005f8 <__aeabi_dmul>
 800c0de:	4606      	mov	r6, r0
 800c0e0:	460f      	mov	r7, r1
 800c0e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c0e6:	9606      	str	r6, [sp, #24]
 800c0e8:	9307      	str	r3, [sp, #28]
 800c0ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0ee:	4d57      	ldr	r5, [pc, #348]	@ (800c24c <_strtod_l+0xaf4>)
 800c0f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0f6:	401d      	ands	r5, r3
 800c0f8:	4b58      	ldr	r3, [pc, #352]	@ (800c25c <_strtod_l+0xb04>)
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	f040 80b2 	bne.w	800c264 <_strtod_l+0xb0c>
 800c100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c102:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c106:	ec4b ab10 	vmov	d0, sl, fp
 800c10a:	f7ff f9c9 	bl	800b4a0 <__ulp>
 800c10e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c112:	ec51 0b10 	vmov	r0, r1, d0
 800c116:	f7f4 fa6f 	bl	80005f8 <__aeabi_dmul>
 800c11a:	4652      	mov	r2, sl
 800c11c:	465b      	mov	r3, fp
 800c11e:	f7f4 f8b5 	bl	800028c <__adddf3>
 800c122:	460b      	mov	r3, r1
 800c124:	4949      	ldr	r1, [pc, #292]	@ (800c24c <_strtod_l+0xaf4>)
 800c126:	4a4e      	ldr	r2, [pc, #312]	@ (800c260 <_strtod_l+0xb08>)
 800c128:	4019      	ands	r1, r3
 800c12a:	4291      	cmp	r1, r2
 800c12c:	4682      	mov	sl, r0
 800c12e:	d942      	bls.n	800c1b6 <_strtod_l+0xa5e>
 800c130:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c132:	4b47      	ldr	r3, [pc, #284]	@ (800c250 <_strtod_l+0xaf8>)
 800c134:	429a      	cmp	r2, r3
 800c136:	d103      	bne.n	800c140 <_strtod_l+0x9e8>
 800c138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c13a:	3301      	adds	r3, #1
 800c13c:	f43f ad2b 	beq.w	800bb96 <_strtod_l+0x43e>
 800c140:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c250 <_strtod_l+0xaf8>
 800c144:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c148:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c14a:	9805      	ldr	r0, [sp, #20]
 800c14c:	f7fe fe74 	bl	800ae38 <_Bfree>
 800c150:	9805      	ldr	r0, [sp, #20]
 800c152:	4649      	mov	r1, r9
 800c154:	f7fe fe70 	bl	800ae38 <_Bfree>
 800c158:	9805      	ldr	r0, [sp, #20]
 800c15a:	4641      	mov	r1, r8
 800c15c:	f7fe fe6c 	bl	800ae38 <_Bfree>
 800c160:	9805      	ldr	r0, [sp, #20]
 800c162:	4621      	mov	r1, r4
 800c164:	f7fe fe68 	bl	800ae38 <_Bfree>
 800c168:	e618      	b.n	800bd9c <_strtod_l+0x644>
 800c16a:	f1ba 0f01 	cmp.w	sl, #1
 800c16e:	d103      	bne.n	800c178 <_strtod_l+0xa20>
 800c170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c172:	2b00      	cmp	r3, #0
 800c174:	f43f ada5 	beq.w	800bcc2 <_strtod_l+0x56a>
 800c178:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c228 <_strtod_l+0xad0>
 800c17c:	4f35      	ldr	r7, [pc, #212]	@ (800c254 <_strtod_l+0xafc>)
 800c17e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c182:	2600      	movs	r6, #0
 800c184:	e7b1      	b.n	800c0ea <_strtod_l+0x992>
 800c186:	4f34      	ldr	r7, [pc, #208]	@ (800c258 <_strtod_l+0xb00>)
 800c188:	2600      	movs	r6, #0
 800c18a:	e7aa      	b.n	800c0e2 <_strtod_l+0x98a>
 800c18c:	4b32      	ldr	r3, [pc, #200]	@ (800c258 <_strtod_l+0xb00>)
 800c18e:	4630      	mov	r0, r6
 800c190:	4639      	mov	r1, r7
 800c192:	2200      	movs	r2, #0
 800c194:	f7f4 fa30 	bl	80005f8 <__aeabi_dmul>
 800c198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c19a:	4606      	mov	r6, r0
 800c19c:	460f      	mov	r7, r1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d09f      	beq.n	800c0e2 <_strtod_l+0x98a>
 800c1a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c1a6:	e7a0      	b.n	800c0ea <_strtod_l+0x992>
 800c1a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c230 <_strtod_l+0xad8>
 800c1ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1b0:	ec57 6b17 	vmov	r6, r7, d7
 800c1b4:	e799      	b.n	800c0ea <_strtod_l+0x992>
 800c1b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c1ba:	9b08      	ldr	r3, [sp, #32]
 800c1bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1c1      	bne.n	800c148 <_strtod_l+0x9f0>
 800c1c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1c8:	0d1b      	lsrs	r3, r3, #20
 800c1ca:	051b      	lsls	r3, r3, #20
 800c1cc:	429d      	cmp	r5, r3
 800c1ce:	d1bb      	bne.n	800c148 <_strtod_l+0x9f0>
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	4639      	mov	r1, r7
 800c1d4:	f7f4 fd70 	bl	8000cb8 <__aeabi_d2lz>
 800c1d8:	f7f4 f9e0 	bl	800059c <__aeabi_l2d>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	f7f4 f850 	bl	8000288 <__aeabi_dsub>
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c1f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c1f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1f6:	ea46 060a 	orr.w	r6, r6, sl
 800c1fa:	431e      	orrs	r6, r3
 800c1fc:	d06f      	beq.n	800c2de <_strtod_l+0xb86>
 800c1fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800c238 <_strtod_l+0xae0>)
 800c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c204:	f7f4 fc6a 	bl	8000adc <__aeabi_dcmplt>
 800c208:	2800      	cmp	r0, #0
 800c20a:	f47f accf 	bne.w	800bbac <_strtod_l+0x454>
 800c20e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c240 <_strtod_l+0xae8>)
 800c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c218:	f7f4 fc7e 	bl	8000b18 <__aeabi_dcmpgt>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d093      	beq.n	800c148 <_strtod_l+0x9f0>
 800c220:	e4c4      	b.n	800bbac <_strtod_l+0x454>
 800c222:	bf00      	nop
 800c224:	f3af 8000 	nop.w
 800c228:	00000000 	.word	0x00000000
 800c22c:	bff00000 	.word	0xbff00000
 800c230:	00000000 	.word	0x00000000
 800c234:	3ff00000 	.word	0x3ff00000
 800c238:	94a03595 	.word	0x94a03595
 800c23c:	3fdfffff 	.word	0x3fdfffff
 800c240:	35afe535 	.word	0x35afe535
 800c244:	3fe00000 	.word	0x3fe00000
 800c248:	000fffff 	.word	0x000fffff
 800c24c:	7ff00000 	.word	0x7ff00000
 800c250:	7fefffff 	.word	0x7fefffff
 800c254:	3ff00000 	.word	0x3ff00000
 800c258:	3fe00000 	.word	0x3fe00000
 800c25c:	7fe00000 	.word	0x7fe00000
 800c260:	7c9fffff 	.word	0x7c9fffff
 800c264:	9b08      	ldr	r3, [sp, #32]
 800c266:	b323      	cbz	r3, 800c2b2 <_strtod_l+0xb5a>
 800c268:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c26c:	d821      	bhi.n	800c2b2 <_strtod_l+0xb5a>
 800c26e:	a328      	add	r3, pc, #160	@ (adr r3, 800c310 <_strtod_l+0xbb8>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	4630      	mov	r0, r6
 800c276:	4639      	mov	r1, r7
 800c278:	f7f4 fc3a 	bl	8000af0 <__aeabi_dcmple>
 800c27c:	b1a0      	cbz	r0, 800c2a8 <_strtod_l+0xb50>
 800c27e:	4639      	mov	r1, r7
 800c280:	4630      	mov	r0, r6
 800c282:	f7f4 fc91 	bl	8000ba8 <__aeabi_d2uiz>
 800c286:	2801      	cmp	r0, #1
 800c288:	bf38      	it	cc
 800c28a:	2001      	movcc	r0, #1
 800c28c:	f7f4 f93a 	bl	8000504 <__aeabi_ui2d>
 800c290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c292:	4606      	mov	r6, r0
 800c294:	460f      	mov	r7, r1
 800c296:	b9fb      	cbnz	r3, 800c2d8 <_strtod_l+0xb80>
 800c298:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c29c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c29e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c2a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c2a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c2a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c2aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c2ae:	1b5b      	subs	r3, r3, r5
 800c2b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c2b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c2b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c2ba:	f7ff f8f1 	bl	800b4a0 <__ulp>
 800c2be:	4650      	mov	r0, sl
 800c2c0:	ec53 2b10 	vmov	r2, r3, d0
 800c2c4:	4659      	mov	r1, fp
 800c2c6:	f7f4 f997 	bl	80005f8 <__aeabi_dmul>
 800c2ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c2ce:	f7f3 ffdd 	bl	800028c <__adddf3>
 800c2d2:	4682      	mov	sl, r0
 800c2d4:	468b      	mov	fp, r1
 800c2d6:	e770      	b.n	800c1ba <_strtod_l+0xa62>
 800c2d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c2dc:	e7e0      	b.n	800c2a0 <_strtod_l+0xb48>
 800c2de:	a30e      	add	r3, pc, #56	@ (adr r3, 800c318 <_strtod_l+0xbc0>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f4 fbfa 	bl	8000adc <__aeabi_dcmplt>
 800c2e8:	e798      	b.n	800c21c <_strtod_l+0xac4>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2f2:	6013      	str	r3, [r2, #0]
 800c2f4:	f7ff ba6d 	b.w	800b7d2 <_strtod_l+0x7a>
 800c2f8:	2a65      	cmp	r2, #101	@ 0x65
 800c2fa:	f43f ab66 	beq.w	800b9ca <_strtod_l+0x272>
 800c2fe:	2a45      	cmp	r2, #69	@ 0x45
 800c300:	f43f ab63 	beq.w	800b9ca <_strtod_l+0x272>
 800c304:	2301      	movs	r3, #1
 800c306:	f7ff bb9e 	b.w	800ba46 <_strtod_l+0x2ee>
 800c30a:	bf00      	nop
 800c30c:	f3af 8000 	nop.w
 800c310:	ffc00000 	.word	0xffc00000
 800c314:	41dfffff 	.word	0x41dfffff
 800c318:	94a03595 	.word	0x94a03595
 800c31c:	3fcfffff 	.word	0x3fcfffff

0800c320 <_strtod_r>:
 800c320:	4b01      	ldr	r3, [pc, #4]	@ (800c328 <_strtod_r+0x8>)
 800c322:	f7ff ba19 	b.w	800b758 <_strtod_l>
 800c326:	bf00      	nop
 800c328:	200000d4 	.word	0x200000d4

0800c32c <__ssputs_r>:
 800c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c330:	688e      	ldr	r6, [r1, #8]
 800c332:	461f      	mov	r7, r3
 800c334:	42be      	cmp	r6, r7
 800c336:	680b      	ldr	r3, [r1, #0]
 800c338:	4682      	mov	sl, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	4690      	mov	r8, r2
 800c33e:	d82d      	bhi.n	800c39c <__ssputs_r+0x70>
 800c340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c344:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c348:	d026      	beq.n	800c398 <__ssputs_r+0x6c>
 800c34a:	6965      	ldr	r5, [r4, #20]
 800c34c:	6909      	ldr	r1, [r1, #16]
 800c34e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c352:	eba3 0901 	sub.w	r9, r3, r1
 800c356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c35a:	1c7b      	adds	r3, r7, #1
 800c35c:	444b      	add	r3, r9
 800c35e:	106d      	asrs	r5, r5, #1
 800c360:	429d      	cmp	r5, r3
 800c362:	bf38      	it	cc
 800c364:	461d      	movcc	r5, r3
 800c366:	0553      	lsls	r3, r2, #21
 800c368:	d527      	bpl.n	800c3ba <__ssputs_r+0x8e>
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7fe fc98 	bl	800aca0 <_malloc_r>
 800c370:	4606      	mov	r6, r0
 800c372:	b360      	cbz	r0, 800c3ce <__ssputs_r+0xa2>
 800c374:	6921      	ldr	r1, [r4, #16]
 800c376:	464a      	mov	r2, r9
 800c378:	f000 ff8e 	bl	800d298 <memcpy>
 800c37c:	89a3      	ldrh	r3, [r4, #12]
 800c37e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	6126      	str	r6, [r4, #16]
 800c38a:	6165      	str	r5, [r4, #20]
 800c38c:	444e      	add	r6, r9
 800c38e:	eba5 0509 	sub.w	r5, r5, r9
 800c392:	6026      	str	r6, [r4, #0]
 800c394:	60a5      	str	r5, [r4, #8]
 800c396:	463e      	mov	r6, r7
 800c398:	42be      	cmp	r6, r7
 800c39a:	d900      	bls.n	800c39e <__ssputs_r+0x72>
 800c39c:	463e      	mov	r6, r7
 800c39e:	6820      	ldr	r0, [r4, #0]
 800c3a0:	4632      	mov	r2, r6
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	f000 ff3c 	bl	800d220 <memmove>
 800c3a8:	68a3      	ldr	r3, [r4, #8]
 800c3aa:	1b9b      	subs	r3, r3, r6
 800c3ac:	60a3      	str	r3, [r4, #8]
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	4433      	add	r3, r6
 800c3b2:	6023      	str	r3, [r4, #0]
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	f001 fae9 	bl	800d992 <_realloc_r>
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d1e0      	bne.n	800c388 <__ssputs_r+0x5c>
 800c3c6:	6921      	ldr	r1, [r4, #16]
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	f7fe fbf5 	bl	800abb8 <_free_r>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	f8ca 3000 	str.w	r3, [sl]
 800c3d4:	89a3      	ldrh	r3, [r4, #12]
 800c3d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3da:	81a3      	strh	r3, [r4, #12]
 800c3dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3e0:	e7e9      	b.n	800c3b6 <__ssputs_r+0x8a>
	...

0800c3e4 <_svfiprintf_r>:
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	4698      	mov	r8, r3
 800c3ea:	898b      	ldrh	r3, [r1, #12]
 800c3ec:	061b      	lsls	r3, r3, #24
 800c3ee:	b09d      	sub	sp, #116	@ 0x74
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	460d      	mov	r5, r1
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	d510      	bpl.n	800c41a <_svfiprintf_r+0x36>
 800c3f8:	690b      	ldr	r3, [r1, #16]
 800c3fa:	b973      	cbnz	r3, 800c41a <_svfiprintf_r+0x36>
 800c3fc:	2140      	movs	r1, #64	@ 0x40
 800c3fe:	f7fe fc4f 	bl	800aca0 <_malloc_r>
 800c402:	6028      	str	r0, [r5, #0]
 800c404:	6128      	str	r0, [r5, #16]
 800c406:	b930      	cbnz	r0, 800c416 <_svfiprintf_r+0x32>
 800c408:	230c      	movs	r3, #12
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c410:	b01d      	add	sp, #116	@ 0x74
 800c412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c416:	2340      	movs	r3, #64	@ 0x40
 800c418:	616b      	str	r3, [r5, #20]
 800c41a:	2300      	movs	r3, #0
 800c41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c41e:	2320      	movs	r3, #32
 800c420:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c424:	f8cd 800c 	str.w	r8, [sp, #12]
 800c428:	2330      	movs	r3, #48	@ 0x30
 800c42a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c5c8 <_svfiprintf_r+0x1e4>
 800c42e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c432:	f04f 0901 	mov.w	r9, #1
 800c436:	4623      	mov	r3, r4
 800c438:	469a      	mov	sl, r3
 800c43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c43e:	b10a      	cbz	r2, 800c444 <_svfiprintf_r+0x60>
 800c440:	2a25      	cmp	r2, #37	@ 0x25
 800c442:	d1f9      	bne.n	800c438 <_svfiprintf_r+0x54>
 800c444:	ebba 0b04 	subs.w	fp, sl, r4
 800c448:	d00b      	beq.n	800c462 <_svfiprintf_r+0x7e>
 800c44a:	465b      	mov	r3, fp
 800c44c:	4622      	mov	r2, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff ff6b 	bl	800c32c <__ssputs_r>
 800c456:	3001      	adds	r0, #1
 800c458:	f000 80a7 	beq.w	800c5aa <_svfiprintf_r+0x1c6>
 800c45c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c45e:	445a      	add	r2, fp
 800c460:	9209      	str	r2, [sp, #36]	@ 0x24
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 809f 	beq.w	800c5aa <_svfiprintf_r+0x1c6>
 800c46c:	2300      	movs	r3, #0
 800c46e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c476:	f10a 0a01 	add.w	sl, sl, #1
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c482:	931a      	str	r3, [sp, #104]	@ 0x68
 800c484:	4654      	mov	r4, sl
 800c486:	2205      	movs	r2, #5
 800c488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c48c:	484e      	ldr	r0, [pc, #312]	@ (800c5c8 <_svfiprintf_r+0x1e4>)
 800c48e:	f7f3 fe9f 	bl	80001d0 <memchr>
 800c492:	9a04      	ldr	r2, [sp, #16]
 800c494:	b9d8      	cbnz	r0, 800c4ce <_svfiprintf_r+0xea>
 800c496:	06d0      	lsls	r0, r2, #27
 800c498:	bf44      	itt	mi
 800c49a:	2320      	movmi	r3, #32
 800c49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4a0:	0711      	lsls	r1, r2, #28
 800c4a2:	bf44      	itt	mi
 800c4a4:	232b      	movmi	r3, #43	@ 0x2b
 800c4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4b0:	d015      	beq.n	800c4de <_svfiprintf_r+0xfa>
 800c4b2:	9a07      	ldr	r2, [sp, #28]
 800c4b4:	4654      	mov	r4, sl
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	f04f 0c0a 	mov.w	ip, #10
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4c2:	3b30      	subs	r3, #48	@ 0x30
 800c4c4:	2b09      	cmp	r3, #9
 800c4c6:	d94b      	bls.n	800c560 <_svfiprintf_r+0x17c>
 800c4c8:	b1b0      	cbz	r0, 800c4f8 <_svfiprintf_r+0x114>
 800c4ca:	9207      	str	r2, [sp, #28]
 800c4cc:	e014      	b.n	800c4f8 <_svfiprintf_r+0x114>
 800c4ce:	eba0 0308 	sub.w	r3, r0, r8
 800c4d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	46a2      	mov	sl, r4
 800c4dc:	e7d2      	b.n	800c484 <_svfiprintf_r+0xa0>
 800c4de:	9b03      	ldr	r3, [sp, #12]
 800c4e0:	1d19      	adds	r1, r3, #4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	9103      	str	r1, [sp, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bfbb      	ittet	lt
 800c4ea:	425b      	neglt	r3, r3
 800c4ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c4f0:	9307      	strge	r3, [sp, #28]
 800c4f2:	9307      	strlt	r3, [sp, #28]
 800c4f4:	bfb8      	it	lt
 800c4f6:	9204      	strlt	r2, [sp, #16]
 800c4f8:	7823      	ldrb	r3, [r4, #0]
 800c4fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4fc:	d10a      	bne.n	800c514 <_svfiprintf_r+0x130>
 800c4fe:	7863      	ldrb	r3, [r4, #1]
 800c500:	2b2a      	cmp	r3, #42	@ 0x2a
 800c502:	d132      	bne.n	800c56a <_svfiprintf_r+0x186>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	9203      	str	r2, [sp, #12]
 800c50c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c510:	3402      	adds	r4, #2
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c5d8 <_svfiprintf_r+0x1f4>
 800c518:	7821      	ldrb	r1, [r4, #0]
 800c51a:	2203      	movs	r2, #3
 800c51c:	4650      	mov	r0, sl
 800c51e:	f7f3 fe57 	bl	80001d0 <memchr>
 800c522:	b138      	cbz	r0, 800c534 <_svfiprintf_r+0x150>
 800c524:	9b04      	ldr	r3, [sp, #16]
 800c526:	eba0 000a 	sub.w	r0, r0, sl
 800c52a:	2240      	movs	r2, #64	@ 0x40
 800c52c:	4082      	lsls	r2, r0
 800c52e:	4313      	orrs	r3, r2
 800c530:	3401      	adds	r4, #1
 800c532:	9304      	str	r3, [sp, #16]
 800c534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c538:	4824      	ldr	r0, [pc, #144]	@ (800c5cc <_svfiprintf_r+0x1e8>)
 800c53a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c53e:	2206      	movs	r2, #6
 800c540:	f7f3 fe46 	bl	80001d0 <memchr>
 800c544:	2800      	cmp	r0, #0
 800c546:	d036      	beq.n	800c5b6 <_svfiprintf_r+0x1d2>
 800c548:	4b21      	ldr	r3, [pc, #132]	@ (800c5d0 <_svfiprintf_r+0x1ec>)
 800c54a:	bb1b      	cbnz	r3, 800c594 <_svfiprintf_r+0x1b0>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	3307      	adds	r3, #7
 800c550:	f023 0307 	bic.w	r3, r3, #7
 800c554:	3308      	adds	r3, #8
 800c556:	9303      	str	r3, [sp, #12]
 800c558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c55a:	4433      	add	r3, r6
 800c55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c55e:	e76a      	b.n	800c436 <_svfiprintf_r+0x52>
 800c560:	fb0c 3202 	mla	r2, ip, r2, r3
 800c564:	460c      	mov	r4, r1
 800c566:	2001      	movs	r0, #1
 800c568:	e7a8      	b.n	800c4bc <_svfiprintf_r+0xd8>
 800c56a:	2300      	movs	r3, #0
 800c56c:	3401      	adds	r4, #1
 800c56e:	9305      	str	r3, [sp, #20]
 800c570:	4619      	mov	r1, r3
 800c572:	f04f 0c0a 	mov.w	ip, #10
 800c576:	4620      	mov	r0, r4
 800c578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c57c:	3a30      	subs	r2, #48	@ 0x30
 800c57e:	2a09      	cmp	r2, #9
 800c580:	d903      	bls.n	800c58a <_svfiprintf_r+0x1a6>
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0c6      	beq.n	800c514 <_svfiprintf_r+0x130>
 800c586:	9105      	str	r1, [sp, #20]
 800c588:	e7c4      	b.n	800c514 <_svfiprintf_r+0x130>
 800c58a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c58e:	4604      	mov	r4, r0
 800c590:	2301      	movs	r3, #1
 800c592:	e7f0      	b.n	800c576 <_svfiprintf_r+0x192>
 800c594:	ab03      	add	r3, sp, #12
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	462a      	mov	r2, r5
 800c59a:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d4 <_svfiprintf_r+0x1f0>)
 800c59c:	a904      	add	r1, sp, #16
 800c59e:	4638      	mov	r0, r7
 800c5a0:	f7fc fc8e 	bl	8008ec0 <_printf_float>
 800c5a4:	1c42      	adds	r2, r0, #1
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	d1d6      	bne.n	800c558 <_svfiprintf_r+0x174>
 800c5aa:	89ab      	ldrh	r3, [r5, #12]
 800c5ac:	065b      	lsls	r3, r3, #25
 800c5ae:	f53f af2d 	bmi.w	800c40c <_svfiprintf_r+0x28>
 800c5b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5b4:	e72c      	b.n	800c410 <_svfiprintf_r+0x2c>
 800c5b6:	ab03      	add	r3, sp, #12
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	4b05      	ldr	r3, [pc, #20]	@ (800c5d4 <_svfiprintf_r+0x1f0>)
 800c5be:	a904      	add	r1, sp, #16
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	f7fc ff15 	bl	80093f0 <_printf_i>
 800c5c6:	e7ed      	b.n	800c5a4 <_svfiprintf_r+0x1c0>
 800c5c8:	0800e320 	.word	0x0800e320
 800c5cc:	0800e32a 	.word	0x0800e32a
 800c5d0:	08008ec1 	.word	0x08008ec1
 800c5d4:	0800c32d 	.word	0x0800c32d
 800c5d8:	0800e326 	.word	0x0800e326

0800c5dc <_sungetc_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	1c4b      	adds	r3, r1, #1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	d103      	bne.n	800c5ec <_sungetc_r+0x10>
 800c5e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
 800c5ec:	8993      	ldrh	r3, [r2, #12]
 800c5ee:	f023 0320 	bic.w	r3, r3, #32
 800c5f2:	8193      	strh	r3, [r2, #12]
 800c5f4:	6853      	ldr	r3, [r2, #4]
 800c5f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c5f8:	b2cd      	uxtb	r5, r1
 800c5fa:	b18a      	cbz	r2, 800c620 <_sungetc_r+0x44>
 800c5fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c5fe:	429a      	cmp	r2, r3
 800c600:	dd08      	ble.n	800c614 <_sungetc_r+0x38>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	1e5a      	subs	r2, r3, #1
 800c606:	6022      	str	r2, [r4, #0]
 800c608:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c60c:	6863      	ldr	r3, [r4, #4]
 800c60e:	3301      	adds	r3, #1
 800c610:	6063      	str	r3, [r4, #4]
 800c612:	e7e9      	b.n	800c5e8 <_sungetc_r+0xc>
 800c614:	4621      	mov	r1, r4
 800c616:	f000 fd34 	bl	800d082 <__submore>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d0f1      	beq.n	800c602 <_sungetc_r+0x26>
 800c61e:	e7e1      	b.n	800c5e4 <_sungetc_r+0x8>
 800c620:	6921      	ldr	r1, [r4, #16]
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	b141      	cbz	r1, 800c638 <_sungetc_r+0x5c>
 800c626:	4291      	cmp	r1, r2
 800c628:	d206      	bcs.n	800c638 <_sungetc_r+0x5c>
 800c62a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c62e:	42a9      	cmp	r1, r5
 800c630:	d102      	bne.n	800c638 <_sungetc_r+0x5c>
 800c632:	3a01      	subs	r2, #1
 800c634:	6022      	str	r2, [r4, #0]
 800c636:	e7ea      	b.n	800c60e <_sungetc_r+0x32>
 800c638:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c63c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c640:	6363      	str	r3, [r4, #52]	@ 0x34
 800c642:	2303      	movs	r3, #3
 800c644:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c646:	4623      	mov	r3, r4
 800c648:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	2301      	movs	r3, #1
 800c650:	e7de      	b.n	800c610 <_sungetc_r+0x34>

0800c652 <__ssrefill_r>:
 800c652:	b510      	push	{r4, lr}
 800c654:	460c      	mov	r4, r1
 800c656:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c658:	b169      	cbz	r1, 800c676 <__ssrefill_r+0x24>
 800c65a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c65e:	4299      	cmp	r1, r3
 800c660:	d001      	beq.n	800c666 <__ssrefill_r+0x14>
 800c662:	f7fe faa9 	bl	800abb8 <_free_r>
 800c666:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c668:	6063      	str	r3, [r4, #4]
 800c66a:	2000      	movs	r0, #0
 800c66c:	6360      	str	r0, [r4, #52]	@ 0x34
 800c66e:	b113      	cbz	r3, 800c676 <__ssrefill_r+0x24>
 800c670:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	bd10      	pop	{r4, pc}
 800c676:	6923      	ldr	r3, [r4, #16]
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	2300      	movs	r3, #0
 800c67c:	6063      	str	r3, [r4, #4]
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	f043 0320 	orr.w	r3, r3, #32
 800c684:	81a3      	strh	r3, [r4, #12]
 800c686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c68a:	e7f3      	b.n	800c674 <__ssrefill_r+0x22>

0800c68c <__ssvfiscanf_r>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	460c      	mov	r4, r1
 800c692:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c696:	2100      	movs	r1, #0
 800c698:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c69c:	49a5      	ldr	r1, [pc, #660]	@ (800c934 <__ssvfiscanf_r+0x2a8>)
 800c69e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c6a0:	f10d 0804 	add.w	r8, sp, #4
 800c6a4:	49a4      	ldr	r1, [pc, #656]	@ (800c938 <__ssvfiscanf_r+0x2ac>)
 800c6a6:	4fa5      	ldr	r7, [pc, #660]	@ (800c93c <__ssvfiscanf_r+0x2b0>)
 800c6a8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	7813      	ldrb	r3, [r2, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 8158 	beq.w	800c96a <__ssvfiscanf_r+0x2de>
 800c6ba:	5cf9      	ldrb	r1, [r7, r3]
 800c6bc:	f011 0108 	ands.w	r1, r1, #8
 800c6c0:	f102 0501 	add.w	r5, r2, #1
 800c6c4:	d019      	beq.n	800c6fa <__ssvfiscanf_r+0x6e>
 800c6c6:	6863      	ldr	r3, [r4, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	dd0f      	ble.n	800c6ec <__ssvfiscanf_r+0x60>
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	5cba      	ldrb	r2, [r7, r2]
 800c6d2:	0712      	lsls	r2, r2, #28
 800c6d4:	d401      	bmi.n	800c6da <__ssvfiscanf_r+0x4e>
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	e7eb      	b.n	800c6b2 <__ssvfiscanf_r+0x26>
 800c6da:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c6dc:	3201      	adds	r2, #1
 800c6de:	9245      	str	r2, [sp, #276]	@ 0x114
 800c6e0:	6862      	ldr	r2, [r4, #4]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	3a01      	subs	r2, #1
 800c6e6:	6062      	str	r2, [r4, #4]
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	e7ec      	b.n	800c6c6 <__ssvfiscanf_r+0x3a>
 800c6ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4798      	blx	r3
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d0e9      	beq.n	800c6cc <__ssvfiscanf_r+0x40>
 800c6f8:	e7ed      	b.n	800c6d6 <__ssvfiscanf_r+0x4a>
 800c6fa:	2b25      	cmp	r3, #37	@ 0x25
 800c6fc:	d012      	beq.n	800c724 <__ssvfiscanf_r+0x98>
 800c6fe:	4699      	mov	r9, r3
 800c700:	6863      	ldr	r3, [r4, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	f340 8093 	ble.w	800c82e <__ssvfiscanf_r+0x1a2>
 800c708:	6822      	ldr	r2, [r4, #0]
 800c70a:	7813      	ldrb	r3, [r2, #0]
 800c70c:	454b      	cmp	r3, r9
 800c70e:	f040 812c 	bne.w	800c96a <__ssvfiscanf_r+0x2de>
 800c712:	6863      	ldr	r3, [r4, #4]
 800c714:	3b01      	subs	r3, #1
 800c716:	6063      	str	r3, [r4, #4]
 800c718:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c71a:	3201      	adds	r2, #1
 800c71c:	3301      	adds	r3, #1
 800c71e:	6022      	str	r2, [r4, #0]
 800c720:	9345      	str	r3, [sp, #276]	@ 0x114
 800c722:	e7d8      	b.n	800c6d6 <__ssvfiscanf_r+0x4a>
 800c724:	9141      	str	r1, [sp, #260]	@ 0x104
 800c726:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c728:	7853      	ldrb	r3, [r2, #1]
 800c72a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c72c:	bf02      	ittt	eq
 800c72e:	2310      	moveq	r3, #16
 800c730:	1c95      	addeq	r5, r2, #2
 800c732:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c734:	220a      	movs	r2, #10
 800c736:	46a9      	mov	r9, r5
 800c738:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c73c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c740:	2b09      	cmp	r3, #9
 800c742:	d91e      	bls.n	800c782 <__ssvfiscanf_r+0xf6>
 800c744:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c940 <__ssvfiscanf_r+0x2b4>
 800c748:	2203      	movs	r2, #3
 800c74a:	4650      	mov	r0, sl
 800c74c:	f7f3 fd40 	bl	80001d0 <memchr>
 800c750:	b138      	cbz	r0, 800c762 <__ssvfiscanf_r+0xd6>
 800c752:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c754:	eba0 000a 	sub.w	r0, r0, sl
 800c758:	2301      	movs	r3, #1
 800c75a:	4083      	lsls	r3, r0
 800c75c:	4313      	orrs	r3, r2
 800c75e:	9341      	str	r3, [sp, #260]	@ 0x104
 800c760:	464d      	mov	r5, r9
 800c762:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c766:	2b78      	cmp	r3, #120	@ 0x78
 800c768:	d806      	bhi.n	800c778 <__ssvfiscanf_r+0xec>
 800c76a:	2b57      	cmp	r3, #87	@ 0x57
 800c76c:	d810      	bhi.n	800c790 <__ssvfiscanf_r+0x104>
 800c76e:	2b25      	cmp	r3, #37	@ 0x25
 800c770:	d0c5      	beq.n	800c6fe <__ssvfiscanf_r+0x72>
 800c772:	d857      	bhi.n	800c824 <__ssvfiscanf_r+0x198>
 800c774:	2b00      	cmp	r3, #0
 800c776:	d065      	beq.n	800c844 <__ssvfiscanf_r+0x1b8>
 800c778:	2303      	movs	r3, #3
 800c77a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c77c:	230a      	movs	r3, #10
 800c77e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c780:	e078      	b.n	800c874 <__ssvfiscanf_r+0x1e8>
 800c782:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c784:	fb02 1103 	mla	r1, r2, r3, r1
 800c788:	3930      	subs	r1, #48	@ 0x30
 800c78a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c78c:	464d      	mov	r5, r9
 800c78e:	e7d2      	b.n	800c736 <__ssvfiscanf_r+0xaa>
 800c790:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c794:	2a20      	cmp	r2, #32
 800c796:	d8ef      	bhi.n	800c778 <__ssvfiscanf_r+0xec>
 800c798:	a101      	add	r1, pc, #4	@ (adr r1, 800c7a0 <__ssvfiscanf_r+0x114>)
 800c79a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c79e:	bf00      	nop
 800c7a0:	0800c853 	.word	0x0800c853
 800c7a4:	0800c779 	.word	0x0800c779
 800c7a8:	0800c779 	.word	0x0800c779
 800c7ac:	0800c8ad 	.word	0x0800c8ad
 800c7b0:	0800c779 	.word	0x0800c779
 800c7b4:	0800c779 	.word	0x0800c779
 800c7b8:	0800c779 	.word	0x0800c779
 800c7bc:	0800c779 	.word	0x0800c779
 800c7c0:	0800c779 	.word	0x0800c779
 800c7c4:	0800c779 	.word	0x0800c779
 800c7c8:	0800c779 	.word	0x0800c779
 800c7cc:	0800c8c3 	.word	0x0800c8c3
 800c7d0:	0800c8a9 	.word	0x0800c8a9
 800c7d4:	0800c82b 	.word	0x0800c82b
 800c7d8:	0800c82b 	.word	0x0800c82b
 800c7dc:	0800c82b 	.word	0x0800c82b
 800c7e0:	0800c779 	.word	0x0800c779
 800c7e4:	0800c865 	.word	0x0800c865
 800c7e8:	0800c779 	.word	0x0800c779
 800c7ec:	0800c779 	.word	0x0800c779
 800c7f0:	0800c779 	.word	0x0800c779
 800c7f4:	0800c779 	.word	0x0800c779
 800c7f8:	0800c8d3 	.word	0x0800c8d3
 800c7fc:	0800c86d 	.word	0x0800c86d
 800c800:	0800c84b 	.word	0x0800c84b
 800c804:	0800c779 	.word	0x0800c779
 800c808:	0800c779 	.word	0x0800c779
 800c80c:	0800c8cf 	.word	0x0800c8cf
 800c810:	0800c779 	.word	0x0800c779
 800c814:	0800c8a9 	.word	0x0800c8a9
 800c818:	0800c779 	.word	0x0800c779
 800c81c:	0800c779 	.word	0x0800c779
 800c820:	0800c853 	.word	0x0800c853
 800c824:	3b45      	subs	r3, #69	@ 0x45
 800c826:	2b02      	cmp	r3, #2
 800c828:	d8a6      	bhi.n	800c778 <__ssvfiscanf_r+0xec>
 800c82a:	2305      	movs	r3, #5
 800c82c:	e021      	b.n	800c872 <__ssvfiscanf_r+0x1e6>
 800c82e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c830:	4621      	mov	r1, r4
 800c832:	4630      	mov	r0, r6
 800c834:	4798      	blx	r3
 800c836:	2800      	cmp	r0, #0
 800c838:	f43f af66 	beq.w	800c708 <__ssvfiscanf_r+0x7c>
 800c83c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c83e:	2800      	cmp	r0, #0
 800c840:	f040 808b 	bne.w	800c95a <__ssvfiscanf_r+0x2ce>
 800c844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c848:	e08b      	b.n	800c962 <__ssvfiscanf_r+0x2d6>
 800c84a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c84c:	f042 0220 	orr.w	r2, r2, #32
 800c850:	9241      	str	r2, [sp, #260]	@ 0x104
 800c852:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c858:	9241      	str	r2, [sp, #260]	@ 0x104
 800c85a:	2210      	movs	r2, #16
 800c85c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c85e:	9242      	str	r2, [sp, #264]	@ 0x108
 800c860:	d902      	bls.n	800c868 <__ssvfiscanf_r+0x1dc>
 800c862:	e005      	b.n	800c870 <__ssvfiscanf_r+0x1e4>
 800c864:	2300      	movs	r3, #0
 800c866:	9342      	str	r3, [sp, #264]	@ 0x108
 800c868:	2303      	movs	r3, #3
 800c86a:	e002      	b.n	800c872 <__ssvfiscanf_r+0x1e6>
 800c86c:	2308      	movs	r3, #8
 800c86e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c870:	2304      	movs	r3, #4
 800c872:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c874:	6863      	ldr	r3, [r4, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	dd39      	ble.n	800c8ee <__ssvfiscanf_r+0x262>
 800c87a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c87c:	0659      	lsls	r1, r3, #25
 800c87e:	d404      	bmi.n	800c88a <__ssvfiscanf_r+0x1fe>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	5cba      	ldrb	r2, [r7, r2]
 800c886:	0712      	lsls	r2, r2, #28
 800c888:	d438      	bmi.n	800c8fc <__ssvfiscanf_r+0x270>
 800c88a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	dc47      	bgt.n	800c920 <__ssvfiscanf_r+0x294>
 800c890:	466b      	mov	r3, sp
 800c892:	4622      	mov	r2, r4
 800c894:	a941      	add	r1, sp, #260	@ 0x104
 800c896:	4630      	mov	r0, r6
 800c898:	f000 f9ae 	bl	800cbf8 <_scanf_chars>
 800c89c:	2801      	cmp	r0, #1
 800c89e:	d064      	beq.n	800c96a <__ssvfiscanf_r+0x2de>
 800c8a0:	2802      	cmp	r0, #2
 800c8a2:	f47f af18 	bne.w	800c6d6 <__ssvfiscanf_r+0x4a>
 800c8a6:	e7c9      	b.n	800c83c <__ssvfiscanf_r+0x1b0>
 800c8a8:	220a      	movs	r2, #10
 800c8aa:	e7d7      	b.n	800c85c <__ssvfiscanf_r+0x1d0>
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4640      	mov	r0, r8
 800c8b0:	f000 fbae 	bl	800d010 <__sccl>
 800c8b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c8b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ba:	9341      	str	r3, [sp, #260]	@ 0x104
 800c8bc:	4605      	mov	r5, r0
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e7d7      	b.n	800c872 <__ssvfiscanf_r+0x1e6>
 800c8c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c8c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8c8:	9341      	str	r3, [sp, #260]	@ 0x104
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	e7d1      	b.n	800c872 <__ssvfiscanf_r+0x1e6>
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	e7cf      	b.n	800c872 <__ssvfiscanf_r+0x1e6>
 800c8d2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c8d4:	06c3      	lsls	r3, r0, #27
 800c8d6:	f53f aefe 	bmi.w	800c6d6 <__ssvfiscanf_r+0x4a>
 800c8da:	9b00      	ldr	r3, [sp, #0]
 800c8dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c8de:	1d19      	adds	r1, r3, #4
 800c8e0:	9100      	str	r1, [sp, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	07c0      	lsls	r0, r0, #31
 800c8e6:	bf4c      	ite	mi
 800c8e8:	801a      	strhmi	r2, [r3, #0]
 800c8ea:	601a      	strpl	r2, [r3, #0]
 800c8ec:	e6f3      	b.n	800c6d6 <__ssvfiscanf_r+0x4a>
 800c8ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4798      	blx	r3
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d0bf      	beq.n	800c87a <__ssvfiscanf_r+0x1ee>
 800c8fa:	e79f      	b.n	800c83c <__ssvfiscanf_r+0x1b0>
 800c8fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c8fe:	3201      	adds	r2, #1
 800c900:	9245      	str	r2, [sp, #276]	@ 0x114
 800c902:	6862      	ldr	r2, [r4, #4]
 800c904:	3a01      	subs	r2, #1
 800c906:	2a00      	cmp	r2, #0
 800c908:	6062      	str	r2, [r4, #4]
 800c90a:	dd02      	ble.n	800c912 <__ssvfiscanf_r+0x286>
 800c90c:	3301      	adds	r3, #1
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	e7b6      	b.n	800c880 <__ssvfiscanf_r+0x1f4>
 800c912:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c914:	4621      	mov	r1, r4
 800c916:	4630      	mov	r0, r6
 800c918:	4798      	blx	r3
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d0b0      	beq.n	800c880 <__ssvfiscanf_r+0x1f4>
 800c91e:	e78d      	b.n	800c83c <__ssvfiscanf_r+0x1b0>
 800c920:	2b04      	cmp	r3, #4
 800c922:	dc0f      	bgt.n	800c944 <__ssvfiscanf_r+0x2b8>
 800c924:	466b      	mov	r3, sp
 800c926:	4622      	mov	r2, r4
 800c928:	a941      	add	r1, sp, #260	@ 0x104
 800c92a:	4630      	mov	r0, r6
 800c92c:	f000 f9be 	bl	800ccac <_scanf_i>
 800c930:	e7b4      	b.n	800c89c <__ssvfiscanf_r+0x210>
 800c932:	bf00      	nop
 800c934:	0800c5dd 	.word	0x0800c5dd
 800c938:	0800c653 	.word	0x0800c653
 800c93c:	0800df15 	.word	0x0800df15
 800c940:	0800e326 	.word	0x0800e326
 800c944:	4b0a      	ldr	r3, [pc, #40]	@ (800c970 <__ssvfiscanf_r+0x2e4>)
 800c946:	2b00      	cmp	r3, #0
 800c948:	f43f aec5 	beq.w	800c6d6 <__ssvfiscanf_r+0x4a>
 800c94c:	466b      	mov	r3, sp
 800c94e:	4622      	mov	r2, r4
 800c950:	a941      	add	r1, sp, #260	@ 0x104
 800c952:	4630      	mov	r0, r6
 800c954:	f7fc fe6c 	bl	8009630 <_scanf_float>
 800c958:	e7a0      	b.n	800c89c <__ssvfiscanf_r+0x210>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	065b      	lsls	r3, r3, #25
 800c95e:	f53f af71 	bmi.w	800c844 <__ssvfiscanf_r+0x1b8>
 800c962:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c96a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c96c:	e7f9      	b.n	800c962 <__ssvfiscanf_r+0x2d6>
 800c96e:	bf00      	nop
 800c970:	08009631 	.word	0x08009631

0800c974 <__sfputc_r>:
 800c974:	6893      	ldr	r3, [r2, #8]
 800c976:	3b01      	subs	r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	b410      	push	{r4}
 800c97c:	6093      	str	r3, [r2, #8]
 800c97e:	da08      	bge.n	800c992 <__sfputc_r+0x1e>
 800c980:	6994      	ldr	r4, [r2, #24]
 800c982:	42a3      	cmp	r3, r4
 800c984:	db01      	blt.n	800c98a <__sfputc_r+0x16>
 800c986:	290a      	cmp	r1, #10
 800c988:	d103      	bne.n	800c992 <__sfputc_r+0x1e>
 800c98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c98e:	f000 bbb2 	b.w	800d0f6 <__swbuf_r>
 800c992:	6813      	ldr	r3, [r2, #0]
 800c994:	1c58      	adds	r0, r3, #1
 800c996:	6010      	str	r0, [r2, #0]
 800c998:	7019      	strb	r1, [r3, #0]
 800c99a:	4608      	mov	r0, r1
 800c99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <__sfputs_r>:
 800c9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	460f      	mov	r7, r1
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	18d5      	adds	r5, r2, r3
 800c9ac:	42ac      	cmp	r4, r5
 800c9ae:	d101      	bne.n	800c9b4 <__sfputs_r+0x12>
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	e007      	b.n	800c9c4 <__sfputs_r+0x22>
 800c9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b8:	463a      	mov	r2, r7
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff ffda 	bl	800c974 <__sfputc_r>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d1f3      	bne.n	800c9ac <__sfputs_r+0xa>
 800c9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9c8 <_vfiprintf_r>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	b09d      	sub	sp, #116	@ 0x74
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	4698      	mov	r8, r3
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	b118      	cbz	r0, 800c9e0 <_vfiprintf_r+0x18>
 800c9d8:	6a03      	ldr	r3, [r0, #32]
 800c9da:	b90b      	cbnz	r3, 800c9e0 <_vfiprintf_r+0x18>
 800c9dc:	f7fd f8c8 	bl	8009b70 <__sinit>
 800c9e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9e2:	07d9      	lsls	r1, r3, #31
 800c9e4:	d405      	bmi.n	800c9f2 <_vfiprintf_r+0x2a>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	059a      	lsls	r2, r3, #22
 800c9ea:	d402      	bmi.n	800c9f2 <_vfiprintf_r+0x2a>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ee:	f7fd fa70 	bl	8009ed2 <__retarget_lock_acquire_recursive>
 800c9f2:	89ab      	ldrh	r3, [r5, #12]
 800c9f4:	071b      	lsls	r3, r3, #28
 800c9f6:	d501      	bpl.n	800c9fc <_vfiprintf_r+0x34>
 800c9f8:	692b      	ldr	r3, [r5, #16]
 800c9fa:	b99b      	cbnz	r3, 800ca24 <_vfiprintf_r+0x5c>
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 fbb8 	bl	800d174 <__swsetup_r>
 800ca04:	b170      	cbz	r0, 800ca24 <_vfiprintf_r+0x5c>
 800ca06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca08:	07dc      	lsls	r4, r3, #31
 800ca0a:	d504      	bpl.n	800ca16 <_vfiprintf_r+0x4e>
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca10:	b01d      	add	sp, #116	@ 0x74
 800ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca16:	89ab      	ldrh	r3, [r5, #12]
 800ca18:	0598      	lsls	r0, r3, #22
 800ca1a:	d4f7      	bmi.n	800ca0c <_vfiprintf_r+0x44>
 800ca1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca1e:	f7fd fa59 	bl	8009ed4 <__retarget_lock_release_recursive>
 800ca22:	e7f3      	b.n	800ca0c <_vfiprintf_r+0x44>
 800ca24:	2300      	movs	r3, #0
 800ca26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca28:	2320      	movs	r3, #32
 800ca2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca32:	2330      	movs	r3, #48	@ 0x30
 800ca34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbe4 <_vfiprintf_r+0x21c>
 800ca38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca3c:	f04f 0901 	mov.w	r9, #1
 800ca40:	4623      	mov	r3, r4
 800ca42:	469a      	mov	sl, r3
 800ca44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca48:	b10a      	cbz	r2, 800ca4e <_vfiprintf_r+0x86>
 800ca4a:	2a25      	cmp	r2, #37	@ 0x25
 800ca4c:	d1f9      	bne.n	800ca42 <_vfiprintf_r+0x7a>
 800ca4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca52:	d00b      	beq.n	800ca6c <_vfiprintf_r+0xa4>
 800ca54:	465b      	mov	r3, fp
 800ca56:	4622      	mov	r2, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff ffa1 	bl	800c9a2 <__sfputs_r>
 800ca60:	3001      	adds	r0, #1
 800ca62:	f000 80a7 	beq.w	800cbb4 <_vfiprintf_r+0x1ec>
 800ca66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca68:	445a      	add	r2, fp
 800ca6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 809f 	beq.w	800cbb4 <_vfiprintf_r+0x1ec>
 800ca76:	2300      	movs	r3, #0
 800ca78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca80:	f10a 0a01 	add.w	sl, sl, #1
 800ca84:	9304      	str	r3, [sp, #16]
 800ca86:	9307      	str	r3, [sp, #28]
 800ca88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca8e:	4654      	mov	r4, sl
 800ca90:	2205      	movs	r2, #5
 800ca92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca96:	4853      	ldr	r0, [pc, #332]	@ (800cbe4 <_vfiprintf_r+0x21c>)
 800ca98:	f7f3 fb9a 	bl	80001d0 <memchr>
 800ca9c:	9a04      	ldr	r2, [sp, #16]
 800ca9e:	b9d8      	cbnz	r0, 800cad8 <_vfiprintf_r+0x110>
 800caa0:	06d1      	lsls	r1, r2, #27
 800caa2:	bf44      	itt	mi
 800caa4:	2320      	movmi	r3, #32
 800caa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caaa:	0713      	lsls	r3, r2, #28
 800caac:	bf44      	itt	mi
 800caae:	232b      	movmi	r3, #43	@ 0x2b
 800cab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cab4:	f89a 3000 	ldrb.w	r3, [sl]
 800cab8:	2b2a      	cmp	r3, #42	@ 0x2a
 800caba:	d015      	beq.n	800cae8 <_vfiprintf_r+0x120>
 800cabc:	9a07      	ldr	r2, [sp, #28]
 800cabe:	4654      	mov	r4, sl
 800cac0:	2000      	movs	r0, #0
 800cac2:	f04f 0c0a 	mov.w	ip, #10
 800cac6:	4621      	mov	r1, r4
 800cac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cacc:	3b30      	subs	r3, #48	@ 0x30
 800cace:	2b09      	cmp	r3, #9
 800cad0:	d94b      	bls.n	800cb6a <_vfiprintf_r+0x1a2>
 800cad2:	b1b0      	cbz	r0, 800cb02 <_vfiprintf_r+0x13a>
 800cad4:	9207      	str	r2, [sp, #28]
 800cad6:	e014      	b.n	800cb02 <_vfiprintf_r+0x13a>
 800cad8:	eba0 0308 	sub.w	r3, r0, r8
 800cadc:	fa09 f303 	lsl.w	r3, r9, r3
 800cae0:	4313      	orrs	r3, r2
 800cae2:	9304      	str	r3, [sp, #16]
 800cae4:	46a2      	mov	sl, r4
 800cae6:	e7d2      	b.n	800ca8e <_vfiprintf_r+0xc6>
 800cae8:	9b03      	ldr	r3, [sp, #12]
 800caea:	1d19      	adds	r1, r3, #4
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	9103      	str	r1, [sp, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	bfbb      	ittet	lt
 800caf4:	425b      	neglt	r3, r3
 800caf6:	f042 0202 	orrlt.w	r2, r2, #2
 800cafa:	9307      	strge	r3, [sp, #28]
 800cafc:	9307      	strlt	r3, [sp, #28]
 800cafe:	bfb8      	it	lt
 800cb00:	9204      	strlt	r2, [sp, #16]
 800cb02:	7823      	ldrb	r3, [r4, #0]
 800cb04:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb06:	d10a      	bne.n	800cb1e <_vfiprintf_r+0x156>
 800cb08:	7863      	ldrb	r3, [r4, #1]
 800cb0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb0c:	d132      	bne.n	800cb74 <_vfiprintf_r+0x1ac>
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	1d1a      	adds	r2, r3, #4
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	9203      	str	r2, [sp, #12]
 800cb16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb1a:	3402      	adds	r4, #2
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbf4 <_vfiprintf_r+0x22c>
 800cb22:	7821      	ldrb	r1, [r4, #0]
 800cb24:	2203      	movs	r2, #3
 800cb26:	4650      	mov	r0, sl
 800cb28:	f7f3 fb52 	bl	80001d0 <memchr>
 800cb2c:	b138      	cbz	r0, 800cb3e <_vfiprintf_r+0x176>
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	eba0 000a 	sub.w	r0, r0, sl
 800cb34:	2240      	movs	r2, #64	@ 0x40
 800cb36:	4082      	lsls	r2, r0
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	9304      	str	r3, [sp, #16]
 800cb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb42:	4829      	ldr	r0, [pc, #164]	@ (800cbe8 <_vfiprintf_r+0x220>)
 800cb44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb48:	2206      	movs	r2, #6
 800cb4a:	f7f3 fb41 	bl	80001d0 <memchr>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d03f      	beq.n	800cbd2 <_vfiprintf_r+0x20a>
 800cb52:	4b26      	ldr	r3, [pc, #152]	@ (800cbec <_vfiprintf_r+0x224>)
 800cb54:	bb1b      	cbnz	r3, 800cb9e <_vfiprintf_r+0x1d6>
 800cb56:	9b03      	ldr	r3, [sp, #12]
 800cb58:	3307      	adds	r3, #7
 800cb5a:	f023 0307 	bic.w	r3, r3, #7
 800cb5e:	3308      	adds	r3, #8
 800cb60:	9303      	str	r3, [sp, #12]
 800cb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb64:	443b      	add	r3, r7
 800cb66:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb68:	e76a      	b.n	800ca40 <_vfiprintf_r+0x78>
 800cb6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb6e:	460c      	mov	r4, r1
 800cb70:	2001      	movs	r0, #1
 800cb72:	e7a8      	b.n	800cac6 <_vfiprintf_r+0xfe>
 800cb74:	2300      	movs	r3, #0
 800cb76:	3401      	adds	r4, #1
 800cb78:	9305      	str	r3, [sp, #20]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	f04f 0c0a 	mov.w	ip, #10
 800cb80:	4620      	mov	r0, r4
 800cb82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb86:	3a30      	subs	r2, #48	@ 0x30
 800cb88:	2a09      	cmp	r2, #9
 800cb8a:	d903      	bls.n	800cb94 <_vfiprintf_r+0x1cc>
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d0c6      	beq.n	800cb1e <_vfiprintf_r+0x156>
 800cb90:	9105      	str	r1, [sp, #20]
 800cb92:	e7c4      	b.n	800cb1e <_vfiprintf_r+0x156>
 800cb94:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb98:	4604      	mov	r4, r0
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e7f0      	b.n	800cb80 <_vfiprintf_r+0x1b8>
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	462a      	mov	r2, r5
 800cba4:	4b12      	ldr	r3, [pc, #72]	@ (800cbf0 <_vfiprintf_r+0x228>)
 800cba6:	a904      	add	r1, sp, #16
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f7fc f989 	bl	8008ec0 <_printf_float>
 800cbae:	4607      	mov	r7, r0
 800cbb0:	1c78      	adds	r0, r7, #1
 800cbb2:	d1d6      	bne.n	800cb62 <_vfiprintf_r+0x19a>
 800cbb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbb6:	07d9      	lsls	r1, r3, #31
 800cbb8:	d405      	bmi.n	800cbc6 <_vfiprintf_r+0x1fe>
 800cbba:	89ab      	ldrh	r3, [r5, #12]
 800cbbc:	059a      	lsls	r2, r3, #22
 800cbbe:	d402      	bmi.n	800cbc6 <_vfiprintf_r+0x1fe>
 800cbc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbc2:	f7fd f987 	bl	8009ed4 <__retarget_lock_release_recursive>
 800cbc6:	89ab      	ldrh	r3, [r5, #12]
 800cbc8:	065b      	lsls	r3, r3, #25
 800cbca:	f53f af1f 	bmi.w	800ca0c <_vfiprintf_r+0x44>
 800cbce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbd0:	e71e      	b.n	800ca10 <_vfiprintf_r+0x48>
 800cbd2:	ab03      	add	r3, sp, #12
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	462a      	mov	r2, r5
 800cbd8:	4b05      	ldr	r3, [pc, #20]	@ (800cbf0 <_vfiprintf_r+0x228>)
 800cbda:	a904      	add	r1, sp, #16
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7fc fc07 	bl	80093f0 <_printf_i>
 800cbe2:	e7e4      	b.n	800cbae <_vfiprintf_r+0x1e6>
 800cbe4:	0800e320 	.word	0x0800e320
 800cbe8:	0800e32a 	.word	0x0800e32a
 800cbec:	08008ec1 	.word	0x08008ec1
 800cbf0:	0800c9a3 	.word	0x0800c9a3
 800cbf4:	0800e326 	.word	0x0800e326

0800cbf8 <_scanf_chars>:
 800cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbfc:	4615      	mov	r5, r2
 800cbfe:	688a      	ldr	r2, [r1, #8]
 800cc00:	4680      	mov	r8, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	b932      	cbnz	r2, 800cc14 <_scanf_chars+0x1c>
 800cc06:	698a      	ldr	r2, [r1, #24]
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	bf14      	ite	ne
 800cc0c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800cc10:	2201      	moveq	r2, #1
 800cc12:	608a      	str	r2, [r1, #8]
 800cc14:	6822      	ldr	r2, [r4, #0]
 800cc16:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800cca8 <_scanf_chars+0xb0>
 800cc1a:	06d1      	lsls	r1, r2, #27
 800cc1c:	bf5f      	itttt	pl
 800cc1e:	681a      	ldrpl	r2, [r3, #0]
 800cc20:	1d11      	addpl	r1, r2, #4
 800cc22:	6019      	strpl	r1, [r3, #0]
 800cc24:	6816      	ldrpl	r6, [r2, #0]
 800cc26:	2700      	movs	r7, #0
 800cc28:	69a0      	ldr	r0, [r4, #24]
 800cc2a:	b188      	cbz	r0, 800cc50 <_scanf_chars+0x58>
 800cc2c:	2801      	cmp	r0, #1
 800cc2e:	d107      	bne.n	800cc40 <_scanf_chars+0x48>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	781a      	ldrb	r2, [r3, #0]
 800cc34:	6963      	ldr	r3, [r4, #20]
 800cc36:	5c9b      	ldrb	r3, [r3, r2]
 800cc38:	b953      	cbnz	r3, 800cc50 <_scanf_chars+0x58>
 800cc3a:	2f00      	cmp	r7, #0
 800cc3c:	d031      	beq.n	800cca2 <_scanf_chars+0xaa>
 800cc3e:	e022      	b.n	800cc86 <_scanf_chars+0x8e>
 800cc40:	2802      	cmp	r0, #2
 800cc42:	d120      	bne.n	800cc86 <_scanf_chars+0x8e>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cc4c:	071b      	lsls	r3, r3, #28
 800cc4e:	d41a      	bmi.n	800cc86 <_scanf_chars+0x8e>
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	06da      	lsls	r2, r3, #27
 800cc54:	bf5e      	ittt	pl
 800cc56:	682b      	ldrpl	r3, [r5, #0]
 800cc58:	781b      	ldrbpl	r3, [r3, #0]
 800cc5a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cc5e:	682a      	ldr	r2, [r5, #0]
 800cc60:	686b      	ldr	r3, [r5, #4]
 800cc62:	3201      	adds	r2, #1
 800cc64:	602a      	str	r2, [r5, #0]
 800cc66:	68a2      	ldr	r2, [r4, #8]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	3a01      	subs	r2, #1
 800cc6c:	606b      	str	r3, [r5, #4]
 800cc6e:	3701      	adds	r7, #1
 800cc70:	60a2      	str	r2, [r4, #8]
 800cc72:	b142      	cbz	r2, 800cc86 <_scanf_chars+0x8e>
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dcd7      	bgt.n	800cc28 <_scanf_chars+0x30>
 800cc78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4798      	blx	r3
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d0d0      	beq.n	800cc28 <_scanf_chars+0x30>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	f013 0310 	ands.w	r3, r3, #16
 800cc8c:	d105      	bne.n	800cc9a <_scanf_chars+0xa2>
 800cc8e:	68e2      	ldr	r2, [r4, #12]
 800cc90:	3201      	adds	r2, #1
 800cc92:	60e2      	str	r2, [r4, #12]
 800cc94:	69a2      	ldr	r2, [r4, #24]
 800cc96:	b102      	cbz	r2, 800cc9a <_scanf_chars+0xa2>
 800cc98:	7033      	strb	r3, [r6, #0]
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	443b      	add	r3, r7
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	2000      	movs	r0, #0
 800cca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca6:	bf00      	nop
 800cca8:	0800df15 	.word	0x0800df15

0800ccac <_scanf_i>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	4698      	mov	r8, r3
 800ccb2:	4b74      	ldr	r3, [pc, #464]	@ (800ce84 <_scanf_i+0x1d8>)
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	4682      	mov	sl, r0
 800ccb8:	4616      	mov	r6, r2
 800ccba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	ab03      	add	r3, sp, #12
 800ccc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ccc6:	4b70      	ldr	r3, [pc, #448]	@ (800ce88 <_scanf_i+0x1dc>)
 800ccc8:	69a1      	ldr	r1, [r4, #24]
 800ccca:	4a70      	ldr	r2, [pc, #448]	@ (800ce8c <_scanf_i+0x1e0>)
 800cccc:	2903      	cmp	r1, #3
 800ccce:	bf08      	it	eq
 800ccd0:	461a      	moveq	r2, r3
 800ccd2:	68a3      	ldr	r3, [r4, #8]
 800ccd4:	9201      	str	r2, [sp, #4]
 800ccd6:	1e5a      	subs	r2, r3, #1
 800ccd8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ccdc:	bf88      	it	hi
 800ccde:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cce2:	4627      	mov	r7, r4
 800cce4:	bf82      	ittt	hi
 800cce6:	eb03 0905 	addhi.w	r9, r3, r5
 800ccea:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ccee:	60a3      	strhi	r3, [r4, #8]
 800ccf0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ccf4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ccf8:	bf98      	it	ls
 800ccfa:	f04f 0900 	movls.w	r9, #0
 800ccfe:	6023      	str	r3, [r4, #0]
 800cd00:	463d      	mov	r5, r7
 800cd02:	f04f 0b00 	mov.w	fp, #0
 800cd06:	6831      	ldr	r1, [r6, #0]
 800cd08:	ab03      	add	r3, sp, #12
 800cd0a:	7809      	ldrb	r1, [r1, #0]
 800cd0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cd10:	2202      	movs	r2, #2
 800cd12:	f7f3 fa5d 	bl	80001d0 <memchr>
 800cd16:	b328      	cbz	r0, 800cd64 <_scanf_i+0xb8>
 800cd18:	f1bb 0f01 	cmp.w	fp, #1
 800cd1c:	d159      	bne.n	800cdd2 <_scanf_i+0x126>
 800cd1e:	6862      	ldr	r2, [r4, #4]
 800cd20:	b92a      	cbnz	r2, 800cd2e <_scanf_i+0x82>
 800cd22:	6822      	ldr	r2, [r4, #0]
 800cd24:	2108      	movs	r1, #8
 800cd26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd2a:	6061      	str	r1, [r4, #4]
 800cd2c:	6022      	str	r2, [r4, #0]
 800cd2e:	6822      	ldr	r2, [r4, #0]
 800cd30:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800cd34:	6022      	str	r2, [r4, #0]
 800cd36:	68a2      	ldr	r2, [r4, #8]
 800cd38:	1e51      	subs	r1, r2, #1
 800cd3a:	60a1      	str	r1, [r4, #8]
 800cd3c:	b192      	cbz	r2, 800cd64 <_scanf_i+0xb8>
 800cd3e:	6832      	ldr	r2, [r6, #0]
 800cd40:	1c51      	adds	r1, r2, #1
 800cd42:	6031      	str	r1, [r6, #0]
 800cd44:	7812      	ldrb	r2, [r2, #0]
 800cd46:	f805 2b01 	strb.w	r2, [r5], #1
 800cd4a:	6872      	ldr	r2, [r6, #4]
 800cd4c:	3a01      	subs	r2, #1
 800cd4e:	2a00      	cmp	r2, #0
 800cd50:	6072      	str	r2, [r6, #4]
 800cd52:	dc07      	bgt.n	800cd64 <_scanf_i+0xb8>
 800cd54:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4650      	mov	r0, sl
 800cd5c:	4790      	blx	r2
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	f040 8085 	bne.w	800ce6e <_scanf_i+0x1c2>
 800cd64:	f10b 0b01 	add.w	fp, fp, #1
 800cd68:	f1bb 0f03 	cmp.w	fp, #3
 800cd6c:	d1cb      	bne.n	800cd06 <_scanf_i+0x5a>
 800cd6e:	6863      	ldr	r3, [r4, #4]
 800cd70:	b90b      	cbnz	r3, 800cd76 <_scanf_i+0xca>
 800cd72:	230a      	movs	r3, #10
 800cd74:	6063      	str	r3, [r4, #4]
 800cd76:	6863      	ldr	r3, [r4, #4]
 800cd78:	4945      	ldr	r1, [pc, #276]	@ (800ce90 <_scanf_i+0x1e4>)
 800cd7a:	6960      	ldr	r0, [r4, #20]
 800cd7c:	1ac9      	subs	r1, r1, r3
 800cd7e:	f000 f947 	bl	800d010 <__sccl>
 800cd82:	f04f 0b00 	mov.w	fp, #0
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	6822      	ldr	r2, [r4, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d03d      	beq.n	800ce0a <_scanf_i+0x15e>
 800cd8e:	6831      	ldr	r1, [r6, #0]
 800cd90:	6960      	ldr	r0, [r4, #20]
 800cd92:	f891 c000 	ldrb.w	ip, [r1]
 800cd96:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d035      	beq.n	800ce0a <_scanf_i+0x15e>
 800cd9e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800cda2:	d124      	bne.n	800cdee <_scanf_i+0x142>
 800cda4:	0510      	lsls	r0, r2, #20
 800cda6:	d522      	bpl.n	800cdee <_scanf_i+0x142>
 800cda8:	f10b 0b01 	add.w	fp, fp, #1
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	d003      	beq.n	800cdba <_scanf_i+0x10e>
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800cdb8:	60a3      	str	r3, [r4, #8]
 800cdba:	6873      	ldr	r3, [r6, #4]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	6073      	str	r3, [r6, #4]
 800cdc2:	dd1b      	ble.n	800cdfc <_scanf_i+0x150>
 800cdc4:	6833      	ldr	r3, [r6, #0]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	6033      	str	r3, [r6, #0]
 800cdca:	68a3      	ldr	r3, [r4, #8]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	60a3      	str	r3, [r4, #8]
 800cdd0:	e7d9      	b.n	800cd86 <_scanf_i+0xda>
 800cdd2:	f1bb 0f02 	cmp.w	fp, #2
 800cdd6:	d1ae      	bne.n	800cd36 <_scanf_i+0x8a>
 800cdd8:	6822      	ldr	r2, [r4, #0]
 800cdda:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800cdde:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cde2:	d1bf      	bne.n	800cd64 <_scanf_i+0xb8>
 800cde4:	2110      	movs	r1, #16
 800cde6:	6061      	str	r1, [r4, #4]
 800cde8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cdec:	e7a2      	b.n	800cd34 <_scanf_i+0x88>
 800cdee:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800cdf2:	6022      	str	r2, [r4, #0]
 800cdf4:	780b      	ldrb	r3, [r1, #0]
 800cdf6:	f805 3b01 	strb.w	r3, [r5], #1
 800cdfa:	e7de      	b.n	800cdba <_scanf_i+0x10e>
 800cdfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ce00:	4631      	mov	r1, r6
 800ce02:	4650      	mov	r0, sl
 800ce04:	4798      	blx	r3
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d0df      	beq.n	800cdca <_scanf_i+0x11e>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	05d9      	lsls	r1, r3, #23
 800ce0e:	d50d      	bpl.n	800ce2c <_scanf_i+0x180>
 800ce10:	42bd      	cmp	r5, r7
 800ce12:	d909      	bls.n	800ce28 <_scanf_i+0x17c>
 800ce14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ce18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4650      	mov	r0, sl
 800ce20:	4798      	blx	r3
 800ce22:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ce26:	464d      	mov	r5, r9
 800ce28:	42bd      	cmp	r5, r7
 800ce2a:	d028      	beq.n	800ce7e <_scanf_i+0x1d2>
 800ce2c:	6822      	ldr	r2, [r4, #0]
 800ce2e:	f012 0210 	ands.w	r2, r2, #16
 800ce32:	d113      	bne.n	800ce5c <_scanf_i+0x1b0>
 800ce34:	702a      	strb	r2, [r5, #0]
 800ce36:	6863      	ldr	r3, [r4, #4]
 800ce38:	9e01      	ldr	r6, [sp, #4]
 800ce3a:	4639      	mov	r1, r7
 800ce3c:	4650      	mov	r0, sl
 800ce3e:	47b0      	blx	r6
 800ce40:	f8d8 3000 	ldr.w	r3, [r8]
 800ce44:	6821      	ldr	r1, [r4, #0]
 800ce46:	1d1a      	adds	r2, r3, #4
 800ce48:	f8c8 2000 	str.w	r2, [r8]
 800ce4c:	f011 0f20 	tst.w	r1, #32
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	d00f      	beq.n	800ce74 <_scanf_i+0x1c8>
 800ce54:	6018      	str	r0, [r3, #0]
 800ce56:	68e3      	ldr	r3, [r4, #12]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	60e3      	str	r3, [r4, #12]
 800ce5c:	6923      	ldr	r3, [r4, #16]
 800ce5e:	1bed      	subs	r5, r5, r7
 800ce60:	445d      	add	r5, fp
 800ce62:	442b      	add	r3, r5
 800ce64:	6123      	str	r3, [r4, #16]
 800ce66:	2000      	movs	r0, #0
 800ce68:	b007      	add	sp, #28
 800ce6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6e:	f04f 0b00 	mov.w	fp, #0
 800ce72:	e7ca      	b.n	800ce0a <_scanf_i+0x15e>
 800ce74:	07ca      	lsls	r2, r1, #31
 800ce76:	bf4c      	ite	mi
 800ce78:	8018      	strhmi	r0, [r3, #0]
 800ce7a:	6018      	strpl	r0, [r3, #0]
 800ce7c:	e7eb      	b.n	800ce56 <_scanf_i+0x1aa>
 800ce7e:	2001      	movs	r0, #1
 800ce80:	e7f2      	b.n	800ce68 <_scanf_i+0x1bc>
 800ce82:	bf00      	nop
 800ce84:	0800def0 	.word	0x0800def0
 800ce88:	08008d69 	.word	0x08008d69
 800ce8c:	0800dacd 	.word	0x0800dacd
 800ce90:	0800e341 	.word	0x0800e341

0800ce94 <__sflush_r>:
 800ce94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9c:	0716      	lsls	r6, r2, #28
 800ce9e:	4605      	mov	r5, r0
 800cea0:	460c      	mov	r4, r1
 800cea2:	d454      	bmi.n	800cf4e <__sflush_r+0xba>
 800cea4:	684b      	ldr	r3, [r1, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	dc02      	bgt.n	800ceb0 <__sflush_r+0x1c>
 800ceaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	dd48      	ble.n	800cf42 <__sflush_r+0xae>
 800ceb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ceb2:	2e00      	cmp	r6, #0
 800ceb4:	d045      	beq.n	800cf42 <__sflush_r+0xae>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cebc:	682f      	ldr	r7, [r5, #0]
 800cebe:	6a21      	ldr	r1, [r4, #32]
 800cec0:	602b      	str	r3, [r5, #0]
 800cec2:	d030      	beq.n	800cf26 <__sflush_r+0x92>
 800cec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	0759      	lsls	r1, r3, #29
 800ceca:	d505      	bpl.n	800ced8 <__sflush_r+0x44>
 800cecc:	6863      	ldr	r3, [r4, #4]
 800cece:	1ad2      	subs	r2, r2, r3
 800ced0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ced2:	b10b      	cbz	r3, 800ced8 <__sflush_r+0x44>
 800ced4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ced6:	1ad2      	subs	r2, r2, r3
 800ced8:	2300      	movs	r3, #0
 800ceda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cedc:	6a21      	ldr	r1, [r4, #32]
 800cede:	4628      	mov	r0, r5
 800cee0:	47b0      	blx	r6
 800cee2:	1c43      	adds	r3, r0, #1
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	d106      	bne.n	800cef6 <__sflush_r+0x62>
 800cee8:	6829      	ldr	r1, [r5, #0]
 800ceea:	291d      	cmp	r1, #29
 800ceec:	d82b      	bhi.n	800cf46 <__sflush_r+0xb2>
 800ceee:	4a2a      	ldr	r2, [pc, #168]	@ (800cf98 <__sflush_r+0x104>)
 800cef0:	410a      	asrs	r2, r1
 800cef2:	07d6      	lsls	r6, r2, #31
 800cef4:	d427      	bmi.n	800cf46 <__sflush_r+0xb2>
 800cef6:	2200      	movs	r2, #0
 800cef8:	6062      	str	r2, [r4, #4]
 800cefa:	04d9      	lsls	r1, r3, #19
 800cefc:	6922      	ldr	r2, [r4, #16]
 800cefe:	6022      	str	r2, [r4, #0]
 800cf00:	d504      	bpl.n	800cf0c <__sflush_r+0x78>
 800cf02:	1c42      	adds	r2, r0, #1
 800cf04:	d101      	bne.n	800cf0a <__sflush_r+0x76>
 800cf06:	682b      	ldr	r3, [r5, #0]
 800cf08:	b903      	cbnz	r3, 800cf0c <__sflush_r+0x78>
 800cf0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf0e:	602f      	str	r7, [r5, #0]
 800cf10:	b1b9      	cbz	r1, 800cf42 <__sflush_r+0xae>
 800cf12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf16:	4299      	cmp	r1, r3
 800cf18:	d002      	beq.n	800cf20 <__sflush_r+0x8c>
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f7fd fe4c 	bl	800abb8 <_free_r>
 800cf20:	2300      	movs	r3, #0
 800cf22:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf24:	e00d      	b.n	800cf42 <__sflush_r+0xae>
 800cf26:	2301      	movs	r3, #1
 800cf28:	4628      	mov	r0, r5
 800cf2a:	47b0      	blx	r6
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	1c50      	adds	r0, r2, #1
 800cf30:	d1c9      	bne.n	800cec6 <__sflush_r+0x32>
 800cf32:	682b      	ldr	r3, [r5, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d0c6      	beq.n	800cec6 <__sflush_r+0x32>
 800cf38:	2b1d      	cmp	r3, #29
 800cf3a:	d001      	beq.n	800cf40 <__sflush_r+0xac>
 800cf3c:	2b16      	cmp	r3, #22
 800cf3e:	d11e      	bne.n	800cf7e <__sflush_r+0xea>
 800cf40:	602f      	str	r7, [r5, #0]
 800cf42:	2000      	movs	r0, #0
 800cf44:	e022      	b.n	800cf8c <__sflush_r+0xf8>
 800cf46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf4a:	b21b      	sxth	r3, r3
 800cf4c:	e01b      	b.n	800cf86 <__sflush_r+0xf2>
 800cf4e:	690f      	ldr	r7, [r1, #16]
 800cf50:	2f00      	cmp	r7, #0
 800cf52:	d0f6      	beq.n	800cf42 <__sflush_r+0xae>
 800cf54:	0793      	lsls	r3, r2, #30
 800cf56:	680e      	ldr	r6, [r1, #0]
 800cf58:	bf08      	it	eq
 800cf5a:	694b      	ldreq	r3, [r1, #20]
 800cf5c:	600f      	str	r7, [r1, #0]
 800cf5e:	bf18      	it	ne
 800cf60:	2300      	movne	r3, #0
 800cf62:	eba6 0807 	sub.w	r8, r6, r7
 800cf66:	608b      	str	r3, [r1, #8]
 800cf68:	f1b8 0f00 	cmp.w	r8, #0
 800cf6c:	dde9      	ble.n	800cf42 <__sflush_r+0xae>
 800cf6e:	6a21      	ldr	r1, [r4, #32]
 800cf70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf72:	4643      	mov	r3, r8
 800cf74:	463a      	mov	r2, r7
 800cf76:	4628      	mov	r0, r5
 800cf78:	47b0      	blx	r6
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	dc08      	bgt.n	800cf90 <__sflush_r+0xfc>
 800cf7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf86:	81a3      	strh	r3, [r4, #12]
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf90:	4407      	add	r7, r0
 800cf92:	eba8 0800 	sub.w	r8, r8, r0
 800cf96:	e7e7      	b.n	800cf68 <__sflush_r+0xd4>
 800cf98:	dfbffffe 	.word	0xdfbffffe

0800cf9c <_fflush_r>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	690b      	ldr	r3, [r1, #16]
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	b913      	cbnz	r3, 800cfac <_fflush_r+0x10>
 800cfa6:	2500      	movs	r5, #0
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	b118      	cbz	r0, 800cfb6 <_fflush_r+0x1a>
 800cfae:	6a03      	ldr	r3, [r0, #32]
 800cfb0:	b90b      	cbnz	r3, 800cfb6 <_fflush_r+0x1a>
 800cfb2:	f7fc fddd 	bl	8009b70 <__sinit>
 800cfb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d0f3      	beq.n	800cfa6 <_fflush_r+0xa>
 800cfbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cfc0:	07d0      	lsls	r0, r2, #31
 800cfc2:	d404      	bmi.n	800cfce <_fflush_r+0x32>
 800cfc4:	0599      	lsls	r1, r3, #22
 800cfc6:	d402      	bmi.n	800cfce <_fflush_r+0x32>
 800cfc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfca:	f7fc ff82 	bl	8009ed2 <__retarget_lock_acquire_recursive>
 800cfce:	4628      	mov	r0, r5
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	f7ff ff5f 	bl	800ce94 <__sflush_r>
 800cfd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfd8:	07da      	lsls	r2, r3, #31
 800cfda:	4605      	mov	r5, r0
 800cfdc:	d4e4      	bmi.n	800cfa8 <_fflush_r+0xc>
 800cfde:	89a3      	ldrh	r3, [r4, #12]
 800cfe0:	059b      	lsls	r3, r3, #22
 800cfe2:	d4e1      	bmi.n	800cfa8 <_fflush_r+0xc>
 800cfe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfe6:	f7fc ff75 	bl	8009ed4 <__retarget_lock_release_recursive>
 800cfea:	e7dd      	b.n	800cfa8 <_fflush_r+0xc>

0800cfec <fiprintf>:
 800cfec:	b40e      	push	{r1, r2, r3}
 800cfee:	b503      	push	{r0, r1, lr}
 800cff0:	4601      	mov	r1, r0
 800cff2:	ab03      	add	r3, sp, #12
 800cff4:	4805      	ldr	r0, [pc, #20]	@ (800d00c <fiprintf+0x20>)
 800cff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cffa:	6800      	ldr	r0, [r0, #0]
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	f7ff fce3 	bl	800c9c8 <_vfiprintf_r>
 800d002:	b002      	add	sp, #8
 800d004:	f85d eb04 	ldr.w	lr, [sp], #4
 800d008:	b003      	add	sp, #12
 800d00a:	4770      	bx	lr
 800d00c:	20000084 	.word	0x20000084

0800d010 <__sccl>:
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	780b      	ldrb	r3, [r1, #0]
 800d014:	4604      	mov	r4, r0
 800d016:	2b5e      	cmp	r3, #94	@ 0x5e
 800d018:	bf0b      	itete	eq
 800d01a:	784b      	ldrbeq	r3, [r1, #1]
 800d01c:	1c4a      	addne	r2, r1, #1
 800d01e:	1c8a      	addeq	r2, r1, #2
 800d020:	2100      	movne	r1, #0
 800d022:	bf08      	it	eq
 800d024:	2101      	moveq	r1, #1
 800d026:	3801      	subs	r0, #1
 800d028:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d02c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d030:	42a8      	cmp	r0, r5
 800d032:	d1fb      	bne.n	800d02c <__sccl+0x1c>
 800d034:	b90b      	cbnz	r3, 800d03a <__sccl+0x2a>
 800d036:	1e50      	subs	r0, r2, #1
 800d038:	bd70      	pop	{r4, r5, r6, pc}
 800d03a:	f081 0101 	eor.w	r1, r1, #1
 800d03e:	54e1      	strb	r1, [r4, r3]
 800d040:	4610      	mov	r0, r2
 800d042:	4602      	mov	r2, r0
 800d044:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d048:	2d2d      	cmp	r5, #45	@ 0x2d
 800d04a:	d005      	beq.n	800d058 <__sccl+0x48>
 800d04c:	2d5d      	cmp	r5, #93	@ 0x5d
 800d04e:	d016      	beq.n	800d07e <__sccl+0x6e>
 800d050:	2d00      	cmp	r5, #0
 800d052:	d0f1      	beq.n	800d038 <__sccl+0x28>
 800d054:	462b      	mov	r3, r5
 800d056:	e7f2      	b.n	800d03e <__sccl+0x2e>
 800d058:	7846      	ldrb	r6, [r0, #1]
 800d05a:	2e5d      	cmp	r6, #93	@ 0x5d
 800d05c:	d0fa      	beq.n	800d054 <__sccl+0x44>
 800d05e:	42b3      	cmp	r3, r6
 800d060:	dcf8      	bgt.n	800d054 <__sccl+0x44>
 800d062:	3002      	adds	r0, #2
 800d064:	461a      	mov	r2, r3
 800d066:	3201      	adds	r2, #1
 800d068:	4296      	cmp	r6, r2
 800d06a:	54a1      	strb	r1, [r4, r2]
 800d06c:	dcfb      	bgt.n	800d066 <__sccl+0x56>
 800d06e:	1af2      	subs	r2, r6, r3
 800d070:	3a01      	subs	r2, #1
 800d072:	1c5d      	adds	r5, r3, #1
 800d074:	42b3      	cmp	r3, r6
 800d076:	bfa8      	it	ge
 800d078:	2200      	movge	r2, #0
 800d07a:	18ab      	adds	r3, r5, r2
 800d07c:	e7e1      	b.n	800d042 <__sccl+0x32>
 800d07e:	4610      	mov	r0, r2
 800d080:	e7da      	b.n	800d038 <__sccl+0x28>

0800d082 <__submore>:
 800d082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d086:	460c      	mov	r4, r1
 800d088:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d08a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d08e:	4299      	cmp	r1, r3
 800d090:	d11d      	bne.n	800d0ce <__submore+0x4c>
 800d092:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d096:	f7fd fe03 	bl	800aca0 <_malloc_r>
 800d09a:	b918      	cbnz	r0, 800d0a4 <__submore+0x22>
 800d09c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d0aa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d0ae:	6360      	str	r0, [r4, #52]	@ 0x34
 800d0b0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d0b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d0b8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d0bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d0c0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d0c4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d0c8:	6020      	str	r0, [r4, #0]
 800d0ca:	2000      	movs	r0, #0
 800d0cc:	e7e8      	b.n	800d0a0 <__submore+0x1e>
 800d0ce:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d0d0:	0077      	lsls	r7, r6, #1
 800d0d2:	463a      	mov	r2, r7
 800d0d4:	f000 fc5d 	bl	800d992 <_realloc_r>
 800d0d8:	4605      	mov	r5, r0
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d0de      	beq.n	800d09c <__submore+0x1a>
 800d0de:	eb00 0806 	add.w	r8, r0, r6
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	4632      	mov	r2, r6
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	f000 f8d6 	bl	800d298 <memcpy>
 800d0ec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d0f0:	f8c4 8000 	str.w	r8, [r4]
 800d0f4:	e7e9      	b.n	800d0ca <__submore+0x48>

0800d0f6 <__swbuf_r>:
 800d0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f8:	460e      	mov	r6, r1
 800d0fa:	4614      	mov	r4, r2
 800d0fc:	4605      	mov	r5, r0
 800d0fe:	b118      	cbz	r0, 800d108 <__swbuf_r+0x12>
 800d100:	6a03      	ldr	r3, [r0, #32]
 800d102:	b90b      	cbnz	r3, 800d108 <__swbuf_r+0x12>
 800d104:	f7fc fd34 	bl	8009b70 <__sinit>
 800d108:	69a3      	ldr	r3, [r4, #24]
 800d10a:	60a3      	str	r3, [r4, #8]
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	071a      	lsls	r2, r3, #28
 800d110:	d501      	bpl.n	800d116 <__swbuf_r+0x20>
 800d112:	6923      	ldr	r3, [r4, #16]
 800d114:	b943      	cbnz	r3, 800d128 <__swbuf_r+0x32>
 800d116:	4621      	mov	r1, r4
 800d118:	4628      	mov	r0, r5
 800d11a:	f000 f82b 	bl	800d174 <__swsetup_r>
 800d11e:	b118      	cbz	r0, 800d128 <__swbuf_r+0x32>
 800d120:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d124:	4638      	mov	r0, r7
 800d126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	6922      	ldr	r2, [r4, #16]
 800d12c:	1a98      	subs	r0, r3, r2
 800d12e:	6963      	ldr	r3, [r4, #20]
 800d130:	b2f6      	uxtb	r6, r6
 800d132:	4283      	cmp	r3, r0
 800d134:	4637      	mov	r7, r6
 800d136:	dc05      	bgt.n	800d144 <__swbuf_r+0x4e>
 800d138:	4621      	mov	r1, r4
 800d13a:	4628      	mov	r0, r5
 800d13c:	f7ff ff2e 	bl	800cf9c <_fflush_r>
 800d140:	2800      	cmp	r0, #0
 800d142:	d1ed      	bne.n	800d120 <__swbuf_r+0x2a>
 800d144:	68a3      	ldr	r3, [r4, #8]
 800d146:	3b01      	subs	r3, #1
 800d148:	60a3      	str	r3, [r4, #8]
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	1c5a      	adds	r2, r3, #1
 800d14e:	6022      	str	r2, [r4, #0]
 800d150:	701e      	strb	r6, [r3, #0]
 800d152:	6962      	ldr	r2, [r4, #20]
 800d154:	1c43      	adds	r3, r0, #1
 800d156:	429a      	cmp	r2, r3
 800d158:	d004      	beq.n	800d164 <__swbuf_r+0x6e>
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	07db      	lsls	r3, r3, #31
 800d15e:	d5e1      	bpl.n	800d124 <__swbuf_r+0x2e>
 800d160:	2e0a      	cmp	r6, #10
 800d162:	d1df      	bne.n	800d124 <__swbuf_r+0x2e>
 800d164:	4621      	mov	r1, r4
 800d166:	4628      	mov	r0, r5
 800d168:	f7ff ff18 	bl	800cf9c <_fflush_r>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d0d9      	beq.n	800d124 <__swbuf_r+0x2e>
 800d170:	e7d6      	b.n	800d120 <__swbuf_r+0x2a>
	...

0800d174 <__swsetup_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4b29      	ldr	r3, [pc, #164]	@ (800d21c <__swsetup_r+0xa8>)
 800d178:	4605      	mov	r5, r0
 800d17a:	6818      	ldr	r0, [r3, #0]
 800d17c:	460c      	mov	r4, r1
 800d17e:	b118      	cbz	r0, 800d188 <__swsetup_r+0x14>
 800d180:	6a03      	ldr	r3, [r0, #32]
 800d182:	b90b      	cbnz	r3, 800d188 <__swsetup_r+0x14>
 800d184:	f7fc fcf4 	bl	8009b70 <__sinit>
 800d188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d18c:	0719      	lsls	r1, r3, #28
 800d18e:	d422      	bmi.n	800d1d6 <__swsetup_r+0x62>
 800d190:	06da      	lsls	r2, r3, #27
 800d192:	d407      	bmi.n	800d1a4 <__swsetup_r+0x30>
 800d194:	2209      	movs	r2, #9
 800d196:	602a      	str	r2, [r5, #0]
 800d198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d19c:	81a3      	strh	r3, [r4, #12]
 800d19e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1a2:	e033      	b.n	800d20c <__swsetup_r+0x98>
 800d1a4:	0758      	lsls	r0, r3, #29
 800d1a6:	d512      	bpl.n	800d1ce <__swsetup_r+0x5a>
 800d1a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1aa:	b141      	cbz	r1, 800d1be <__swsetup_r+0x4a>
 800d1ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1b0:	4299      	cmp	r1, r3
 800d1b2:	d002      	beq.n	800d1ba <__swsetup_r+0x46>
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f7fd fcff 	bl	800abb8 <_free_r>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1c4:	81a3      	strh	r3, [r4, #12]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	6063      	str	r3, [r4, #4]
 800d1ca:	6923      	ldr	r3, [r4, #16]
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	89a3      	ldrh	r3, [r4, #12]
 800d1d0:	f043 0308 	orr.w	r3, r3, #8
 800d1d4:	81a3      	strh	r3, [r4, #12]
 800d1d6:	6923      	ldr	r3, [r4, #16]
 800d1d8:	b94b      	cbnz	r3, 800d1ee <__swsetup_r+0x7a>
 800d1da:	89a3      	ldrh	r3, [r4, #12]
 800d1dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1e4:	d003      	beq.n	800d1ee <__swsetup_r+0x7a>
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	f000 fca4 	bl	800db36 <__smakebuf_r>
 800d1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f2:	f013 0201 	ands.w	r2, r3, #1
 800d1f6:	d00a      	beq.n	800d20e <__swsetup_r+0x9a>
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	60a2      	str	r2, [r4, #8]
 800d1fc:	6962      	ldr	r2, [r4, #20]
 800d1fe:	4252      	negs	r2, r2
 800d200:	61a2      	str	r2, [r4, #24]
 800d202:	6922      	ldr	r2, [r4, #16]
 800d204:	b942      	cbnz	r2, 800d218 <__swsetup_r+0xa4>
 800d206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d20a:	d1c5      	bne.n	800d198 <__swsetup_r+0x24>
 800d20c:	bd38      	pop	{r3, r4, r5, pc}
 800d20e:	0799      	lsls	r1, r3, #30
 800d210:	bf58      	it	pl
 800d212:	6962      	ldrpl	r2, [r4, #20]
 800d214:	60a2      	str	r2, [r4, #8]
 800d216:	e7f4      	b.n	800d202 <__swsetup_r+0x8e>
 800d218:	2000      	movs	r0, #0
 800d21a:	e7f7      	b.n	800d20c <__swsetup_r+0x98>
 800d21c:	20000084 	.word	0x20000084

0800d220 <memmove>:
 800d220:	4288      	cmp	r0, r1
 800d222:	b510      	push	{r4, lr}
 800d224:	eb01 0402 	add.w	r4, r1, r2
 800d228:	d902      	bls.n	800d230 <memmove+0x10>
 800d22a:	4284      	cmp	r4, r0
 800d22c:	4623      	mov	r3, r4
 800d22e:	d807      	bhi.n	800d240 <memmove+0x20>
 800d230:	1e43      	subs	r3, r0, #1
 800d232:	42a1      	cmp	r1, r4
 800d234:	d008      	beq.n	800d248 <memmove+0x28>
 800d236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d23e:	e7f8      	b.n	800d232 <memmove+0x12>
 800d240:	4402      	add	r2, r0
 800d242:	4601      	mov	r1, r0
 800d244:	428a      	cmp	r2, r1
 800d246:	d100      	bne.n	800d24a <memmove+0x2a>
 800d248:	bd10      	pop	{r4, pc}
 800d24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d252:	e7f7      	b.n	800d244 <memmove+0x24>

0800d254 <strncmp>:
 800d254:	b510      	push	{r4, lr}
 800d256:	b16a      	cbz	r2, 800d274 <strncmp+0x20>
 800d258:	3901      	subs	r1, #1
 800d25a:	1884      	adds	r4, r0, r2
 800d25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d260:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d264:	429a      	cmp	r2, r3
 800d266:	d103      	bne.n	800d270 <strncmp+0x1c>
 800d268:	42a0      	cmp	r0, r4
 800d26a:	d001      	beq.n	800d270 <strncmp+0x1c>
 800d26c:	2a00      	cmp	r2, #0
 800d26e:	d1f5      	bne.n	800d25c <strncmp+0x8>
 800d270:	1ad0      	subs	r0, r2, r3
 800d272:	bd10      	pop	{r4, pc}
 800d274:	4610      	mov	r0, r2
 800d276:	e7fc      	b.n	800d272 <strncmp+0x1e>

0800d278 <_sbrk_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d06      	ldr	r5, [pc, #24]	@ (800d294 <_sbrk_r+0x1c>)
 800d27c:	2300      	movs	r3, #0
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	602b      	str	r3, [r5, #0]
 800d284:	f7f7 f946 	bl	8004514 <_sbrk>
 800d288:	1c43      	adds	r3, r0, #1
 800d28a:	d102      	bne.n	800d292 <_sbrk_r+0x1a>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	b103      	cbz	r3, 800d292 <_sbrk_r+0x1a>
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	bd38      	pop	{r3, r4, r5, pc}
 800d294:	20000ff0 	.word	0x20000ff0

0800d298 <memcpy>:
 800d298:	440a      	add	r2, r1
 800d29a:	4291      	cmp	r1, r2
 800d29c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d2a0:	d100      	bne.n	800d2a4 <memcpy+0xc>
 800d2a2:	4770      	bx	lr
 800d2a4:	b510      	push	{r4, lr}
 800d2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ae:	4291      	cmp	r1, r2
 800d2b0:	d1f9      	bne.n	800d2a6 <memcpy+0xe>
 800d2b2:	bd10      	pop	{r4, pc}
 800d2b4:	0000      	movs	r0, r0
	...

0800d2b8 <nan>:
 800d2b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d2c0 <nan+0x8>
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	00000000 	.word	0x00000000
 800d2c4:	7ff80000 	.word	0x7ff80000

0800d2c8 <abort>:
 800d2c8:	b508      	push	{r3, lr}
 800d2ca:	2006      	movs	r0, #6
 800d2cc:	f000 fc98 	bl	800dc00 <raise>
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	f7f7 f8a7 	bl	8004424 <_exit>

0800d2d6 <_calloc_r>:
 800d2d6:	b570      	push	{r4, r5, r6, lr}
 800d2d8:	fba1 5402 	umull	r5, r4, r1, r2
 800d2dc:	b93c      	cbnz	r4, 800d2ee <_calloc_r+0x18>
 800d2de:	4629      	mov	r1, r5
 800d2e0:	f7fd fcde 	bl	800aca0 <_malloc_r>
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	b928      	cbnz	r0, 800d2f4 <_calloc_r+0x1e>
 800d2e8:	2600      	movs	r6, #0
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	bd70      	pop	{r4, r5, r6, pc}
 800d2ee:	220c      	movs	r2, #12
 800d2f0:	6002      	str	r2, [r0, #0]
 800d2f2:	e7f9      	b.n	800d2e8 <_calloc_r+0x12>
 800d2f4:	462a      	mov	r2, r5
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	f7fc fd11 	bl	8009d1e <memset>
 800d2fc:	e7f5      	b.n	800d2ea <_calloc_r+0x14>

0800d2fe <rshift>:
 800d2fe:	6903      	ldr	r3, [r0, #16]
 800d300:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d308:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d30c:	f100 0414 	add.w	r4, r0, #20
 800d310:	dd45      	ble.n	800d39e <rshift+0xa0>
 800d312:	f011 011f 	ands.w	r1, r1, #31
 800d316:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d31a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d31e:	d10c      	bne.n	800d33a <rshift+0x3c>
 800d320:	f100 0710 	add.w	r7, r0, #16
 800d324:	4629      	mov	r1, r5
 800d326:	42b1      	cmp	r1, r6
 800d328:	d334      	bcc.n	800d394 <rshift+0x96>
 800d32a:	1a9b      	subs	r3, r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	1eea      	subs	r2, r5, #3
 800d330:	4296      	cmp	r6, r2
 800d332:	bf38      	it	cc
 800d334:	2300      	movcc	r3, #0
 800d336:	4423      	add	r3, r4
 800d338:	e015      	b.n	800d366 <rshift+0x68>
 800d33a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d33e:	f1c1 0820 	rsb	r8, r1, #32
 800d342:	40cf      	lsrs	r7, r1
 800d344:	f105 0e04 	add.w	lr, r5, #4
 800d348:	46a1      	mov	r9, r4
 800d34a:	4576      	cmp	r6, lr
 800d34c:	46f4      	mov	ip, lr
 800d34e:	d815      	bhi.n	800d37c <rshift+0x7e>
 800d350:	1a9a      	subs	r2, r3, r2
 800d352:	0092      	lsls	r2, r2, #2
 800d354:	3a04      	subs	r2, #4
 800d356:	3501      	adds	r5, #1
 800d358:	42ae      	cmp	r6, r5
 800d35a:	bf38      	it	cc
 800d35c:	2200      	movcc	r2, #0
 800d35e:	18a3      	adds	r3, r4, r2
 800d360:	50a7      	str	r7, [r4, r2]
 800d362:	b107      	cbz	r7, 800d366 <rshift+0x68>
 800d364:	3304      	adds	r3, #4
 800d366:	1b1a      	subs	r2, r3, r4
 800d368:	42a3      	cmp	r3, r4
 800d36a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d36e:	bf08      	it	eq
 800d370:	2300      	moveq	r3, #0
 800d372:	6102      	str	r2, [r0, #16]
 800d374:	bf08      	it	eq
 800d376:	6143      	streq	r3, [r0, #20]
 800d378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d37c:	f8dc c000 	ldr.w	ip, [ip]
 800d380:	fa0c fc08 	lsl.w	ip, ip, r8
 800d384:	ea4c 0707 	orr.w	r7, ip, r7
 800d388:	f849 7b04 	str.w	r7, [r9], #4
 800d38c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d390:	40cf      	lsrs	r7, r1
 800d392:	e7da      	b.n	800d34a <rshift+0x4c>
 800d394:	f851 cb04 	ldr.w	ip, [r1], #4
 800d398:	f847 cf04 	str.w	ip, [r7, #4]!
 800d39c:	e7c3      	b.n	800d326 <rshift+0x28>
 800d39e:	4623      	mov	r3, r4
 800d3a0:	e7e1      	b.n	800d366 <rshift+0x68>

0800d3a2 <__hexdig_fun>:
 800d3a2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d3a6:	2b09      	cmp	r3, #9
 800d3a8:	d802      	bhi.n	800d3b0 <__hexdig_fun+0xe>
 800d3aa:	3820      	subs	r0, #32
 800d3ac:	b2c0      	uxtb	r0, r0
 800d3ae:	4770      	bx	lr
 800d3b0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d3b4:	2b05      	cmp	r3, #5
 800d3b6:	d801      	bhi.n	800d3bc <__hexdig_fun+0x1a>
 800d3b8:	3847      	subs	r0, #71	@ 0x47
 800d3ba:	e7f7      	b.n	800d3ac <__hexdig_fun+0xa>
 800d3bc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d3c0:	2b05      	cmp	r3, #5
 800d3c2:	d801      	bhi.n	800d3c8 <__hexdig_fun+0x26>
 800d3c4:	3827      	subs	r0, #39	@ 0x27
 800d3c6:	e7f1      	b.n	800d3ac <__hexdig_fun+0xa>
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	4770      	bx	lr

0800d3cc <__gethex>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	b085      	sub	sp, #20
 800d3d2:	468a      	mov	sl, r1
 800d3d4:	9302      	str	r3, [sp, #8]
 800d3d6:	680b      	ldr	r3, [r1, #0]
 800d3d8:	9001      	str	r0, [sp, #4]
 800d3da:	4690      	mov	r8, r2
 800d3dc:	1c9c      	adds	r4, r3, #2
 800d3de:	46a1      	mov	r9, r4
 800d3e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d3e4:	2830      	cmp	r0, #48	@ 0x30
 800d3e6:	d0fa      	beq.n	800d3de <__gethex+0x12>
 800d3e8:	eba9 0303 	sub.w	r3, r9, r3
 800d3ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800d3f0:	f7ff ffd7 	bl	800d3a2 <__hexdig_fun>
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d168      	bne.n	800d4cc <__gethex+0x100>
 800d3fa:	49a0      	ldr	r1, [pc, #640]	@ (800d67c <__gethex+0x2b0>)
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	4648      	mov	r0, r9
 800d400:	f7ff ff28 	bl	800d254 <strncmp>
 800d404:	4607      	mov	r7, r0
 800d406:	2800      	cmp	r0, #0
 800d408:	d167      	bne.n	800d4da <__gethex+0x10e>
 800d40a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d40e:	4626      	mov	r6, r4
 800d410:	f7ff ffc7 	bl	800d3a2 <__hexdig_fun>
 800d414:	2800      	cmp	r0, #0
 800d416:	d062      	beq.n	800d4de <__gethex+0x112>
 800d418:	4623      	mov	r3, r4
 800d41a:	7818      	ldrb	r0, [r3, #0]
 800d41c:	2830      	cmp	r0, #48	@ 0x30
 800d41e:	4699      	mov	r9, r3
 800d420:	f103 0301 	add.w	r3, r3, #1
 800d424:	d0f9      	beq.n	800d41a <__gethex+0x4e>
 800d426:	f7ff ffbc 	bl	800d3a2 <__hexdig_fun>
 800d42a:	fab0 f580 	clz	r5, r0
 800d42e:	096d      	lsrs	r5, r5, #5
 800d430:	f04f 0b01 	mov.w	fp, #1
 800d434:	464a      	mov	r2, r9
 800d436:	4616      	mov	r6, r2
 800d438:	3201      	adds	r2, #1
 800d43a:	7830      	ldrb	r0, [r6, #0]
 800d43c:	f7ff ffb1 	bl	800d3a2 <__hexdig_fun>
 800d440:	2800      	cmp	r0, #0
 800d442:	d1f8      	bne.n	800d436 <__gethex+0x6a>
 800d444:	498d      	ldr	r1, [pc, #564]	@ (800d67c <__gethex+0x2b0>)
 800d446:	2201      	movs	r2, #1
 800d448:	4630      	mov	r0, r6
 800d44a:	f7ff ff03 	bl	800d254 <strncmp>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d13f      	bne.n	800d4d2 <__gethex+0x106>
 800d452:	b944      	cbnz	r4, 800d466 <__gethex+0x9a>
 800d454:	1c74      	adds	r4, r6, #1
 800d456:	4622      	mov	r2, r4
 800d458:	4616      	mov	r6, r2
 800d45a:	3201      	adds	r2, #1
 800d45c:	7830      	ldrb	r0, [r6, #0]
 800d45e:	f7ff ffa0 	bl	800d3a2 <__hexdig_fun>
 800d462:	2800      	cmp	r0, #0
 800d464:	d1f8      	bne.n	800d458 <__gethex+0x8c>
 800d466:	1ba4      	subs	r4, r4, r6
 800d468:	00a7      	lsls	r7, r4, #2
 800d46a:	7833      	ldrb	r3, [r6, #0]
 800d46c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d470:	2b50      	cmp	r3, #80	@ 0x50
 800d472:	d13e      	bne.n	800d4f2 <__gethex+0x126>
 800d474:	7873      	ldrb	r3, [r6, #1]
 800d476:	2b2b      	cmp	r3, #43	@ 0x2b
 800d478:	d033      	beq.n	800d4e2 <__gethex+0x116>
 800d47a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d47c:	d034      	beq.n	800d4e8 <__gethex+0x11c>
 800d47e:	1c71      	adds	r1, r6, #1
 800d480:	2400      	movs	r4, #0
 800d482:	7808      	ldrb	r0, [r1, #0]
 800d484:	f7ff ff8d 	bl	800d3a2 <__hexdig_fun>
 800d488:	1e43      	subs	r3, r0, #1
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b18      	cmp	r3, #24
 800d48e:	d830      	bhi.n	800d4f2 <__gethex+0x126>
 800d490:	f1a0 0210 	sub.w	r2, r0, #16
 800d494:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d498:	f7ff ff83 	bl	800d3a2 <__hexdig_fun>
 800d49c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d4a0:	fa5f fc8c 	uxtb.w	ip, ip
 800d4a4:	f1bc 0f18 	cmp.w	ip, #24
 800d4a8:	f04f 030a 	mov.w	r3, #10
 800d4ac:	d91e      	bls.n	800d4ec <__gethex+0x120>
 800d4ae:	b104      	cbz	r4, 800d4b2 <__gethex+0xe6>
 800d4b0:	4252      	negs	r2, r2
 800d4b2:	4417      	add	r7, r2
 800d4b4:	f8ca 1000 	str.w	r1, [sl]
 800d4b8:	b1ed      	cbz	r5, 800d4f6 <__gethex+0x12a>
 800d4ba:	f1bb 0f00 	cmp.w	fp, #0
 800d4be:	bf0c      	ite	eq
 800d4c0:	2506      	moveq	r5, #6
 800d4c2:	2500      	movne	r5, #0
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	b005      	add	sp, #20
 800d4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4cc:	2500      	movs	r5, #0
 800d4ce:	462c      	mov	r4, r5
 800d4d0:	e7b0      	b.n	800d434 <__gethex+0x68>
 800d4d2:	2c00      	cmp	r4, #0
 800d4d4:	d1c7      	bne.n	800d466 <__gethex+0x9a>
 800d4d6:	4627      	mov	r7, r4
 800d4d8:	e7c7      	b.n	800d46a <__gethex+0x9e>
 800d4da:	464e      	mov	r6, r9
 800d4dc:	462f      	mov	r7, r5
 800d4de:	2501      	movs	r5, #1
 800d4e0:	e7c3      	b.n	800d46a <__gethex+0x9e>
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	1cb1      	adds	r1, r6, #2
 800d4e6:	e7cc      	b.n	800d482 <__gethex+0xb6>
 800d4e8:	2401      	movs	r4, #1
 800d4ea:	e7fb      	b.n	800d4e4 <__gethex+0x118>
 800d4ec:	fb03 0002 	mla	r0, r3, r2, r0
 800d4f0:	e7ce      	b.n	800d490 <__gethex+0xc4>
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	e7de      	b.n	800d4b4 <__gethex+0xe8>
 800d4f6:	eba6 0309 	sub.w	r3, r6, r9
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	2b07      	cmp	r3, #7
 800d500:	dc0a      	bgt.n	800d518 <__gethex+0x14c>
 800d502:	9801      	ldr	r0, [sp, #4]
 800d504:	f7fd fc58 	bl	800adb8 <_Balloc>
 800d508:	4604      	mov	r4, r0
 800d50a:	b940      	cbnz	r0, 800d51e <__gethex+0x152>
 800d50c:	4b5c      	ldr	r3, [pc, #368]	@ (800d680 <__gethex+0x2b4>)
 800d50e:	4602      	mov	r2, r0
 800d510:	21e4      	movs	r1, #228	@ 0xe4
 800d512:	485c      	ldr	r0, [pc, #368]	@ (800d684 <__gethex+0x2b8>)
 800d514:	f7fc fce6 	bl	8009ee4 <__assert_func>
 800d518:	3101      	adds	r1, #1
 800d51a:	105b      	asrs	r3, r3, #1
 800d51c:	e7ef      	b.n	800d4fe <__gethex+0x132>
 800d51e:	f100 0a14 	add.w	sl, r0, #20
 800d522:	2300      	movs	r3, #0
 800d524:	4655      	mov	r5, sl
 800d526:	469b      	mov	fp, r3
 800d528:	45b1      	cmp	r9, r6
 800d52a:	d337      	bcc.n	800d59c <__gethex+0x1d0>
 800d52c:	f845 bb04 	str.w	fp, [r5], #4
 800d530:	eba5 050a 	sub.w	r5, r5, sl
 800d534:	10ad      	asrs	r5, r5, #2
 800d536:	6125      	str	r5, [r4, #16]
 800d538:	4658      	mov	r0, fp
 800d53a:	f7fd fd2f 	bl	800af9c <__hi0bits>
 800d53e:	016d      	lsls	r5, r5, #5
 800d540:	f8d8 6000 	ldr.w	r6, [r8]
 800d544:	1a2d      	subs	r5, r5, r0
 800d546:	42b5      	cmp	r5, r6
 800d548:	dd54      	ble.n	800d5f4 <__gethex+0x228>
 800d54a:	1bad      	subs	r5, r5, r6
 800d54c:	4629      	mov	r1, r5
 800d54e:	4620      	mov	r0, r4
 800d550:	f7fe f8c3 	bl	800b6da <__any_on>
 800d554:	4681      	mov	r9, r0
 800d556:	b178      	cbz	r0, 800d578 <__gethex+0x1ac>
 800d558:	1e6b      	subs	r3, r5, #1
 800d55a:	1159      	asrs	r1, r3, #5
 800d55c:	f003 021f 	and.w	r2, r3, #31
 800d560:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d564:	f04f 0901 	mov.w	r9, #1
 800d568:	fa09 f202 	lsl.w	r2, r9, r2
 800d56c:	420a      	tst	r2, r1
 800d56e:	d003      	beq.n	800d578 <__gethex+0x1ac>
 800d570:	454b      	cmp	r3, r9
 800d572:	dc36      	bgt.n	800d5e2 <__gethex+0x216>
 800d574:	f04f 0902 	mov.w	r9, #2
 800d578:	4629      	mov	r1, r5
 800d57a:	4620      	mov	r0, r4
 800d57c:	f7ff febf 	bl	800d2fe <rshift>
 800d580:	442f      	add	r7, r5
 800d582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d586:	42bb      	cmp	r3, r7
 800d588:	da42      	bge.n	800d610 <__gethex+0x244>
 800d58a:	9801      	ldr	r0, [sp, #4]
 800d58c:	4621      	mov	r1, r4
 800d58e:	f7fd fc53 	bl	800ae38 <_Bfree>
 800d592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d594:	2300      	movs	r3, #0
 800d596:	6013      	str	r3, [r2, #0]
 800d598:	25a3      	movs	r5, #163	@ 0xa3
 800d59a:	e793      	b.n	800d4c4 <__gethex+0xf8>
 800d59c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d5a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d5a2:	d012      	beq.n	800d5ca <__gethex+0x1fe>
 800d5a4:	2b20      	cmp	r3, #32
 800d5a6:	d104      	bne.n	800d5b2 <__gethex+0x1e6>
 800d5a8:	f845 bb04 	str.w	fp, [r5], #4
 800d5ac:	f04f 0b00 	mov.w	fp, #0
 800d5b0:	465b      	mov	r3, fp
 800d5b2:	7830      	ldrb	r0, [r6, #0]
 800d5b4:	9303      	str	r3, [sp, #12]
 800d5b6:	f7ff fef4 	bl	800d3a2 <__hexdig_fun>
 800d5ba:	9b03      	ldr	r3, [sp, #12]
 800d5bc:	f000 000f 	and.w	r0, r0, #15
 800d5c0:	4098      	lsls	r0, r3
 800d5c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	e7ae      	b.n	800d528 <__gethex+0x15c>
 800d5ca:	45b1      	cmp	r9, r6
 800d5cc:	d8ea      	bhi.n	800d5a4 <__gethex+0x1d8>
 800d5ce:	492b      	ldr	r1, [pc, #172]	@ (800d67c <__gethex+0x2b0>)
 800d5d0:	9303      	str	r3, [sp, #12]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	f7ff fe3d 	bl	800d254 <strncmp>
 800d5da:	9b03      	ldr	r3, [sp, #12]
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d1e1      	bne.n	800d5a4 <__gethex+0x1d8>
 800d5e0:	e7a2      	b.n	800d528 <__gethex+0x15c>
 800d5e2:	1ea9      	subs	r1, r5, #2
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f7fe f878 	bl	800b6da <__any_on>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d0c2      	beq.n	800d574 <__gethex+0x1a8>
 800d5ee:	f04f 0903 	mov.w	r9, #3
 800d5f2:	e7c1      	b.n	800d578 <__gethex+0x1ac>
 800d5f4:	da09      	bge.n	800d60a <__gethex+0x23e>
 800d5f6:	1b75      	subs	r5, r6, r5
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	9801      	ldr	r0, [sp, #4]
 800d5fc:	462a      	mov	r2, r5
 800d5fe:	f7fd fe33 	bl	800b268 <__lshift>
 800d602:	1b7f      	subs	r7, r7, r5
 800d604:	4604      	mov	r4, r0
 800d606:	f100 0a14 	add.w	sl, r0, #20
 800d60a:	f04f 0900 	mov.w	r9, #0
 800d60e:	e7b8      	b.n	800d582 <__gethex+0x1b6>
 800d610:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d614:	42bd      	cmp	r5, r7
 800d616:	dd6f      	ble.n	800d6f8 <__gethex+0x32c>
 800d618:	1bed      	subs	r5, r5, r7
 800d61a:	42ae      	cmp	r6, r5
 800d61c:	dc34      	bgt.n	800d688 <__gethex+0x2bc>
 800d61e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d622:	2b02      	cmp	r3, #2
 800d624:	d022      	beq.n	800d66c <__gethex+0x2a0>
 800d626:	2b03      	cmp	r3, #3
 800d628:	d024      	beq.n	800d674 <__gethex+0x2a8>
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d115      	bne.n	800d65a <__gethex+0x28e>
 800d62e:	42ae      	cmp	r6, r5
 800d630:	d113      	bne.n	800d65a <__gethex+0x28e>
 800d632:	2e01      	cmp	r6, #1
 800d634:	d10b      	bne.n	800d64e <__gethex+0x282>
 800d636:	9a02      	ldr	r2, [sp, #8]
 800d638:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d63c:	6013      	str	r3, [r2, #0]
 800d63e:	2301      	movs	r3, #1
 800d640:	6123      	str	r3, [r4, #16]
 800d642:	f8ca 3000 	str.w	r3, [sl]
 800d646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d648:	2562      	movs	r5, #98	@ 0x62
 800d64a:	601c      	str	r4, [r3, #0]
 800d64c:	e73a      	b.n	800d4c4 <__gethex+0xf8>
 800d64e:	1e71      	subs	r1, r6, #1
 800d650:	4620      	mov	r0, r4
 800d652:	f7fe f842 	bl	800b6da <__any_on>
 800d656:	2800      	cmp	r0, #0
 800d658:	d1ed      	bne.n	800d636 <__gethex+0x26a>
 800d65a:	9801      	ldr	r0, [sp, #4]
 800d65c:	4621      	mov	r1, r4
 800d65e:	f7fd fbeb 	bl	800ae38 <_Bfree>
 800d662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d664:	2300      	movs	r3, #0
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	2550      	movs	r5, #80	@ 0x50
 800d66a:	e72b      	b.n	800d4c4 <__gethex+0xf8>
 800d66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1f3      	bne.n	800d65a <__gethex+0x28e>
 800d672:	e7e0      	b.n	800d636 <__gethex+0x26a>
 800d674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1dd      	bne.n	800d636 <__gethex+0x26a>
 800d67a:	e7ee      	b.n	800d65a <__gethex+0x28e>
 800d67c:	0800e2c8 	.word	0x0800e2c8
 800d680:	0800e15e 	.word	0x0800e15e
 800d684:	0800e354 	.word	0x0800e354
 800d688:	1e6f      	subs	r7, r5, #1
 800d68a:	f1b9 0f00 	cmp.w	r9, #0
 800d68e:	d130      	bne.n	800d6f2 <__gethex+0x326>
 800d690:	b127      	cbz	r7, 800d69c <__gethex+0x2d0>
 800d692:	4639      	mov	r1, r7
 800d694:	4620      	mov	r0, r4
 800d696:	f7fe f820 	bl	800b6da <__any_on>
 800d69a:	4681      	mov	r9, r0
 800d69c:	117a      	asrs	r2, r7, #5
 800d69e:	2301      	movs	r3, #1
 800d6a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d6a4:	f007 071f 	and.w	r7, r7, #31
 800d6a8:	40bb      	lsls	r3, r7
 800d6aa:	4213      	tst	r3, r2
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	bf18      	it	ne
 800d6b2:	f049 0902 	orrne.w	r9, r9, #2
 800d6b6:	f7ff fe22 	bl	800d2fe <rshift>
 800d6ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d6be:	1b76      	subs	r6, r6, r5
 800d6c0:	2502      	movs	r5, #2
 800d6c2:	f1b9 0f00 	cmp.w	r9, #0
 800d6c6:	d047      	beq.n	800d758 <__gethex+0x38c>
 800d6c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d015      	beq.n	800d6fc <__gethex+0x330>
 800d6d0:	2b03      	cmp	r3, #3
 800d6d2:	d017      	beq.n	800d704 <__gethex+0x338>
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d109      	bne.n	800d6ec <__gethex+0x320>
 800d6d8:	f019 0f02 	tst.w	r9, #2
 800d6dc:	d006      	beq.n	800d6ec <__gethex+0x320>
 800d6de:	f8da 3000 	ldr.w	r3, [sl]
 800d6e2:	ea49 0903 	orr.w	r9, r9, r3
 800d6e6:	f019 0f01 	tst.w	r9, #1
 800d6ea:	d10e      	bne.n	800d70a <__gethex+0x33e>
 800d6ec:	f045 0510 	orr.w	r5, r5, #16
 800d6f0:	e032      	b.n	800d758 <__gethex+0x38c>
 800d6f2:	f04f 0901 	mov.w	r9, #1
 800d6f6:	e7d1      	b.n	800d69c <__gethex+0x2d0>
 800d6f8:	2501      	movs	r5, #1
 800d6fa:	e7e2      	b.n	800d6c2 <__gethex+0x2f6>
 800d6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6fe:	f1c3 0301 	rsb	r3, r3, #1
 800d702:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d706:	2b00      	cmp	r3, #0
 800d708:	d0f0      	beq.n	800d6ec <__gethex+0x320>
 800d70a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d70e:	f104 0314 	add.w	r3, r4, #20
 800d712:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d716:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d71a:	f04f 0c00 	mov.w	ip, #0
 800d71e:	4618      	mov	r0, r3
 800d720:	f853 2b04 	ldr.w	r2, [r3], #4
 800d724:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d728:	d01b      	beq.n	800d762 <__gethex+0x396>
 800d72a:	3201      	adds	r2, #1
 800d72c:	6002      	str	r2, [r0, #0]
 800d72e:	2d02      	cmp	r5, #2
 800d730:	f104 0314 	add.w	r3, r4, #20
 800d734:	d13c      	bne.n	800d7b0 <__gethex+0x3e4>
 800d736:	f8d8 2000 	ldr.w	r2, [r8]
 800d73a:	3a01      	subs	r2, #1
 800d73c:	42b2      	cmp	r2, r6
 800d73e:	d109      	bne.n	800d754 <__gethex+0x388>
 800d740:	1171      	asrs	r1, r6, #5
 800d742:	2201      	movs	r2, #1
 800d744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d748:	f006 061f 	and.w	r6, r6, #31
 800d74c:	fa02 f606 	lsl.w	r6, r2, r6
 800d750:	421e      	tst	r6, r3
 800d752:	d13a      	bne.n	800d7ca <__gethex+0x3fe>
 800d754:	f045 0520 	orr.w	r5, r5, #32
 800d758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d75a:	601c      	str	r4, [r3, #0]
 800d75c:	9b02      	ldr	r3, [sp, #8]
 800d75e:	601f      	str	r7, [r3, #0]
 800d760:	e6b0      	b.n	800d4c4 <__gethex+0xf8>
 800d762:	4299      	cmp	r1, r3
 800d764:	f843 cc04 	str.w	ip, [r3, #-4]
 800d768:	d8d9      	bhi.n	800d71e <__gethex+0x352>
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	459b      	cmp	fp, r3
 800d76e:	db17      	blt.n	800d7a0 <__gethex+0x3d4>
 800d770:	6861      	ldr	r1, [r4, #4]
 800d772:	9801      	ldr	r0, [sp, #4]
 800d774:	3101      	adds	r1, #1
 800d776:	f7fd fb1f 	bl	800adb8 <_Balloc>
 800d77a:	4681      	mov	r9, r0
 800d77c:	b918      	cbnz	r0, 800d786 <__gethex+0x3ba>
 800d77e:	4b1a      	ldr	r3, [pc, #104]	@ (800d7e8 <__gethex+0x41c>)
 800d780:	4602      	mov	r2, r0
 800d782:	2184      	movs	r1, #132	@ 0x84
 800d784:	e6c5      	b.n	800d512 <__gethex+0x146>
 800d786:	6922      	ldr	r2, [r4, #16]
 800d788:	3202      	adds	r2, #2
 800d78a:	f104 010c 	add.w	r1, r4, #12
 800d78e:	0092      	lsls	r2, r2, #2
 800d790:	300c      	adds	r0, #12
 800d792:	f7ff fd81 	bl	800d298 <memcpy>
 800d796:	4621      	mov	r1, r4
 800d798:	9801      	ldr	r0, [sp, #4]
 800d79a:	f7fd fb4d 	bl	800ae38 <_Bfree>
 800d79e:	464c      	mov	r4, r9
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7a8:	6122      	str	r2, [r4, #16]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	615a      	str	r2, [r3, #20]
 800d7ae:	e7be      	b.n	800d72e <__gethex+0x362>
 800d7b0:	6922      	ldr	r2, [r4, #16]
 800d7b2:	455a      	cmp	r2, fp
 800d7b4:	dd0b      	ble.n	800d7ce <__gethex+0x402>
 800d7b6:	2101      	movs	r1, #1
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f7ff fda0 	bl	800d2fe <rshift>
 800d7be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7c2:	3701      	adds	r7, #1
 800d7c4:	42bb      	cmp	r3, r7
 800d7c6:	f6ff aee0 	blt.w	800d58a <__gethex+0x1be>
 800d7ca:	2501      	movs	r5, #1
 800d7cc:	e7c2      	b.n	800d754 <__gethex+0x388>
 800d7ce:	f016 061f 	ands.w	r6, r6, #31
 800d7d2:	d0fa      	beq.n	800d7ca <__gethex+0x3fe>
 800d7d4:	4453      	add	r3, sl
 800d7d6:	f1c6 0620 	rsb	r6, r6, #32
 800d7da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d7de:	f7fd fbdd 	bl	800af9c <__hi0bits>
 800d7e2:	42b0      	cmp	r0, r6
 800d7e4:	dbe7      	blt.n	800d7b6 <__gethex+0x3ea>
 800d7e6:	e7f0      	b.n	800d7ca <__gethex+0x3fe>
 800d7e8:	0800e15e 	.word	0x0800e15e

0800d7ec <L_shift>:
 800d7ec:	f1c2 0208 	rsb	r2, r2, #8
 800d7f0:	0092      	lsls	r2, r2, #2
 800d7f2:	b570      	push	{r4, r5, r6, lr}
 800d7f4:	f1c2 0620 	rsb	r6, r2, #32
 800d7f8:	6843      	ldr	r3, [r0, #4]
 800d7fa:	6804      	ldr	r4, [r0, #0]
 800d7fc:	fa03 f506 	lsl.w	r5, r3, r6
 800d800:	432c      	orrs	r4, r5
 800d802:	40d3      	lsrs	r3, r2
 800d804:	6004      	str	r4, [r0, #0]
 800d806:	f840 3f04 	str.w	r3, [r0, #4]!
 800d80a:	4288      	cmp	r0, r1
 800d80c:	d3f4      	bcc.n	800d7f8 <L_shift+0xc>
 800d80e:	bd70      	pop	{r4, r5, r6, pc}

0800d810 <__match>:
 800d810:	b530      	push	{r4, r5, lr}
 800d812:	6803      	ldr	r3, [r0, #0]
 800d814:	3301      	adds	r3, #1
 800d816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d81a:	b914      	cbnz	r4, 800d822 <__match+0x12>
 800d81c:	6003      	str	r3, [r0, #0]
 800d81e:	2001      	movs	r0, #1
 800d820:	bd30      	pop	{r4, r5, pc}
 800d822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d826:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d82a:	2d19      	cmp	r5, #25
 800d82c:	bf98      	it	ls
 800d82e:	3220      	addls	r2, #32
 800d830:	42a2      	cmp	r2, r4
 800d832:	d0f0      	beq.n	800d816 <__match+0x6>
 800d834:	2000      	movs	r0, #0
 800d836:	e7f3      	b.n	800d820 <__match+0x10>

0800d838 <__hexnan>:
 800d838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83c:	680b      	ldr	r3, [r1, #0]
 800d83e:	6801      	ldr	r1, [r0, #0]
 800d840:	115e      	asrs	r6, r3, #5
 800d842:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d846:	f013 031f 	ands.w	r3, r3, #31
 800d84a:	b087      	sub	sp, #28
 800d84c:	bf18      	it	ne
 800d84e:	3604      	addne	r6, #4
 800d850:	2500      	movs	r5, #0
 800d852:	1f37      	subs	r7, r6, #4
 800d854:	4682      	mov	sl, r0
 800d856:	4690      	mov	r8, r2
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d85e:	46b9      	mov	r9, r7
 800d860:	463c      	mov	r4, r7
 800d862:	9502      	str	r5, [sp, #8]
 800d864:	46ab      	mov	fp, r5
 800d866:	784a      	ldrb	r2, [r1, #1]
 800d868:	1c4b      	adds	r3, r1, #1
 800d86a:	9303      	str	r3, [sp, #12]
 800d86c:	b342      	cbz	r2, 800d8c0 <__hexnan+0x88>
 800d86e:	4610      	mov	r0, r2
 800d870:	9105      	str	r1, [sp, #20]
 800d872:	9204      	str	r2, [sp, #16]
 800d874:	f7ff fd95 	bl	800d3a2 <__hexdig_fun>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d151      	bne.n	800d920 <__hexnan+0xe8>
 800d87c:	9a04      	ldr	r2, [sp, #16]
 800d87e:	9905      	ldr	r1, [sp, #20]
 800d880:	2a20      	cmp	r2, #32
 800d882:	d818      	bhi.n	800d8b6 <__hexnan+0x7e>
 800d884:	9b02      	ldr	r3, [sp, #8]
 800d886:	459b      	cmp	fp, r3
 800d888:	dd13      	ble.n	800d8b2 <__hexnan+0x7a>
 800d88a:	454c      	cmp	r4, r9
 800d88c:	d206      	bcs.n	800d89c <__hexnan+0x64>
 800d88e:	2d07      	cmp	r5, #7
 800d890:	dc04      	bgt.n	800d89c <__hexnan+0x64>
 800d892:	462a      	mov	r2, r5
 800d894:	4649      	mov	r1, r9
 800d896:	4620      	mov	r0, r4
 800d898:	f7ff ffa8 	bl	800d7ec <L_shift>
 800d89c:	4544      	cmp	r4, r8
 800d89e:	d952      	bls.n	800d946 <__hexnan+0x10e>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f1a4 0904 	sub.w	r9, r4, #4
 800d8a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8aa:	f8cd b008 	str.w	fp, [sp, #8]
 800d8ae:	464c      	mov	r4, r9
 800d8b0:	461d      	mov	r5, r3
 800d8b2:	9903      	ldr	r1, [sp, #12]
 800d8b4:	e7d7      	b.n	800d866 <__hexnan+0x2e>
 800d8b6:	2a29      	cmp	r2, #41	@ 0x29
 800d8b8:	d157      	bne.n	800d96a <__hexnan+0x132>
 800d8ba:	3102      	adds	r1, #2
 800d8bc:	f8ca 1000 	str.w	r1, [sl]
 800d8c0:	f1bb 0f00 	cmp.w	fp, #0
 800d8c4:	d051      	beq.n	800d96a <__hexnan+0x132>
 800d8c6:	454c      	cmp	r4, r9
 800d8c8:	d206      	bcs.n	800d8d8 <__hexnan+0xa0>
 800d8ca:	2d07      	cmp	r5, #7
 800d8cc:	dc04      	bgt.n	800d8d8 <__hexnan+0xa0>
 800d8ce:	462a      	mov	r2, r5
 800d8d0:	4649      	mov	r1, r9
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f7ff ff8a 	bl	800d7ec <L_shift>
 800d8d8:	4544      	cmp	r4, r8
 800d8da:	d936      	bls.n	800d94a <__hexnan+0x112>
 800d8dc:	f1a8 0204 	sub.w	r2, r8, #4
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8ea:	429f      	cmp	r7, r3
 800d8ec:	d2f9      	bcs.n	800d8e2 <__hexnan+0xaa>
 800d8ee:	1b3b      	subs	r3, r7, r4
 800d8f0:	f023 0303 	bic.w	r3, r3, #3
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	3401      	adds	r4, #1
 800d8f8:	3e03      	subs	r6, #3
 800d8fa:	42b4      	cmp	r4, r6
 800d8fc:	bf88      	it	hi
 800d8fe:	2304      	movhi	r3, #4
 800d900:	4443      	add	r3, r8
 800d902:	2200      	movs	r2, #0
 800d904:	f843 2b04 	str.w	r2, [r3], #4
 800d908:	429f      	cmp	r7, r3
 800d90a:	d2fb      	bcs.n	800d904 <__hexnan+0xcc>
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	b91b      	cbnz	r3, 800d918 <__hexnan+0xe0>
 800d910:	4547      	cmp	r7, r8
 800d912:	d128      	bne.n	800d966 <__hexnan+0x12e>
 800d914:	2301      	movs	r3, #1
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	2005      	movs	r0, #5
 800d91a:	b007      	add	sp, #28
 800d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d920:	3501      	adds	r5, #1
 800d922:	2d08      	cmp	r5, #8
 800d924:	f10b 0b01 	add.w	fp, fp, #1
 800d928:	dd06      	ble.n	800d938 <__hexnan+0x100>
 800d92a:	4544      	cmp	r4, r8
 800d92c:	d9c1      	bls.n	800d8b2 <__hexnan+0x7a>
 800d92e:	2300      	movs	r3, #0
 800d930:	f844 3c04 	str.w	r3, [r4, #-4]
 800d934:	2501      	movs	r5, #1
 800d936:	3c04      	subs	r4, #4
 800d938:	6822      	ldr	r2, [r4, #0]
 800d93a:	f000 000f 	and.w	r0, r0, #15
 800d93e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d942:	6020      	str	r0, [r4, #0]
 800d944:	e7b5      	b.n	800d8b2 <__hexnan+0x7a>
 800d946:	2508      	movs	r5, #8
 800d948:	e7b3      	b.n	800d8b2 <__hexnan+0x7a>
 800d94a:	9b01      	ldr	r3, [sp, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0dd      	beq.n	800d90c <__hexnan+0xd4>
 800d950:	f1c3 0320 	rsb	r3, r3, #32
 800d954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d958:	40da      	lsrs	r2, r3
 800d95a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d95e:	4013      	ands	r3, r2
 800d960:	f846 3c04 	str.w	r3, [r6, #-4]
 800d964:	e7d2      	b.n	800d90c <__hexnan+0xd4>
 800d966:	3f04      	subs	r7, #4
 800d968:	e7d0      	b.n	800d90c <__hexnan+0xd4>
 800d96a:	2004      	movs	r0, #4
 800d96c:	e7d5      	b.n	800d91a <__hexnan+0xe2>

0800d96e <__ascii_mbtowc>:
 800d96e:	b082      	sub	sp, #8
 800d970:	b901      	cbnz	r1, 800d974 <__ascii_mbtowc+0x6>
 800d972:	a901      	add	r1, sp, #4
 800d974:	b142      	cbz	r2, 800d988 <__ascii_mbtowc+0x1a>
 800d976:	b14b      	cbz	r3, 800d98c <__ascii_mbtowc+0x1e>
 800d978:	7813      	ldrb	r3, [r2, #0]
 800d97a:	600b      	str	r3, [r1, #0]
 800d97c:	7812      	ldrb	r2, [r2, #0]
 800d97e:	1e10      	subs	r0, r2, #0
 800d980:	bf18      	it	ne
 800d982:	2001      	movne	r0, #1
 800d984:	b002      	add	sp, #8
 800d986:	4770      	bx	lr
 800d988:	4610      	mov	r0, r2
 800d98a:	e7fb      	b.n	800d984 <__ascii_mbtowc+0x16>
 800d98c:	f06f 0001 	mvn.w	r0, #1
 800d990:	e7f8      	b.n	800d984 <__ascii_mbtowc+0x16>

0800d992 <_realloc_r>:
 800d992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d996:	4680      	mov	r8, r0
 800d998:	4615      	mov	r5, r2
 800d99a:	460c      	mov	r4, r1
 800d99c:	b921      	cbnz	r1, 800d9a8 <_realloc_r+0x16>
 800d99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	f7fd b97c 	b.w	800aca0 <_malloc_r>
 800d9a8:	b92a      	cbnz	r2, 800d9b6 <_realloc_r+0x24>
 800d9aa:	f7fd f905 	bl	800abb8 <_free_r>
 800d9ae:	2400      	movs	r4, #0
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b6:	f000 f961 	bl	800dc7c <_malloc_usable_size_r>
 800d9ba:	4285      	cmp	r5, r0
 800d9bc:	4606      	mov	r6, r0
 800d9be:	d802      	bhi.n	800d9c6 <_realloc_r+0x34>
 800d9c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9c4:	d8f4      	bhi.n	800d9b0 <_realloc_r+0x1e>
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4640      	mov	r0, r8
 800d9ca:	f7fd f969 	bl	800aca0 <_malloc_r>
 800d9ce:	4607      	mov	r7, r0
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d0ec      	beq.n	800d9ae <_realloc_r+0x1c>
 800d9d4:	42b5      	cmp	r5, r6
 800d9d6:	462a      	mov	r2, r5
 800d9d8:	4621      	mov	r1, r4
 800d9da:	bf28      	it	cs
 800d9dc:	4632      	movcs	r2, r6
 800d9de:	f7ff fc5b 	bl	800d298 <memcpy>
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	f7fd f8e7 	bl	800abb8 <_free_r>
 800d9ea:	463c      	mov	r4, r7
 800d9ec:	e7e0      	b.n	800d9b0 <_realloc_r+0x1e>
	...

0800d9f0 <_strtoul_l.constprop.0>:
 800d9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f4:	4e34      	ldr	r6, [pc, #208]	@ (800dac8 <_strtoul_l.constprop.0+0xd8>)
 800d9f6:	4686      	mov	lr, r0
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da00:	5d37      	ldrb	r7, [r6, r4]
 800da02:	f017 0708 	ands.w	r7, r7, #8
 800da06:	d1f8      	bne.n	800d9fa <_strtoul_l.constprop.0+0xa>
 800da08:	2c2d      	cmp	r4, #45	@ 0x2d
 800da0a:	d12f      	bne.n	800da6c <_strtoul_l.constprop.0+0x7c>
 800da0c:	782c      	ldrb	r4, [r5, #0]
 800da0e:	2701      	movs	r7, #1
 800da10:	1c85      	adds	r5, r0, #2
 800da12:	f033 0010 	bics.w	r0, r3, #16
 800da16:	d109      	bne.n	800da2c <_strtoul_l.constprop.0+0x3c>
 800da18:	2c30      	cmp	r4, #48	@ 0x30
 800da1a:	d12c      	bne.n	800da76 <_strtoul_l.constprop.0+0x86>
 800da1c:	7828      	ldrb	r0, [r5, #0]
 800da1e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800da22:	2858      	cmp	r0, #88	@ 0x58
 800da24:	d127      	bne.n	800da76 <_strtoul_l.constprop.0+0x86>
 800da26:	786c      	ldrb	r4, [r5, #1]
 800da28:	2310      	movs	r3, #16
 800da2a:	3502      	adds	r5, #2
 800da2c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800da30:	2600      	movs	r6, #0
 800da32:	fbb8 f8f3 	udiv	r8, r8, r3
 800da36:	fb03 f908 	mul.w	r9, r3, r8
 800da3a:	ea6f 0909 	mvn.w	r9, r9
 800da3e:	4630      	mov	r0, r6
 800da40:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800da44:	f1bc 0f09 	cmp.w	ip, #9
 800da48:	d81c      	bhi.n	800da84 <_strtoul_l.constprop.0+0x94>
 800da4a:	4664      	mov	r4, ip
 800da4c:	42a3      	cmp	r3, r4
 800da4e:	dd2a      	ble.n	800daa6 <_strtoul_l.constprop.0+0xb6>
 800da50:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800da54:	d007      	beq.n	800da66 <_strtoul_l.constprop.0+0x76>
 800da56:	4580      	cmp	r8, r0
 800da58:	d322      	bcc.n	800daa0 <_strtoul_l.constprop.0+0xb0>
 800da5a:	d101      	bne.n	800da60 <_strtoul_l.constprop.0+0x70>
 800da5c:	45a1      	cmp	r9, r4
 800da5e:	db1f      	blt.n	800daa0 <_strtoul_l.constprop.0+0xb0>
 800da60:	fb00 4003 	mla	r0, r0, r3, r4
 800da64:	2601      	movs	r6, #1
 800da66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da6a:	e7e9      	b.n	800da40 <_strtoul_l.constprop.0+0x50>
 800da6c:	2c2b      	cmp	r4, #43	@ 0x2b
 800da6e:	bf04      	itt	eq
 800da70:	782c      	ldrbeq	r4, [r5, #0]
 800da72:	1c85      	addeq	r5, r0, #2
 800da74:	e7cd      	b.n	800da12 <_strtoul_l.constprop.0+0x22>
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1d8      	bne.n	800da2c <_strtoul_l.constprop.0+0x3c>
 800da7a:	2c30      	cmp	r4, #48	@ 0x30
 800da7c:	bf0c      	ite	eq
 800da7e:	2308      	moveq	r3, #8
 800da80:	230a      	movne	r3, #10
 800da82:	e7d3      	b.n	800da2c <_strtoul_l.constprop.0+0x3c>
 800da84:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800da88:	f1bc 0f19 	cmp.w	ip, #25
 800da8c:	d801      	bhi.n	800da92 <_strtoul_l.constprop.0+0xa2>
 800da8e:	3c37      	subs	r4, #55	@ 0x37
 800da90:	e7dc      	b.n	800da4c <_strtoul_l.constprop.0+0x5c>
 800da92:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800da96:	f1bc 0f19 	cmp.w	ip, #25
 800da9a:	d804      	bhi.n	800daa6 <_strtoul_l.constprop.0+0xb6>
 800da9c:	3c57      	subs	r4, #87	@ 0x57
 800da9e:	e7d5      	b.n	800da4c <_strtoul_l.constprop.0+0x5c>
 800daa0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800daa4:	e7df      	b.n	800da66 <_strtoul_l.constprop.0+0x76>
 800daa6:	1c73      	adds	r3, r6, #1
 800daa8:	d106      	bne.n	800dab8 <_strtoul_l.constprop.0+0xc8>
 800daaa:	2322      	movs	r3, #34	@ 0x22
 800daac:	f8ce 3000 	str.w	r3, [lr]
 800dab0:	4630      	mov	r0, r6
 800dab2:	b932      	cbnz	r2, 800dac2 <_strtoul_l.constprop.0+0xd2>
 800dab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dab8:	b107      	cbz	r7, 800dabc <_strtoul_l.constprop.0+0xcc>
 800daba:	4240      	negs	r0, r0
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	d0f9      	beq.n	800dab4 <_strtoul_l.constprop.0+0xc4>
 800dac0:	b106      	cbz	r6, 800dac4 <_strtoul_l.constprop.0+0xd4>
 800dac2:	1e69      	subs	r1, r5, #1
 800dac4:	6011      	str	r1, [r2, #0]
 800dac6:	e7f5      	b.n	800dab4 <_strtoul_l.constprop.0+0xc4>
 800dac8:	0800df15 	.word	0x0800df15

0800dacc <_strtoul_r>:
 800dacc:	f7ff bf90 	b.w	800d9f0 <_strtoul_l.constprop.0>

0800dad0 <__ascii_wctomb>:
 800dad0:	4603      	mov	r3, r0
 800dad2:	4608      	mov	r0, r1
 800dad4:	b141      	cbz	r1, 800dae8 <__ascii_wctomb+0x18>
 800dad6:	2aff      	cmp	r2, #255	@ 0xff
 800dad8:	d904      	bls.n	800dae4 <__ascii_wctomb+0x14>
 800dada:	228a      	movs	r2, #138	@ 0x8a
 800dadc:	601a      	str	r2, [r3, #0]
 800dade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dae2:	4770      	bx	lr
 800dae4:	700a      	strb	r2, [r1, #0]
 800dae6:	2001      	movs	r0, #1
 800dae8:	4770      	bx	lr

0800daea <__swhatbuf_r>:
 800daea:	b570      	push	{r4, r5, r6, lr}
 800daec:	460c      	mov	r4, r1
 800daee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf2:	2900      	cmp	r1, #0
 800daf4:	b096      	sub	sp, #88	@ 0x58
 800daf6:	4615      	mov	r5, r2
 800daf8:	461e      	mov	r6, r3
 800dafa:	da0d      	bge.n	800db18 <__swhatbuf_r+0x2e>
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db02:	f04f 0100 	mov.w	r1, #0
 800db06:	bf14      	ite	ne
 800db08:	2340      	movne	r3, #64	@ 0x40
 800db0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db0e:	2000      	movs	r0, #0
 800db10:	6031      	str	r1, [r6, #0]
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	b016      	add	sp, #88	@ 0x58
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	466a      	mov	r2, sp
 800db1a:	f000 f879 	bl	800dc10 <_fstat_r>
 800db1e:	2800      	cmp	r0, #0
 800db20:	dbec      	blt.n	800dafc <__swhatbuf_r+0x12>
 800db22:	9901      	ldr	r1, [sp, #4]
 800db24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db2c:	4259      	negs	r1, r3
 800db2e:	4159      	adcs	r1, r3
 800db30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db34:	e7eb      	b.n	800db0e <__swhatbuf_r+0x24>

0800db36 <__smakebuf_r>:
 800db36:	898b      	ldrh	r3, [r1, #12]
 800db38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db3a:	079d      	lsls	r5, r3, #30
 800db3c:	4606      	mov	r6, r0
 800db3e:	460c      	mov	r4, r1
 800db40:	d507      	bpl.n	800db52 <__smakebuf_r+0x1c>
 800db42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	6123      	str	r3, [r4, #16]
 800db4a:	2301      	movs	r3, #1
 800db4c:	6163      	str	r3, [r4, #20]
 800db4e:	b003      	add	sp, #12
 800db50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db52:	ab01      	add	r3, sp, #4
 800db54:	466a      	mov	r2, sp
 800db56:	f7ff ffc8 	bl	800daea <__swhatbuf_r>
 800db5a:	9f00      	ldr	r7, [sp, #0]
 800db5c:	4605      	mov	r5, r0
 800db5e:	4639      	mov	r1, r7
 800db60:	4630      	mov	r0, r6
 800db62:	f7fd f89d 	bl	800aca0 <_malloc_r>
 800db66:	b948      	cbnz	r0, 800db7c <__smakebuf_r+0x46>
 800db68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db6c:	059a      	lsls	r2, r3, #22
 800db6e:	d4ee      	bmi.n	800db4e <__smakebuf_r+0x18>
 800db70:	f023 0303 	bic.w	r3, r3, #3
 800db74:	f043 0302 	orr.w	r3, r3, #2
 800db78:	81a3      	strh	r3, [r4, #12]
 800db7a:	e7e2      	b.n	800db42 <__smakebuf_r+0xc>
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	6020      	str	r0, [r4, #0]
 800db80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	9b01      	ldr	r3, [sp, #4]
 800db88:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db8c:	b15b      	cbz	r3, 800dba6 <__smakebuf_r+0x70>
 800db8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db92:	4630      	mov	r0, r6
 800db94:	f000 f84e 	bl	800dc34 <_isatty_r>
 800db98:	b128      	cbz	r0, 800dba6 <__smakebuf_r+0x70>
 800db9a:	89a3      	ldrh	r3, [r4, #12]
 800db9c:	f023 0303 	bic.w	r3, r3, #3
 800dba0:	f043 0301 	orr.w	r3, r3, #1
 800dba4:	81a3      	strh	r3, [r4, #12]
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	431d      	orrs	r5, r3
 800dbaa:	81a5      	strh	r5, [r4, #12]
 800dbac:	e7cf      	b.n	800db4e <__smakebuf_r+0x18>

0800dbae <_raise_r>:
 800dbae:	291f      	cmp	r1, #31
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	d904      	bls.n	800dbc2 <_raise_r+0x14>
 800dbb8:	2316      	movs	r3, #22
 800dbba:	6003      	str	r3, [r0, #0]
 800dbbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbc0:	bd38      	pop	{r3, r4, r5, pc}
 800dbc2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbc4:	b112      	cbz	r2, 800dbcc <_raise_r+0x1e>
 800dbc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbca:	b94b      	cbnz	r3, 800dbe0 <_raise_r+0x32>
 800dbcc:	4628      	mov	r0, r5
 800dbce:	f000 f853 	bl	800dc78 <_getpid_r>
 800dbd2:	4622      	mov	r2, r4
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbdc:	f000 b83a 	b.w	800dc54 <_kill_r>
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d00a      	beq.n	800dbfa <_raise_r+0x4c>
 800dbe4:	1c59      	adds	r1, r3, #1
 800dbe6:	d103      	bne.n	800dbf0 <_raise_r+0x42>
 800dbe8:	2316      	movs	r3, #22
 800dbea:	6003      	str	r3, [r0, #0]
 800dbec:	2001      	movs	r0, #1
 800dbee:	e7e7      	b.n	800dbc0 <_raise_r+0x12>
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	4798      	blx	r3
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	e7e0      	b.n	800dbc0 <_raise_r+0x12>
	...

0800dc00 <raise>:
 800dc00:	4b02      	ldr	r3, [pc, #8]	@ (800dc0c <raise+0xc>)
 800dc02:	4601      	mov	r1, r0
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	f7ff bfd2 	b.w	800dbae <_raise_r>
 800dc0a:	bf00      	nop
 800dc0c:	20000084 	.word	0x20000084

0800dc10 <_fstat_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4d07      	ldr	r5, [pc, #28]	@ (800dc30 <_fstat_r+0x20>)
 800dc14:	2300      	movs	r3, #0
 800dc16:	4604      	mov	r4, r0
 800dc18:	4608      	mov	r0, r1
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	f7f6 fc51 	bl	80044c4 <_fstat>
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	d102      	bne.n	800dc2c <_fstat_r+0x1c>
 800dc26:	682b      	ldr	r3, [r5, #0]
 800dc28:	b103      	cbz	r3, 800dc2c <_fstat_r+0x1c>
 800dc2a:	6023      	str	r3, [r4, #0]
 800dc2c:	bd38      	pop	{r3, r4, r5, pc}
 800dc2e:	bf00      	nop
 800dc30:	20000ff0 	.word	0x20000ff0

0800dc34 <_isatty_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d06      	ldr	r5, [pc, #24]	@ (800dc50 <_isatty_r+0x1c>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	f7f6 fc50 	bl	80044e4 <_isatty>
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	d102      	bne.n	800dc4e <_isatty_r+0x1a>
 800dc48:	682b      	ldr	r3, [r5, #0]
 800dc4a:	b103      	cbz	r3, 800dc4e <_isatty_r+0x1a>
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	20000ff0 	.word	0x20000ff0

0800dc54 <_kill_r>:
 800dc54:	b538      	push	{r3, r4, r5, lr}
 800dc56:	4d07      	ldr	r5, [pc, #28]	@ (800dc74 <_kill_r+0x20>)
 800dc58:	2300      	movs	r3, #0
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	4608      	mov	r0, r1
 800dc5e:	4611      	mov	r1, r2
 800dc60:	602b      	str	r3, [r5, #0]
 800dc62:	f7f6 fbcf 	bl	8004404 <_kill>
 800dc66:	1c43      	adds	r3, r0, #1
 800dc68:	d102      	bne.n	800dc70 <_kill_r+0x1c>
 800dc6a:	682b      	ldr	r3, [r5, #0]
 800dc6c:	b103      	cbz	r3, 800dc70 <_kill_r+0x1c>
 800dc6e:	6023      	str	r3, [r4, #0]
 800dc70:	bd38      	pop	{r3, r4, r5, pc}
 800dc72:	bf00      	nop
 800dc74:	20000ff0 	.word	0x20000ff0

0800dc78 <_getpid_r>:
 800dc78:	f7f6 bbbc 	b.w	80043f4 <_getpid>

0800dc7c <_malloc_usable_size_r>:
 800dc7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc80:	1f18      	subs	r0, r3, #4
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bfbc      	itt	lt
 800dc86:	580b      	ldrlt	r3, [r1, r0]
 800dc88:	18c0      	addlt	r0, r0, r3
 800dc8a:	4770      	bx	lr

0800dc8c <_init>:
 800dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8e:	bf00      	nop
 800dc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc92:	bc08      	pop	{r3}
 800dc94:	469e      	mov	lr, r3
 800dc96:	4770      	bx	lr

0800dc98 <_fini>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	bf00      	nop
 800dc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc9e:	bc08      	pop	{r3}
 800dca0:	469e      	mov	lr, r3
 800dca2:	4770      	bx	lr
