
Projekat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800dd78  0800dd78  0000ed78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e494  0800e494  00010240  2**0
                  CONTENTS
  4 .ARM          00000008  0800e494  0800e494  0000f494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e49c  0800e49c  00010240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e49c  0800e49c  0000f49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e4a0  0800e4a0  0000f4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0800e4a4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010240  2**0
                  CONTENTS
 10 .bss          00000dc4  20000240  20000240  00010240  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001004  20001004  00010240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e6b  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f7f  00000000  00000000  000230db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00026060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  000272d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023533  00000000  00000000  00028142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145fa  00000000  00000000  0004b675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3718  00000000  00000000  0005fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133387  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065d0  00000000  00000000  001333cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0013999c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd5c 	.word	0x0800dd5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800dd5c 	.word	0x0800dd5c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001008:	2204      	movs	r2, #4
 800100a:	4909      	ldr	r1, [pc, #36]	@ (8001030 <default_ip_assign+0x2c>)
 800100c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001010:	f003 fc2a 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001014:	2204      	movs	r2, #4
 8001016:	4907      	ldr	r1, [pc, #28]	@ (8001034 <default_ip_assign+0x30>)
 8001018:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800101c:	f003 fc24 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8001020:	2204      	movs	r2, #4
 8001022:	4905      	ldr	r1, [pc, #20]	@ (8001038 <default_ip_assign+0x34>)
 8001024:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001028:	f003 fc1e 	bl	8004868 <WIZCHIP_WRITE_BUF>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000026c 	.word	0x2000026c
 8001034:	20000274 	.word	0x20000274
 8001038:	20000270 	.word	0x20000270

0800103c <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	2000      	movs	r0, #0
 8001044:	f003 fb62 	bl	800470c <WIZCHIP_WRITE>
   getMR(); // for delay
 8001048:	2000      	movs	r0, #0
 800104a:	f003 fb13 	bl	8004674 <WIZCHIP_READ>
   default_ip_assign();
 800104e:	f7ff ffd9 	bl	8001004 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8001052:	2206      	movs	r2, #6
 8001054:	4903      	ldr	r1, [pc, #12]	@ (8001064 <default_ip_update+0x28>)
 8001056:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800105a:	f003 fc05 	bl	8004868 <WIZCHIP_WRITE_BUF>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000028c 	.word	0x2000028c

08001068 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	2000      	movs	r0, #0
 8001070:	f003 fb4c 	bl	800470c <WIZCHIP_WRITE>
	getMR(); // for delay
 8001074:	2000      	movs	r0, #0
 8001076:	f003 fafd 	bl	8004674 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800107a:	2206      	movs	r2, #6
 800107c:	4903      	ldr	r1, [pc, #12]	@ (800108c <default_ip_conflict+0x24>)
 800107e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001082:	f003 fbf1 	bl	8004868 <WIZCHIP_WRITE_BUF>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000028c 	.word	0x2000028c

08001090 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <reg_dhcp_cbfunc+0x50>)
 800109e:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <reg_dhcp_cbfunc+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <reg_dhcp_cbfunc+0x58>)
 80010a4:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <reg_dhcp_cbfunc+0x5c>)
 80010a6:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <reg_dhcp_cbfunc+0x60>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <reg_dhcp_cbfunc+0x64>)
 80010ac:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <reg_dhcp_cbfunc+0x2a>
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <reg_dhcp_cbfunc+0x50>)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <reg_dhcp_cbfunc+0x36>
 80010c0:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <reg_dhcp_cbfunc+0x58>)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <reg_dhcp_cbfunc+0x42>
 80010cc:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <reg_dhcp_cbfunc+0x60>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000010 	.word	0x20000010
 80010e4:	08001005 	.word	0x08001005
 80010e8:	20000014 	.word	0x20000014
 80010ec:	0800103d 	.word	0x0800103d
 80010f0:	20000018 	.word	0x20000018
 80010f4:	08001069 	.word	0x08001069

080010f8 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80010fe:	463b      	mov	r3, r7
 8001100:	2206      	movs	r2, #6
 8001102:	4619      	mov	r1, r3
 8001104:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001108:	f003 fb4e 	bl	80047a8 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 800110c:	4b72      	ldr	r3, [pc, #456]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001114:	4b70      	ldr	r3, [pc, #448]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 800111c:	4b6e      	ldr	r3, [pc, #440]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2206      	movs	r2, #6
 8001122:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001124:	4b6c      	ldr	r3, [pc, #432]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 800112c:	4b6a      	ldr	r3, [pc, #424]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3304      	adds	r3, #4
 8001132:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001134:	4b69      	ldr	r3, [pc, #420]	@ (80012dc <makeDHCPMSG+0x1e4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0e1b      	lsrs	r3, r3, #24
 800113a:	b2da      	uxtb	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001140:	4b66      	ldr	r3, [pc, #408]	@ (80012dc <makeDHCPMSG+0x1e4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0c1a      	lsrs	r2, r3, #16
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	3301      	adds	r3, #1
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 800114e:	4b63      	ldr	r3, [pc, #396]	@ (80012dc <makeDHCPMSG+0x1e4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0a1a      	lsrs	r2, r3, #8
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3302      	adds	r3, #2
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800115c:	4b5f      	ldr	r3, [pc, #380]	@ (80012dc <makeDHCPMSG+0x1e4>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3303      	adds	r3, #3
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001168:	4b5b      	ldr	r3, [pc, #364]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001170:	4b59      	ldr	r3, [pc, #356]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	330a      	adds	r3, #10
 8001176:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2280      	movs	r2, #128	@ 0x80
 800117c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3301      	adds	r3, #1
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001186:	4b54      	ldr	r3, [pc, #336]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800118e:	4b52      	ldr	r3, [pc, #328]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001196:	4b50      	ldr	r3, [pc, #320]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800119e:	4b4e      	ldr	r3, [pc, #312]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80011b6:	4b48      	ldr	r3, [pc, #288]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80011be:	4b46      	ldr	r3, [pc, #280]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80011ce:	4b42      	ldr	r3, [pc, #264]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80011d6:	4b40      	ldr	r3, [pc, #256]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80011de:	4b3e      	ldr	r3, [pc, #248]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80011e6:	4b3c      	ldr	r3, [pc, #240]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80011ee:	4b3a      	ldr	r3, [pc, #232]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80011fe:	4b36      	ldr	r3, [pc, #216]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001206:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a35      	ldr	r2, [pc, #212]	@ (80012e0 <makeDHCPMSG+0x1e8>)
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001210:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a32      	ldr	r2, [pc, #200]	@ (80012e0 <makeDHCPMSG+0x1e8>)
 8001216:	7852      	ldrb	r2, [r2, #1]
 8001218:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800121a:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a30      	ldr	r2, [pc, #192]	@ (80012e0 <makeDHCPMSG+0x1e8>)
 8001220:	7892      	ldrb	r2, [r2, #2]
 8001222:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a2d      	ldr	r2, [pc, #180]	@ (80012e0 <makeDHCPMSG+0x1e8>)
 800122a:	78d2      	ldrb	r2, [r2, #3]
 800122c:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800122e:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a2b      	ldr	r2, [pc, #172]	@ (80012e0 <makeDHCPMSG+0x1e8>)
 8001234:	7912      	ldrb	r2, [r2, #4]
 8001236:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800123a:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a28      	ldr	r2, [pc, #160]	@ (80012e0 <makeDHCPMSG+0x1e8>)
 8001240:	7952      	ldrb	r2, [r2, #5]
 8001242:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001246:	2306      	movs	r3, #6
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e008      	b.n	800125e <makeDHCPMSG+0x166>
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4413      	add	r3, r2
 8001254:	2200      	movs	r2, #0
 8001256:	771a      	strb	r2, [r3, #28]
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d9f3      	bls.n	800124c <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e009      	b.n	800127e <makeDHCPMSG+0x186>
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b3f      	cmp	r3, #63	@ 0x3f
 8001282:	d9f2      	bls.n	800126a <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e009      	b.n	800129e <makeDHCPMSG+0x1a6>
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	4413      	add	r3, r2
 8001292:	2200      	movs	r2, #0
 8001294:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	3301      	adds	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	daf1      	bge.n	800128a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2263      	movs	r2, #99	@ 0x63
 80012ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2282      	movs	r2, #130	@ 0x82
 80012b6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2253      	movs	r2, #83	@ 0x53
 80012c0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <makeDHCPMSG+0x1e0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2263      	movs	r2, #99	@ 0x63
 80012ca:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000288 	.word	0x20000288
 80012dc:	20000284 	.word	0x20000284
 80012e0:	2000028c 	.word	0x2000028c

080012e4 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80012ee:	f7ff ff03 	bl	80010f8 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80012f2:	4b56      	ldr	r3, [pc, #344]	@ (800144c <send_DHCP_DISCOVER+0x168>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80012f8:	4b54      	ldr	r3, [pc, #336]	@ (800144c <send_DHCP_DISCOVER+0x168>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80012fe:	4b53      	ldr	r3, [pc, #332]	@ (800144c <send_DHCP_DISCOVER+0x168>)
 8001300:	2200      	movs	r2, #0
 8001302:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001304:	4b51      	ldr	r3, [pc, #324]	@ (800144c <send_DHCP_DISCOVER+0x168>)
 8001306:	2200      	movs	r2, #0
 8001308:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800130a:	4b51      	ldr	r3, [pc, #324]	@ (8001450 <send_DHCP_DISCOVER+0x16c>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8001310:	4b4f      	ldr	r3, [pc, #316]	@ (8001450 <send_DHCP_DISCOVER+0x16c>)
 8001312:	2200      	movs	r2, #0
 8001314:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8001316:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <send_DHCP_DISCOVER+0x16c>)
 8001318:	2200      	movs	r2, #0
 800131a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 800131c:	4b4c      	ldr	r3, [pc, #304]	@ (8001450 <send_DHCP_DISCOVER+0x16c>)
 800131e:	2200      	movs	r2, #0
 8001320:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001322:	2304      	movs	r3, #4
 8001324:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001326:	4b4b      	ldr	r3, [pc, #300]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	1c59      	adds	r1, r3, #1
 800132e:	80b9      	strh	r1, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	2235      	movs	r2, #53	@ 0x35
 8001334:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001338:	4b46      	ldr	r3, [pc, #280]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	1c59      	adds	r1, r3, #1
 8001340:	80b9      	strh	r1, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	2201      	movs	r2, #1
 8001346:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800134a:	4b42      	ldr	r3, [pc, #264]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	1c59      	adds	r1, r3, #1
 8001352:	80b9      	strh	r1, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	2201      	movs	r2, #1
 8001358:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800135c:	4b3d      	ldr	r3, [pc, #244]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	88bb      	ldrh	r3, [r7, #4]
 8001362:	1c59      	adds	r1, r3, #1
 8001364:	80b9      	strh	r1, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	223d      	movs	r2, #61	@ 0x3d
 800136a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800136e:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	1c59      	adds	r1, r3, #1
 8001376:	80b9      	strh	r1, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	2207      	movs	r2, #7
 800137c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001380:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	1c59      	adds	r1, r3, #1
 8001388:	80b9      	strh	r1, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	2201      	movs	r2, #1
 800138e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001392:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	1c59      	adds	r1, r3, #1
 800139a:	80b9      	strh	r1, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <send_DHCP_DISCOVER+0x174>)
 80013a0:	7819      	ldrb	r1, [r3, #0]
 80013a2:	1813      	adds	r3, r2, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	1c59      	adds	r1, r3, #1
 80013b2:	80b9      	strh	r1, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <send_DHCP_DISCOVER+0x174>)
 80013b8:	7859      	ldrb	r1, [r3, #1]
 80013ba:	1813      	adds	r3, r2, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	1c59      	adds	r1, r3, #1
 80013ca:	80b9      	strh	r1, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <send_DHCP_DISCOVER+0x174>)
 80013d0:	7899      	ldrb	r1, [r3, #2]
 80013d2:	1813      	adds	r3, r2, r0
 80013d4:	460a      	mov	r2, r1
 80013d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	88bb      	ldrh	r3, [r7, #4]
 80013e0:	1c59      	adds	r1, r3, #1
 80013e2:	80b9      	strh	r1, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <send_DHCP_DISCOVER+0x174>)
 80013e8:	78d9      	ldrb	r1, [r3, #3]
 80013ea:	1813      	adds	r3, r2, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	88bb      	ldrh	r3, [r7, #4]
 80013f8:	1c59      	adds	r1, r3, #1
 80013fa:	80b9      	strh	r1, [r7, #4]
 80013fc:	4618      	mov	r0, r3
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <send_DHCP_DISCOVER+0x174>)
 8001400:	7919      	ldrb	r1, [r3, #4]
 8001402:	1813      	adds	r3, r2, r0
 8001404:	460a      	mov	r2, r1
 8001406:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	1c59      	adds	r1, r3, #1
 8001412:	80b9      	strh	r1, [r7, #4]
 8001414:	4618      	mov	r0, r3
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <send_DHCP_DISCOVER+0x174>)
 8001418:	7959      	ldrb	r1, [r3, #5]
 800141a:	1813      	adds	r3, r2, r0
 800141c:	460a      	mov	r2, r1
 800141e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	88bb      	ldrh	r3, [r7, #4]
 8001428:	1c59      	adds	r1, r3, #1
 800142a:	80b9      	strh	r1, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	220c      	movs	r2, #12
 8001430:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <send_DHCP_DISCOVER+0x170>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	1c59      	adds	r1, r3, #1
 800143c:	80b9      	strh	r1, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	2200      	movs	r2, #0
 8001442:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	e017      	b.n	800147c <send_DHCP_DISCOVER+0x198>
 800144c:	20000260 	.word	0x20000260
 8001450:	20000264 	.word	0x20000264
 8001454:	20000288 	.word	0x20000288
 8001458:	2000028c 	.word	0x2000028c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800145c:	88f9      	ldrh	r1, [r7, #6]
 800145e:	4b80      	ldr	r3, [pc, #512]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	1c58      	adds	r0, r3, #1
 8001466:	80b8      	strh	r0, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	4b7e      	ldr	r3, [pc, #504]	@ (8001664 <send_DHCP_DISCOVER+0x380>)
 800146c:	5c59      	ldrb	r1, [r3, r1]
 800146e:	1813      	adds	r3, r2, r0
 8001470:	460a      	mov	r2, r1
 8001472:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	3301      	adds	r3, #1
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4a79      	ldr	r2, [pc, #484]	@ (8001664 <send_DHCP_DISCOVER+0x380>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ea      	bne.n	800145c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001486:	4b78      	ldr	r3, [pc, #480]	@ (8001668 <send_DHCP_DISCOVER+0x384>)
 8001488:	78db      	ldrb	r3, [r3, #3]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b74      	ldr	r3, [pc, #464]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001490:	681c      	ldr	r4, [r3, #0]
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	1c59      	adds	r1, r3, #1
 8001496:	80b9      	strh	r1, [r7, #4]
 8001498:	461d      	mov	r5, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f001 f9a4 	bl	80027e8 <NibbleToHex>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	1963      	adds	r3, r4, r5
 80014a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80014aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001668 <send_DHCP_DISCOVER+0x384>)
 80014ac:	78da      	ldrb	r2, [r3, #3]
 80014ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80014b0:	681c      	ldr	r4, [r3, #0]
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	1c59      	adds	r1, r3, #1
 80014b6:	80b9      	strh	r1, [r7, #4]
 80014b8:	461d      	mov	r5, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	f001 f994 	bl	80027e8 <NibbleToHex>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	1963      	adds	r3, r4, r5
 80014c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80014ca:	4b67      	ldr	r3, [pc, #412]	@ (8001668 <send_DHCP_DISCOVER+0x384>)
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b63      	ldr	r3, [pc, #396]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	1c59      	adds	r1, r3, #1
 80014da:	80b9      	strh	r1, [r7, #4]
 80014dc:	461d      	mov	r5, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f001 f982 	bl	80027e8 <NibbleToHex>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	1963      	adds	r3, r4, r5
 80014ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80014ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001668 <send_DHCP_DISCOVER+0x384>)
 80014f0:	791a      	ldrb	r2, [r3, #4]
 80014f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80014f4:	681c      	ldr	r4, [r3, #0]
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	1c59      	adds	r1, r3, #1
 80014fa:	80b9      	strh	r1, [r7, #4]
 80014fc:	461d      	mov	r5, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f001 f972 	bl	80027e8 <NibbleToHex>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	1963      	adds	r3, r4, r5
 800150a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800150e:	4b56      	ldr	r3, [pc, #344]	@ (8001668 <send_DHCP_DISCOVER+0x384>)
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b52      	ldr	r3, [pc, #328]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	80b9      	strh	r1, [r7, #4]
 8001520:	461d      	mov	r5, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f001 f960 	bl	80027e8 <NibbleToHex>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	1963      	adds	r3, r4, r5
 800152e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001532:	4b4d      	ldr	r3, [pc, #308]	@ (8001668 <send_DHCP_DISCOVER+0x384>)
 8001534:	795a      	ldrb	r2, [r3, #5]
 8001536:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001538:	681c      	ldr	r4, [r3, #0]
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	1c59      	adds	r1, r3, #1
 800153e:	80b9      	strh	r1, [r7, #4]
 8001540:	461d      	mov	r5, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f001 f950 	bl	80027e8 <NibbleToHex>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	1963      	adds	r3, r4, r5
 800154e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	b2d9      	uxtb	r1, r3
 8001556:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	88b8      	ldrh	r0, [r7, #4]
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	3307      	adds	r3, #7
 8001560:	1ac3      	subs	r3, r0, r3
 8001562:	3106      	adds	r1, #6
 8001564:	b2c9      	uxtb	r1, r1
 8001566:	4413      	add	r3, r2
 8001568:	460a      	mov	r2, r1
 800156a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800156e:	4b3c      	ldr	r3, [pc, #240]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	80b9      	strh	r1, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	2237      	movs	r2, #55	@ 0x37
 800157c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001580:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	1c59      	adds	r1, r3, #1
 8001588:	80b9      	strh	r1, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	2206      	movs	r2, #6
 800158e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	80b9      	strh	r1, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	80b9      	strh	r1, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	2203      	movs	r2, #3
 80015b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	1c59      	adds	r1, r3, #1
 80015be:	80b9      	strh	r1, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	2206      	movs	r2, #6
 80015c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80015c8:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	88bb      	ldrh	r3, [r7, #4]
 80015ce:	1c59      	adds	r1, r3, #1
 80015d0:	80b9      	strh	r1, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	220f      	movs	r2, #15
 80015d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	88bb      	ldrh	r3, [r7, #4]
 80015e0:	1c59      	adds	r1, r3, #1
 80015e2:	80b9      	strh	r1, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	223a      	movs	r2, #58	@ 0x3a
 80015e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	1c59      	adds	r1, r3, #1
 80015f4:	80b9      	strh	r1, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	223b      	movs	r2, #59	@ 0x3b
 80015fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	1c59      	adds	r1, r3, #1
 8001606:	80b9      	strh	r1, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	22ff      	movs	r2, #255	@ 0xff
 800160c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001610:	88bb      	ldrh	r3, [r7, #4]
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	e009      	b.n	800162a <send_DHCP_DISCOVER+0x346>
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	4413      	add	r3, r2
 800161e:	2200      	movs	r2, #0
 8001620:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	3301      	adds	r3, #1
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001630:	d3f1      	bcc.n	8001616 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001632:	23ff      	movs	r3, #255	@ 0xff
 8001634:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001636:	23ff      	movs	r3, #255	@ 0xff
 8001638:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800163a:	23ff      	movs	r3, #255	@ 0xff
 800163c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800163e:	23ff      	movs	r3, #255	@ 0xff
 8001640:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <send_DHCP_DISCOVER+0x388>)
 8001644:	7818      	ldrb	r0, [r3, #0]
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <send_DHCP_DISCOVER+0x37c>)
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	463b      	mov	r3, r7
 800164c:	2243      	movs	r2, #67	@ 0x43
 800164e:	9200      	str	r2, [sp, #0]
 8001650:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001654:	f002 faba 	bl	8003bcc <sendto>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bdb0      	pop	{r4, r5, r7, pc}
 8001660:	20000288 	.word	0x20000288
 8001664:	20000008 	.word	0x20000008
 8001668:	2000028c 	.word	0x2000028c
 800166c:	2000025c 	.word	0x2000025c

08001670 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800167a:	f7ff fd3d 	bl	80010f8 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <send_DHCP_REQUEST+0x7c>)
 8001680:	f993 3000 	ldrsb.w	r3, [r3]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d004      	beq.n	8001692 <send_DHCP_REQUEST+0x22>
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <send_DHCP_REQUEST+0x7c>)
 800168a:	f993 3000 	ldrsb.w	r3, [r3]
 800168e:	2b04      	cmp	r3, #4
 8001690:	d134      	bne.n	80016fc <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <send_DHCP_REQUEST+0x80>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	330a      	adds	r3, #10
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <send_DHCP_REQUEST+0x80>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	330a      	adds	r3, #10
 80016a2:	3301      	adds	r3, #1
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <send_DHCP_REQUEST+0x80>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <send_DHCP_REQUEST+0x84>)
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <send_DHCP_REQUEST+0x80>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <send_DHCP_REQUEST+0x84>)
 80016b8:	7852      	ldrb	r2, [r2, #1]
 80016ba:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <send_DHCP_REQUEST+0x80>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <send_DHCP_REQUEST+0x84>)
 80016c2:	7892      	ldrb	r2, [r2, #2]
 80016c4:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <send_DHCP_REQUEST+0x80>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <send_DHCP_REQUEST+0x84>)
 80016cc:	78d2      	ldrb	r2, [r2, #3]
 80016ce:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80016d0:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <send_DHCP_REQUEST+0x88>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80016d6:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <send_DHCP_REQUEST+0x88>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <send_DHCP_REQUEST+0x88>)
 80016de:	789b      	ldrb	r3, [r3, #2]
 80016e0:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <send_DHCP_REQUEST+0x88>)
 80016e4:	78db      	ldrb	r3, [r3, #3]
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	e010      	b.n	800170c <send_DHCP_REQUEST+0x9c>
 80016ea:	bf00      	nop
 80016ec:	2000027c 	.word	0x2000027c
 80016f0:	20000288 	.word	0x20000288
 80016f4:	2000026c 	.word	0x2000026c
 80016f8:	20000260 	.word	0x20000260
   }
   else
   {
   	ip[0] = 255;
 80016fc:	23ff      	movs	r3, #255	@ 0xff
 80016fe:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001700:	23ff      	movs	r3, #255	@ 0xff
 8001702:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001704:	23ff      	movs	r3, #255	@ 0xff
 8001706:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001708:	23ff      	movs	r3, #255	@ 0xff
 800170a:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800170c:	2304      	movs	r3, #4
 800170e:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001710:	4b8d      	ldr	r3, [pc, #564]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	897b      	ldrh	r3, [r7, #10]
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	8179      	strh	r1, [r7, #10]
 800171a:	4413      	add	r3, r2
 800171c:	2235      	movs	r2, #53	@ 0x35
 800171e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001722:	4b89      	ldr	r3, [pc, #548]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	897b      	ldrh	r3, [r7, #10]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	8179      	strh	r1, [r7, #10]
 800172c:	4413      	add	r3, r2
 800172e:	2201      	movs	r2, #1
 8001730:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001734:	4b84      	ldr	r3, [pc, #528]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	897b      	ldrh	r3, [r7, #10]
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	8179      	strh	r1, [r7, #10]
 800173e:	4413      	add	r3, r2
 8001740:	2203      	movs	r2, #3
 8001742:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001746:	4b80      	ldr	r3, [pc, #512]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	897b      	ldrh	r3, [r7, #10]
 800174c:	1c59      	adds	r1, r3, #1
 800174e:	8179      	strh	r1, [r7, #10]
 8001750:	4413      	add	r3, r2
 8001752:	223d      	movs	r2, #61	@ 0x3d
 8001754:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001758:	4b7b      	ldr	r3, [pc, #492]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	897b      	ldrh	r3, [r7, #10]
 800175e:	1c59      	adds	r1, r3, #1
 8001760:	8179      	strh	r1, [r7, #10]
 8001762:	4413      	add	r3, r2
 8001764:	2207      	movs	r2, #7
 8001766:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800176a:	4b77      	ldr	r3, [pc, #476]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	897b      	ldrh	r3, [r7, #10]
 8001770:	1c59      	adds	r1, r3, #1
 8001772:	8179      	strh	r1, [r7, #10]
 8001774:	4413      	add	r3, r2
 8001776:	2201      	movs	r2, #1
 8001778:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800177c:	4b72      	ldr	r3, [pc, #456]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	8179      	strh	r1, [r7, #10]
 8001786:	4618      	mov	r0, r3
 8001788:	4b70      	ldr	r3, [pc, #448]	@ (800194c <send_DHCP_REQUEST+0x2dc>)
 800178a:	7819      	ldrb	r1, [r3, #0]
 800178c:	1813      	adds	r3, r2, r0
 800178e:	460a      	mov	r2, r1
 8001790:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001794:	4b6c      	ldr	r3, [pc, #432]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	897b      	ldrh	r3, [r7, #10]
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	8179      	strh	r1, [r7, #10]
 800179e:	4618      	mov	r0, r3
 80017a0:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <send_DHCP_REQUEST+0x2dc>)
 80017a2:	7859      	ldrb	r1, [r3, #1]
 80017a4:	1813      	adds	r3, r2, r0
 80017a6:	460a      	mov	r2, r1
 80017a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80017ac:	4b66      	ldr	r3, [pc, #408]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	897b      	ldrh	r3, [r7, #10]
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	8179      	strh	r1, [r7, #10]
 80017b6:	4618      	mov	r0, r3
 80017b8:	4b64      	ldr	r3, [pc, #400]	@ (800194c <send_DHCP_REQUEST+0x2dc>)
 80017ba:	7899      	ldrb	r1, [r3, #2]
 80017bc:	1813      	adds	r3, r2, r0
 80017be:	460a      	mov	r2, r1
 80017c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80017c4:	4b60      	ldr	r3, [pc, #384]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	8179      	strh	r1, [r7, #10]
 80017ce:	4618      	mov	r0, r3
 80017d0:	4b5e      	ldr	r3, [pc, #376]	@ (800194c <send_DHCP_REQUEST+0x2dc>)
 80017d2:	78d9      	ldrb	r1, [r3, #3]
 80017d4:	1813      	adds	r3, r2, r0
 80017d6:	460a      	mov	r2, r1
 80017d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80017dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	897b      	ldrh	r3, [r7, #10]
 80017e2:	1c59      	adds	r1, r3, #1
 80017e4:	8179      	strh	r1, [r7, #10]
 80017e6:	4618      	mov	r0, r3
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <send_DHCP_REQUEST+0x2dc>)
 80017ea:	7919      	ldrb	r1, [r3, #4]
 80017ec:	1813      	adds	r3, r2, r0
 80017ee:	460a      	mov	r2, r1
 80017f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80017f4:	4b54      	ldr	r3, [pc, #336]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	1c59      	adds	r1, r3, #1
 80017fc:	8179      	strh	r1, [r7, #10]
 80017fe:	4618      	mov	r0, r3
 8001800:	4b52      	ldr	r3, [pc, #328]	@ (800194c <send_DHCP_REQUEST+0x2dc>)
 8001802:	7959      	ldrb	r1, [r3, #5]
 8001804:	1813      	adds	r3, r2, r0
 8001806:	460a      	mov	r2, r1
 8001808:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2bff      	cmp	r3, #255	@ 0xff
 8001810:	f040 8084 	bne.w	800191c <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001814:	4b4c      	ldr	r3, [pc, #304]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	897b      	ldrh	r3, [r7, #10]
 800181a:	1c59      	adds	r1, r3, #1
 800181c:	8179      	strh	r1, [r7, #10]
 800181e:	4413      	add	r3, r2
 8001820:	2232      	movs	r2, #50	@ 0x32
 8001822:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001826:	4b48      	ldr	r3, [pc, #288]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	897b      	ldrh	r3, [r7, #10]
 800182c:	1c59      	adds	r1, r3, #1
 800182e:	8179      	strh	r1, [r7, #10]
 8001830:	4413      	add	r3, r2
 8001832:	2204      	movs	r2, #4
 8001834:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001838:	4b43      	ldr	r3, [pc, #268]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	897b      	ldrh	r3, [r7, #10]
 800183e:	1c59      	adds	r1, r3, #1
 8001840:	8179      	strh	r1, [r7, #10]
 8001842:	4618      	mov	r0, r3
 8001844:	4b42      	ldr	r3, [pc, #264]	@ (8001950 <send_DHCP_REQUEST+0x2e0>)
 8001846:	7819      	ldrb	r1, [r3, #0]
 8001848:	1813      	adds	r3, r2, r0
 800184a:	460a      	mov	r2, r1
 800184c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001850:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	897b      	ldrh	r3, [r7, #10]
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	8179      	strh	r1, [r7, #10]
 800185a:	4618      	mov	r0, r3
 800185c:	4b3c      	ldr	r3, [pc, #240]	@ (8001950 <send_DHCP_REQUEST+0x2e0>)
 800185e:	7859      	ldrb	r1, [r3, #1]
 8001860:	1813      	adds	r3, r2, r0
 8001862:	460a      	mov	r2, r1
 8001864:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001868:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	897b      	ldrh	r3, [r7, #10]
 800186e:	1c59      	adds	r1, r3, #1
 8001870:	8179      	strh	r1, [r7, #10]
 8001872:	4618      	mov	r0, r3
 8001874:	4b36      	ldr	r3, [pc, #216]	@ (8001950 <send_DHCP_REQUEST+0x2e0>)
 8001876:	7899      	ldrb	r1, [r3, #2]
 8001878:	1813      	adds	r3, r2, r0
 800187a:	460a      	mov	r2, r1
 800187c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001880:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	897b      	ldrh	r3, [r7, #10]
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	8179      	strh	r1, [r7, #10]
 800188a:	4618      	mov	r0, r3
 800188c:	4b30      	ldr	r3, [pc, #192]	@ (8001950 <send_DHCP_REQUEST+0x2e0>)
 800188e:	78d9      	ldrb	r1, [r3, #3]
 8001890:	1813      	adds	r3, r2, r0
 8001892:	460a      	mov	r2, r1
 8001894:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	897b      	ldrh	r3, [r7, #10]
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	8179      	strh	r1, [r7, #10]
 80018a2:	4413      	add	r3, r2
 80018a4:	2236      	movs	r2, #54	@ 0x36
 80018a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	8179      	strh	r1, [r7, #10]
 80018b4:	4413      	add	r3, r2
 80018b6:	2204      	movs	r2, #4
 80018b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80018bc:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	897b      	ldrh	r3, [r7, #10]
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	8179      	strh	r1, [r7, #10]
 80018c6:	4618      	mov	r0, r3
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <send_DHCP_REQUEST+0x2e4>)
 80018ca:	7819      	ldrb	r1, [r3, #0]
 80018cc:	1813      	adds	r3, r2, r0
 80018ce:	460a      	mov	r2, r1
 80018d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	1c59      	adds	r1, r3, #1
 80018dc:	8179      	strh	r1, [r7, #10]
 80018de:	4618      	mov	r0, r3
 80018e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <send_DHCP_REQUEST+0x2e4>)
 80018e2:	7859      	ldrb	r1, [r3, #1]
 80018e4:	1813      	adds	r3, r2, r0
 80018e6:	460a      	mov	r2, r1
 80018e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	897b      	ldrh	r3, [r7, #10]
 80018f2:	1c59      	adds	r1, r3, #1
 80018f4:	8179      	strh	r1, [r7, #10]
 80018f6:	4618      	mov	r0, r3
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <send_DHCP_REQUEST+0x2e4>)
 80018fa:	7899      	ldrb	r1, [r3, #2]
 80018fc:	1813      	adds	r3, r2, r0
 80018fe:	460a      	mov	r2, r1
 8001900:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001904:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	897b      	ldrh	r3, [r7, #10]
 800190a:	1c59      	adds	r1, r3, #1
 800190c:	8179      	strh	r1, [r7, #10]
 800190e:	4618      	mov	r0, r3
 8001910:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <send_DHCP_REQUEST+0x2e4>)
 8001912:	78d9      	ldrb	r1, [r3, #3]
 8001914:	1813      	adds	r3, r2, r0
 8001916:	460a      	mov	r2, r1
 8001918:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800191c:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	897b      	ldrh	r3, [r7, #10]
 8001922:	1c59      	adds	r1, r3, #1
 8001924:	8179      	strh	r1, [r7, #10]
 8001926:	4413      	add	r3, r2
 8001928:	220c      	movs	r2, #12
 800192a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <send_DHCP_REQUEST+0x2d8>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	1c59      	adds	r1, r3, #1
 8001936:	8179      	strh	r1, [r7, #10]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e019      	b.n	800197a <send_DHCP_REQUEST+0x30a>
 8001946:	bf00      	nop
 8001948:	20000288 	.word	0x20000288
 800194c:	2000028c 	.word	0x2000028c
 8001950:	2000026c 	.word	0x2000026c
 8001954:	20000260 	.word	0x20000260
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001958:	4b86      	ldr	r3, [pc, #536]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	1c59      	adds	r1, r3, #1
 8001960:	8179      	strh	r1, [r7, #10]
 8001962:	4618      	mov	r0, r3
 8001964:	4984      	ldr	r1, [pc, #528]	@ (8001b78 <send_DHCP_REQUEST+0x508>)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	440b      	add	r3, r1
 800196a:	7819      	ldrb	r1, [r3, #0]
 800196c:	1813      	adds	r3, r2, r0
 800196e:	460a      	mov	r2, r1
 8001970:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b78 <send_DHCP_REQUEST+0x508>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1e8      	bne.n	8001958 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001986:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <send_DHCP_REQUEST+0x50c>)
 8001988:	78db      	ldrb	r3, [r3, #3]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b79      	ldr	r3, [pc, #484]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	8179      	strh	r1, [r7, #10]
 8001998:	461d      	mov	r5, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 ff24 	bl	80027e8 <NibbleToHex>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	1963      	adds	r3, r4, r5
 80019a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80019aa:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <send_DHCP_REQUEST+0x50c>)
 80019ac:	78da      	ldrb	r2, [r3, #3]
 80019ae:	4b71      	ldr	r3, [pc, #452]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 80019b0:	681c      	ldr	r4, [r3, #0]
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	8179      	strh	r1, [r7, #10]
 80019b8:	461d      	mov	r5, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f000 ff14 	bl	80027e8 <NibbleToHex>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	1963      	adds	r3, r4, r5
 80019c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80019ca:	4b6c      	ldr	r3, [pc, #432]	@ (8001b7c <send_DHCP_REQUEST+0x50c>)
 80019cc:	791b      	ldrb	r3, [r3, #4]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b68      	ldr	r3, [pc, #416]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 80019d4:	681c      	ldr	r4, [r3, #0]
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	1c59      	adds	r1, r3, #1
 80019da:	8179      	strh	r1, [r7, #10]
 80019dc:	461d      	mov	r5, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 ff02 	bl	80027e8 <NibbleToHex>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	1963      	adds	r3, r4, r5
 80019ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80019ee:	4b63      	ldr	r3, [pc, #396]	@ (8001b7c <send_DHCP_REQUEST+0x50c>)
 80019f0:	791a      	ldrb	r2, [r3, #4]
 80019f2:	4b60      	ldr	r3, [pc, #384]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 80019f4:	681c      	ldr	r4, [r3, #0]
 80019f6:	897b      	ldrh	r3, [r7, #10]
 80019f8:	1c59      	adds	r1, r3, #1
 80019fa:	8179      	strh	r1, [r7, #10]
 80019fc:	461d      	mov	r5, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f000 fef2 	bl	80027e8 <NibbleToHex>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	1963      	adds	r3, r4, r5
 8001a0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001b7c <send_DHCP_REQUEST+0x50c>)
 8001a10:	795b      	ldrb	r3, [r3, #5]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b57      	ldr	r3, [pc, #348]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001a18:	681c      	ldr	r4, [r3, #0]
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	8179      	strh	r1, [r7, #10]
 8001a20:	461d      	mov	r5, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 fee0 	bl	80027e8 <NibbleToHex>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	1963      	adds	r3, r4, r5
 8001a2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001a32:	4b52      	ldr	r3, [pc, #328]	@ (8001b7c <send_DHCP_REQUEST+0x50c>)
 8001a34:	795a      	ldrb	r2, [r3, #5]
 8001a36:	4b4f      	ldr	r3, [pc, #316]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001a38:	681c      	ldr	r4, [r3, #0]
 8001a3a:	897b      	ldrh	r3, [r7, #10]
 8001a3c:	1c59      	adds	r1, r3, #1
 8001a3e:	8179      	strh	r1, [r7, #10]
 8001a40:	461d      	mov	r5, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 fed0 	bl	80027e8 <NibbleToHex>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	1963      	adds	r3, r4, r5
 8001a4e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	b2d9      	uxtb	r1, r3
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	8978      	ldrh	r0, [r7, #10]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3307      	adds	r3, #7
 8001a60:	1ac3      	subs	r3, r0, r3
 8001a62:	3106      	adds	r1, #6
 8001a64:	b2c9      	uxtb	r1, r1
 8001a66:	4413      	add	r3, r2
 8001a68:	460a      	mov	r2, r1
 8001a6a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	1c59      	adds	r1, r3, #1
 8001a76:	8179      	strh	r1, [r7, #10]
 8001a78:	4413      	add	r3, r2
 8001a7a:	2237      	movs	r2, #55	@ 0x37
 8001a7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001a80:	4b3c      	ldr	r3, [pc, #240]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	897b      	ldrh	r3, [r7, #10]
 8001a86:	1c59      	adds	r1, r3, #1
 8001a88:	8179      	strh	r1, [r7, #10]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001a92:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	1c59      	adds	r1, r3, #1
 8001a9a:	8179      	strh	r1, [r7, #10]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001aa4:	4b33      	ldr	r3, [pc, #204]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	897b      	ldrh	r3, [r7, #10]
 8001aaa:	1c59      	adds	r1, r3, #1
 8001aac:	8179      	strh	r1, [r7, #10]
 8001aae:	4413      	add	r3, r2
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	897b      	ldrh	r3, [r7, #10]
 8001abc:	1c59      	adds	r1, r3, #1
 8001abe:	8179      	strh	r1, [r7, #10]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	897b      	ldrh	r3, [r7, #10]
 8001ace:	1c59      	adds	r1, r3, #1
 8001ad0:	8179      	strh	r1, [r7, #10]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	897b      	ldrh	r3, [r7, #10]
 8001ae0:	1c59      	adds	r1, r3, #1
 8001ae2:	8179      	strh	r1, [r7, #10]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	223a      	movs	r2, #58	@ 0x3a
 8001ae8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	897b      	ldrh	r3, [r7, #10]
 8001af2:	1c59      	adds	r1, r3, #1
 8001af4:	8179      	strh	r1, [r7, #10]
 8001af6:	4413      	add	r3, r2
 8001af8:	223b      	movs	r2, #59	@ 0x3b
 8001afa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	1c59      	adds	r1, r3, #1
 8001b06:	8179      	strh	r1, [r7, #10]
 8001b08:	4413      	add	r3, r2
 8001b0a:	221f      	movs	r2, #31
 8001b0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	1c59      	adds	r1, r3, #1
 8001b18:	8179      	strh	r1, [r7, #10]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	2221      	movs	r2, #33	@ 0x21
 8001b1e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001b22:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	897b      	ldrh	r3, [r7, #10]
 8001b28:	1c59      	adds	r1, r3, #1
 8001b2a:	8179      	strh	r1, [r7, #10]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	22ff      	movs	r2, #255	@ 0xff
 8001b30:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001b34:	897b      	ldrh	r3, [r7, #10]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e009      	b.n	8001b4e <send_DHCP_REQUEST+0x4de>
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	33ec      	adds	r3, #236	@ 0xec
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001b54:	dbf1      	blt.n	8001b3a <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <send_DHCP_REQUEST+0x510>)
 8001b58:	7818      	ldrb	r0, [r3, #0]
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <send_DHCP_REQUEST+0x504>)
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2243      	movs	r2, #67	@ 0x43
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001b68:	f002 f830 	bl	8003bcc <sendto>

}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	20000288 	.word	0x20000288
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	2000028c 	.word	0x2000028c
 8001b80:	2000025c 	.word	0x2000025c

08001b84 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001b8e:	f7ff fab3 	bl	80010f8 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001b92:	2304      	movs	r3, #4
 8001b94:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001b96:	4b9f      	ldr	r3, [pc, #636]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	330a      	adds	r3, #10
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001ba0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	330a      	adds	r3, #10
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001bac:	4b99      	ldr	r3, [pc, #612]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	1c59      	adds	r1, r3, #1
 8001bb4:	8179      	strh	r1, [r7, #10]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2235      	movs	r2, #53	@ 0x35
 8001bba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001bbe:	4b95      	ldr	r3, [pc, #596]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	1c59      	adds	r1, r3, #1
 8001bc6:	8179      	strh	r1, [r7, #10]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001bd0:	4b90      	ldr	r3, [pc, #576]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	8179      	strh	r1, [r7, #10]
 8001bda:	4413      	add	r3, r2
 8001bdc:	2204      	movs	r2, #4
 8001bde:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001be2:	4b8c      	ldr	r3, [pc, #560]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	897b      	ldrh	r3, [r7, #10]
 8001be8:	1c59      	adds	r1, r3, #1
 8001bea:	8179      	strh	r1, [r7, #10]
 8001bec:	4413      	add	r3, r2
 8001bee:	223d      	movs	r2, #61	@ 0x3d
 8001bf0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001bf4:	4b87      	ldr	r3, [pc, #540]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	1c59      	adds	r1, r3, #1
 8001bfc:	8179      	strh	r1, [r7, #10]
 8001bfe:	4413      	add	r3, r2
 8001c00:	2207      	movs	r2, #7
 8001c02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001c06:	4b83      	ldr	r3, [pc, #524]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	8179      	strh	r1, [r7, #10]
 8001c10:	4413      	add	r3, r2
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001c18:	4b7e      	ldr	r3, [pc, #504]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	8179      	strh	r1, [r7, #10]
 8001c22:	4618      	mov	r0, r3
 8001c24:	4b7c      	ldr	r3, [pc, #496]	@ (8001e18 <send_DHCP_DECLINE+0x294>)
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	1813      	adds	r3, r2, r0
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001c30:	4b78      	ldr	r3, [pc, #480]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	8179      	strh	r1, [r7, #10]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <send_DHCP_DECLINE+0x294>)
 8001c3e:	7859      	ldrb	r1, [r3, #1]
 8001c40:	1813      	adds	r3, r2, r0
 8001c42:	460a      	mov	r2, r1
 8001c44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001c48:	4b72      	ldr	r3, [pc, #456]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	897b      	ldrh	r3, [r7, #10]
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	8179      	strh	r1, [r7, #10]
 8001c52:	4618      	mov	r0, r3
 8001c54:	4b70      	ldr	r3, [pc, #448]	@ (8001e18 <send_DHCP_DECLINE+0x294>)
 8001c56:	7899      	ldrb	r1, [r3, #2]
 8001c58:	1813      	adds	r3, r2, r0
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001c60:	4b6c      	ldr	r3, [pc, #432]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	897b      	ldrh	r3, [r7, #10]
 8001c66:	1c59      	adds	r1, r3, #1
 8001c68:	8179      	strh	r1, [r7, #10]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e18 <send_DHCP_DECLINE+0x294>)
 8001c6e:	78d9      	ldrb	r1, [r3, #3]
 8001c70:	1813      	adds	r3, r2, r0
 8001c72:	460a      	mov	r2, r1
 8001c74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001c78:	4b66      	ldr	r3, [pc, #408]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	897b      	ldrh	r3, [r7, #10]
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	8179      	strh	r1, [r7, #10]
 8001c82:	4618      	mov	r0, r3
 8001c84:	4b64      	ldr	r3, [pc, #400]	@ (8001e18 <send_DHCP_DECLINE+0x294>)
 8001c86:	7919      	ldrb	r1, [r3, #4]
 8001c88:	1813      	adds	r3, r2, r0
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001c90:	4b60      	ldr	r3, [pc, #384]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	897b      	ldrh	r3, [r7, #10]
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	8179      	strh	r1, [r7, #10]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e18 <send_DHCP_DECLINE+0x294>)
 8001c9e:	7959      	ldrb	r1, [r3, #5]
 8001ca0:	1813      	adds	r3, r2, r0
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	897b      	ldrh	r3, [r7, #10]
 8001cae:	1c59      	adds	r1, r3, #1
 8001cb0:	8179      	strh	r1, [r7, #10]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	2232      	movs	r2, #50	@ 0x32
 8001cb6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001cba:	4b56      	ldr	r3, [pc, #344]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	897b      	ldrh	r3, [r7, #10]
 8001cc0:	1c59      	adds	r1, r3, #1
 8001cc2:	8179      	strh	r1, [r7, #10]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001ccc:	4b51      	ldr	r3, [pc, #324]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	897b      	ldrh	r3, [r7, #10]
 8001cd2:	1c59      	adds	r1, r3, #1
 8001cd4:	8179      	strh	r1, [r7, #10]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <send_DHCP_DECLINE+0x298>)
 8001cda:	7819      	ldrb	r1, [r3, #0]
 8001cdc:	1813      	adds	r3, r2, r0
 8001cde:	460a      	mov	r2, r1
 8001ce0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	897b      	ldrh	r3, [r7, #10]
 8001cea:	1c59      	adds	r1, r3, #1
 8001cec:	8179      	strh	r1, [r7, #10]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8001e1c <send_DHCP_DECLINE+0x298>)
 8001cf2:	7859      	ldrb	r1, [r3, #1]
 8001cf4:	1813      	adds	r3, r2, r0
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001cfc:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	1c59      	adds	r1, r3, #1
 8001d04:	8179      	strh	r1, [r7, #10]
 8001d06:	4618      	mov	r0, r3
 8001d08:	4b44      	ldr	r3, [pc, #272]	@ (8001e1c <send_DHCP_DECLINE+0x298>)
 8001d0a:	7899      	ldrb	r1, [r3, #2]
 8001d0c:	1813      	adds	r3, r2, r0
 8001d0e:	460a      	mov	r2, r1
 8001d10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001d14:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	897b      	ldrh	r3, [r7, #10]
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	8179      	strh	r1, [r7, #10]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4b3e      	ldr	r3, [pc, #248]	@ (8001e1c <send_DHCP_DECLINE+0x298>)
 8001d22:	78d9      	ldrb	r1, [r3, #3]
 8001d24:	1813      	adds	r3, r2, r0
 8001d26:	460a      	mov	r2, r1
 8001d28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001d2c:	4b39      	ldr	r3, [pc, #228]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	897b      	ldrh	r3, [r7, #10]
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	8179      	strh	r1, [r7, #10]
 8001d36:	4413      	add	r3, r2
 8001d38:	2236      	movs	r2, #54	@ 0x36
 8001d3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001d3e:	4b35      	ldr	r3, [pc, #212]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	1c59      	adds	r1, r3, #1
 8001d46:	8179      	strh	r1, [r7, #10]
 8001d48:	4413      	add	r3, r2
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001d50:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	8179      	strh	r1, [r7, #10]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4b30      	ldr	r3, [pc, #192]	@ (8001e20 <send_DHCP_DECLINE+0x29c>)
 8001d5e:	7819      	ldrb	r1, [r3, #0]
 8001d60:	1813      	adds	r3, r2, r0
 8001d62:	460a      	mov	r2, r1
 8001d64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001d68:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	1c59      	adds	r1, r3, #1
 8001d70:	8179      	strh	r1, [r7, #10]
 8001d72:	4618      	mov	r0, r3
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <send_DHCP_DECLINE+0x29c>)
 8001d76:	7859      	ldrb	r1, [r3, #1]
 8001d78:	1813      	adds	r3, r2, r0
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001d80:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	897b      	ldrh	r3, [r7, #10]
 8001d86:	1c59      	adds	r1, r3, #1
 8001d88:	8179      	strh	r1, [r7, #10]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	4b24      	ldr	r3, [pc, #144]	@ (8001e20 <send_DHCP_DECLINE+0x29c>)
 8001d8e:	7899      	ldrb	r1, [r3, #2]
 8001d90:	1813      	adds	r3, r2, r0
 8001d92:	460a      	mov	r2, r1
 8001d94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	897b      	ldrh	r3, [r7, #10]
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	8179      	strh	r1, [r7, #10]
 8001da2:	4618      	mov	r0, r3
 8001da4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <send_DHCP_DECLINE+0x29c>)
 8001da6:	78d9      	ldrb	r1, [r3, #3]
 8001da8:	1813      	adds	r3, r2, r0
 8001daa:	460a      	mov	r2, r1
 8001dac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	1c59      	adds	r1, r3, #1
 8001db8:	8179      	strh	r1, [r7, #10]
 8001dba:	4413      	add	r3, r2
 8001dbc:	22ff      	movs	r2, #255	@ 0xff
 8001dbe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e009      	b.n	8001ddc <send_DHCP_DECLINE+0x258>
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	33ec      	adds	r3, #236	@ 0xec
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001de2:	dbf1      	blt.n	8001dc8 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001de4:	23ff      	movs	r3, #255	@ 0xff
 8001de6:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001de8:	23ff      	movs	r3, #255	@ 0xff
 8001dea:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001dec:	23ff      	movs	r3, #255	@ 0xff
 8001dee:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001df0:	23ff      	movs	r3, #255	@ 0xff
 8001df2:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <send_DHCP_DECLINE+0x2a0>)
 8001df6:	7818      	ldrb	r0, [r3, #0]
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <send_DHCP_DECLINE+0x290>)
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2243      	movs	r2, #67	@ 0x43
 8001e00:	9200      	str	r2, [sp, #0]
 8001e02:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001e06:	f001 fee1 	bl	8003bcc <sendto>
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000288 	.word	0x20000288
 8001e18:	2000028c 	.word	0x2000028c
 8001e1c:	2000026c 	.word	0x2000026c
 8001e20:	20000260 	.word	0x20000260
 8001e24:	2000025c 	.word	0x2000025c

08001e28 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001e32:	4ba1      	ldr	r3, [pc, #644]	@ (80020b8 <parseDHCPMSG+0x290>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 fdbf 	bl	80049ba <getSn_RX_RSR>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	823b      	strh	r3, [r7, #16]
 8001e40:	8a3b      	ldrh	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d011      	beq.n	8001e6a <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001e46:	4b9c      	ldr	r3, [pc, #624]	@ (80020b8 <parseDHCPMSG+0x290>)
 8001e48:	7818      	ldrb	r0, [r3, #0]
 8001e4a:	4b9c      	ldr	r3, [pc, #624]	@ (80020bc <parseDHCPMSG+0x294>)
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	1d3c      	adds	r4, r7, #4
 8001e50:	8a3a      	ldrh	r2, [r7, #16]
 8001e52:	1cbb      	adds	r3, r7, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4623      	mov	r3, r4
 8001e58:	f001 ffec 	bl	8003e34 <recvfrom>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	2b43      	cmp	r3, #67	@ 0x43
 8001e64:	f040 81ed 	bne.w	8002242 <parseDHCPMSG+0x41a>
 8001e68:	e001      	b.n	8001e6e <parseDHCPMSG+0x46>
   else return 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e1eb      	b.n	8002246 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001e6e:	4b93      	ldr	r3, [pc, #588]	@ (80020bc <parseDHCPMSG+0x294>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	7f1a      	ldrb	r2, [r3, #28]
 8001e74:	4b92      	ldr	r3, [pc, #584]	@ (80020c0 <parseDHCPMSG+0x298>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d124      	bne.n	8001ec6 <parseDHCPMSG+0x9e>
 8001e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80020bc <parseDHCPMSG+0x294>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	7f5a      	ldrb	r2, [r3, #29]
 8001e82:	4b8f      	ldr	r3, [pc, #572]	@ (80020c0 <parseDHCPMSG+0x298>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d11d      	bne.n	8001ec6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e8a:	4b8c      	ldr	r3, [pc, #560]	@ (80020bc <parseDHCPMSG+0x294>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	7f9a      	ldrb	r2, [r3, #30]
 8001e90:	4b8b      	ldr	r3, [pc, #556]	@ (80020c0 <parseDHCPMSG+0x298>)
 8001e92:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d116      	bne.n	8001ec6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001e98:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <parseDHCPMSG+0x294>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	7fda      	ldrb	r2, [r3, #31]
 8001e9e:	4b88      	ldr	r3, [pc, #544]	@ (80020c0 <parseDHCPMSG+0x298>)
 8001ea0:	78db      	ldrb	r3, [r3, #3]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d10f      	bne.n	8001ec6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001ea6:	4b85      	ldr	r3, [pc, #532]	@ (80020bc <parseDHCPMSG+0x294>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001eae:	4b84      	ldr	r3, [pc, #528]	@ (80020c0 <parseDHCPMSG+0x298>)
 8001eb0:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d107      	bne.n	8001ec6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001eb6:	4b81      	ldr	r3, [pc, #516]	@ (80020bc <parseDHCPMSG+0x294>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001ebe:	4b80      	ldr	r3, [pc, #512]	@ (80020c0 <parseDHCPMSG+0x298>)
 8001ec0:	795b      	ldrb	r3, [r3, #5]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e1bd      	b.n	8002246 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001eca:	4b7e      	ldr	r3, [pc, #504]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <parseDHCPMSG+0xc2>
 8001ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <parseDHCPMSG+0xc2>
 8001eda:	4b7a      	ldr	r3, [pc, #488]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001edc:	789b      	ldrb	r3, [r3, #2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <parseDHCPMSG+0xc2>
 8001ee2:	4b78      	ldr	r3, [pc, #480]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001ee4:	78db      	ldrb	r3, [r3, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d029      	beq.n	8001f3e <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001eea:	793a      	ldrb	r2, [r7, #4]
 8001eec:	4b75      	ldr	r3, [pc, #468]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d10e      	bne.n	8001f12 <parseDHCPMSG+0xea>
 8001ef4:	797a      	ldrb	r2, [r7, #5]
 8001ef6:	4b73      	ldr	r3, [pc, #460]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d109      	bne.n	8001f12 <parseDHCPMSG+0xea>
 8001efe:	79ba      	ldrb	r2, [r7, #6]
 8001f00:	4b70      	ldr	r3, [pc, #448]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001f02:	789b      	ldrb	r3, [r3, #2]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d104      	bne.n	8001f12 <parseDHCPMSG+0xea>
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80020c4 <parseDHCPMSG+0x29c>)
 8001f0c:	78db      	ldrb	r3, [r3, #3]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d015      	beq.n	8001f3e <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001f12:	793a      	ldrb	r2, [r7, #4]
 8001f14:	4b6c      	ldr	r3, [pc, #432]	@ (80020c8 <parseDHCPMSG+0x2a0>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10e      	bne.n	8001f3a <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001f1c:	797a      	ldrb	r2, [r7, #5]
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <parseDHCPMSG+0x2a0>)
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d109      	bne.n	8001f3a <parseDHCPMSG+0x112>
 8001f26:	79ba      	ldrb	r2, [r7, #6]
 8001f28:	4b67      	ldr	r3, [pc, #412]	@ (80020c8 <parseDHCPMSG+0x2a0>)
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d104      	bne.n	8001f3a <parseDHCPMSG+0x112>
 8001f30:	79fa      	ldrb	r2, [r7, #7]
 8001f32:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <parseDHCPMSG+0x2a0>)
 8001f34:	78db      	ldrb	r3, [r3, #3]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e183      	b.n	8002246 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80020bc <parseDHCPMSG+0x294>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	33f0      	adds	r3, #240	@ 0xf0
 8001f48:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001f4a:	8a3b      	ldrh	r3, [r7, #16]
 8001f4c:	3bf0      	subs	r3, #240	@ 0xf0
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4413      	add	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001f54:	e170      	b.n	8002238 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b36      	cmp	r3, #54	@ 0x36
 8001f5c:	dc76      	bgt.n	800204c <parseDHCPMSG+0x224>
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f2c0 815d 	blt.w	800221e <parseDHCPMSG+0x3f6>
 8001f64:	2b36      	cmp	r3, #54	@ 0x36
 8001f66:	f200 815a 	bhi.w	800221e <parseDHCPMSG+0x3f6>
 8001f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <parseDHCPMSG+0x148>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08002059 	.word	0x08002059
 8001f74:	08002079 	.word	0x08002079
 8001f78:	0800221f 	.word	0x0800221f
 8001f7c:	080020d1 	.word	0x080020d1
 8001f80:	0800221f 	.word	0x0800221f
 8001f84:	0800221f 	.word	0x0800221f
 8001f88:	0800211d 	.word	0x0800211d
 8001f8c:	0800221f 	.word	0x0800221f
 8001f90:	0800221f 	.word	0x0800221f
 8001f94:	0800221f 	.word	0x0800221f
 8001f98:	0800221f 	.word	0x0800221f
 8001f9c:	0800221f 	.word	0x0800221f
 8001fa0:	0800221f 	.word	0x0800221f
 8001fa4:	0800221f 	.word	0x0800221f
 8001fa8:	0800221f 	.word	0x0800221f
 8001fac:	0800221f 	.word	0x0800221f
 8001fb0:	0800221f 	.word	0x0800221f
 8001fb4:	0800221f 	.word	0x0800221f
 8001fb8:	0800221f 	.word	0x0800221f
 8001fbc:	0800221f 	.word	0x0800221f
 8001fc0:	0800221f 	.word	0x0800221f
 8001fc4:	0800221f 	.word	0x0800221f
 8001fc8:	0800221f 	.word	0x0800221f
 8001fcc:	0800221f 	.word	0x0800221f
 8001fd0:	0800221f 	.word	0x0800221f
 8001fd4:	0800221f 	.word	0x0800221f
 8001fd8:	0800221f 	.word	0x0800221f
 8001fdc:	0800221f 	.word	0x0800221f
 8001fe0:	0800221f 	.word	0x0800221f
 8001fe4:	0800221f 	.word	0x0800221f
 8001fe8:	0800221f 	.word	0x0800221f
 8001fec:	0800221f 	.word	0x0800221f
 8001ff0:	0800221f 	.word	0x0800221f
 8001ff4:	0800221f 	.word	0x0800221f
 8001ff8:	0800221f 	.word	0x0800221f
 8001ffc:	0800221f 	.word	0x0800221f
 8002000:	0800221f 	.word	0x0800221f
 8002004:	0800221f 	.word	0x0800221f
 8002008:	0800221f 	.word	0x0800221f
 800200c:	0800221f 	.word	0x0800221f
 8002010:	0800221f 	.word	0x0800221f
 8002014:	0800221f 	.word	0x0800221f
 8002018:	0800221f 	.word	0x0800221f
 800201c:	0800221f 	.word	0x0800221f
 8002020:	0800221f 	.word	0x0800221f
 8002024:	0800221f 	.word	0x0800221f
 8002028:	0800221f 	.word	0x0800221f
 800202c:	0800221f 	.word	0x0800221f
 8002030:	0800221f 	.word	0x0800221f
 8002034:	0800221f 	.word	0x0800221f
 8002038:	0800221f 	.word	0x0800221f
 800203c:	08002169 	.word	0x08002169
 8002040:	0800221f 	.word	0x0800221f
 8002044:	08002061 	.word	0x08002061
 8002048:	080021c5 	.word	0x080021c5
 800204c:	2bff      	cmp	r3, #255	@ 0xff
 800204e:	f040 80e6 	bne.w	800221e <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	617b      	str	r3, [r7, #20]
   				break;
 8002056:	e0ef      	b.n	8002238 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
   				break;
 800205e:	e0eb      	b.n	8002238 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
   				p++;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
   				type = *p++;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	617a      	str	r2, [r7, #20]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	74fb      	strb	r3, [r7, #19]
   				break;
 8002076:	e0df      	b.n	8002238 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
   				p++;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	617a      	str	r2, [r7, #20]
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <parseDHCPMSG+0x2a4>)
 800208e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	617a      	str	r2, [r7, #20]
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <parseDHCPMSG+0x2a4>)
 800209a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	617a      	str	r2, [r7, #20]
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <parseDHCPMSG+0x2a4>)
 80020a6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	617a      	str	r2, [r7, #20]
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <parseDHCPMSG+0x2a4>)
 80020b2:	70da      	strb	r2, [r3, #3]
   				break;
 80020b4:	e0c0      	b.n	8002238 <parseDHCPMSG+0x410>
 80020b6:	bf00      	nop
 80020b8:	2000025c 	.word	0x2000025c
 80020bc:	20000288 	.word	0x20000288
 80020c0:	2000028c 	.word	0x2000028c
 80020c4:	20000260 	.word	0x20000260
 80020c8:	20000264 	.word	0x20000264
 80020cc:	20000274 	.word	0x20000274
   			case routersOnSubnet :
   				p++;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	617a      	str	r2, [r7, #20]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	617a      	str	r2, [r7, #20]
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <parseDHCPMSG+0x428>)
 80020ea:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	617a      	str	r2, [r7, #20]
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	4b56      	ldr	r3, [pc, #344]	@ (8002250 <parseDHCPMSG+0x428>)
 80020f6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	617a      	str	r2, [r7, #20]
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	4b53      	ldr	r3, [pc, #332]	@ (8002250 <parseDHCPMSG+0x428>)
 8002102:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	617a      	str	r2, [r7, #20]
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <parseDHCPMSG+0x428>)
 800210e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	3b04      	subs	r3, #4
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4413      	add	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
   				break;
 800211a:	e08d      	b.n	8002238 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	617a      	str	r2, [r7, #20]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	617a      	str	r2, [r7, #20]
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	4b47      	ldr	r3, [pc, #284]	@ (8002254 <parseDHCPMSG+0x42c>)
 8002136:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	617a      	str	r2, [r7, #20]
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <parseDHCPMSG+0x42c>)
 8002142:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	617a      	str	r2, [r7, #20]
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <parseDHCPMSG+0x42c>)
 800214e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	617a      	str	r2, [r7, #20]
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	4b3e      	ldr	r3, [pc, #248]	@ (8002254 <parseDHCPMSG+0x42c>)
 800215a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	3b04      	subs	r3, #4
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4413      	add	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
   				break;
 8002166:	e067      	b.n	8002238 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	617a      	str	r2, [r7, #20]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	617a      	str	r2, [r7, #20]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b35      	ldr	r3, [pc, #212]	@ (8002258 <parseDHCPMSG+0x430>)
 8002184:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002186:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <parseDHCPMSG+0x430>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	021a      	lsls	r2, r3, #8
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	1c59      	adds	r1, r3, #1
 8002190:	6179      	str	r1, [r7, #20]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4413      	add	r3, r2
 8002196:	4a30      	ldr	r2, [pc, #192]	@ (8002258 <parseDHCPMSG+0x430>)
 8002198:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800219a:	4b2f      	ldr	r3, [pc, #188]	@ (8002258 <parseDHCPMSG+0x430>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	021a      	lsls	r2, r3, #8
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	1c59      	adds	r1, r3, #1
 80021a4:	6179      	str	r1, [r7, #20]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002258 <parseDHCPMSG+0x430>)
 80021ac:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80021ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002258 <parseDHCPMSG+0x430>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	021a      	lsls	r2, r3, #8
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	6179      	str	r1, [r7, #20]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <parseDHCPMSG+0x430>)
 80021c0:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 80021c2:	e039      	b.n	8002238 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	617a      	str	r2, [r7, #20]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	617a      	str	r2, [r7, #20]
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <parseDHCPMSG+0x434>)
 80021de:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	617a      	str	r2, [r7, #20]
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <parseDHCPMSG+0x434>)
 80021ea:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	617a      	str	r2, [r7, #20]
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <parseDHCPMSG+0x434>)
 80021f6:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	617a      	str	r2, [r7, #20]
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	4b16      	ldr	r3, [pc, #88]	@ (800225c <parseDHCPMSG+0x434>)
 8002202:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002204:	793a      	ldrb	r2, [r7, #4]
 8002206:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <parseDHCPMSG+0x438>)
 8002208:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800220a:	797a      	ldrb	r2, [r7, #5]
 800220c:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <parseDHCPMSG+0x438>)
 800220e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002210:	79ba      	ldrb	r2, [r7, #6]
 8002212:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <parseDHCPMSG+0x438>)
 8002214:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002216:	79fa      	ldrb	r2, [r7, #7]
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <parseDHCPMSG+0x438>)
 800221a:	70da      	strb	r2, [r3, #3]
   				break;
 800221c:	e00c      	b.n	8002238 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	617a      	str	r2, [r7, #20]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4413      	add	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
   				break;
 8002236:	bf00      	nop
		while ( p < e ) {
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	f4ff ae8a 	bcc.w	8001f56 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8002242:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002246:	4618      	mov	r0, r3
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	bf00      	nop
 8002250:	20000270 	.word	0x20000270
 8002254:	20000278 	.word	0x20000278
 8002258:	20000000 	.word	0x20000000
 800225c:	20000260 	.word	0x20000260
 8002260:	20000264 	.word	0x20000264

08002264 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800226a:	4b7f      	ldr	r3, [pc, #508]	@ (8002468 <DHCP_run+0x204>)
 800226c:	f993 3000 	ldrsb.w	r3, [r3]
 8002270:	2b06      	cmp	r3, #6
 8002272:	d101      	bne.n	8002278 <DHCP_run+0x14>
 8002274:	2305      	movs	r3, #5
 8002276:	e0f3      	b.n	8002460 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002278:	4b7c      	ldr	r3, [pc, #496]	@ (800246c <DHCP_run+0x208>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	3301      	adds	r3, #1
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002286:	4618      	mov	r0, r3
 8002288:	f002 f9f4 	bl	8004674 <WIZCHIP_READ>
 800228c:	4603      	mov	r3, r0
 800228e:	2b22      	cmp	r3, #34	@ 0x22
 8002290:	d006      	beq.n	80022a0 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8002292:	4b76      	ldr	r3, [pc, #472]	@ (800246c <DHCP_run+0x208>)
 8002294:	7818      	ldrb	r0, [r3, #0]
 8002296:	2300      	movs	r3, #0
 8002298:	2244      	movs	r2, #68	@ 0x44
 800229a:	2102      	movs	r1, #2
 800229c:	f001 f88c 	bl	80033b8 <socket>

	ret = DHCP_RUNNING;
 80022a0:	2301      	movs	r3, #1
 80022a2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80022a4:	f7ff fdc0 	bl	8001e28 <parseDHCPMSG>
 80022a8:	4603      	mov	r3, r0
 80022aa:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80022ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002468 <DHCP_run+0x204>)
 80022ae:	f993 3000 	ldrsb.w	r3, [r3]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	f200 80d0 	bhi.w	8002458 <DHCP_run+0x1f4>
 80022b8:	a201      	add	r2, pc, #4	@ (adr r2, 80022c0 <DHCP_run+0x5c>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	080022d5 	.word	0x080022d5
 80022c4:	080022f9 	.word	0x080022f9
 80022c8:	0800233d 	.word	0x0800233d
 80022cc:	0800238d 	.word	0x0800238d
 80022d0:	080023e7 	.word	0x080023e7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80022d4:	4b66      	ldr	r3, [pc, #408]	@ (8002470 <DHCP_run+0x20c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80022da:	4b65      	ldr	r3, [pc, #404]	@ (8002470 <DHCP_run+0x20c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80022e0:	4b63      	ldr	r3, [pc, #396]	@ (8002470 <DHCP_run+0x20c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80022e6:	4b62      	ldr	r3, [pc, #392]	@ (8002470 <DHCP_run+0x20c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80022ec:	f7fe fffa 	bl	80012e4 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80022f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002468 <DHCP_run+0x204>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
   		break;
 80022f6:	e0b2      	b.n	800245e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d119      	bne.n	8002332 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80022fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <DHCP_run+0x210>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	7c1a      	ldrb	r2, [r3, #16]
 8002304:	4b5a      	ldr	r3, [pc, #360]	@ (8002470 <DHCP_run+0x20c>)
 8002306:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002308:	4b5a      	ldr	r3, [pc, #360]	@ (8002474 <DHCP_run+0x210>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	7c5a      	ldrb	r2, [r3, #17]
 800230e:	4b58      	ldr	r3, [pc, #352]	@ (8002470 <DHCP_run+0x20c>)
 8002310:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002312:	4b58      	ldr	r3, [pc, #352]	@ (8002474 <DHCP_run+0x210>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	7c9a      	ldrb	r2, [r3, #18]
 8002318:	4b55      	ldr	r3, [pc, #340]	@ (8002470 <DHCP_run+0x20c>)
 800231a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800231c:	4b55      	ldr	r3, [pc, #340]	@ (8002474 <DHCP_run+0x210>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	7cda      	ldrb	r2, [r3, #19]
 8002322:	4b53      	ldr	r3, [pc, #332]	@ (8002470 <DHCP_run+0x20c>)
 8002324:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002326:	f7ff f9a3 	bl	8001670 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800232a:	4b4f      	ldr	r3, [pc, #316]	@ (8002468 <DHCP_run+0x204>)
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002330:	e095      	b.n	800245e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002332:	f000 f8b1 	bl	8002498 <check_DHCP_timeout>
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
         break;
 800233a:	e090      	b.n	800245e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d116      	bne.n	8002370 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002342:	f000 f909 	bl	8002558 <check_DHCP_leasedIP>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800234c:	4b4a      	ldr	r3, [pc, #296]	@ (8002478 <DHCP_run+0x214>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4798      	blx	r3
					reset_DHCP_timeout();
 8002352:	f000 f9d3 	bl	80026fc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002356:	4b44      	ldr	r3, [pc, #272]	@ (8002468 <DHCP_run+0x204>)
 8002358:	2203      	movs	r2, #3
 800235a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800235c:	e07f      	b.n	800245e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800235e:	f000 f9cd 	bl	80026fc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <DHCP_run+0x218>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002368:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <DHCP_run+0x204>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
		break;
 800236e:	e076      	b.n	800245e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	2b06      	cmp	r3, #6
 8002374:	d105      	bne.n	8002382 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002376:	f000 f9c1 	bl	80026fc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <DHCP_run+0x204>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
		break;
 8002380:	e06d      	b.n	800245e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002382:	f000 f889 	bl	8002498 <check_DHCP_timeout>
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
		break;
 800238a:	e068      	b.n	800245e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800238c:	2304      	movs	r3, #4
 800238e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002390:	4b3b      	ldr	r3, [pc, #236]	@ (8002480 <DHCP_run+0x21c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002398:	d060      	beq.n	800245c <DHCP_run+0x1f8>
 800239a:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <DHCP_run+0x21c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	085a      	lsrs	r2, r3, #1
 80023a0:	4b38      	ldr	r3, [pc, #224]	@ (8002484 <DHCP_run+0x220>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d259      	bcs.n	800245c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80023ac:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <DHCP_run+0x20c>)
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <DHCP_run+0x224>)
 80023b2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80023b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002470 <DHCP_run+0x20c>)
 80023b6:	785a      	ldrb	r2, [r3, #1]
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <DHCP_run+0x224>)
 80023ba:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80023bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <DHCP_run+0x20c>)
 80023be:	789a      	ldrb	r2, [r3, #2]
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <DHCP_run+0x224>)
 80023c2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80023c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <DHCP_run+0x20c>)
 80023c6:	78da      	ldrb	r2, [r3, #3]
 80023c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002488 <DHCP_run+0x224>)
 80023ca:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <DHCP_run+0x228>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a2e      	ldr	r2, [pc, #184]	@ (800248c <DHCP_run+0x228>)
 80023d4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80023d6:	f7ff f94b 	bl	8001670 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80023da:	f000 f98f 	bl	80026fc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <DHCP_run+0x204>)
 80023e0:	2204      	movs	r2, #4
 80023e2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80023e4:	e03a      	b.n	800245c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80023e6:	2304      	movs	r3, #4
 80023e8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80023ea:	79bb      	ldrb	r3, [r7, #6]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d125      	bne.n	800243c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <DHCP_run+0x22c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80023f6:	4b24      	ldr	r3, [pc, #144]	@ (8002488 <DHCP_run+0x224>)
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <DHCP_run+0x20c>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d111      	bne.n	8002426 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002402:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <DHCP_run+0x224>)
 8002404:	785a      	ldrb	r2, [r3, #1]
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <DHCP_run+0x20c>)
 8002408:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800240a:	429a      	cmp	r2, r3
 800240c:	d10b      	bne.n	8002426 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800240e:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <DHCP_run+0x224>)
 8002410:	789a      	ldrb	r2, [r3, #2]
 8002412:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <DHCP_run+0x20c>)
 8002414:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d105      	bne.n	8002426 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800241a:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <DHCP_run+0x224>)
 800241c:	78da      	ldrb	r2, [r3, #3]
 800241e:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <DHCP_run+0x20c>)
 8002420:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d004      	beq.n	8002430 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002426:	2303      	movs	r3, #3
 8002428:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <DHCP_run+0x230>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002430:	f000 f964 	bl	80026fc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <DHCP_run+0x204>)
 8002436:	2203      	movs	r2, #3
 8002438:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800243a:	e010      	b.n	800245e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	2b06      	cmp	r3, #6
 8002440:	d105      	bne.n	800244e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002442:	f000 f95b 	bl	80026fc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <DHCP_run+0x204>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
	   	break;
 800244c:	e007      	b.n	800245e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800244e:	f000 f823 	bl	8002498 <check_DHCP_timeout>
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002456:	e002      	b.n	800245e <DHCP_run+0x1fa>
		default :
   		break;
 8002458:	bf00      	nop
 800245a:	e000      	b.n	800245e <DHCP_run+0x1fa>
		break;
 800245c:	bf00      	nop
	}

	return ret;
 800245e:	79fb      	ldrb	r3, [r7, #7]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000027c 	.word	0x2000027c
 800246c:	2000025c 	.word	0x2000025c
 8002470:	2000026c 	.word	0x2000026c
 8002474:	20000288 	.word	0x20000288
 8002478:	20000010 	.word	0x20000010
 800247c:	20000018 	.word	0x20000018
 8002480:	20000000 	.word	0x20000000
 8002484:	20000280 	.word	0x20000280
 8002488:	20000268 	.word	0x20000268
 800248c:	20000284 	.word	0x20000284
 8002490:	2000027d 	.word	0x2000027d
 8002494:	20000014 	.word	0x20000014

08002498 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800249e:	2301      	movs	r3, #1
 80024a0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80024a2:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <check_DHCP_timeout+0xb0>)
 80024a4:	f993 3000 	ldrsb.w	r3, [r3]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	dc2d      	bgt.n	8002508 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80024ac:	4b27      	ldr	r3, [pc, #156]	@ (800254c <check_DHCP_timeout+0xb4>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <check_DHCP_timeout+0xb8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d242      	bcs.n	800253e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80024b8:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <check_DHCP_timeout+0xbc>)
 80024ba:	f993 3000 	ldrsb.w	r3, [r3]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00c      	beq.n	80024dc <check_DHCP_timeout+0x44>
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	dc0d      	bgt.n	80024e2 <check_DHCP_timeout+0x4a>
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d002      	beq.n	80024d0 <check_DHCP_timeout+0x38>
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80024ce:	e008      	b.n	80024e2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80024d0:	f7fe ff08 	bl	80012e4 <send_DHCP_DISCOVER>
				break;
 80024d4:	e006      	b.n	80024e4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80024d6:	f7ff f8cb 	bl	8001670 <send_DHCP_REQUEST>
				break;
 80024da:	e003      	b.n	80024e4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80024dc:	f7ff f8c8 	bl	8001670 <send_DHCP_REQUEST>
				break;
 80024e0:	e000      	b.n	80024e4 <check_DHCP_timeout+0x4c>
				break;
 80024e2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <check_DHCP_timeout+0xb8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80024ea:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <check_DHCP_timeout+0xb8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330a      	adds	r3, #10
 80024f0:	4a16      	ldr	r2, [pc, #88]	@ (800254c <check_DHCP_timeout+0xb4>)
 80024f2:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <check_DHCP_timeout+0xb0>)
 80024f6:	f993 3000 	ldrsb.w	r3, [r3]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	b25a      	sxtb	r2, r3
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <check_DHCP_timeout+0xb0>)
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e01a      	b.n	800253e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <check_DHCP_timeout+0xbc>)
 800250a:	f993 3000 	ldrsb.w	r3, [r3]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d00c      	beq.n	800252c <check_DHCP_timeout+0x94>
 8002512:	2b04      	cmp	r3, #4
 8002514:	dc10      	bgt.n	8002538 <check_DHCP_timeout+0xa0>
 8002516:	2b01      	cmp	r3, #1
 8002518:	d002      	beq.n	8002520 <check_DHCP_timeout+0x88>
 800251a:	2b02      	cmp	r3, #2
 800251c:	d006      	beq.n	800252c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800251e:	e00b      	b.n	8002538 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <check_DHCP_timeout+0xbc>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002526:	2300      	movs	r3, #0
 8002528:	71fb      	strb	r3, [r7, #7]
				break;
 800252a:	e006      	b.n	800253a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800252c:	f7fe feda 	bl	80012e4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <check_DHCP_timeout+0xbc>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
				break;
 8002536:	e000      	b.n	800253a <check_DHCP_timeout+0xa2>
				break;
 8002538:	bf00      	nop
		}
		reset_DHCP_timeout();
 800253a:	f000 f8df 	bl	80026fc <reset_DHCP_timeout>
	}
	return ret;
 800253e:	79fb      	ldrb	r3, [r7, #7]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000027d 	.word	0x2000027d
 800254c:	20000004 	.word	0x20000004
 8002550:	20000280 	.word	0x20000280
 8002554:	2000027c 	.word	0x2000027c

08002558 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800255e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002562:	f002 f887 	bl	8004674 <WIZCHIP_READ>
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800256a:	2103      	movs	r1, #3
 800256c:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002570:	f002 f8cc 	bl	800470c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002574:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <check_DHCP_leasedIP+0x6c>)
 8002576:	7818      	ldrb	r0, [r3, #0]
 8002578:	f241 3388 	movw	r3, #5000	@ 0x1388
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <check_DHCP_leasedIP+0x70>)
 8002580:	2211      	movs	r2, #17
 8002582:	4912      	ldr	r1, [pc, #72]	@ (80025cc <check_DHCP_leasedIP+0x74>)
 8002584:	f001 fb22 	bl	8003bcc <sendto>
 8002588:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002592:	f002 f8bb 	bl	800470c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f113 0f0d 	cmn.w	r3, #13
 800259c:	d101      	bne.n	80025a2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00c      	b.n	80025bc <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80025a2:	f7ff faef 	bl	8001b84 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <check_DHCP_leasedIP+0x78>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80025ac:	bf00      	nop
 80025ae:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <check_DHCP_leasedIP+0x78>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d9f9      	bls.n	80025ae <check_DHCP_leasedIP+0x56>

		return 0;
 80025ba:	2300      	movs	r3, #0
	}
}	
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000025c 	.word	0x2000025c
 80025c8:	2000026c 	.word	0x2000026c
 80025cc:	0800dd78 	.word	0x0800dd78
 80025d0:	20000280 	.word	0x20000280

080025d4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80025e4:	2206      	movs	r2, #6
 80025e6:	493f      	ldr	r1, [pc, #252]	@ (80026e4 <DHCP_init+0x110>)
 80025e8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80025ec:	f002 f8dc 	bl	80047a8 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80025f0:	4b3c      	ldr	r3, [pc, #240]	@ (80026e4 <DHCP_init+0x110>)
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <DHCP_init+0x110>)
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b39      	ldr	r3, [pc, #228]	@ (80026e4 <DHCP_init+0x110>)
 80025fe:	789b      	ldrb	r3, [r3, #2]
 8002600:	4313      	orrs	r3, r2
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <DHCP_init+0x110>)
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	4313      	orrs	r3, r2
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b35      	ldr	r3, [pc, #212]	@ (80026e4 <DHCP_init+0x110>)
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	4313      	orrs	r3, r2
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <DHCP_init+0x110>)
 8002616:	795b      	ldrb	r3, [r3, #5]
 8002618:	4313      	orrs	r3, r2
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d117      	bne.n	8002650 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002620:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <DHCP_init+0x110>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002626:	4b2f      	ldr	r3, [pc, #188]	@ (80026e4 <DHCP_init+0x110>)
 8002628:	2208      	movs	r2, #8
 800262a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <DHCP_init+0x110>)
 800262e:	22dc      	movs	r2, #220	@ 0xdc
 8002630:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002632:	4b2c      	ldr	r3, [pc, #176]	@ (80026e4 <DHCP_init+0x110>)
 8002634:	2200      	movs	r2, #0
 8002636:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002638:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <DHCP_init+0x110>)
 800263a:	2200      	movs	r2, #0
 800263c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800263e:	4b29      	ldr	r3, [pc, #164]	@ (80026e4 <DHCP_init+0x110>)
 8002640:	2200      	movs	r2, #0
 8002642:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002644:	2206      	movs	r2, #6
 8002646:	4927      	ldr	r1, [pc, #156]	@ (80026e4 <DHCP_init+0x110>)
 8002648:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800264c:	f002 f90c 	bl	8004868 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002650:	4a25      	ldr	r2, [pc, #148]	@ (80026e8 <DHCP_init+0x114>)
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002656:	4a25      	ldr	r2, [pc, #148]	@ (80026ec <DHCP_init+0x118>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800265c:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <DHCP_init+0x11c>)
 800265e:	4a25      	ldr	r2, [pc, #148]	@ (80026f4 <DHCP_init+0x120>)
 8002660:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <DHCP_init+0x110>)
 8002664:	78db      	ldrb	r3, [r3, #3]
 8002666:	461a      	mov	r2, r3
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <DHCP_init+0x11c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	4a20      	ldr	r2, [pc, #128]	@ (80026f0 <DHCP_init+0x11c>)
 8002670:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <DHCP_init+0x110>)
 8002674:	791b      	ldrb	r3, [r3, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <DHCP_init+0x11c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4413      	add	r3, r2
 800267e:	4a1c      	ldr	r2, [pc, #112]	@ (80026f0 <DHCP_init+0x11c>)
 8002680:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002682:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <DHCP_init+0x110>)
 8002684:	795b      	ldrb	r3, [r3, #5]
 8002686:	461a      	mov	r2, r3
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <DHCP_init+0x11c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4413      	add	r3, r2
 800268e:	4a18      	ldr	r2, [pc, #96]	@ (80026f0 <DHCP_init+0x11c>)
 8002690:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <DHCP_init+0x110>)
 8002694:	78da      	ldrb	r2, [r3, #3]
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <DHCP_init+0x110>)
 8002698:	791b      	ldrb	r3, [r3, #4]
 800269a:	4053      	eors	r3, r2
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <DHCP_init+0x110>)
 80026a0:	795b      	ldrb	r3, [r3, #5]
 80026a2:	4053      	eors	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <DHCP_init+0x11c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <DHCP_init+0x11c>)
 80026b0:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	2204      	movs	r2, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80026be:	f002 f8d3 	bl	8004868 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	2204      	movs	r2, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80026ce:	f002 f8cb 	bl	8004868 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80026d2:	f000 f813 	bl	80026fc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <DHCP_init+0x124>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	2000028c 	.word	0x2000028c
 80026e8:	2000025c 	.word	0x2000025c
 80026ec:	20000288 	.word	0x20000288
 80026f0:	20000284 	.word	0x20000284
 80026f4:	12345678 	.word	0x12345678
 80026f8:	2000027c 	.word	0x2000027c

080026fc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <reset_DHCP_timeout+0x20>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <reset_DHCP_timeout+0x24>)
 8002708:	220a      	movs	r2, #10
 800270a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <reset_DHCP_timeout+0x28>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	20000280 	.word	0x20000280
 8002720:	20000004 	.word	0x20000004
 8002724:	2000027d 	.word	0x2000027d

08002728 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <getIPfromDHCP+0x3c>)
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <getIPfromDHCP+0x3c>)
 800273e:	7852      	ldrb	r2, [r2, #1]
 8002740:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3302      	adds	r3, #2
 8002746:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <getIPfromDHCP+0x3c>)
 8002748:	7892      	ldrb	r2, [r2, #2]
 800274a:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3303      	adds	r3, #3
 8002750:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <getIPfromDHCP+0x3c>)
 8002752:	78d2      	ldrb	r2, [r2, #3]
 8002754:	701a      	strb	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	2000026c 	.word	0x2000026c

08002768 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <getGWfromDHCP+0x3c>)
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3301      	adds	r3, #1
 800277c:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <getGWfromDHCP+0x3c>)
 800277e:	7852      	ldrb	r2, [r2, #1]
 8002780:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3302      	adds	r3, #2
 8002786:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <getGWfromDHCP+0x3c>)
 8002788:	7892      	ldrb	r2, [r2, #2]
 800278a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3303      	adds	r3, #3
 8002790:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <getGWfromDHCP+0x3c>)
 8002792:	78d2      	ldrb	r2, [r2, #3]
 8002794:	701a      	strb	r2, [r3, #0]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000270 	.word	0x20000270

080027a8 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <getSNfromDHCP+0x3c>)
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <getSNfromDHCP+0x3c>)
 80027be:	7852      	ldrb	r2, [r2, #1]
 80027c0:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3302      	adds	r3, #2
 80027c6:	4a07      	ldr	r2, [pc, #28]	@ (80027e4 <getSNfromDHCP+0x3c>)
 80027c8:	7892      	ldrb	r2, [r2, #2]
 80027ca:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3303      	adds	r3, #3
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <getSNfromDHCP+0x3c>)
 80027d2:	78d2      	ldrb	r2, [r2, #3]
 80027d4:	701a      	strb	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000274 	.word	0x20000274

080027e8 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2b09      	cmp	r3, #9
 80027fe:	d803      	bhi.n	8002808 <NibbleToHex+0x20>
    return nibble + '0';
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	3330      	adds	r3, #48	@ 0x30
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e002      	b.n	800280e <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	3337      	adds	r3, #55	@ 0x37
 800280c:	b2db      	uxtb	r3, r3
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <wizchipSelect>:
uint8_t RX_BUF[1024];
uint8_t TX_BUF[1024];
wiz_NetInfo net_info = { .mac = { 0x0A, 0xAD, 0xBE, 0xEF, 0xFE, 0xE2 }, .dhcp =
		NETINFO_DHCP };

void wizchipSelect(void) {
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	2110      	movs	r1, #16
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <wizchipSelect+0x14>)
 8002826:	f003 f845 	bl	80058b4 <HAL_GPIO_WritePin>
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40020000 	.word	0x40020000

08002834 <wizchipUnselect>:

void wizchipUnselect(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002838:	2201      	movs	r2, #1
 800283a:	2110      	movs	r1, #16
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <wizchipUnselect+0x14>)
 800283e:	f003 f839 	bl	80058b4 <HAL_GPIO_WritePin>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40020000 	.word	0x40020000

0800284c <wizchipReadBurst>:

void wizchipReadBurst(uint8_t *buff, uint16_t len) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4803      	ldr	r0, [pc, #12]	@ (8002870 <wizchipReadBurst+0x24>)
 8002862:	f003 febd 	bl	80065e0 <HAL_SPI_Receive>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000694 	.word	0x20000694

08002874 <wizchipWriteBurst>:

void wizchipWriteBurst(uint8_t *buff, uint16_t len) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4803      	ldr	r0, [pc, #12]	@ (8002898 <wizchipWriteBurst+0x24>)
 800288a:	f003 fd66 	bl	800635a <HAL_SPI_Transmit>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000694 	.word	0x20000694

0800289c <wizchipReadByte>:

uint8_t wizchipReadByte(void) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchipReadBurst(&byte, sizeof(byte));
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	2101      	movs	r1, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ffd0 	bl	800284c <wizchipReadBurst>
	return byte;
 80028ac:	79fb      	ldrb	r3, [r7, #7]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <wizchipWriteByte>:

void wizchipWriteByte(uint8_t byte) {
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	71fb      	strb	r3, [r7, #7]
	wizchipWriteBurst(&byte, sizeof(byte));
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	2101      	movs	r1, #1
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ffd5 	bl	8002874 <wizchipWriteBurst>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <Callback_IPAssigned>:

volatile uint8_t ip_assigned = false;

void Callback_IPAssigned(void) {
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
	ip_assigned = true;
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <Callback_IPAssigned+0x14>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	20000292 	.word	0x20000292

080028ec <Callback_IPConflict>:

void Callback_IPConflict(void) {
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
	ip_assigned = false;
 80028f0:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <Callback_IPConflict+0x14>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	20000292 	.word	0x20000292

08002904 <ETH_Init>:

uint8_t dhcp_buffer[1024];
uint8_t dns_buffer[1024];

uint8_t ETH_Init() {
 8002904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002906:	b093      	sub	sp, #76	@ 0x4c
 8002908:	af0a      	add	r7, sp, #40	@ 0x28
	// Register W5500 callbacks
	reg_wizchip_cs_cbfunc(wizchipSelect, wizchipUnselect);
 800290a:	4961      	ldr	r1, [pc, #388]	@ (8002a90 <ETH_Init+0x18c>)
 800290c:	4861      	ldr	r0, [pc, #388]	@ (8002a94 <ETH_Init+0x190>)
 800290e:	f002 f9fb 	bl	8004d08 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchipReadByte, wizchipWriteByte);
 8002912:	4961      	ldr	r1, [pc, #388]	@ (8002a98 <ETH_Init+0x194>)
 8002914:	4861      	ldr	r0, [pc, #388]	@ (8002a9c <ETH_Init+0x198>)
 8002916:	f002 fa1d 	bl	8004d54 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchipReadBurst, wizchipWriteBurst);
 800291a:	4961      	ldr	r1, [pc, #388]	@ (8002aa0 <ETH_Init+0x19c>)
 800291c:	4861      	ldr	r0, [pc, #388]	@ (8002aa4 <ETH_Init+0x1a0>)
 800291e:	f002 fa45 	bl	8004dac <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 8002922:	4a61      	ldr	r2, [pc, #388]	@ (8002aa8 <ETH_Init+0x1a4>)
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800292c:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002930:	f107 0214 	add.w	r2, r7, #20
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f002 faae 	bl	8004e9c <wizchip_init>

	// set MAC address before using DHCP
	setSHAR(net_info.mac);
 8002940:	2206      	movs	r2, #6
 8002942:	495a      	ldr	r1, [pc, #360]	@ (8002aac <ETH_Init+0x1a8>)
 8002944:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002948:	f001 ff8e 	bl	8004868 <WIZCHIP_WRITE_BUF>
	DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800294c:	4958      	ldr	r1, [pc, #352]	@ (8002ab0 <ETH_Init+0x1ac>)
 800294e:	2001      	movs	r0, #1
 8002950:	f7ff fe40 	bl	80025d4 <DHCP_init>

	reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned,
 8002954:	4a57      	ldr	r2, [pc, #348]	@ (8002ab4 <ETH_Init+0x1b0>)
 8002956:	4958      	ldr	r1, [pc, #352]	@ (8002ab8 <ETH_Init+0x1b4>)
 8002958:	4857      	ldr	r0, [pc, #348]	@ (8002ab8 <ETH_Init+0x1b4>)
 800295a:	f7fe fb99 	bl	8001090 <reg_dhcp_cbfunc>
			Callback_IPConflict);

	sprintf(msgbuf, "Obtaining network configuration from DHCP ... \r\n");
 800295e:	4957      	ldr	r1, [pc, #348]	@ (8002abc <ETH_Init+0x1b8>)
 8002960:	4857      	ldr	r0, [pc, #348]	@ (8002ac0 <ETH_Init+0x1bc>)
 8002962:	f007 f9b5 	bl	8009cd0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msgbuf, strlen(msgbuf), 100);
 8002966:	4856      	ldr	r0, [pc, #344]	@ (8002ac0 <ETH_Init+0x1bc>)
 8002968:	f7fd fc92 	bl	8000290 <strlen>
 800296c:	4603      	mov	r3, r0
 800296e:	b29a      	uxth	r2, r3
 8002970:	2364      	movs	r3, #100	@ 0x64
 8002972:	4953      	ldr	r1, [pc, #332]	@ (8002ac0 <ETH_Init+0x1bc>)
 8002974:	4853      	ldr	r0, [pc, #332]	@ (8002ac4 <ETH_Init+0x1c0>)
 8002976:	f005 f9db 	bl	8007d30 <HAL_UART_Transmit>
	uint32_t ctr = 100;
 800297a:	2364      	movs	r3, #100	@ 0x64
 800297c:	61fb      	str	r3, [r7, #28]
	while ((!ip_assigned) && ctr) {
 800297e:	e007      	b.n	8002990 <ETH_Init+0x8c>
		DHCP_run();
 8002980:	f7ff fc70 	bl	8002264 <DHCP_run>
		--ctr;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3b01      	subs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
		HAL_Delay(50);
 800298a:	2032      	movs	r0, #50	@ 0x32
 800298c:	f002 fc2e 	bl	80051ec <HAL_Delay>
	while ((!ip_assigned) && ctr) {
 8002990:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac8 <ETH_Init+0x1c4>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <ETH_Init+0x9c>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ef      	bne.n	8002980 <ETH_Init+0x7c>
	}
	if (!ip_assigned) {
 80029a0:	4b49      	ldr	r3, [pc, #292]	@ (8002ac8 <ETH_Init+0x1c4>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <ETH_Init+0xc6>
		sprintf(msgbuf, "Failed to obtain IP, returning ... \r\n");
 80029aa:	4948      	ldr	r1, [pc, #288]	@ (8002acc <ETH_Init+0x1c8>)
 80029ac:	4844      	ldr	r0, [pc, #272]	@ (8002ac0 <ETH_Init+0x1bc>)
 80029ae:	f007 f98f 	bl	8009cd0 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 80029b2:	4843      	ldr	r0, [pc, #268]	@ (8002ac0 <ETH_Init+0x1bc>)
 80029b4:	f7fd fc6c 	bl	8000290 <strlen>
 80029b8:	4603      	mov	r3, r0
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	2364      	movs	r3, #100	@ 0x64
 80029be:	4940      	ldr	r1, [pc, #256]	@ (8002ac0 <ETH_Init+0x1bc>)
 80029c0:	4840      	ldr	r0, [pc, #256]	@ (8002ac4 <ETH_Init+0x1c0>)
 80029c2:	f005 f9b5 	bl	8007d30 <HAL_UART_Transmit>
		return 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e05d      	b.n	8002a86 <ETH_Init+0x182>
	}
	sprintf(msgbuf, "Network configuration obtained!\r\n-----------------------\r\n");
 80029ca:	4941      	ldr	r1, [pc, #260]	@ (8002ad0 <ETH_Init+0x1cc>)
 80029cc:	483c      	ldr	r0, [pc, #240]	@ (8002ac0 <ETH_Init+0x1bc>)
 80029ce:	f007 f97f 	bl	8009cd0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)msgbuf, strlen(msgbuf), 100);
 80029d2:	483b      	ldr	r0, [pc, #236]	@ (8002ac0 <ETH_Init+0x1bc>)
 80029d4:	f7fd fc5c 	bl	8000290 <strlen>
 80029d8:	4603      	mov	r3, r0
 80029da:	b29a      	uxth	r2, r3
 80029dc:	2364      	movs	r3, #100	@ 0x64
 80029de:	4938      	ldr	r1, [pc, #224]	@ (8002ac0 <ETH_Init+0x1bc>)
 80029e0:	4838      	ldr	r0, [pc, #224]	@ (8002ac4 <ETH_Init+0x1c0>)
 80029e2:	f005 f9a5 	bl	8007d30 <HAL_UART_Transmit>

	getIPfromDHCP(net_info.ip);
 80029e6:	483b      	ldr	r0, [pc, #236]	@ (8002ad4 <ETH_Init+0x1d0>)
 80029e8:	f7ff fe9e 	bl	8002728 <getIPfromDHCP>
	getGWfromDHCP(net_info.gw);
 80029ec:	483a      	ldr	r0, [pc, #232]	@ (8002ad8 <ETH_Init+0x1d4>)
 80029ee:	f7ff febb 	bl	8002768 <getGWfromDHCP>
	getSNfromDHCP(net_info.sn);
 80029f2:	483a      	ldr	r0, [pc, #232]	@ (8002adc <ETH_Init+0x1d8>)
 80029f4:	f7ff fed8 	bl	80027a8 <getSNfromDHCP>
//        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
//        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
//    );
//    HAL_UART_Transmit(&huart1,(uint8_t *)charData,strlen(charData),1000);

	wizchip_setnetinfo(&net_info);
 80029f8:	482c      	ldr	r0, [pc, #176]	@ (8002aac <ETH_Init+0x1a8>)
 80029fa:	f002 fadb 	bl	8004fb4 <wizchip_setnetinfo>
	wizchip_getnetinfo(&net_info);
 80029fe:	482b      	ldr	r0, [pc, #172]	@ (8002aac <ETH_Init+0x1a8>)
 8002a00:	f002 fb18 	bl	8005034 <wizchip_getnetinfo>

	sprintf(msgbuf,
			"IP:\t%d.%d.%d.%d\r\nSN:\t%d.%d.%d.%d\r\nGW:\t%d.%d.%d.%d\r\n-----------------------\r\n",
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002a04:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <ETH_Init+0x1a8>)
 8002a06:	799b      	ldrb	r3, [r3, #6]
	sprintf(msgbuf,
 8002a08:	469c      	mov	ip, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002a0a:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <ETH_Init+0x1a8>)
 8002a0c:	79db      	ldrb	r3, [r3, #7]
	sprintf(msgbuf,
 8002a0e:	469e      	mov	lr, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002a10:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <ETH_Init+0x1a8>)
 8002a12:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(msgbuf,
 8002a14:	461a      	mov	r2, r3
			net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002a16:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <ETH_Init+0x1a8>)
 8002a18:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(msgbuf,
 8002a1a:	4619      	mov	r1, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a1c:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <ETH_Init+0x1a8>)
 8002a1e:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(msgbuf,
 8002a20:	4618      	mov	r0, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a22:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <ETH_Init+0x1a8>)
 8002a24:	7adb      	ldrb	r3, [r3, #11]
	sprintf(msgbuf,
 8002a26:	461c      	mov	r4, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <ETH_Init+0x1a8>)
 8002a2a:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(msgbuf,
 8002a2c:	461d      	mov	r5, r3
			net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <ETH_Init+0x1a8>)
 8002a30:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(msgbuf,
 8002a32:	461e      	mov	r6, r3
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <ETH_Init+0x1a8>)
 8002a36:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(msgbuf,
 8002a38:	60fb      	str	r3, [r7, #12]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <ETH_Init+0x1a8>)
 8002a3c:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(msgbuf,
 8002a3e:	60bb      	str	r3, [r7, #8]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a40:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <ETH_Init+0x1a8>)
 8002a42:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(msgbuf,
 8002a44:	607b      	str	r3, [r7, #4]
			net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3]);
 8002a46:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <ETH_Init+0x1a8>)
 8002a48:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(msgbuf,
 8002a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	9308      	str	r3, [sp, #32]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	9307      	str	r3, [sp, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	9306      	str	r3, [sp, #24]
 8002a58:	9605      	str	r6, [sp, #20]
 8002a5a:	9504      	str	r5, [sp, #16]
 8002a5c:	9403      	str	r4, [sp, #12]
 8002a5e:	9002      	str	r0, [sp, #8]
 8002a60:	9101      	str	r1, [sp, #4]
 8002a62:	9200      	str	r2, [sp, #0]
 8002a64:	4673      	mov	r3, lr
 8002a66:	4662      	mov	r2, ip
 8002a68:	491d      	ldr	r1, [pc, #116]	@ (8002ae0 <ETH_Init+0x1dc>)
 8002a6a:	4815      	ldr	r0, [pc, #84]	@ (8002ac0 <ETH_Init+0x1bc>)
 8002a6c:	f007 f930 	bl	8009cd0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002a70:	4813      	ldr	r0, [pc, #76]	@ (8002ac0 <ETH_Init+0x1bc>)
 8002a72:	f7fd fc0d 	bl	8000290 <strlen>
 8002a76:	4603      	mov	r3, r0
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	2364      	movs	r3, #100	@ 0x64
 8002a7c:	4910      	ldr	r1, [pc, #64]	@ (8002ac0 <ETH_Init+0x1bc>)
 8002a7e:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <ETH_Init+0x1c0>)
 8002a80:	f005 f956 	bl	8007d30 <HAL_UART_Transmit>

	return 1;
 8002a84:	2301      	movs	r3, #1
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	@ 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	08002835 	.word	0x08002835
 8002a94:	0800281d 	.word	0x0800281d
 8002a98:	080028b7 	.word	0x080028b7
 8002a9c:	0800289d 	.word	0x0800289d
 8002aa0:	08002875 	.word	0x08002875
 8002aa4:	0800284d 	.word	0x0800284d
 8002aa8:	0800de74 	.word	0x0800de74
 8002aac:	2000001c 	.word	0x2000001c
 8002ab0:	20000294 	.word	0x20000294
 8002ab4:	080028ed 	.word	0x080028ed
 8002ab8:	080028d5 	.word	0x080028d5
 8002abc:	0800dd8c 	.word	0x0800dd8c
 8002ac0:	20000888 	.word	0x20000888
 8002ac4:	20000734 	.word	0x20000734
 8002ac8:	20000292 	.word	0x20000292
 8002acc:	0800ddc0 	.word	0x0800ddc0
 8002ad0:	0800dde8 	.word	0x0800dde8
 8002ad4:	20000022 	.word	0x20000022
 8002ad8:	2000002a 	.word	0x2000002a
 8002adc:	20000026 	.word	0x20000026
 8002ae0:	0800de24 	.word	0x0800de24

08002ae4 <ETH_SocketInit>:

uint8_t ETH_SocketInit(uint8_t *sck) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	int8_t ret;
	if ((ret = socket(*sck, Sn_MR_TCP, 5000, SF_TCP_NODELAY)) != 0) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7818      	ldrb	r0, [r3, #0]
 8002af0:	2320      	movs	r3, #32
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	2101      	movs	r1, #1
 8002af8:	f000 fc5e 	bl	80033b8 <socket>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <ETH_SocketInit+0x28>
		return 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e01b      	b.n	8002b44 <ETH_SocketInit+0x60>
	}
	setSn_IR(*sck, 0x1f);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	3301      	adds	r3, #1
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002b1a:	211f      	movs	r1, #31
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fdf5 	bl	800470c <WIZCHIP_WRITE>
	setSn_IMR(*sck, 0x04);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3301      	adds	r3, #1
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002b30:	2104      	movs	r1, #4
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 fdea 	bl	800470c <WIZCHIP_WRITE>
	setSIMR(0x01);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8002b3e:	f001 fde5 	bl	800470c <WIZCHIP_WRITE>
	return 1;
 8002b42:	2301      	movs	r3, #1
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <ETH_Connect>:

uint8_t ETH_Connect(uint8_t *sck, char *server) {
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b08b      	sub	sp, #44	@ 0x2c
 8002b50:	af04      	add	r7, sp, #16
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]

	char *ip_part;
	char *port_part;

	// Split the input string using ":" as delimiter
	ip_part = strtok(server, ":");
 8002b56:	4934      	ldr	r1, [pc, #208]	@ (8002c28 <ETH_Connect+0xdc>)
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f007 f951 	bl	8009e00 <strtok>
 8002b5e:	6178      	str	r0, [r7, #20]
	port_part = strtok(NULL, ":");
 8002b60:	4931      	ldr	r1, [pc, #196]	@ (8002c28 <ETH_Connect+0xdc>)
 8002b62:	2000      	movs	r0, #0
 8002b64:	f007 f94c 	bl	8009e00 <strtok>
 8002b68:	6138      	str	r0, [r7, #16]

	if (ip_part != NULL && port_part != NULL) {
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d044      	beq.n	8002bfa <ETH_Connect+0xae>
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d041      	beq.n	8002bfa <ETH_Connect+0xae>
		printf("IP address: %s\n", ip_part);
 8002b76:	6979      	ldr	r1, [r7, #20]
 8002b78:	482c      	ldr	r0, [pc, #176]	@ (8002c2c <ETH_Connect+0xe0>)
 8002b7a:	f007 f897 	bl	8009cac <iprintf>
		printf("Port: %s\n", port_part);
 8002b7e:	6939      	ldr	r1, [r7, #16]
 8002b80:	482b      	ldr	r0, [pc, #172]	@ (8002c30 <ETH_Connect+0xe4>)
 8002b82:	f007 f893 	bl	8009cac <iprintf>

		// Convert IP address to uint8_t array
		sscanf(ip_part, "%d.%d.%d.%d", &server_ip[0], &server_ip[1],
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	1c59      	adds	r1, r3, #1
 8002b8c:	f107 0208 	add.w	r2, r7, #8
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	3303      	adds	r3, #3
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4924      	ldr	r1, [pc, #144]	@ (8002c34 <ETH_Connect+0xe8>)
 8002ba4:	6978      	ldr	r0, [r7, #20]
 8002ba6:	f007 f8b3 	bl	8009d10 <siscanf>
				&server_ip[2], &server_ip[3]);

		// Convert port to uint16_t
		server_port = atoi(port_part);
 8002baa:	6938      	ldr	r0, [r7, #16]
 8002bac:	f006 f8c6 	bl	8008d3c <atoi>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	81fb      	strh	r3, [r7, #14]
	} else {
		return -2;
	}

	sprintf(msgbuf, "Attempting to connect to %d.%d.%d.%d:%d\r\n", server_ip[0], server_ip[1],
 8002bb4:	7a3b      	ldrb	r3, [r7, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	7a7b      	ldrb	r3, [r7, #9]
 8002bba:	461c      	mov	r4, r3
				server_ip[2], server_ip[3], server_port);
 8002bbc:	7abb      	ldrb	r3, [r7, #10]
	sprintf(msgbuf, "Attempting to connect to %d.%d.%d.%d:%d\r\n", server_ip[0], server_ip[1],
 8002bbe:	461a      	mov	r2, r3
				server_ip[2], server_ip[3], server_port);
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
	sprintf(msgbuf, "Attempting to connect to %d.%d.%d.%d:%d\r\n", server_ip[0], server_ip[1],
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	89fb      	ldrh	r3, [r7, #14]
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	9101      	str	r1, [sp, #4]
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	4623      	mov	r3, r4
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4919      	ldr	r1, [pc, #100]	@ (8002c38 <ETH_Connect+0xec>)
 8002bd2:	481a      	ldr	r0, [pc, #104]	@ (8002c3c <ETH_Connect+0xf0>)
 8002bd4:	f007 f87c 	bl	8009cd0 <siprintf>
	UART_Send();
 8002bd8:	f000 f89e 	bl	8002d18 <UART_Send>

	int8_t ret;
	if ((ret = connect(*sck, server_ip, server_port)) != SOCK_OK) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	89fa      	ldrh	r2, [r7, #14]
 8002be2:	f107 0108 	add.w	r1, r7, #8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fd68 	bl	80036bc <connect>
 8002bec:	4603      	mov	r3, r0
 8002bee:	737b      	strb	r3, [r7, #13]
 8002bf0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <ETH_Connect+0xb2>
 8002bf8:	e003      	b.n	8002c02 <ETH_Connect+0xb6>
		return -2;
 8002bfa:	23fe      	movs	r3, #254	@ 0xfe
 8002bfc:	e010      	b.n	8002c20 <ETH_Connect+0xd4>
		return -1;
 8002bfe:	23ff      	movs	r3, #255	@ 0xff
 8002c00:	e00e      	b.n	8002c20 <ETH_Connect+0xd4>
	}

	sprintf(msgbuf, "Server connected!\r\n");
 8002c02:	490f      	ldr	r1, [pc, #60]	@ (8002c40 <ETH_Connect+0xf4>)
 8002c04:	480d      	ldr	r0, [pc, #52]	@ (8002c3c <ETH_Connect+0xf0>)
 8002c06:	f007 f863 	bl	8009cd0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002c0a:	480c      	ldr	r0, [pc, #48]	@ (8002c3c <ETH_Connect+0xf0>)
 8002c0c:	f7fd fb40 	bl	8000290 <strlen>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	2364      	movs	r3, #100	@ 0x64
 8002c16:	4909      	ldr	r1, [pc, #36]	@ (8002c3c <ETH_Connect+0xf0>)
 8002c18:	480a      	ldr	r0, [pc, #40]	@ (8002c44 <ETH_Connect+0xf8>)
 8002c1a:	f005 f889 	bl	8007d30 <HAL_UART_Transmit>
	return 0;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	0800de7c 	.word	0x0800de7c
 8002c2c:	0800de80 	.word	0x0800de80
 8002c30:	0800de90 	.word	0x0800de90
 8002c34:	0800de9c 	.word	0x0800de9c
 8002c38:	0800dea8 	.word	0x0800dea8
 8002c3c:	20000888 	.word	0x20000888
 8002c40:	0800ded4 	.word	0x0800ded4
 8002c44:	20000734 	.word	0x20000734

08002c48 <ETH_Listen>:

int8_t ETH_Listen(uint8_t *sck, char* buf){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	int RSR_Len = 0, repeat = 500;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c5a:	60bb      	str	r3, [r7, #8]
	while(!RSR_Len && repeat){
 8002c5c:	e006      	b.n	8002c6c <ETH_Listen+0x24>
		RSR_Len = getSn_RX_RSR(*sck);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 fea9 	bl	80049ba <getSn_RX_RSR>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60fb      	str	r3, [r7, #12]
	while(!RSR_Len && repeat){
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <ETH_Listen+0x30>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f2      	bne.n	8002c5e <ETH_Listen+0x16>
	}
	if(!repeat){
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <ETH_Listen+0x3a>
		return 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e014      	b.n	8002cac <ETH_Listen+0x64>
	} else {
		setSn_IR(*sck, 0x1f);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	3301      	adds	r3, #1
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002c90:	211f      	movs	r1, #31
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fd3a 	bl	800470c <WIZCHIP_WRITE>
		return recv(*sck, (uint8_t*)buf, RSR_Len);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	b292      	uxth	r2, r2
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fede 	bl	8003a64 <recv>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	b25b      	sxtb	r3, r3
	}
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <ETH_Send>:

void ETH_Send(uint8_t* sck, char* msg){
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
	send(*sck, (uint8_t*)msg, strlen(msg));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	781c      	ldrb	r4, [r3, #0]
 8002cc2:	6838      	ldr	r0, [r7, #0]
 8002cc4:	f7fd fae4 	bl	8000290 <strlen>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6839      	ldr	r1, [r7, #0]
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f000 fdcf 	bl	8003874 <send>
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}
	...

08002ce0 <UART_Message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Message(char *msg) {
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	sprintf(msgbuf, msg);
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4809      	ldr	r0, [pc, #36]	@ (8002d10 <UART_Message+0x30>)
 8002cec:	f006 fff0 	bl	8009cd0 <siprintf>
	HAL_UART_Transmit(UART, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002cf0:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <UART_Message+0x34>)
 8002cf2:	681c      	ldr	r4, [r3, #0]
 8002cf4:	4806      	ldr	r0, [pc, #24]	@ (8002d10 <UART_Message+0x30>)
 8002cf6:	f7fd facb 	bl	8000290 <strlen>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	2364      	movs	r3, #100	@ 0x64
 8002d00:	4903      	ldr	r1, [pc, #12]	@ (8002d10 <UART_Message+0x30>)
 8002d02:	4620      	mov	r0, r4
 8002d04:	f005 f814 	bl	8007d30 <HAL_UART_Transmit>
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	20000888 	.word	0x20000888
 8002d14:	20000034 	.word	0x20000034

08002d18 <UART_Send>:

void UART_Send() {
 8002d18:	b598      	push	{r3, r4, r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(UART, (uint8_t*) msgbuf, strlen(msgbuf), 100);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <UART_Send+0x20>)
 8002d1e:	681c      	ldr	r4, [r3, #0]
 8002d20:	4806      	ldr	r0, [pc, #24]	@ (8002d3c <UART_Send+0x24>)
 8002d22:	f7fd fab5 	bl	8000290 <strlen>
 8002d26:	4603      	mov	r3, r0
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	2364      	movs	r3, #100	@ 0x64
 8002d2c:	4903      	ldr	r1, [pc, #12]	@ (8002d3c <UART_Send+0x24>)
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f004 fffe 	bl	8007d30 <HAL_UART_Transmit>
}
 8002d34:	bf00      	nop
 8002d36:	bd98      	pop	{r3, r4, r7, pc}
 8002d38:	20000034 	.word	0x20000034
 8002d3c:	20000888 	.word	0x20000888

08002d40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	if (rx_input[0] == (uint8_t) '\r' || rx_input[0] == (uint8_t) '\n') {
 8002d48:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <HAL_UART_RxCpltCallback+0xc0>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b0d      	cmp	r3, #13
 8002d4e:	d003      	beq.n	8002d58 <HAL_UART_RxCpltCallback+0x18>
 8002d50:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <HAL_UART_RxCpltCallback+0xc0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b0a      	cmp	r3, #10
 8002d56:	d135      	bne.n	8002dc4 <HAL_UART_RxCpltCallback+0x84>
		char newline[] = "\r\n";
 8002d58:	4a2a      	ldr	r2, [pc, #168]	@ (8002e04 <HAL_UART_RxCpltCallback+0xc4>)
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	4611      	mov	r1, r2
 8002d62:	8019      	strh	r1, [r3, #0]
 8002d64:	3302      	adds	r3, #2
 8002d66:	0c12      	lsrs	r2, r2, #16
 8002d68:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(UART, (uint8_t*) newline, strlen(newline), 100);
 8002d6a:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_UART_RxCpltCallback+0xc8>)
 8002d6c:	681c      	ldr	r4, [r3, #0]
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fa8c 	bl	8000290 <strlen>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	f107 010c 	add.w	r1, r7, #12
 8002d80:	2364      	movs	r3, #100	@ 0x64
 8002d82:	4620      	mov	r0, r4
 8002d84:	f004 ffd4 	bl	8007d30 <HAL_UART_Transmit>
		memcpy(&rx_buffer[rx_index + 1], newline, sizeof newline);
 8002d88:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_UART_RxCpltCallback+0xcc>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	4a20      	ldr	r2, [pc, #128]	@ (8002e10 <HAL_UART_RxCpltCallback+0xd0>)
 8002d90:	4413      	add	r3, r2
 8002d92:	461a      	mov	r2, r3
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	8819      	ldrh	r1, [r3, #0]
 8002d9a:	789b      	ldrb	r3, [r3, #2]
 8002d9c:	8011      	strh	r1, [r2, #0]
 8002d9e:	7093      	strb	r3, [r2, #2]

		HAL_UART_Transmit(UART, rx_buffer, sizeof(rx_buffer) / sizeof(uint8_t),
 8002da0:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_UART_RxCpltCallback+0xc8>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	2364      	movs	r3, #100	@ 0x64
 8002da6:	f240 1201 	movw	r2, #257	@ 0x101
 8002daa:	4919      	ldr	r1, [pc, #100]	@ (8002e10 <HAL_UART_RxCpltCallback+0xd0>)
 8002dac:	f004 ffc0 	bl	8007d30 <HAL_UART_Transmit>
				100);
		rx_index = 0;
 8002db0:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <HAL_UART_RxCpltCallback+0xcc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002db6:	f240 1201 	movw	r2, #257	@ 0x101
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4814      	ldr	r0, [pc, #80]	@ (8002e10 <HAL_UART_RxCpltCallback+0xd0>)
 8002dbe:	f007 f816 	bl	8009dee <memset>
	if (rx_input[0] == (uint8_t) '\r' || rx_input[0] == (uint8_t) '\n') {
 8002dc2:	e011      	b.n	8002de8 <HAL_UART_RxCpltCallback+0xa8>
	} else {
		HAL_UART_Transmit(UART, rx_input, 1, 100);
 8002dc4:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_UART_RxCpltCallback+0xc8>)
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	2364      	movs	r3, #100	@ 0x64
 8002dca:	2201      	movs	r2, #1
 8002dcc:	490c      	ldr	r1, [pc, #48]	@ (8002e00 <HAL_UART_RxCpltCallback+0xc0>)
 8002dce:	f004 ffaf 	bl	8007d30 <HAL_UART_Transmit>
		rx_buffer[rx_index++] = rx_input[0];
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <HAL_UART_RxCpltCallback+0xcc>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	b2d1      	uxtb	r1, r2
 8002dda:	4a0c      	ldr	r2, [pc, #48]	@ (8002e0c <HAL_UART_RxCpltCallback+0xcc>)
 8002ddc:	7011      	strb	r1, [r2, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <HAL_UART_RxCpltCallback+0xc0>)
 8002de2:	7819      	ldrb	r1, [r3, #0]
 8002de4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_UART_RxCpltCallback+0xd0>)
 8002de6:	5499      	strb	r1, [r3, r2]
	}
	HAL_UART_Receive_IT(UART, rx_input, 1);
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <HAL_UART_RxCpltCallback+0xc8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4904      	ldr	r1, [pc, #16]	@ (8002e00 <HAL_UART_RxCpltCallback+0xc0>)
 8002df0:	4618      	mov	r0, r3
 8002df2:	f005 f828 	bl	8007e46 <HAL_UART_Receive_IT>
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000884 	.word	0x20000884
 8002e04:	0800def8 	.word	0x0800def8
 8002e08:	20000034 	.word	0x20000034
 8002e0c:	20000885 	.word	0x20000885
 8002e10:	20000780 	.word	0x20000780

08002e14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
	setSn_IR(sck, 0x1f);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_GPIO_EXTI_Callback+0x30>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	3301      	adds	r3, #1
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002e2c:	211f      	movs	r1, #31
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 fc6c 	bl	800470c <WIZCHIP_WRITE>
	ETH_RCV = 1;
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <HAL_GPIO_EXTI_Callback+0x34>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000e88 	.word	0x20000e88
 8002e48:	2000077c 	.word	0x2000077c

08002e4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002e52:	f002 f959 	bl	8005108 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002e56:	f000 f883 	bl	8002f60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002e5a:	f000 f9ed 	bl	8003238 <MX_GPIO_Init>
	MX_USART6_UART_Init();
 8002e5e:	f000 f9c1 	bl	80031e4 <MX_USART6_UART_Init>
	MX_TIM1_Init();
 8002e62:	f000 f91d 	bl	80030a0 <MX_TIM1_Init>
	MX_SPI1_Init();
 8002e66:	f000 f8e5 	bl	8003034 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	SERVO_Init();
 8002e6a:	f000 fa93 	bl	8003394 <SERVO_Init>
	int8_t rcv = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	71fb      	strb	r3, [r7, #7]
	if (ETH_Init() && ETH_SocketInit(&sck)) {
 8002e72:	f7ff fd47 	bl	8002904 <ETH_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <main+0x44>
 8002e7c:	4829      	ldr	r0, [pc, #164]	@ (8002f24 <main+0xd8>)
 8002e7e:	f7ff fe31 	bl	8002ae4 <ETH_SocketInit>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <main+0x44>
		ETH_Connect(&sck, "192.168.100.6:8080");
 8002e88:	4927      	ldr	r1, [pc, #156]	@ (8002f28 <main+0xdc>)
 8002e8a:	4826      	ldr	r0, [pc, #152]	@ (8002f24 <main+0xd8>)
 8002e8c:	f7ff fe5e 	bl	8002b4c <ETH_Connect>
	//		} else {
	//			UART_Message("no data was recieved");
	//		}

	// ----------------------------------------
	UART_Message("Starting the program ...\r\n");
 8002e90:	4826      	ldr	r0, [pc, #152]	@ (8002f2c <main+0xe0>)
 8002e92:	f7ff ff25 	bl	8002ce0 <UART_Message>
	HAL_UART_Receive_IT(&huart6, rx_input, 1);
 8002e96:	2201      	movs	r2, #1
 8002e98:	4925      	ldr	r1, [pc, #148]	@ (8002f30 <main+0xe4>)
 8002e9a:	4826      	ldr	r0, [pc, #152]	@ (8002f34 <main+0xe8>)
 8002e9c:	f004 ffd3 	bl	8007e46 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (ETH_RCV) {
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <main+0xec>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d038      	beq.n	8002f1a <main+0xce>
			ETH_RCV = 0;
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <main+0xec>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
			if (!ETH_Listen(&sck, ethbuf)) {
 8002eae:	4923      	ldr	r1, [pc, #140]	@ (8002f3c <main+0xf0>)
 8002eb0:	481c      	ldr	r0, [pc, #112]	@ (8002f24 <main+0xd8>)
 8002eb2:	f7ff fec9 	bl	8002c48 <ETH_Listen>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <main+0x78>
				UART_Message("ETH Recieve error\r\n");
 8002ebc:	4820      	ldr	r0, [pc, #128]	@ (8002f40 <main+0xf4>)
 8002ebe:	f7ff ff0f 	bl	8002ce0 <UART_Message>
 8002ec2:	e02a      	b.n	8002f1a <main+0xce>
			} else if (strcmp(ethbuf, ETH_EV_AUTH) == 0) {
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f44 <main+0xf8>)
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481c      	ldr	r0, [pc, #112]	@ (8002f3c <main+0xf0>)
 8002eca:	f7fd f981 	bl	80001d0 <strcmp>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <main+0xa0>
				UART_Message("Auth request recieved\r\n");
 8002ed4:	481c      	ldr	r0, [pc, #112]	@ (8002f48 <main+0xfc>)
 8002ed6:	f7ff ff03 	bl	8002ce0 <UART_Message>
				sprintf(ethbuf,
 8002eda:	491c      	ldr	r1, [pc, #112]	@ (8002f4c <main+0x100>)
 8002edc:	4817      	ldr	r0, [pc, #92]	@ (8002f3c <main+0xf0>)
 8002ede:	f006 fef7 	bl	8009cd0 <siprintf>
						"{\"id\":\"STM32-01B5\",\"name\":\"Vjetroelektrana Zivinice\",\"auth\":\"123123\"}");
				ETH_Send(&sck, ethbuf);
 8002ee2:	4916      	ldr	r1, [pc, #88]	@ (8002f3c <main+0xf0>)
 8002ee4:	480f      	ldr	r0, [pc, #60]	@ (8002f24 <main+0xd8>)
 8002ee6:	f7ff fee5 	bl	8002cb4 <ETH_Send>
 8002eea:	e016      	b.n	8002f1a <main+0xce>
			} else if (strcmp(ethbuf, ETH_EV_PING) == 0) {
 8002eec:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <main+0x104>)
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4812      	ldr	r0, [pc, #72]	@ (8002f3c <main+0xf0>)
 8002ef2:	f7fd f96d 	bl	80001d0 <strcmp>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <main+0xc8>
				UART_Message("Pinged!\r\n");
 8002efc:	4815      	ldr	r0, [pc, #84]	@ (8002f54 <main+0x108>)
 8002efe:	f7ff feef 	bl	8002ce0 <UART_Message>
				sprintf(ethbuf, "Pong");
 8002f02:	4915      	ldr	r1, [pc, #84]	@ (8002f58 <main+0x10c>)
 8002f04:	480d      	ldr	r0, [pc, #52]	@ (8002f3c <main+0xf0>)
 8002f06:	f006 fee3 	bl	8009cd0 <siprintf>
				ETH_Send(&sck, ethbuf);
 8002f0a:	490c      	ldr	r1, [pc, #48]	@ (8002f3c <main+0xf0>)
 8002f0c:	4805      	ldr	r0, [pc, #20]	@ (8002f24 <main+0xd8>)
 8002f0e:	f7ff fed1 	bl	8002cb4 <ETH_Send>
 8002f12:	e002      	b.n	8002f1a <main+0xce>
			} else {
				UART_Message("Unknown event recieved\r\n");
 8002f14:	4811      	ldr	r0, [pc, #68]	@ (8002f5c <main+0x110>)
 8002f16:	f7ff fee3 	bl	8002ce0 <UART_Message>
			}
		}
		HAL_Delay(300);
 8002f1a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f1e:	f002 f965 	bl	80051ec <HAL_Delay>
		if (ETH_RCV) {
 8002f22:	e7bd      	b.n	8002ea0 <main+0x54>
 8002f24:	20000e88 	.word	0x20000e88
 8002f28:	0800defc 	.word	0x0800defc
 8002f2c:	0800df10 	.word	0x0800df10
 8002f30:	20000884 	.word	0x20000884
 8002f34:	20000734 	.word	0x20000734
 8002f38:	2000077c 	.word	0x2000077c
 8002f3c:	20000c88 	.word	0x20000c88
 8002f40:	0800df2c 	.word	0x0800df2c
 8002f44:	0800dee8 	.word	0x0800dee8
 8002f48:	0800df40 	.word	0x0800df40
 8002f4c:	0800df58 	.word	0x0800df58
 8002f50:	0800def0 	.word	0x0800def0
 8002f54:	0800dfa0 	.word	0x0800dfa0
 8002f58:	0800dfac 	.word	0x0800dfac
 8002f5c:	0800dfb4 	.word	0x0800dfb4

08002f60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b094      	sub	sp, #80	@ 0x50
 8002f64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f66:	f107 0320 	add.w	r3, r7, #32
 8002f6a:	2230      	movs	r2, #48	@ 0x30
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f006 ff3d 	bl	8009dee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	4b28      	ldr	r3, [pc, #160]	@ (800302c <SystemClock_Config+0xcc>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	4a27      	ldr	r2, [pc, #156]	@ (800302c <SystemClock_Config+0xcc>)
 8002f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f94:	4b25      	ldr	r3, [pc, #148]	@ (800302c <SystemClock_Config+0xcc>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <SystemClock_Config+0xd0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a21      	ldr	r2, [pc, #132]	@ (8003030 <SystemClock_Config+0xd0>)
 8002faa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003030 <SystemClock_Config+0xd0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002fd4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002fd8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002fde:	2307      	movs	r3, #7
 8002fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002fe2:	f107 0320 	add.w	r3, r7, #32
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 fc96 	bl	8005918 <HAL_RCC_OscConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <SystemClock_Config+0x96>
		Error_Handler();
 8002ff2:	f000 f9c9 	bl	8003388 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003002:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003006:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800300c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800300e:	f107 030c 	add.w	r3, r7, #12
 8003012:	2105      	movs	r1, #5
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fef7 	bl	8005e08 <HAL_RCC_ClockConfig>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <SystemClock_Config+0xc4>
		Error_Handler();
 8003020:	f000 f9b2 	bl	8003388 <Error_Handler>
	}
}
 8003024:	bf00      	nop
 8003026:	3750      	adds	r7, #80	@ 0x50
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000

08003034 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003038:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <MX_SPI1_Init+0x64>)
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <MX_SPI1_Init+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800303e:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003040:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003044:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003046:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800304c:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <MX_SPI1_Init+0x64>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003058:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <MX_SPI1_Init+0x64>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800305e:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003064:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003068:	2200      	movs	r2, #0
 800306a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <MX_SPI1_Init+0x64>)
 800306e:	2200      	movs	r2, #0
 8003070:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003074:	2200      	movs	r2, #0
 8003076:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003078:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <MX_SPI1_Init+0x64>)
 800307a:	2200      	movs	r2, #0
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003080:	220a      	movs	r2, #10
 8003082:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003084:	4804      	ldr	r0, [pc, #16]	@ (8003098 <MX_SPI1_Init+0x64>)
 8003086:	f003 f8df 	bl	8006248 <HAL_SPI_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_SPI1_Init+0x60>
		Error_Handler();
 8003090:	f000 f97a 	bl	8003388 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000694 	.word	0x20000694
 800309c:	40013000 	.word	0x40013000

080030a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b096      	sub	sp, #88	@ 0x58
 80030a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80030a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80030be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	615a      	str	r2, [r3, #20]
 80030d0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2220      	movs	r2, #32
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f006 fe88 	bl	8009dee <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80030de:	4b3f      	ldr	r3, [pc, #252]	@ (80031dc <MX_TIM1_Init+0x13c>)
 80030e0:	4a3f      	ldr	r2, [pc, #252]	@ (80031e0 <MX_TIM1_Init+0x140>)
 80030e2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3360 + 1;
 80030e4:	4b3d      	ldr	r3, [pc, #244]	@ (80031dc <MX_TIM1_Init+0x13c>)
 80030e6:	f640 5221 	movw	r2, #3361	@ 0xd21
 80030ea:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ec:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <MX_TIM1_Init+0x13c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 + 1;
 80030f2:	4b3a      	ldr	r3, [pc, #232]	@ (80031dc <MX_TIM1_Init+0x13c>)
 80030f4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80030f8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fa:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <MX_TIM1_Init+0x13c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003100:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <MX_TIM1_Init+0x13c>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003106:	4b35      	ldr	r3, [pc, #212]	@ (80031dc <MX_TIM1_Init+0x13c>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800310c:	4833      	ldr	r0, [pc, #204]	@ (80031dc <MX_TIM1_Init+0x13c>)
 800310e:	f003 fe71 	bl	8006df4 <HAL_TIM_Base_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8003118:	f000 f936 	bl	8003388 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800311c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003120:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003122:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003126:	4619      	mov	r1, r3
 8003128:	482c      	ldr	r0, [pc, #176]	@ (80031dc <MX_TIM1_Init+0x13c>)
 800312a:	f004 f8ff 	bl	800732c <HAL_TIM_ConfigClockSource>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM1_Init+0x98>
		Error_Handler();
 8003134:	f000 f928 	bl	8003388 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003138:	4828      	ldr	r0, [pc, #160]	@ (80031dc <MX_TIM1_Init+0x13c>)
 800313a:	f003 ff13 	bl	8006f64 <HAL_TIM_PWM_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8003144:	f000 f920 	bl	8003388 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003148:	2300      	movs	r3, #0
 800314a:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003150:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003154:	4619      	mov	r1, r3
 8003156:	4821      	ldr	r0, [pc, #132]	@ (80031dc <MX_TIM1_Init+0x13c>)
 8003158:	f004 fccc 	bl	8007af4 <HAL_TIMEx_MasterConfigSynchronization>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8003162:	f000 f911 	bl	8003388 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003166:	2360      	movs	r3, #96	@ 0x60
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 50;
 800316a:	2332      	movs	r3, #50	@ 0x32
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800316e:	2300      	movs	r3, #0
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003172:	2300      	movs	r3, #0
 8003174:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003176:	2304      	movs	r3, #4
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003186:	2200      	movs	r2, #0
 8003188:	4619      	mov	r1, r3
 800318a:	4814      	ldr	r0, [pc, #80]	@ (80031dc <MX_TIM1_Init+0x13c>)
 800318c:	f004 f80c 	bl	80071a8 <HAL_TIM_PWM_ConfigChannel>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8003196:	f000 f8f7 	bl	8003388 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031b2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4807      	ldr	r0, [pc, #28]	@ (80031dc <MX_TIM1_Init+0x13c>)
 80031be:	f004 fd15 	bl	8007bec <HAL_TIMEx_ConfigBreakDeadTime>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 80031c8:	f000 f8de 	bl	8003388 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80031cc:	4803      	ldr	r0, [pc, #12]	@ (80031dc <MX_TIM1_Init+0x13c>)
 80031ce:	f001 f8af 	bl	8004330 <HAL_TIM_MspPostInit>

}
 80031d2:	bf00      	nop
 80031d4:	3758      	adds	r7, #88	@ 0x58
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200006ec 	.word	0x200006ec
 80031e0:	40010000 	.word	0x40010000

080031e4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 80031ea:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <MX_USART6_UART_Init+0x50>)
 80031ec:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80031ee:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 80031f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031f4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8003202:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 800320a:	220c      	movs	r2, #12
 800320c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320e:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800321a:	4805      	ldr	r0, [pc, #20]	@ (8003230 <MX_USART6_UART_Init+0x4c>)
 800321c:	f004 fd38 	bl	8007c90 <HAL_UART_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8003226:	f000 f8af 	bl	8003388 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000734 	.word	0x20000734
 8003234:	40011400 	.word	0x40011400

08003238 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	@ 0x30
 800323c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800323e:	f107 031c 	add.w	r3, r7, #28
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	4b49      	ldr	r3, [pc, #292]	@ (8003378 <MX_GPIO_Init+0x140>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	4a48      	ldr	r2, [pc, #288]	@ (8003378 <MX_GPIO_Init+0x140>)
 8003258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800325c:	6313      	str	r3, [r2, #48]	@ 0x30
 800325e:	4b46      	ldr	r3, [pc, #280]	@ (8003378 <MX_GPIO_Init+0x140>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	4b42      	ldr	r3, [pc, #264]	@ (8003378 <MX_GPIO_Init+0x140>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a41      	ldr	r2, [pc, #260]	@ (8003378 <MX_GPIO_Init+0x140>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b3f      	ldr	r3, [pc, #252]	@ (8003378 <MX_GPIO_Init+0x140>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <MX_GPIO_Init+0x140>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a3a      	ldr	r2, [pc, #232]	@ (8003378 <MX_GPIO_Init+0x140>)
 8003290:	f043 0302 	orr.w	r3, r3, #2
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b38      	ldr	r3, [pc, #224]	@ (8003378 <MX_GPIO_Init+0x140>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a33      	ldr	r2, [pc, #204]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032ac:	f043 0310 	orr.w	r3, r3, #16
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b31      	ldr	r3, [pc, #196]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a25      	ldr	r2, [pc, #148]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <MX_GPIO_Init+0x140>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2110      	movs	r1, #16
 80032fa:	4820      	ldr	r0, [pc, #128]	@ (800337c <MX_GPIO_Init+0x144>)
 80032fc:	f002 fada 	bl	80058b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003306:	481e      	ldr	r0, [pc, #120]	@ (8003380 <MX_GPIO_Init+0x148>)
 8003308:	f002 fad4 	bl	80058b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : ETH_CS_Pin */
	GPIO_InitStruct.Pin = ETH_CS_Pin;
 800330c:	2310      	movs	r3, #16
 800330e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003310:	2301      	movs	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	4816      	ldr	r0, [pc, #88]	@ (800337c <MX_GPIO_Init+0x144>)
 8003324:	f002 f92a 	bl	800557c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003328:	2301      	movs	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800332c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003330:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003332:	2301      	movs	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	f107 031c 	add.w	r3, r7, #28
 800333a:	4619      	mov	r1, r3
 800333c:	4811      	ldr	r0, [pc, #68]	@ (8003384 <MX_GPIO_Init+0x14c>)
 800333e:	f002 f91d 	bl	800557c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003346:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003348:	2301      	movs	r3, #1
 800334a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4619      	mov	r1, r3
 800335a:	4809      	ldr	r0, [pc, #36]	@ (8003380 <MX_GPIO_Init+0x148>)
 800335c:	f002 f90e 	bl	800557c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	2006      	movs	r0, #6
 8003366:	f002 f840 	bl	80053ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800336a:	2006      	movs	r0, #6
 800336c:	f002 f859 	bl	8005422 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003370:	bf00      	nop
 8003372:	3730      	adds	r7, #48	@ 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020c00 	.word	0x40020c00
 8003384:	40020400 	.word	0x40020400

08003388 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800338c:	b672      	cpsid	i
}
 800338e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <Error_Handler+0x8>

08003394 <SERVO_Init>:

void SERVO_Off() {
	HAL_TIM_PWM_Stop(PWM_Timer, TIM_CHANNEL_1);
}

void SERVO_Init(){
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(PWM_Timer);
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <SERVO_Init+0x20>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 fd79 	bl	8006e94 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(PWM_Timer, TIM_CHANNEL_1);
 80033a2:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <SERVO_Init+0x20>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fe35 	bl	8007018 <HAL_TIM_PWM_Start>
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000038 	.word	0x20000038

080033b8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4604      	mov	r4, r0
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4623      	mov	r3, r4
 80033c8:	71fb      	strb	r3, [r7, #7]
 80033ca:	4603      	mov	r3, r0
 80033cc:	71bb      	strb	r3, [r7, #6]
 80033ce:	460b      	mov	r3, r1
 80033d0:	80bb      	strh	r3, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d902      	bls.n	80033e2 <socket+0x2a>
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033e0:	e0f0      	b.n	80035c4 <socket+0x20c>
	switch(protocol)
 80033e2:	79bb      	ldrb	r3, [r7, #6]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d005      	beq.n	80033f4 <socket+0x3c>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	dd11      	ble.n	8003410 <socket+0x58>
 80033ec:	3b02      	subs	r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d80e      	bhi.n	8003410 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80033f2:	e011      	b.n	8003418 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	2204      	movs	r2, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003400:	f001 f9d2 	bl	80047a8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <socket+0x5e>
 800340a:	f06f 0302 	mvn.w	r3, #2
 800340e:	e0d9      	b.n	80035c4 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003410:	f06f 0304 	mvn.w	r3, #4
 8003414:	e0d6      	b.n	80035c4 <socket+0x20c>
	    break;
 8003416:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <socket+0x70>
 8003422:	f06f 0305 	mvn.w	r3, #5
 8003426:	e0cd      	b.n	80035c4 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d028      	beq.n	8003480 <socket+0xc8>
	{
   	switch(protocol)
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d002      	beq.n	800343a <socket+0x82>
 8003434:	2b02      	cmp	r3, #2
 8003436:	d008      	beq.n	800344a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003438:	e022      	b.n	8003480 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003440:	2b00      	cmp	r3, #0
 8003442:	d11a      	bne.n	800347a <socket+0xc2>
 8003444:	f06f 0305 	mvn.w	r3, #5
 8003448:	e0bc      	b.n	80035c4 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d006      	beq.n	8003462 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db02      	blt.n	8003462 <socket+0xaa>
 800345c:	f06f 0305 	mvn.w	r3, #5
 8003460:	e0b0      	b.n	80035c4 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db04      	blt.n	800347e <socket+0xc6>
 8003474:	f06f 0305 	mvn.w	r3, #5
 8003478:	e0a4      	b.n	80035c4 <socket+0x20c>
   	      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <socket+0xc8>
   	      break;
 800347e:	bf00      	nop
   	}
   }
	close(sn);
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f8ac 	bl	80035e0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3301      	adds	r3, #1
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4618      	mov	r0, r3
 8003492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003496:	f023 030f 	bic.w	r3, r3, #15
 800349a:	b25a      	sxtb	r2, r3
 800349c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4619      	mov	r1, r3
 80034a8:	f001 f930 	bl	800470c <WIZCHIP_WRITE>
    #endif
	if(!port)
 80034ac:	88bb      	ldrh	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d110      	bne.n	80034d4 <socket+0x11c>
	{
	   port = sock_any_port++;
 80034b2:	4b46      	ldr	r3, [pc, #280]	@ (80035cc <socket+0x214>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	b291      	uxth	r1, r2
 80034ba:	4a44      	ldr	r2, [pc, #272]	@ (80035cc <socket+0x214>)
 80034bc:	8011      	strh	r1, [r2, #0]
 80034be:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80034c0:	4b42      	ldr	r3, [pc, #264]	@ (80035cc <socket+0x214>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d103      	bne.n	80034d4 <socket+0x11c>
 80034cc:	4b3f      	ldr	r3, [pc, #252]	@ (80035cc <socket+0x214>)
 80034ce:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80034d2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	3301      	adds	r3, #1
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034e0:	461a      	mov	r2, r3
 80034e2:	88bb      	ldrh	r3, [r7, #4]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f001 f90d 	bl	800470c <WIZCHIP_WRITE>
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	3301      	adds	r3, #1
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fe:	461a      	mov	r2, r3
 8003500:	88bb      	ldrh	r3, [r7, #4]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f001 f900 	bl	800470c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	3301      	adds	r3, #1
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f8f6 	bl	800470c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003520:	bf00      	nop
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	3301      	adds	r3, #1
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800352e:	4618      	mov	r0, r3
 8003530:	f001 f8a0 	bl	8004674 <WIZCHIP_READ>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f3      	bne.n	8003522 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2201      	movs	r2, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	b21b      	sxth	r3, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	b21a      	sxth	r2, r3
 8003548:	4b21      	ldr	r3, [pc, #132]	@ (80035d0 <socket+0x218>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b21b      	sxth	r3, r3
 800354e:	4013      	ands	r3, r2
 8003550:	b21b      	sxth	r3, r3
 8003552:	b29a      	uxth	r2, r3
 8003554:	4b1e      	ldr	r3, [pc, #120]	@ (80035d0 <socket+0x218>)
 8003556:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 0201 	and.w	r2, r3, #1
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	b21a      	sxth	r2, r3
 8003566:	4b1a      	ldr	r3, [pc, #104]	@ (80035d0 <socket+0x218>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b21b      	sxth	r3, r3
 800356c:	4313      	orrs	r3, r2
 800356e:	b21b      	sxth	r3, r3
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b17      	ldr	r3, [pc, #92]	@ (80035d0 <socket+0x218>)
 8003574:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2201      	movs	r2, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	b21b      	sxth	r3, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	b21a      	sxth	r2, r3
 8003584:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <socket+0x21c>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b21b      	sxth	r3, r3
 800358a:	4013      	ands	r3, r2
 800358c:	b21b      	sxth	r3, r3
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <socket+0x21c>)
 8003592:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	4a10      	ldr	r2, [pc, #64]	@ (80035d8 <socket+0x220>)
 8003598:	2100      	movs	r1, #0
 800359a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <socket+0x224>)
 80035a2:	2100      	movs	r1, #0
 80035a4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80035a6:	bf00      	nop
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3301      	adds	r3, #1
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f85d 	bl	8004674 <WIZCHIP_READ>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f3      	beq.n	80035a8 <socket+0x1f0>
   return (int8_t)sn;
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}
 80035cc:	2000003c 	.word	0x2000003c
 80035d0:	20000e8a 	.word	0x20000e8a
 80035d4:	20000e8c 	.word	0x20000e8c
 80035d8:	20000e90 	.word	0x20000e90
 80035dc:	20000ea0 	.word	0x20000ea0

080035e0 <close>:

int8_t close(uint8_t sn)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d902      	bls.n	80035f6 <close+0x16>
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035f4:	e055      	b.n	80036a2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	3301      	adds	r3, #1
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003602:	2110      	movs	r1, #16
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f881 	bl	800470c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800360a:	bf00      	nop
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	3301      	adds	r3, #1
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003618:	4618      	mov	r0, r3
 800361a:	f001 f82b 	bl	8004674 <WIZCHIP_READ>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f3      	bne.n	800360c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3301      	adds	r3, #1
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003630:	211f      	movs	r1, #31
 8003632:	4618      	mov	r0, r3
 8003634:	f001 f86a 	bl	800470c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	2201      	movs	r2, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	b21b      	sxth	r3, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	b21a      	sxth	r2, r3
 8003646:	4b19      	ldr	r3, [pc, #100]	@ (80036ac <close+0xcc>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b21b      	sxth	r3, r3
 800364c:	4013      	ands	r3, r2
 800364e:	b21b      	sxth	r3, r3
 8003650:	b29a      	uxth	r2, r3
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <close+0xcc>)
 8003654:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2201      	movs	r2, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	b21b      	sxth	r3, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	b21a      	sxth	r2, r3
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <close+0xd0>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b21b      	sxth	r3, r3
 800366a:	4013      	ands	r3, r2
 800366c:	b21b      	sxth	r3, r3
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <close+0xd0>)
 8003672:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	4a0f      	ldr	r2, [pc, #60]	@ (80036b4 <close+0xd4>)
 8003678:	2100      	movs	r1, #0
 800367a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <close+0xd8>)
 8003682:	2100      	movs	r1, #0
 8003684:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003686:	bf00      	nop
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3301      	adds	r3, #1
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003694:	4618      	mov	r0, r3
 8003696:	f000 ffed 	bl	8004674 <WIZCHIP_READ>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f3      	bne.n	8003688 <close+0xa8>
	return SOCK_OK;
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000e8a 	.word	0x20000e8a
 80036b0:	20000e8c 	.word	0x20000e8c
 80036b4:	20000e90 	.word	0x20000e90
 80036b8:	20000ea0 	.word	0x20000ea0

080036bc <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	6039      	str	r1, [r7, #0]
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	4613      	mov	r3, r2
 80036ca:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d902      	bls.n	80036d8 <connect+0x1c>
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036d6:	e0c6      	b.n	8003866 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	3301      	adds	r3, #1
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ffc7 	bl	8004674 <WIZCHIP_READ>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d002      	beq.n	80036f6 <connect+0x3a>
 80036f0:	f06f 0304 	mvn.w	r3, #4
 80036f4:	e0b7      	b.n	8003866 <connect+0x1aa>
   CHECK_SOCKINIT();
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	3301      	adds	r3, #1
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003702:	4618      	mov	r0, r3
 8003704:	f000 ffb6 	bl	8004674 <WIZCHIP_READ>
 8003708:	4603      	mov	r3, r0
 800370a:	2b13      	cmp	r3, #19
 800370c:	d002      	beq.n	8003714 <connect+0x58>
 800370e:	f06f 0302 	mvn.w	r3, #2
 8003712:	e0a8      	b.n	8003866 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	3201      	adds	r2, #1
 8003722:	7812      	ldrb	r2, [r2, #0]
 8003724:	4413      	add	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	3202      	adds	r2, #2
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	3203      	adds	r2, #3
 800373e:	7812      	ldrb	r2, [r2, #0]
 8003740:	4413      	add	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800374a:	d002      	beq.n	8003752 <connect+0x96>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <connect+0x9c>
 8003752:	f06f 030b 	mvn.w	r3, #11
 8003756:	e086      	b.n	8003866 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8003758:	88bb      	ldrh	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <connect+0xa8>
 800375e:	f06f 030a 	mvn.w	r3, #10
 8003762:	e080      	b.n	8003866 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	3301      	adds	r3, #1
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8003770:	2204      	movs	r2, #4
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f001 f877 	bl	8004868 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3301      	adds	r3, #1
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003786:	461a      	mov	r2, r3
 8003788:	88bb      	ldrh	r3, [r7, #4]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b29b      	uxth	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 ffba 	bl	800470c <WIZCHIP_WRITE>
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	3301      	adds	r3, #1
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80037a4:	461a      	mov	r2, r3
 80037a6:	88bb      	ldrh	r3, [r7, #4]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	4610      	mov	r0, r2
 80037ae:	f000 ffad 	bl	800470c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3301      	adds	r3, #1
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80037be:	2104      	movs	r1, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 ffa3 	bl	800470c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80037c6:	bf00      	nop
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	3301      	adds	r3, #1
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 ff4d 	bl	8004674 <WIZCHIP_READ>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f3      	bne.n	80037c8 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80037e0:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <connect+0x1b4>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	fa42 f303 	asr.w	r3, r2, r3
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02b      	beq.n	800384c <connect+0x190>
 80037f4:	2300      	movs	r3, #0
 80037f6:	e036      	b.n	8003866 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3301      	adds	r3, #1
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003804:	4618      	mov	r0, r3
 8003806:	f000 ff35 	bl	8004674 <WIZCHIP_READ>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00c      	beq.n	800382e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3301      	adds	r3, #1
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003820:	2108      	movs	r1, #8
 8003822:	4618      	mov	r0, r3
 8003824:	f000 ff72 	bl	800470c <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8003828:	f06f 030c 	mvn.w	r3, #12
 800382c:	e01b      	b.n	8003866 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3301      	adds	r3, #1
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800383a:	4618      	mov	r0, r3
 800383c:	f000 ff1a 	bl	8004674 <WIZCHIP_READ>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8003846:	f06f 0303 	mvn.w	r3, #3
 800384a:	e00c      	b.n	8003866 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	3301      	adds	r3, #1
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003858:	4618      	mov	r0, r3
 800385a:	f000 ff0b 	bl	8004674 <WIZCHIP_READ>
 800385e:	4603      	mov	r3, r0
 8003860:	2b17      	cmp	r3, #23
 8003862:	d1c9      	bne.n	80037f8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8003864:	2301      	movs	r3, #1
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000e8a 	.word	0x20000e8a

08003874 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
 8003880:	4613      	mov	r3, r2
 8003882:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003888:	2300      	movs	r3, #0
 800388a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d902      	bls.n	8003898 <send+0x24>
 8003892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003896:	e0dd      	b.n	8003a54 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	3301      	adds	r3, #1
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fee7 	bl	8004674 <WIZCHIP_READ>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d002      	beq.n	80038b6 <send+0x42>
 80038b0:	f06f 0304 	mvn.w	r3, #4
 80038b4:	e0ce      	b.n	8003a54 <send+0x1e0>
   CHECK_SOCKDATA();
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <send+0x4e>
 80038bc:	f06f 030d 	mvn.w	r3, #13
 80038c0:	e0c8      	b.n	8003a54 <send+0x1e0>
   tmp = getSn_SR(sn);
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3301      	adds	r3, #1
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fed0 	bl	8004674 <WIZCHIP_READ>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b17      	cmp	r3, #23
 80038dc:	d005      	beq.n	80038ea <send+0x76>
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b1c      	cmp	r3, #28
 80038e2:	d002      	beq.n	80038ea <send+0x76>
 80038e4:	f06f 0306 	mvn.w	r3, #6
 80038e8:	e0b4      	b.n	8003a54 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 80038ea:	4b5c      	ldr	r3, [pc, #368]	@ (8003a5c <send+0x1e8>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	fa42 f303 	asr.w	r3, r2, r3
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d039      	beq.n	8003972 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3301      	adds	r3, #1
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800390a:	4618      	mov	r0, r3
 800390c:	f000 feb2 	bl	8004674 <WIZCHIP_READ>
 8003910:	4603      	mov	r3, r0
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d019      	beq.n	8003956 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	3301      	adds	r3, #1
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800392e:	2110      	movs	r1, #16
 8003930:	4618      	mov	r0, r3
 8003932:	f000 feeb 	bl	800470c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	2201      	movs	r2, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	b21b      	sxth	r3, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	b21a      	sxth	r2, r3
 8003944:	4b45      	ldr	r3, [pc, #276]	@ (8003a5c <send+0x1e8>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b21b      	sxth	r3, r3
 800394a:	4013      	ands	r3, r2
 800394c:	b21b      	sxth	r3, r3
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b42      	ldr	r3, [pc, #264]	@ (8003a5c <send+0x1e8>)
 8003952:	801a      	strh	r2, [r3, #0]
 8003954:	e00d      	b.n	8003972 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <send+0xfa>
      {
         close(sn);
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fe3c 	bl	80035e0 <close>
         return SOCKERR_TIMEOUT;
 8003968:	f06f 030c 	mvn.w	r3, #12
 800396c:	e072      	b.n	8003a54 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800396e:	2300      	movs	r3, #0
 8003970:	e070      	b.n	8003a54 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3301      	adds	r3, #1
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fe78 	bl	8004674 <WIZCHIP_READ>
 8003984:	4603      	mov	r3, r0
 8003986:	029b      	lsls	r3, r3, #10
 8003988:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800398a:	88ba      	ldrh	r2, [r7, #4]
 800398c:	89bb      	ldrh	r3, [r7, #12]
 800398e:	429a      	cmp	r2, r3
 8003990:	d901      	bls.n	8003996 <send+0x122>
 8003992:	89bb      	ldrh	r3, [r7, #12]
 8003994:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 ffc5 	bl	8004928 <getSn_TX_FSR>
 800399e:	4603      	mov	r3, r0
 80039a0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	3301      	adds	r3, #1
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fe60 	bl	8004674 <WIZCHIP_READ>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b17      	cmp	r3, #23
 80039bc:	d009      	beq.n	80039d2 <send+0x15e>
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b1c      	cmp	r3, #28
 80039c2:	d006      	beq.n	80039d2 <send+0x15e>
      {
         close(sn);
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fe0a 	bl	80035e0 <close>
         return SOCKERR_SOCKSTATUS;
 80039cc:	f06f 0306 	mvn.w	r3, #6
 80039d0:	e040      	b.n	8003a54 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80039d2:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <send+0x1ec>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	fa42 f303 	asr.w	r3, r2, r3
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <send+0x17e>
 80039e6:	88ba      	ldrh	r2, [r7, #4]
 80039e8:	89bb      	ldrh	r3, [r7, #12]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d901      	bls.n	80039f2 <send+0x17e>
 80039ee:	2300      	movs	r3, #0
 80039f0:	e030      	b.n	8003a54 <send+0x1e0>
      if(len <= freesize) break;
 80039f2:	88ba      	ldrh	r2, [r7, #4]
 80039f4:	89bb      	ldrh	r3, [r7, #12]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d900      	bls.n	80039fc <send+0x188>
      freesize = getSn_TX_FSR(sn);
 80039fa:	e7cc      	b.n	8003996 <send+0x122>
      if(len <= freesize) break;
 80039fc:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80039fe:	88ba      	ldrh	r2, [r7, #4]
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	6839      	ldr	r1, [r7, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 f821 	bl	8004a4c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3301      	adds	r3, #1
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a16:	2120      	movs	r1, #32
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fe77 	bl	800470c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003a1e:	bf00      	nop
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	3301      	adds	r3, #1
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fe21 	bl	8004674 <WIZCHIP_READ>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f3      	bne.n	8003a20 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	b21a      	sxth	r2, r3
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <send+0x1e8>)
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <send+0x1e8>)
 8003a50:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003a52:	88bb      	ldrh	r3, [r7, #4]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000e8c 	.word	0x20000e8c
 8003a60:	20000e8a 	.word	0x20000e8a

08003a64 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d902      	bls.n	8003a88 <recv+0x24>
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a86:	e09b      	b.n	8003bc0 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fdef 	bl	8004674 <WIZCHIP_READ>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d002      	beq.n	8003aa6 <recv+0x42>
 8003aa0:	f06f 0304 	mvn.w	r3, #4
 8003aa4:	e08c      	b.n	8003bc0 <recv+0x15c>
   CHECK_SOCKDATA();
 8003aa6:	88bb      	ldrh	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <recv+0x4e>
 8003aac:	f06f 030d 	mvn.w	r3, #13
 8003ab0:	e086      	b.n	8003bc0 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fdd8 	bl	8004674 <WIZCHIP_READ>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	029b      	lsls	r3, r3, #10
 8003ac8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003aca:	89ba      	ldrh	r2, [r7, #12]
 8003acc:	88bb      	ldrh	r3, [r7, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d201      	bcs.n	8003ad6 <recv+0x72>
 8003ad2:	89bb      	ldrh	r3, [r7, #12]
 8003ad4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 ff6e 	bl	80049ba <getSn_RX_RSR>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fdc0 	bl	8004674 <WIZCHIP_READ>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b17      	cmp	r3, #23
 8003afc:	d026      	beq.n	8003b4c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b1c      	cmp	r3, #28
 8003b02:	d11c      	bne.n	8003b3e <recv+0xda>
            {
               if(recvsize != 0) break;
 8003b04:	89bb      	ldrh	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d133      	bne.n	8003b72 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 ff0b 	bl	8004928 <getSn_TX_FSR>
 8003b12:	4603      	mov	r3, r0
 8003b14:	461c      	mov	r4, r3
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fda6 	bl	8004674 <WIZCHIP_READ>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	029b      	lsls	r3, r3, #10
 8003b2c:	429c      	cmp	r4, r3
 8003b2e:	d10d      	bne.n	8003b4c <recv+0xe8>
               {
                  close(sn);
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fd54 	bl	80035e0 <close>
                  return SOCKERR_SOCKSTATUS;
 8003b38:	f06f 0306 	mvn.w	r3, #6
 8003b3c:	e040      	b.n	8003bc0 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fd4d 	bl	80035e0 <close>
               return SOCKERR_SOCKSTATUS;
 8003b46:	f06f 0306 	mvn.w	r3, #6
 8003b4a:	e039      	b.n	8003bc0 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <recv+0x164>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	fa42 f303 	asr.w	r3, r2, r3
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <recv+0x106>
 8003b60:	89bb      	ldrh	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <recv+0x106>
 8003b66:	2300      	movs	r3, #0
 8003b68:	e02a      	b.n	8003bc0 <recv+0x15c>
         if(recvsize != 0) break;
 8003b6a:	89bb      	ldrh	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8003b70:	e7b1      	b.n	8003ad6 <recv+0x72>
               if(recvsize != 0) break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <recv+0x114>
         if(recvsize != 0) break;
 8003b76:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003b78:	89ba      	ldrh	r2, [r7, #12]
 8003b7a:	88bb      	ldrh	r3, [r7, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d201      	bcs.n	8003b84 <recv+0x120>
 8003b80:	89bb      	ldrh	r3, [r7, #12]
 8003b82:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003b84:	88ba      	ldrh	r2, [r7, #4]
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 ffb8 	bl	8004b00 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	3301      	adds	r3, #1
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b9c:	2140      	movs	r1, #64	@ 0x40
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fdb4 	bl	800470c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003ba4:	bf00      	nop
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3301      	adds	r3, #1
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fd5e 	bl	8004674 <WIZCHIP_READ>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f3      	bne.n	8003ba6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003bbe:	88bb      	ldrh	r3, [r7, #4]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd90      	pop	{r4, r7, pc}
 8003bc8:	20000e8a 	.word	0x20000e8a

08003bcc <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	73fb      	strb	r3, [r7, #15]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d902      	bls.n	8003bf2 <sendto+0x26>
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bf0:	e11a      	b.n	8003e28 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fd3a 	bl	8004674 <WIZCHIP_READ>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3b02      	subs	r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d902      	bls.n	8003c12 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003c0c:	f06f 0304 	mvn.w	r3, #4
 8003c10:	e10a      	b.n	8003e28 <sendto+0x25c>
         break;
 8003c12:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003c14:	89bb      	ldrh	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <sendto+0x54>
 8003c1a:	f06f 030d 	mvn.w	r3, #13
 8003c1e:	e103      	b.n	8003e28 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	3201      	adds	r2, #1
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	3202      	adds	r2, #2
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	3203      	adds	r2, #3
 8003c4a:	7812      	ldrb	r2, [r2, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10e      	bne.n	8003c74 <sendto+0xa8>
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fd08 	bl	8004674 <WIZCHIP_READ>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d002      	beq.n	8003c74 <sendto+0xa8>
 8003c6e:	f06f 030b 	mvn.w	r3, #11
 8003c72:	e0d9      	b.n	8003e28 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003c74:	8c3b      	ldrh	r3, [r7, #32]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10e      	bne.n	8003c98 <sendto+0xcc>
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	3301      	adds	r3, #1
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fcf6 	bl	8004674 <WIZCHIP_READ>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d002      	beq.n	8003c98 <sendto+0xcc>
 8003c92:	f06f 030a 	mvn.w	r3, #10
 8003c96:	e0c7      	b.n	8003e28 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fce5 	bl	8004674 <WIZCHIP_READ>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b42      	cmp	r3, #66	@ 0x42
 8003cb2:	d008      	beq.n	8003cc6 <sendto+0xfa>
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b22      	cmp	r3, #34	@ 0x22
 8003cb8:	d005      	beq.n	8003cc6 <sendto+0xfa>
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	2b32      	cmp	r3, #50	@ 0x32
 8003cbe:	d002      	beq.n	8003cc6 <sendto+0xfa>
 8003cc0:	f06f 0306 	mvn.w	r3, #6
 8003cc4:	e0b0      	b.n	8003e28 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	3301      	adds	r3, #1
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fdc6 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce8:	461a      	mov	r2, r3
 8003cea:	8c3b      	ldrh	r3, [r7, #32]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f000 fd09 	bl	800470c <WIZCHIP_WRITE>
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3301      	adds	r3, #1
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8003d06:	461a      	mov	r2, r3
 8003d08:	8c3b      	ldrh	r3, [r7, #32]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f000 fcfc 	bl	800470c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	3301      	adds	r3, #1
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fca7 	bl	8004674 <WIZCHIP_READ>
 8003d26:	4603      	mov	r3, r0
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003d2c:	89ba      	ldrh	r2, [r7, #12]
 8003d2e:	8abb      	ldrh	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d901      	bls.n	8003d38 <sendto+0x16c>
 8003d34:	8abb      	ldrh	r3, [r7, #20]
 8003d36:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fdf4 	bl	8004928 <getSn_TX_FSR>
 8003d40:	4603      	mov	r3, r0
 8003d42:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	3301      	adds	r3, #1
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fc8f 	bl	8004674 <WIZCHIP_READ>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <sendto+0x196>
 8003d5c:	f06f 0303 	mvn.w	r3, #3
 8003d60:	e062      	b.n	8003e28 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003d62:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <sendto+0x264>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	fa42 f303 	asr.w	r3, r2, r3
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <sendto+0x1b6>
 8003d76:	89ba      	ldrh	r2, [r7, #12]
 8003d78:	8abb      	ldrh	r3, [r7, #20]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d901      	bls.n	8003d82 <sendto+0x1b6>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e052      	b.n	8003e28 <sendto+0x25c>
      if(len <= freesize) break;
 8003d82:	89ba      	ldrh	r2, [r7, #12]
 8003d84:	8abb      	ldrh	r3, [r7, #20]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d900      	bls.n	8003d8c <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8003d8a:	e7d5      	b.n	8003d38 <sendto+0x16c>
      if(len <= freesize) break;
 8003d8c:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8003d8e:	89ba      	ldrh	r2, [r7, #12]
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fe59 	bl	8004a4c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	3301      	adds	r3, #1
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003da6:	2120      	movs	r1, #32
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fcaf 	bl	800470c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003dae:	bf00      	nop
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3301      	adds	r3, #1
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fc59 	bl	8004674 <WIZCHIP_READ>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f3      	bne.n	8003db0 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	3301      	adds	r3, #1
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fc4d 	bl	8004674 <WIZCHIP_READ>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	3301      	adds	r3, #1
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003df8:	2110      	movs	r1, #16
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fc86 	bl	800470c <WIZCHIP_WRITE>
         break;
 8003e00:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003e02:	89bb      	ldrh	r3, [r7, #12]
 8003e04:	e010      	b.n	8003e28 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0db      	beq.n	8003dc8 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	3301      	adds	r3, #1
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fc74 	bl	800470c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003e24:	f06f 030c 	mvn.w	r3, #12
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000e8a 	.word	0x20000e8a

08003e34 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	4603      	mov	r3, r0
 8003e40:	73fb      	strb	r3, [r7, #15]
 8003e42:	4613      	mov	r3, r2
 8003e44:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d902      	bls.n	8003e56 <recvfrom+0x22>
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e54:	e1d2      	b.n	80041fc <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc08 	bl	8004674 <WIZCHIP_READ>
 8003e64:	4603      	mov	r3, r0
 8003e66:	777b      	strb	r3, [r7, #29]
 8003e68:	7f7b      	ldrb	r3, [r7, #29]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3b02      	subs	r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d902      	bls.n	8003e7a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003e74:	f06f 0304 	mvn.w	r3, #4
 8003e78:	e1c0      	b.n	80041fc <recvfrom+0x3c8>
         break;
 8003e7a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003e7c:	89bb      	ldrh	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <recvfrom+0x54>
 8003e82:	f06f 030d 	mvn.w	r3, #13
 8003e86:	e1b9      	b.n	80041fc <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	4a87      	ldr	r2, [pc, #540]	@ (80040a8 <recvfrom+0x274>)
 8003e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d128      	bne.n	8003ee6 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fd8f 	bl	80049ba <getSn_RX_RSR>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fbe1 	bl	8004674 <WIZCHIP_READ>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <recvfrom+0x8a>
 8003eb8:	f06f 0303 	mvn.w	r3, #3
 8003ebc:	e19e      	b.n	80041fc <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80040ac <recvfrom+0x278>)
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	fa42 f303 	asr.w	r3, r2, r3
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <recvfrom+0xa8>
 8003ed2:	8bfb      	ldrh	r3, [r7, #30]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <recvfrom+0xa8>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e18f      	b.n	80041fc <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8003edc:	8bfb      	ldrh	r3, [r7, #30]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d100      	bne.n	8003ee4 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003ee2:	e7d7      	b.n	8003e94 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003ee4:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003ee6:	7f7b      	ldrb	r3, [r7, #29]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d078      	beq.n	8003fe2 <recvfrom+0x1ae>
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	f300 8140 	bgt.w	8004176 <recvfrom+0x342>
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <recvfrom+0xce>
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f000 80da 	beq.w	80040b4 <recvfrom+0x280>
 8003f00:	e139      	b.n	8004176 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	4a68      	ldr	r2, [pc, #416]	@ (80040a8 <recvfrom+0x274>)
 8003f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d151      	bne.n	8003fb2 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8003f0e:	f107 0114 	add.w	r1, r7, #20
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	2208      	movs	r2, #8
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fdf2 	bl	8004b00 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	3301      	adds	r3, #1
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f28:	2140      	movs	r1, #64	@ 0x40
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fbee 	bl	800470c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003f30:	bf00      	nop
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	3301      	adds	r3, #1
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fb98 	bl	8004674 <WIZCHIP_READ>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f3      	bne.n	8003f32 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003f4a:	7d3a      	ldrb	r2, [r7, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3301      	adds	r3, #1
 8003f54:	7d7a      	ldrb	r2, [r7, #21]
 8003f56:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	7dba      	ldrb	r2, [r7, #22]
 8003f5e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3303      	adds	r3, #3
 8003f64:	7dfa      	ldrb	r2, [r7, #23]
 8003f66:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003f68:	7e3b      	ldrb	r3, [r7, #24]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	7e7a      	ldrb	r2, [r7, #25]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003f82:	7eba      	ldrb	r2, [r7, #26]
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4611      	mov	r1, r2
 8003f88:	4a47      	ldr	r2, [pc, #284]	@ (80040a8 <recvfrom+0x274>)
 8003f8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	4a45      	ldr	r2, [pc, #276]	@ (80040a8 <recvfrom+0x274>)
 8003f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	7efb      	ldrb	r3, [r7, #27]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	b291      	uxth	r1, r2
 8003fa4:	4a40      	ldr	r2, [pc, #256]	@ (80040a8 <recvfrom+0x274>)
 8003fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	4a40      	ldr	r2, [pc, #256]	@ (80040b0 <recvfrom+0x27c>)
 8003fae:	2180      	movs	r1, #128	@ 0x80
 8003fb0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80040a8 <recvfrom+0x274>)
 8003fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fba:	89ba      	ldrh	r2, [r7, #12]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d202      	bcs.n	8003fc6 <recvfrom+0x192>
 8003fc0:	89bb      	ldrh	r3, [r7, #12]
 8003fc2:	83fb      	strh	r3, [r7, #30]
 8003fc4:	e004      	b.n	8003fd0 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	4a37      	ldr	r2, [pc, #220]	@ (80040a8 <recvfrom+0x274>)
 8003fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fce:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003fd0:	8bfb      	ldrh	r3, [r7, #30]
 8003fd2:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003fd4:	8bfa      	ldrh	r2, [r7, #30]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fd90 	bl	8004b00 <wiz_recv_data>
			break;
 8003fe0:	e0d5      	b.n	800418e <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	4a30      	ldr	r2, [pc, #192]	@ (80040a8 <recvfrom+0x274>)
 8003fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d145      	bne.n	800407a <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8003fee:	f107 0114 	add.w	r1, r7, #20
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd82 	bl	8004b00 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	3301      	adds	r3, #1
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004008:	2140      	movs	r1, #64	@ 0x40
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb7e 	bl	800470c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004010:	bf00      	nop
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	3301      	adds	r3, #1
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fb28 	bl	8004674 <WIZCHIP_READ>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f3      	bne.n	8004012 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800402a:	7d3a      	ldrb	r2, [r7, #20]
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	4611      	mov	r1, r2
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <recvfrom+0x274>)
 8004032:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <recvfrom+0x274>)
 800403a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	7d7a      	ldrb	r2, [r7, #21]
 8004044:	4413      	add	r3, r2
 8004046:	b29a      	uxth	r2, r3
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	3a02      	subs	r2, #2
 800404c:	b291      	uxth	r1, r2
 800404e:	4a16      	ldr	r2, [pc, #88]	@ (80040a8 <recvfrom+0x274>)
 8004050:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	4a14      	ldr	r2, [pc, #80]	@ (80040a8 <recvfrom+0x274>)
 8004058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800405c:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8004060:	4293      	cmp	r3, r2
 8004062:	d906      	bls.n	8004072 <recvfrom+0x23e>
   			{
   			   close(sn);
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff faba 	bl	80035e0 <close>
   			   return SOCKFATAL_PACKLEN;
 800406c:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8004070:	e0c4      	b.n	80041fc <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	4a0e      	ldr	r2, [pc, #56]	@ (80040b0 <recvfrom+0x27c>)
 8004076:	2180      	movs	r1, #128	@ 0x80
 8004078:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	4a0a      	ldr	r2, [pc, #40]	@ (80040a8 <recvfrom+0x274>)
 800407e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004082:	89ba      	ldrh	r2, [r7, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d202      	bcs.n	800408e <recvfrom+0x25a>
 8004088:	89bb      	ldrh	r3, [r7, #12]
 800408a:	83fb      	strh	r3, [r7, #30]
 800408c:	e004      	b.n	8004098 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <recvfrom+0x274>)
 8004092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004096:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8004098:	8bfa      	ldrh	r2, [r7, #30]
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fd2e 	bl	8004b00 <wiz_recv_data>
		   break;
 80040a4:	e073      	b.n	800418e <recvfrom+0x35a>
 80040a6:	bf00      	nop
 80040a8:	20000e90 	.word	0x20000e90
 80040ac:	20000e8a 	.word	0x20000e8a
 80040b0:	20000ea0 	.word	0x20000ea0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	4a53      	ldr	r2, [pc, #332]	@ (8004204 <recvfrom+0x3d0>)
 80040b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d144      	bne.n	800414a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 80040c0:	f107 0114 	add.w	r1, r7, #20
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2206      	movs	r2, #6
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fd19 	bl	8004b00 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	3301      	adds	r3, #1
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040da:	2140      	movs	r1, #64	@ 0x40
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fb15 	bl	800470c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80040e2:	bf00      	nop
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3301      	adds	r3, #1
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fabf 	bl	8004674 <WIZCHIP_READ>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f3      	bne.n	80040e4 <recvfrom+0x2b0>
   			addr[0] = head[0];
 80040fc:	7d3a      	ldrb	r2, [r7, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3301      	adds	r3, #1
 8004106:	7d7a      	ldrb	r2, [r7, #21]
 8004108:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3302      	adds	r3, #2
 800410e:	7dba      	ldrb	r2, [r7, #22]
 8004110:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3303      	adds	r3, #3
 8004116:	7dfa      	ldrb	r2, [r7, #23]
 8004118:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800411a:	7e3a      	ldrb	r2, [r7, #24]
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	4611      	mov	r1, r2
 8004120:	4a38      	ldr	r2, [pc, #224]	@ (8004204 <recvfrom+0x3d0>)
 8004122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	4a36      	ldr	r2, [pc, #216]	@ (8004204 <recvfrom+0x3d0>)
 800412a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	b29a      	uxth	r2, r3
 8004132:	7e7b      	ldrb	r3, [r7, #25]
 8004134:	4619      	mov	r1, r3
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	440a      	add	r2, r1
 800413a:	b291      	uxth	r1, r2
 800413c:	4a31      	ldr	r2, [pc, #196]	@ (8004204 <recvfrom+0x3d0>)
 800413e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	4a30      	ldr	r2, [pc, #192]	@ (8004208 <recvfrom+0x3d4>)
 8004146:	2180      	movs	r1, #128	@ 0x80
 8004148:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	4a2d      	ldr	r2, [pc, #180]	@ (8004204 <recvfrom+0x3d0>)
 800414e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004152:	89ba      	ldrh	r2, [r7, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d202      	bcs.n	800415e <recvfrom+0x32a>
 8004158:	89bb      	ldrh	r3, [r7, #12]
 800415a:	83fb      	strh	r3, [r7, #30]
 800415c:	e004      	b.n	8004168 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	4a28      	ldr	r2, [pc, #160]	@ (8004204 <recvfrom+0x3d0>)
 8004162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004166:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004168:	8bfa      	ldrh	r2, [r7, #30]
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fcc6 	bl	8004b00 <wiz_recv_data>
			break;
 8004174:	e00b      	b.n	800418e <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004176:	8bfa      	ldrh	r2, [r7, #30]
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fd19 	bl	8004bb4 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	491f      	ldr	r1, [pc, #124]	@ (8004204 <recvfrom+0x3d0>)
 8004186:	8bfa      	ldrh	r2, [r7, #30]
 8004188:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800418c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	3301      	adds	r3, #1
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800419a:	2140      	movs	r1, #64	@ 0x40
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fab5 	bl	800470c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80041a2:	bf00      	nop
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3301      	adds	r3, #1
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fa5f 	bl	8004674 <WIZCHIP_READ>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f3      	bne.n	80041a4 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <recvfrom+0x3d0>)
 80041c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	8bfa      	ldrh	r2, [r7, #30]
 80041c8:	1a8a      	subs	r2, r1, r2
 80041ca:	b291      	uxth	r1, r2
 80041cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <recvfrom+0x3d0>)
 80041ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004204 <recvfrom+0x3d0>)
 80041d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <recvfrom+0x3d4>)
 80041e2:	5cd2      	ldrb	r2, [r2, r3]
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	b2d1      	uxtb	r1, r2
 80041ec:	4a06      	ldr	r2, [pc, #24]	@ (8004208 <recvfrom+0x3d4>)
 80041ee:	54d1      	strb	r1, [r2, r3]
 80041f0:	e003      	b.n	80041fa <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	4a04      	ldr	r2, [pc, #16]	@ (8004208 <recvfrom+0x3d4>)
 80041f6:	2100      	movs	r1, #0
 80041f8:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80041fa:	8bfb      	ldrh	r3, [r7, #30]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000e90 	.word	0x20000e90
 8004208:	20000ea0 	.word	0x20000ea0

0800420c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_MspInit+0x4c>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	4a0f      	ldr	r2, [pc, #60]	@ (8004258 <HAL_MspInit+0x4c>)
 800421c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004220:	6453      	str	r3, [r2, #68]	@ 0x44
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <HAL_MspInit+0x4c>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <HAL_MspInit+0x4c>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	4a08      	ldr	r2, [pc, #32]	@ (8004258 <HAL_MspInit+0x4c>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	@ 0x40
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_MspInit+0x4c>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800424a:	2007      	movs	r0, #7
 800424c:	f001 f8c2 	bl	80053d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800

0800425c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	@ 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a19      	ldr	r2, [pc, #100]	@ (80042e0 <HAL_SPI_MspInit+0x84>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d12b      	bne.n	80042d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	4b18      	ldr	r3, [pc, #96]	@ (80042e4 <HAL_SPI_MspInit+0x88>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <HAL_SPI_MspInit+0x88>)
 8004288:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800428c:	6453      	str	r3, [r2, #68]	@ 0x44
 800428e:	4b15      	ldr	r3, [pc, #84]	@ (80042e4 <HAL_SPI_MspInit+0x88>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <HAL_SPI_MspInit+0x88>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	4a10      	ldr	r2, [pc, #64]	@ (80042e4 <HAL_SPI_MspInit+0x88>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042aa:	4b0e      	ldr	r3, [pc, #56]	@ (80042e4 <HAL_SPI_MspInit+0x88>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80042b6:	23e0      	movs	r3, #224	@ 0xe0
 80042b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042c6:	2305      	movs	r3, #5
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	4619      	mov	r1, r3
 80042d0:	4805      	ldr	r0, [pc, #20]	@ (80042e8 <HAL_SPI_MspInit+0x8c>)
 80042d2:	f001 f953 	bl	800557c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80042d6:	bf00      	nop
 80042d8:	3728      	adds	r7, #40	@ 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40013000 	.word	0x40013000
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40020000 	.word	0x40020000

080042ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004328 <HAL_TIM_Base_MspInit+0x3c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10d      	bne.n	800431a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_TIM_Base_MspInit+0x40>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	4a09      	ldr	r2, [pc, #36]	@ (800432c <HAL_TIM_Base_MspInit+0x40>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6453      	str	r3, [r2, #68]	@ 0x44
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <HAL_TIM_Base_MspInit+0x40>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40023800 	.word	0x40023800

08004330 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <HAL_TIM_MspPostInit+0x68>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d11e      	bne.n	8004390 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <HAL_TIM_MspPostInit+0x6c>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	4a10      	ldr	r2, [pc, #64]	@ (800439c <HAL_TIM_MspPostInit+0x6c>)
 800435c:	f043 0310 	orr.w	r3, r3, #16
 8004360:	6313      	str	r3, [r2, #48]	@ 0x30
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <HAL_TIM_MspPostInit+0x6c>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800436e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004378:	2302      	movs	r3, #2
 800437a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004380:	2301      	movs	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	4619      	mov	r1, r3
 800438a:	4805      	ldr	r0, [pc, #20]	@ (80043a0 <HAL_TIM_MspPostInit+0x70>)
 800438c:	f001 f8f6 	bl	800557c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004390:	bf00      	nop
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40010000 	.word	0x40010000
 800439c:	40023800 	.word	0x40023800
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	@ 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <HAL_UART_MspInit+0x94>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d133      	bne.n	800442e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <HAL_UART_MspInit+0x98>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	4a1b      	ldr	r2, [pc, #108]	@ (800443c <HAL_UART_MspInit+0x98>)
 80043d0:	f043 0320 	orr.w	r3, r3, #32
 80043d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_UART_MspInit+0x98>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b15      	ldr	r3, [pc, #84]	@ (800443c <HAL_UART_MspInit+0x98>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	4a14      	ldr	r2, [pc, #80]	@ (800443c <HAL_UART_MspInit+0x98>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <HAL_UART_MspInit+0x98>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043fe:	23c0      	movs	r3, #192	@ 0xc0
 8004400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440a:	2303      	movs	r3, #3
 800440c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800440e:	2308      	movs	r3, #8
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	4809      	ldr	r0, [pc, #36]	@ (8004440 <HAL_UART_MspInit+0x9c>)
 800441a:	f001 f8af 	bl	800557c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	2047      	movs	r0, #71	@ 0x47
 8004424:	f000 ffe1 	bl	80053ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004428:	2047      	movs	r0, #71	@ 0x47
 800442a:	f000 fffa 	bl	8005422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800442e:	bf00      	nop
 8004430:	3728      	adds	r7, #40	@ 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40011400 	.word	0x40011400
 800443c:	40023800 	.word	0x40023800
 8004440:	40020800 	.word	0x40020800

08004444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <NMI_Handler+0x4>

0800444c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <HardFault_Handler+0x4>

08004454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <MemManage_Handler+0x4>

0800445c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004460:	bf00      	nop
 8004462:	e7fd      	b.n	8004460 <BusFault_Handler+0x4>

08004464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004468:	bf00      	nop
 800446a:	e7fd      	b.n	8004468 <UsageFault_Handler+0x4>

0800446c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800447e:	bf00      	nop
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800449a:	f000 fe87 	bl	80051ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f001 fa1e 	bl	80058e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80044b4:	4802      	ldr	r0, [pc, #8]	@ (80044c0 <USART6_IRQHandler+0x10>)
 80044b6:	f003 fceb 	bl	8007e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000734 	.word	0x20000734

080044c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return 1;
 80044c8:	2301      	movs	r3, #1
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <_kill>:

int _kill(int pid, int sig)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044de:	f005 fd35 	bl	8009f4c <__errno>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2216      	movs	r2, #22
 80044e6:	601a      	str	r2, [r3, #0]
  return -1;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_exit>:

void _exit (int status)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ffe7 	bl	80044d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <_exit+0x12>

0800450a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e00a      	b.n	8004532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800451c:	f3af 8000 	nop.w
 8004520:	4601      	mov	r1, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	60ba      	str	r2, [r7, #8]
 8004528:	b2ca      	uxtb	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3301      	adds	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	dbf0      	blt.n	800451c <_read+0x12>
  }

  return len;
 800453a:	687b      	ldr	r3, [r7, #4]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	e009      	b.n	800456a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	60ba      	str	r2, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3301      	adds	r3, #1
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	dbf1      	blt.n	8004556 <_write+0x12>
  }
  return len;
 8004572:	687b      	ldr	r3, [r7, #4]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <_close>:

int _close(int file)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045a4:	605a      	str	r2, [r3, #4]
  return 0;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <_isatty>:

int _isatty(int file)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045bc:	2301      	movs	r3, #1
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045ec:	4a14      	ldr	r2, [pc, #80]	@ (8004640 <_sbrk+0x5c>)
 80045ee:	4b15      	ldr	r3, [pc, #84]	@ (8004644 <_sbrk+0x60>)
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045f8:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <_sbrk+0x64>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004600:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <_sbrk+0x64>)
 8004602:	4a12      	ldr	r2, [pc, #72]	@ (800464c <_sbrk+0x68>)
 8004604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004606:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <_sbrk+0x64>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d207      	bcs.n	8004624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004614:	f005 fc9a 	bl	8009f4c <__errno>
 8004618:	4603      	mov	r3, r0
 800461a:	220c      	movs	r2, #12
 800461c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004622:	e009      	b.n	8004638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004624:	4b08      	ldr	r3, [pc, #32]	@ (8004648 <_sbrk+0x64>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <_sbrk+0x64>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	4a05      	ldr	r2, [pc, #20]	@ (8004648 <_sbrk+0x64>)
 8004634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004636:	68fb      	ldr	r3, [r7, #12]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20020000 	.word	0x20020000
 8004644:	00000400 	.word	0x00000400
 8004648:	20000ea8 	.word	0x20000ea8
 800464c:	20001008 	.word	0x20001008

08004650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <SystemInit+0x20>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	4a05      	ldr	r2, [pc, #20]	@ (8004670 <SystemInit+0x20>)
 800465c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800467c:	4b22      	ldr	r3, [pc, #136]	@ (8004708 <WIZCHIP_READ+0x94>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004682:	4b21      	ldr	r3, [pc, #132]	@ (8004708 <WIZCHIP_READ+0x94>)
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004688:	4b1f      	ldr	r3, [pc, #124]	@ (8004708 <WIZCHIP_READ+0x94>)
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <WIZCHIP_READ+0x24>
 8004690:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <WIZCHIP_READ+0x94>)
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	d114      	bne.n	80046c2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <WIZCHIP_READ+0x94>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	0c12      	lsrs	r2, r2, #16
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	4610      	mov	r0, r2
 80046a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80046a6:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <WIZCHIP_READ+0x94>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	0a12      	lsrs	r2, r2, #8
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80046b4:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <WIZCHIP_READ+0x94>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	4610      	mov	r0, r2
 80046be:	4798      	blx	r3
 80046c0:	e011      	b.n	80046e6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80046d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <WIZCHIP_READ+0x94>)
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	f107 020c 	add.w	r2, r7, #12
 80046e0:	2103      	movs	r1, #3
 80046e2:	4610      	mov	r0, r2
 80046e4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80046e6:	4b08      	ldr	r3, [pc, #32]	@ (8004708 <WIZCHIP_READ+0x94>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4798      	blx	r3
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <WIZCHIP_READ+0x94>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80046f6:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <WIZCHIP_READ+0x94>)
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4798      	blx	r3
   return ret;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000044 	.word	0x20000044

0800470c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004718:	4b22      	ldr	r3, [pc, #136]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800471e:	4b21      	ldr	r3, [pc, #132]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800472c:	4b1d      	ldr	r3, [pc, #116]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	d119      	bne.n	8004768 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004734:	4b1b      	ldr	r3, [pc, #108]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	0c12      	lsrs	r2, r2, #16
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	4610      	mov	r0, r2
 8004740:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004742:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	0a12      	lsrs	r2, r2, #8
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	4610      	mov	r0, r2
 800474e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	4610      	mov	r0, r2
 800475a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800475c:	4b11      	ldr	r3, [pc, #68]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	4610      	mov	r0, r2
 8004764:	4798      	blx	r3
 8004766:	e013      	b.n	8004790 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	b2db      	uxtb	r3, r3
 800476e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	b2db      	uxtb	r3, r3
 8004776:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 8004784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004786:	f107 020c 	add.w	r2, r7, #12
 800478a:	2104      	movs	r1, #4
 800478c:	4610      	mov	r0, r2
 800478e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004796:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <WIZCHIP_WRITE+0x98>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	4798      	blx	r3
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000044 	.word	0x20000044

080047a8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80047b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	4798      	blx	r3
   WIZCHIP.CS._select();
 80047bc:	4b29      	ldr	r3, [pc, #164]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80047c2:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <WIZCHIP_READ_BUF+0x2a>
 80047ca:	4b26      	ldr	r3, [pc, #152]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d126      	bne.n	8004820 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80047d2:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	0c12      	lsrs	r2, r2, #16
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	4610      	mov	r0, r2
 80047de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80047e0:	4b20      	ldr	r3, [pc, #128]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	0a12      	lsrs	r2, r2, #8
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	4610      	mov	r0, r2
 80047ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80047ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	4610      	mov	r0, r2
 80047f8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	82fb      	strh	r3, [r7, #22]
 80047fe:	e00a      	b.n	8004816 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004800:	4b18      	ldr	r3, [pc, #96]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	8afa      	ldrh	r2, [r7, #22]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	188c      	adds	r4, r1, r2
 800480a:	4798      	blx	r3
 800480c:	4603      	mov	r3, r0
 800480e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004810:	8afb      	ldrh	r3, [r7, #22]
 8004812:	3301      	adds	r3, #1
 8004814:	82fb      	strh	r3, [r7, #22]
 8004816:	8afa      	ldrh	r2, [r7, #22]
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	429a      	cmp	r2, r3
 800481c:	d3f0      	bcc.n	8004800 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800481e:	e017      	b.n	8004850 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	b2db      	uxtb	r3, r3
 800482e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004836:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	f107 0210 	add.w	r2, r7, #16
 800483e:	2103      	movs	r1, #3
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004844:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	4611      	mov	r1, r2
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004850:	4b04      	ldr	r3, [pc, #16]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004856:	4b03      	ldr	r3, [pc, #12]	@ (8004864 <WIZCHIP_READ_BUF+0xbc>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	4798      	blx	r3
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}
 8004864:	20000044 	.word	0x20000044

08004868 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004876:	4b2b      	ldr	r3, [pc, #172]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800487c:	4b29      	ldr	r3, [pc, #164]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800488a:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d126      	bne.n	80048e0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004892:	4b24      	ldr	r3, [pc, #144]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	0c12      	lsrs	r2, r2, #16
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	4610      	mov	r0, r2
 800489e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80048a0:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	0a12      	lsrs	r2, r2, #8
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	4610      	mov	r0, r2
 80048ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80048ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	82fb      	strh	r3, [r7, #22]
 80048be:	e00a      	b.n	80048d6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80048c0:	4b18      	ldr	r3, [pc, #96]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	8afa      	ldrh	r2, [r7, #22]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	440a      	add	r2, r1
 80048ca:	7812      	ldrb	r2, [r2, #0]
 80048cc:	4610      	mov	r0, r2
 80048ce:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80048d0:	8afb      	ldrh	r3, [r7, #22]
 80048d2:	3301      	adds	r3, #1
 80048d4:	82fb      	strh	r3, [r7, #22]
 80048d6:	8afa      	ldrh	r2, [r7, #22]
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3f0      	bcc.n	80048c0 <WIZCHIP_WRITE_BUF+0x58>
 80048de:	e017      	b.n	8004910 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80048f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 80048f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fa:	f107 0210 	add.w	r2, r7, #16
 80048fe:	2103      	movs	r1, #3
 8004900:	4610      	mov	r0, r2
 8004902:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004904:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	4611      	mov	r1, r2
 800490c:	68b8      	ldr	r0, [r7, #8]
 800490e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004910:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004916:	4b03      	ldr	r3, [pc, #12]	@ (8004924 <WIZCHIP_WRITE_BUF+0xbc>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	4798      	blx	r3
}
 800491c:	bf00      	nop
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000044 	.word	0x20000044

08004928 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004932:	2300      	movs	r3, #0
 8004934:	81fb      	strh	r3, [r7, #14]
 8004936:	2300      	movs	r3, #0
 8004938:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3301      	adds	r3, #1
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fe94 	bl	8004674 <WIZCHIP_READ>
 800494c:	4603      	mov	r3, r0
 800494e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004950:	89bb      	ldrh	r3, [r7, #12]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	b29c      	uxth	r4, r3
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	3301      	adds	r3, #1
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fe86 	bl	8004674 <WIZCHIP_READ>
 8004968:	4603      	mov	r3, r0
 800496a:	4423      	add	r3, r4
 800496c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800496e:	89bb      	ldrh	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3301      	adds	r3, #1
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fe77 	bl	8004674 <WIZCHIP_READ>
 8004986:	4603      	mov	r3, r0
 8004988:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	b29c      	uxth	r4, r3
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	3301      	adds	r3, #1
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fe69 	bl	8004674 <WIZCHIP_READ>
 80049a2:	4603      	mov	r3, r0
 80049a4:	4423      	add	r3, r4
 80049a6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80049a8:	89fa      	ldrh	r2, [r7, #14]
 80049aa:	89bb      	ldrh	r3, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1c4      	bne.n	800493a <getSn_TX_FSR+0x12>
   return val;
 80049b0:	89fb      	ldrh	r3, [r7, #14]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd90      	pop	{r4, r7, pc}

080049ba <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80049ba:	b590      	push	{r4, r7, lr}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	4603      	mov	r3, r0
 80049c2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	81fb      	strh	r3, [r7, #14]
 80049c8:	2300      	movs	r3, #0
 80049ca:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	3301      	adds	r3, #1
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fe4b 	bl	8004674 <WIZCHIP_READ>
 80049de:	4603      	mov	r3, r0
 80049e0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80049e2:	89bb      	ldrh	r3, [r7, #12]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	b29c      	uxth	r4, r3
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	3301      	adds	r3, #1
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fe3d 	bl	8004674 <WIZCHIP_READ>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4423      	add	r3, r4
 80049fe:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004a00:	89bb      	ldrh	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d019      	beq.n	8004a3a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fe2e 	bl	8004674 <WIZCHIP_READ>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	b29c      	uxth	r4, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	3301      	adds	r3, #1
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fe20 	bl	8004674 <WIZCHIP_READ>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4423      	add	r3, r4
 8004a38:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004a3a:	89fa      	ldrh	r2, [r7, #14]
 8004a3c:	89bb      	ldrh	r3, [r7, #12]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d1c4      	bne.n	80049cc <getSn_RX_RSR+0x12>
   return val;
 8004a42:	89fb      	ldrh	r3, [r7, #14]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}

08004a4c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	71fb      	strb	r3, [r7, #7]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004a64:	88bb      	ldrh	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d046      	beq.n	8004af8 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	3301      	adds	r3, #1
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fdfc 	bl	8004674 <WIZCHIP_READ>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	b29c      	uxth	r4, r3
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3301      	adds	r3, #1
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fdf0 	bl	8004674 <WIZCHIP_READ>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4423      	add	r3, r4
 8004a98:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004a9a:	89fb      	ldrh	r3, [r7, #14]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	79fa      	ldrb	r2, [r7, #7]
 8004aa0:	0092      	lsls	r2, r2, #2
 8004aa2:	3202      	adds	r2, #2
 8004aa4:	00d2      	lsls	r2, r2, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004aaa:	88bb      	ldrh	r3, [r7, #4]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	68b8      	ldr	r0, [r7, #8]
 8004ab2:	f7ff fed9 	bl	8004868 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004ab6:	89fa      	ldrh	r2, [r7, #14]
 8004ab8:	88bb      	ldrh	r3, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8004aca:	461a      	mov	r2, r3
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7ff fe18 	bl	800470c <WIZCHIP_WRITE>
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8004ae8:	461a      	mov	r2, r3
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff fe0b 	bl	800470c <WIZCHIP_WRITE>
 8004af6:	e000      	b.n	8004afa <wiz_send_data+0xae>
   if(len == 0)  return;
 8004af8:	bf00      	nop
}
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}

08004b00 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	6039      	str	r1, [r7, #0]
 8004b0a:	71fb      	strb	r3, [r7, #7]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004b18:	88bb      	ldrh	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d046      	beq.n	8004bac <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	3301      	adds	r3, #1
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fda2 	bl	8004674 <WIZCHIP_READ>
 8004b30:	4603      	mov	r3, r0
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	b29c      	uxth	r4, r3
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fd96 	bl	8004674 <WIZCHIP_READ>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4423      	add	r3, r4
 8004b4c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	79fa      	ldrb	r2, [r7, #7]
 8004b54:	0092      	lsls	r2, r2, #2
 8004b56:	3203      	adds	r2, #3
 8004b58:	00d2      	lsls	r2, r2, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004b5e:	88bb      	ldrh	r3, [r7, #4]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6839      	ldr	r1, [r7, #0]
 8004b64:	68b8      	ldr	r0, [r7, #8]
 8004b66:	f7ff fe1f 	bl	80047a8 <WIZCHIP_READ_BUF>
   ptr += len;
 8004b6a:	89fa      	ldrh	r2, [r7, #14]
 8004b6c:	88bb      	ldrh	r3, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	3301      	adds	r3, #1
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004b7e:	461a      	mov	r2, r3
 8004b80:	89fb      	ldrh	r3, [r7, #14]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7ff fdbe 	bl	800470c <WIZCHIP_WRITE>
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	3301      	adds	r3, #1
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7ff fdb1 	bl	800470c <WIZCHIP_WRITE>
 8004baa:	e000      	b.n	8004bae <wiz_recv_data+0xae>
   if(len == 0) return;
 8004bac:	bf00      	nop
}
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	71fb      	strb	r3, [r7, #7]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	3301      	adds	r3, #1
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fd4d 	bl	8004674 <WIZCHIP_READ>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	b29c      	uxth	r4, r3
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	3301      	adds	r3, #1
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fd41 	bl	8004674 <WIZCHIP_READ>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4423      	add	r3, r4
 8004bf6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004bf8:	89fa      	ldrh	r2, [r7, #14]
 8004bfa:	88bb      	ldrh	r3, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	3301      	adds	r3, #1
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7ff fd77 	bl	800470c <WIZCHIP_WRITE>
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	3301      	adds	r3, #1
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7ff fd6a 	bl	800470c <WIZCHIP_WRITE>
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd90      	pop	{r4, r7, pc}

08004c40 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004c4e:	b480      	push	{r7}
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	bf00      	nop
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	71fb      	strb	r3, [r7, #7]
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	807b      	strh	r3, [r7, #2]
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	807b      	strh	r3, [r7, #2]
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <reg_wizchip_cs_cbfunc+0x16>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <reg_wizchip_cs_cbfunc+0x40>)
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <reg_wizchip_cs_cbfunc+0x44>)
 8004d22:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004d24:	4b08      	ldr	r3, [pc, #32]	@ (8004d48 <reg_wizchip_cs_cbfunc+0x40>)
 8004d26:	4a0a      	ldr	r2, [pc, #40]	@ (8004d50 <reg_wizchip_cs_cbfunc+0x48>)
 8004d28:	619a      	str	r2, [r3, #24]
 8004d2a:	e006      	b.n	8004d3a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004d2c:	4a06      	ldr	r2, [pc, #24]	@ (8004d48 <reg_wizchip_cs_cbfunc+0x40>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004d32:	4a05      	ldr	r2, [pc, #20]	@ (8004d48 <reg_wizchip_cs_cbfunc+0x40>)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6193      	str	r3, [r2, #24]
   }
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000044 	.word	0x20000044
 8004d4c:	08004c5d 	.word	0x08004c5d
 8004d50:	08004c6b 	.word	0x08004c6b

08004d54 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004d5e:	bf00      	nop
 8004d60:	4b0f      	ldr	r3, [pc, #60]	@ (8004da0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f9      	beq.n	8004d60 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <reg_wizchip_spi_cbfunc+0x24>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004d78:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <reg_wizchip_spi_cbfunc+0x50>)
 8004d7c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004d7e:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004d80:	4a09      	ldr	r2, [pc, #36]	@ (8004da8 <reg_wizchip_spi_cbfunc+0x54>)
 8004d82:	621a      	str	r2, [r3, #32]
 8004d84:	e006      	b.n	8004d94 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004d86:	4a06      	ldr	r2, [pc, #24]	@ (8004da0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004d8c:	4a04      	ldr	r2, [pc, #16]	@ (8004da0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6213      	str	r3, [r2, #32]
   }
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	20000044 	.word	0x20000044
 8004da4:	08004cb1 	.word	0x08004cb1
 8004da8:	08004cc1 	.word	0x08004cc1

08004dac <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004db6:	bf00      	nop
 8004db8:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f9      	beq.n	8004db8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <reg_wizchip_spiburst_cbfunc+0x24>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dfc <reg_wizchip_spiburst_cbfunc+0x50>)
 8004dd4:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004dd6:	4b08      	ldr	r3, [pc, #32]	@ (8004df8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004dd8:	4a09      	ldr	r2, [pc, #36]	@ (8004e00 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ddc:	e006      	b.n	8004dec <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004dde:	4a06      	ldr	r2, [pc, #24]	@ (8004df8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004de4:	4a04      	ldr	r2, [pc, #16]	@ (8004df8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20000044 	.word	0x20000044
 8004dfc:	08004cd7 	.word	0x08004cd7
 8004e00:	08004cef 	.word	0x08004cef

08004e04 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	2206      	movs	r2, #6
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004e14:	f7ff fcc8 	bl	80047a8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004e24:	f7ff fcc0 	bl	80047a8 <WIZCHIP_READ_BUF>
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004e34:	f7ff fcb8 	bl	80047a8 <WIZCHIP_READ_BUF>
 8004e38:	f107 030c 	add.w	r3, r7, #12
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004e44:	f7ff fcb0 	bl	80047a8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004e48:	2180      	movs	r1, #128	@ 0x80
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f7ff fc5e 	bl	800470c <WIZCHIP_WRITE>
   getMR(); // for delay
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7ff fc0f 	bl	8004674 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	2206      	movs	r2, #6
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004e60:	f7ff fd02 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004e64:	f107 0314 	add.w	r3, r7, #20
 8004e68:	2204      	movs	r2, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004e70:	f7ff fcfa 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	2204      	movs	r2, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004e80:	f7ff fcf2 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	2204      	movs	r2, #4
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004e90:	f7ff fcea 	bl	8004868 <WIZCHIP_WRITE_BUF>
}
 8004e94:	bf00      	nop
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004eaa:	f7ff ffab 	bl	8004e04 <wizchip_sw_reset>
   if(txsize)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d03b      	beq.n	8004f2c <wizchip_init+0x90>
   {
      tmp = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e015      	b.n	8004eea <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	781a      	ldrb	r2, [r3, #0]
 8004ec8:	7bbb      	ldrb	r3, [r7, #14]
 8004eca:	4413      	add	r3, r2
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	dd02      	ble.n	8004ede <wizchip_init+0x42>
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004edc:	e066      	b.n	8004fac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eee:	2b07      	cmp	r3, #7
 8004ef0:	dde5      	ble.n	8004ebe <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e015      	b.n	8004f24 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	3301      	adds	r3, #1
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004f06:	4618      	mov	r0, r3
 8004f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	f7ff fbfa 	bl	800470c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f28:	2b07      	cmp	r3, #7
 8004f2a:	dde5      	ble.n	8004ef8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d03b      	beq.n	8004faa <wizchip_init+0x10e>
   {
      tmp = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
 8004f3a:	e015      	b.n	8004f68 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	7bbb      	ldrb	r3, [r7, #14]
 8004f48:	4413      	add	r3, r2
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004f4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	dd02      	ble.n	8004f5c <wizchip_init+0xc0>
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f5a:	e027      	b.n	8004fac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3301      	adds	r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	dde5      	ble.n	8004f3c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f70:	2300      	movs	r3, #0
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	e015      	b.n	8004fa2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004f84:	4618      	mov	r0, r3
 8004f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	4619      	mov	r1, r3
 8004f92:	f7ff fbbb 	bl	800470c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa6:	2b07      	cmp	r3, #7
 8004fa8:	dde5      	ble.n	8004f76 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2206      	movs	r2, #6
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004fc6:	f7ff fc4f 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	330e      	adds	r3, #14
 8004fce:	2204      	movs	r2, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004fd6:	f7ff fc47 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	330a      	adds	r3, #10
 8004fde:	2204      	movs	r2, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004fe6:	f7ff fc3f 	bl	8004868 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3306      	adds	r3, #6
 8004fee:	2204      	movs	r2, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004ff6:	f7ff fc37 	bl	8004868 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7c9a      	ldrb	r2, [r3, #18]
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <wizchip_setnetinfo+0x78>)
 8005000:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	7cda      	ldrb	r2, [r3, #19]
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <wizchip_setnetinfo+0x78>)
 8005008:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	7d1a      	ldrb	r2, [r3, #20]
 800500e:	4b07      	ldr	r3, [pc, #28]	@ (800502c <wizchip_setnetinfo+0x78>)
 8005010:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	7d5a      	ldrb	r2, [r3, #21]
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <wizchip_setnetinfo+0x78>)
 8005018:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	7d9a      	ldrb	r2, [r3, #22]
 800501e:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <wizchip_setnetinfo+0x7c>)
 8005020:	701a      	strb	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000eac 	.word	0x20000eac
 8005030:	20000eb0 	.word	0x20000eb0

08005034 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2206      	movs	r2, #6
 8005040:	4619      	mov	r1, r3
 8005042:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005046:	f7ff fbaf 	bl	80047a8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	330e      	adds	r3, #14
 800504e:	2204      	movs	r2, #4
 8005050:	4619      	mov	r1, r3
 8005052:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005056:	f7ff fba7 	bl	80047a8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	330a      	adds	r3, #10
 800505e:	2204      	movs	r2, #4
 8005060:	4619      	mov	r1, r3
 8005062:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005066:	f7ff fb9f 	bl	80047a8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3306      	adds	r3, #6
 800506e:	2204      	movs	r2, #4
 8005070:	4619      	mov	r1, r3
 8005072:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005076:	f7ff fb97 	bl	80047a8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800507a:	4b0c      	ldr	r3, [pc, #48]	@ (80050ac <wizchip_getnetinfo+0x78>)
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <wizchip_getnetinfo+0x78>)
 8005084:	785a      	ldrb	r2, [r3, #1]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800508a:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <wizchip_getnetinfo+0x78>)
 800508c:	789a      	ldrb	r2, [r3, #2]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <wizchip_getnetinfo+0x78>)
 8005094:	78da      	ldrb	r2, [r3, #3]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800509a:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <wizchip_getnetinfo+0x7c>)
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	759a      	strb	r2, [r3, #22]
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000eac 	.word	0x20000eac
 80050b0:	20000eb0 	.word	0x20000eb0

080050b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80050ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80050b8:	f7ff faca 	bl	8004650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050bc:	480c      	ldr	r0, [pc, #48]	@ (80050f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050be:	490d      	ldr	r1, [pc, #52]	@ (80050f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050c0:	4a0d      	ldr	r2, [pc, #52]	@ (80050f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050c4:	e002      	b.n	80050cc <LoopCopyDataInit>

080050c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ca:	3304      	adds	r3, #4

080050cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050d0:	d3f9      	bcc.n	80050c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050d2:	4a0a      	ldr	r2, [pc, #40]	@ (80050fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80050d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050d8:	e001      	b.n	80050de <LoopFillZerobss>

080050da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050dc:	3204      	adds	r2, #4

080050de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050e0:	d3fb      	bcc.n	80050da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050e2:	f004 ff39 	bl	8009f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050e6:	f7fd feb1 	bl	8002e4c <main>
  bx  lr    
 80050ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050f4:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80050f8:	0800e4a4 	.word	0x0800e4a4
  ldr r2, =_sbss
 80050fc:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8005100:	20001004 	.word	0x20001004

08005104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005104:	e7fe      	b.n	8005104 <ADC_IRQHandler>
	...

08005108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800510c:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <HAL_Init+0x40>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <HAL_Init+0x40>)
 8005112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_Init+0x40>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <HAL_Init+0x40>)
 800511e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005124:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <HAL_Init+0x40>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a07      	ldr	r2, [pc, #28]	@ (8005148 <HAL_Init+0x40>)
 800512a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800512e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005130:	2003      	movs	r0, #3
 8005132:	f000 f94f 	bl	80053d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005136:	2000      	movs	r0, #0
 8005138:	f000 f808 	bl	800514c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800513c:	f7ff f866 	bl	800420c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40023c00 	.word	0x40023c00

0800514c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005154:	4b12      	ldr	r3, [pc, #72]	@ (80051a0 <HAL_InitTick+0x54>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <HAL_InitTick+0x58>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005162:	fbb3 f3f1 	udiv	r3, r3, r1
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f967 	bl	800543e <HAL_SYSTICK_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e00e      	b.n	8005198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d80a      	bhi.n	8005196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005180:	2200      	movs	r2, #0
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005188:	f000 f92f 	bl	80053ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800518c:	4a06      	ldr	r2, [pc, #24]	@ (80051a8 <HAL_InitTick+0x5c>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000040 	.word	0x20000040
 80051a4:	20000074 	.word	0x20000074
 80051a8:	20000070 	.word	0x20000070

080051ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051b0:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <HAL_IncTick+0x20>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <HAL_IncTick+0x24>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	4a04      	ldr	r2, [pc, #16]	@ (80051d0 <HAL_IncTick+0x24>)
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000074 	.word	0x20000074
 80051d0:	20000eb4 	.word	0x20000eb4

080051d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return uwTick;
 80051d8:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <HAL_GetTick+0x14>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000eb4 	.word	0x20000eb4

080051ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051f4:	f7ff ffee 	bl	80051d4 <HAL_GetTick>
 80051f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005204:	d005      	beq.n	8005212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005206:	4b0a      	ldr	r3, [pc, #40]	@ (8005230 <HAL_Delay+0x44>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005212:	bf00      	nop
 8005214:	f7ff ffde 	bl	80051d4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	d8f7      	bhi.n	8005214 <HAL_Delay+0x28>
  {
  }
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000074 	.word	0x20000074

08005234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <__NVIC_SetPriorityGrouping+0x44>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005250:	4013      	ands	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800525c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005266:	4a04      	ldr	r2, [pc, #16]	@ (8005278 <__NVIC_SetPriorityGrouping+0x44>)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	60d3      	str	r3, [r2, #12]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	e000ed00 	.word	0xe000ed00

0800527c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005280:	4b04      	ldr	r3, [pc, #16]	@ (8005294 <__NVIC_GetPriorityGrouping+0x18>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	f003 0307 	and.w	r3, r3, #7
}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db0b      	blt.n	80052c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	f003 021f 	and.w	r2, r3, #31
 80052b0:	4907      	ldr	r1, [pc, #28]	@ (80052d0 <__NVIC_EnableIRQ+0x38>)
 80052b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2001      	movs	r0, #1
 80052ba:	fa00 f202 	lsl.w	r2, r0, r2
 80052be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e100 	.word	0xe000e100

080052d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db0a      	blt.n	80052fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	490c      	ldr	r1, [pc, #48]	@ (8005320 <__NVIC_SetPriority+0x4c>)
 80052ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f2:	0112      	lsls	r2, r2, #4
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	440b      	add	r3, r1
 80052f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052fc:	e00a      	b.n	8005314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4908      	ldr	r1, [pc, #32]	@ (8005324 <__NVIC_SetPriority+0x50>)
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	3b04      	subs	r3, #4
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	440b      	add	r3, r1
 8005312:	761a      	strb	r2, [r3, #24]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000e100 	.word	0xe000e100
 8005324:	e000ed00 	.word	0xe000ed00

08005328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005328:	b480      	push	{r7}
 800532a:	b089      	sub	sp, #36	@ 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f1c3 0307 	rsb	r3, r3, #7
 8005342:	2b04      	cmp	r3, #4
 8005344:	bf28      	it	cs
 8005346:	2304      	movcs	r3, #4
 8005348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3304      	adds	r3, #4
 800534e:	2b06      	cmp	r3, #6
 8005350:	d902      	bls.n	8005358 <NVIC_EncodePriority+0x30>
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3b03      	subs	r3, #3
 8005356:	e000      	b.n	800535a <NVIC_EncodePriority+0x32>
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43da      	mvns	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	401a      	ands	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	43d9      	mvns	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005380:	4313      	orrs	r3, r2
         );
}
 8005382:	4618      	mov	r0, r3
 8005384:	3724      	adds	r7, #36	@ 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053a0:	d301      	bcc.n	80053a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053a2:	2301      	movs	r3, #1
 80053a4:	e00f      	b.n	80053c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053a6:	4a0a      	ldr	r2, [pc, #40]	@ (80053d0 <SysTick_Config+0x40>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ae:	210f      	movs	r1, #15
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053b4:	f7ff ff8e 	bl	80052d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053b8:	4b05      	ldr	r3, [pc, #20]	@ (80053d0 <SysTick_Config+0x40>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053be:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <SysTick_Config+0x40>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	e000e010 	.word	0xe000e010

080053d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ff29 	bl	8005234 <__NVIC_SetPriorityGrouping>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b086      	sub	sp, #24
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053fc:	f7ff ff3e 	bl	800527c <__NVIC_GetPriorityGrouping>
 8005400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	6978      	ldr	r0, [r7, #20]
 8005408:	f7ff ff8e 	bl	8005328 <NVIC_EncodePriority>
 800540c:	4602      	mov	r2, r0
 800540e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff5d 	bl	80052d4 <__NVIC_SetPriority>
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	4603      	mov	r3, r0
 800542a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800542c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff31 	bl	8005298 <__NVIC_EnableIRQ>
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff ffa2 	bl	8005390 <SysTick_Config>
 800544c:	4603      	mov	r3, r0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005464:	f7ff feb6 	bl	80051d4 <HAL_GetTick>
 8005468:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d008      	beq.n	8005488 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2280      	movs	r2, #128	@ 0x80
 800547a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e052      	b.n	800552e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0216 	bic.w	r2, r2, #22
 8005496:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <HAL_DMA_Abort+0x62>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0208 	bic.w	r2, r2, #8
 80054c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054d8:	e013      	b.n	8005502 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054da:	f7ff fe7b 	bl	80051d4 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d90c      	bls.n	8005502 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2203      	movs	r2, #3
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e015      	b.n	800552e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e4      	bne.n	80054da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	223f      	movs	r2, #63	@ 0x3f
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d004      	beq.n	8005554 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2280      	movs	r2, #128	@ 0x80
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e00c      	b.n	800556e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2205      	movs	r2, #5
 8005558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	@ 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e16b      	b.n	8005870 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005598:	2201      	movs	r2, #1
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4013      	ands	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	f040 815a 	bne.w	800586a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d005      	beq.n	80055ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d130      	bne.n	8005630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005604:	2201      	movs	r2, #1
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 0201 	and.w	r2, r3, #1
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b03      	cmp	r3, #3
 800563a:	d017      	beq.n	800566c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d123      	bne.n	80056c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	08da      	lsrs	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3208      	adds	r2, #8
 8005680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	220f      	movs	r2, #15
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	08da      	lsrs	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3208      	adds	r2, #8
 80056ba:	69b9      	ldr	r1, [r7, #24]
 80056bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	2203      	movs	r2, #3
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0203 	and.w	r2, r3, #3
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80b4 	beq.w	800586a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	4b60      	ldr	r3, [pc, #384]	@ (8005888 <HAL_GPIO_Init+0x30c>)
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	4a5f      	ldr	r2, [pc, #380]	@ (8005888 <HAL_GPIO_Init+0x30c>)
 800570c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005710:	6453      	str	r3, [r2, #68]	@ 0x44
 8005712:	4b5d      	ldr	r3, [pc, #372]	@ (8005888 <HAL_GPIO_Init+0x30c>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571e:	4a5b      	ldr	r2, [pc, #364]	@ (800588c <HAL_GPIO_Init+0x310>)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	3302      	adds	r3, #2
 8005726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	220f      	movs	r2, #15
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a52      	ldr	r2, [pc, #328]	@ (8005890 <HAL_GPIO_Init+0x314>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d02b      	beq.n	80057a2 <HAL_GPIO_Init+0x226>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a51      	ldr	r2, [pc, #324]	@ (8005894 <HAL_GPIO_Init+0x318>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d025      	beq.n	800579e <HAL_GPIO_Init+0x222>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a50      	ldr	r2, [pc, #320]	@ (8005898 <HAL_GPIO_Init+0x31c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01f      	beq.n	800579a <HAL_GPIO_Init+0x21e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a4f      	ldr	r2, [pc, #316]	@ (800589c <HAL_GPIO_Init+0x320>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d019      	beq.n	8005796 <HAL_GPIO_Init+0x21a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a4e      	ldr	r2, [pc, #312]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_GPIO_Init+0x216>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a4d      	ldr	r2, [pc, #308]	@ (80058a4 <HAL_GPIO_Init+0x328>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00d      	beq.n	800578e <HAL_GPIO_Init+0x212>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a4c      	ldr	r2, [pc, #304]	@ (80058a8 <HAL_GPIO_Init+0x32c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <HAL_GPIO_Init+0x20e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a4b      	ldr	r2, [pc, #300]	@ (80058ac <HAL_GPIO_Init+0x330>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_GPIO_Init+0x20a>
 8005782:	2307      	movs	r3, #7
 8005784:	e00e      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 8005786:	2308      	movs	r3, #8
 8005788:	e00c      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 800578a:	2306      	movs	r3, #6
 800578c:	e00a      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 800578e:	2305      	movs	r3, #5
 8005790:	e008      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 8005792:	2304      	movs	r3, #4
 8005794:	e006      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 8005796:	2303      	movs	r3, #3
 8005798:	e004      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 800579a:	2302      	movs	r3, #2
 800579c:	e002      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <HAL_GPIO_Init+0x228>
 80057a2:	2300      	movs	r3, #0
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	f002 0203 	and.w	r2, r2, #3
 80057aa:	0092      	lsls	r2, r2, #2
 80057ac:	4093      	lsls	r3, r2
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057b4:	4935      	ldr	r1, [pc, #212]	@ (800588c <HAL_GPIO_Init+0x310>)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	089b      	lsrs	r3, r3, #2
 80057ba:	3302      	adds	r3, #2
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057c2:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	43db      	mvns	r3, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4013      	ands	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057e6:	4a32      	ldr	r2, [pc, #200]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057ec:	4b30      	ldr	r3, [pc, #192]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005810:	4a27      	ldr	r2, [pc, #156]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005816:	4b26      	ldr	r3, [pc, #152]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800583a:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005840:	4b1b      	ldr	r3, [pc, #108]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005864:	4a12      	ldr	r2, [pc, #72]	@ (80058b0 <HAL_GPIO_Init+0x334>)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b0f      	cmp	r3, #15
 8005874:	f67f ae90 	bls.w	8005598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	3724      	adds	r7, #36	@ 0x24
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800
 800588c:	40013800 	.word	0x40013800
 8005890:	40020000 	.word	0x40020000
 8005894:	40020400 	.word	0x40020400
 8005898:	40020800 	.word	0x40020800
 800589c:	40020c00 	.word	0x40020c00
 80058a0:	40021000 	.word	0x40021000
 80058a4:	40021400 	.word	0x40021400
 80058a8:	40021800 	.word	0x40021800
 80058ac:	40021c00 	.word	0x40021c00
 80058b0:	40013c00 	.word	0x40013c00

080058b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
 80058c0:	4613      	mov	r3, r2
 80058c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058c4:	787b      	ldrb	r3, [r7, #1]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ca:	887a      	ldrh	r2, [r7, #2]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058d0:	e003      	b.n	80058da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	041a      	lsls	r2, r3, #16
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	619a      	str	r2, [r3, #24]
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058fe:	4a05      	ldr	r2, [pc, #20]	@ (8005914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fd fa84 	bl	8002e14 <HAL_GPIO_EXTI_Callback>
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40013c00 	.word	0x40013c00

08005918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e267      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d075      	beq.n	8005a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005936:	4b88      	ldr	r3, [pc, #544]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00c      	beq.n	800595c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005942:	4b85      	ldr	r3, [pc, #532]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800594a:	2b08      	cmp	r3, #8
 800594c:	d112      	bne.n	8005974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594e:	4b82      	ldr	r3, [pc, #520]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800595a:	d10b      	bne.n	8005974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d05b      	beq.n	8005a20 <HAL_RCC_OscConfig+0x108>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d157      	bne.n	8005a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e242      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800597c:	d106      	bne.n	800598c <HAL_RCC_OscConfig+0x74>
 800597e:	4b76      	ldr	r3, [pc, #472]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a75      	ldr	r2, [pc, #468]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e01d      	b.n	80059c8 <HAL_RCC_OscConfig+0xb0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x98>
 8005996:	4b70      	ldr	r3, [pc, #448]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6f      	ldr	r2, [pc, #444]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e00b      	b.n	80059c8 <HAL_RCC_OscConfig+0xb0>
 80059b0:	4b69      	ldr	r3, [pc, #420]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a68      	ldr	r2, [pc, #416]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b66      	ldr	r3, [pc, #408]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a65      	ldr	r2, [pc, #404]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d013      	beq.n	80059f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7ff fc00 	bl	80051d4 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d8:	f7ff fbfc 	bl	80051d4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	@ 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e207      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0xc0>
 80059f6:	e014      	b.n	8005a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7ff fbec 	bl	80051d4 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a00:	f7ff fbe8 	bl	80051d4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	@ 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e1f3      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	4b51      	ldr	r3, [pc, #324]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0xe8>
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d063      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3a:	4b47      	ldr	r3, [pc, #284]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d11c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a46:	4b44      	ldr	r3, [pc, #272]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	4b41      	ldr	r3, [pc, #260]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCC_OscConfig+0x152>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e1c7      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4937      	ldr	r1, [pc, #220]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	e03a      	b.n	8005af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a88:	4b34      	ldr	r3, [pc, #208]	@ (8005b5c <HAL_RCC_OscConfig+0x244>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7ff fba1 	bl	80051d4 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a96:	f7ff fb9d 	bl	80051d4 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e1a8      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab4:	4b28      	ldr	r3, [pc, #160]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4925      	ldr	r1, [pc, #148]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
 8005ac8:	e015      	b.n	8005af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aca:	4b24      	ldr	r3, [pc, #144]	@ (8005b5c <HAL_RCC_OscConfig+0x244>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7ff fb80 	bl	80051d4 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad8:	f7ff fb7c 	bl	80051d4 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e187      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aea:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d036      	beq.n	8005b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <HAL_RCC_OscConfig+0x248>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b10:	f7ff fb60 	bl	80051d4 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b18:	f7ff fb5c 	bl	80051d4 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e167      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x200>
 8005b36:	e01b      	b.n	8005b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b38:	4b09      	ldr	r3, [pc, #36]	@ (8005b60 <HAL_RCC_OscConfig+0x248>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3e:	f7ff fb49 	bl	80051d4 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b44:	e00e      	b.n	8005b64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b46:	f7ff fb45 	bl	80051d4 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d907      	bls.n	8005b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e150      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	42470000 	.word	0x42470000
 8005b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b64:	4b88      	ldr	r3, [pc, #544]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ea      	bne.n	8005b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8097 	beq.w	8005cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b82:	4b81      	ldr	r3, [pc, #516]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	4b7d      	ldr	r3, [pc, #500]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	4a7c      	ldr	r2, [pc, #496]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bae:	4b77      	ldr	r3, [pc, #476]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d118      	bne.n	8005bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bba:	4b74      	ldr	r3, [pc, #464]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a73      	ldr	r2, [pc, #460]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc6:	f7ff fb05 	bl	80051d4 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bce:	f7ff fb01 	bl	80051d4 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e10c      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <HAL_RCC_OscConfig+0x2ea>
 8005bf4:	4b64      	ldr	r3, [pc, #400]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf8:	4a63      	ldr	r2, [pc, #396]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c00:	e01c      	b.n	8005c3c <HAL_RCC_OscConfig+0x324>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x30c>
 8005c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c10:	f043 0304 	orr.w	r3, r3, #4
 8005c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c16:	4b5c      	ldr	r3, [pc, #368]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c22:	e00b      	b.n	8005c3c <HAL_RCC_OscConfig+0x324>
 8005c24:	4b58      	ldr	r3, [pc, #352]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c28:	4a57      	ldr	r2, [pc, #348]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c30:	4b55      	ldr	r3, [pc, #340]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c34:	4a54      	ldr	r2, [pc, #336]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c36:	f023 0304 	bic.w	r3, r3, #4
 8005c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d015      	beq.n	8005c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7ff fac6 	bl	80051d4 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7ff fac2 	bl	80051d4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e0cb      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c62:	4b49      	ldr	r3, [pc, #292]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ee      	beq.n	8005c4c <HAL_RCC_OscConfig+0x334>
 8005c6e:	e014      	b.n	8005c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c70:	f7ff fab0 	bl	80051d4 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c78:	f7ff faac 	bl	80051d4 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e0b5      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1ee      	bne.n	8005c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca0:	4b39      	ldr	r3, [pc, #228]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca4:	4a38      	ldr	r2, [pc, #224]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005caa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a1 	beq.w	8005df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb6:	4b34      	ldr	r3, [pc, #208]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d05c      	beq.n	8005d7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d141      	bne.n	8005d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cca:	4b31      	ldr	r3, [pc, #196]	@ (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7ff fa80 	bl	80051d4 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7ff fa7c 	bl	80051d4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e087      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69da      	ldr	r2, [r3, #28]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	491b      	ldr	r1, [pc, #108]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d20:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d26:	f7ff fa55 	bl	80051d4 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7ff fa51 	bl	80051d4 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e05c      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d40:	4b11      	ldr	r3, [pc, #68]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x416>
 8005d4c:	e054      	b.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4e:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7ff fa3e 	bl	80051d4 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5c:	f7ff fa3a 	bl	80051d4 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e045      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6e:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x444>
 8005d7a:	e03d      	b.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e038      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40007000 	.word	0x40007000
 8005d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d94:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <HAL_RCC_OscConfig+0x4ec>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d028      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d121      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d11a      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d111      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800

08005e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0cc      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b68      	ldr	r3, [pc, #416]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d90c      	bls.n	8005e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b65      	ldr	r3, [pc, #404]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e32:	4b63      	ldr	r3, [pc, #396]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0b8      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d020      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e5c:	4b59      	ldr	r3, [pc, #356]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4a58      	ldr	r2, [pc, #352]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e74:	4b53      	ldr	r3, [pc, #332]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a52      	ldr	r2, [pc, #328]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e80:	4b50      	ldr	r3, [pc, #320]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	494d      	ldr	r1, [pc, #308]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d044      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	4b47      	ldr	r3, [pc, #284]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d119      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e07f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e06f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e067      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee6:	4b37      	ldr	r3, [pc, #220]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f023 0203 	bic.w	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4934      	ldr	r1, [pc, #208]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef8:	f7ff f96c 	bl	80051d4 <HAL_GetTick>
 8005efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f00:	f7ff f968 	bl	80051d4 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e04f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 020c 	and.w	r2, r3, #12
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1eb      	bne.n	8005f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f28:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d20c      	bcs.n	8005f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b22      	ldr	r3, [pc, #136]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3e:	4b20      	ldr	r3, [pc, #128]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e032      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f5c:	4b19      	ldr	r3, [pc, #100]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4916      	ldr	r1, [pc, #88]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f7a:	4b12      	ldr	r3, [pc, #72]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	490e      	ldr	r1, [pc, #56]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f8e:	f000 f821 	bl	8005fd4 <HAL_RCC_GetSysClockFreq>
 8005f92:	4602      	mov	r2, r0
 8005f94:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	490a      	ldr	r1, [pc, #40]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa0:	5ccb      	ldrb	r3, [r1, r3]
 8005fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa6:	4a09      	ldr	r2, [pc, #36]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005faa:	4b09      	ldr	r3, [pc, #36]	@ (8005fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff f8cc 	bl	800514c <HAL_InitTick>

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40023c00 	.word	0x40023c00
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	0800dfdc 	.word	0x0800dfdc
 8005fcc:	20000040 	.word	0x20000040
 8005fd0:	20000070 	.word	0x20000070

08005fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd8:	b094      	sub	sp, #80	@ 0x50
 8005fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fec:	4b79      	ldr	r3, [pc, #484]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d00d      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x40>
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	f200 80e1 	bhi.w	80061c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_RCC_GetSysClockFreq+0x34>
 8006002:	2b04      	cmp	r3, #4
 8006004:	d003      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x3a>
 8006006:	e0db      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006008:	4b73      	ldr	r3, [pc, #460]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800600a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800600c:	e0db      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600e:	4b73      	ldr	r3, [pc, #460]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x208>)
 8006010:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006012:	e0d8      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006014:	4b6f      	ldr	r3, [pc, #444]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800601c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601e:	4b6d      	ldr	r3, [pc, #436]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d063      	beq.n	80060f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800602a:	4b6a      	ldr	r3, [pc, #424]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	099b      	lsrs	r3, r3, #6
 8006030:	2200      	movs	r2, #0
 8006032:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006034:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	633b      	str	r3, [r7, #48]	@ 0x30
 800603e:	2300      	movs	r3, #0
 8006040:	637b      	str	r3, [r7, #52]	@ 0x34
 8006042:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	f04f 0000 	mov.w	r0, #0
 800604e:	f04f 0100 	mov.w	r1, #0
 8006052:	0159      	lsls	r1, r3, #5
 8006054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006058:	0150      	lsls	r0, r2, #5
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4621      	mov	r1, r4
 8006060:	1a51      	subs	r1, r2, r1
 8006062:	6139      	str	r1, [r7, #16]
 8006064:	4629      	mov	r1, r5
 8006066:	eb63 0301 	sbc.w	r3, r3, r1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006078:	4659      	mov	r1, fp
 800607a:	018b      	lsls	r3, r1, #6
 800607c:	4651      	mov	r1, sl
 800607e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006082:	4651      	mov	r1, sl
 8006084:	018a      	lsls	r2, r1, #6
 8006086:	4651      	mov	r1, sl
 8006088:	ebb2 0801 	subs.w	r8, r2, r1
 800608c:	4659      	mov	r1, fp
 800608e:	eb63 0901 	sbc.w	r9, r3, r1
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800609e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060a6:	4690      	mov	r8, r2
 80060a8:	4699      	mov	r9, r3
 80060aa:	4623      	mov	r3, r4
 80060ac:	eb18 0303 	adds.w	r3, r8, r3
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	462b      	mov	r3, r5
 80060b4:	eb49 0303 	adc.w	r3, r9, r3
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060c6:	4629      	mov	r1, r5
 80060c8:	024b      	lsls	r3, r1, #9
 80060ca:	4621      	mov	r1, r4
 80060cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060d0:	4621      	mov	r1, r4
 80060d2:	024a      	lsls	r2, r1, #9
 80060d4:	4610      	mov	r0, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060da:	2200      	movs	r2, #0
 80060dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060e4:	f7fa fde0 	bl	8000ca8 <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4613      	mov	r3, r2
 80060ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f0:	e058      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f2:	4b38      	ldr	r3, [pc, #224]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	099b      	lsrs	r3, r3, #6
 80060f8:	2200      	movs	r2, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	4611      	mov	r1, r2
 80060fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006102:	623b      	str	r3, [r7, #32]
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
 8006108:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	f04f 0000 	mov.w	r0, #0
 8006114:	f04f 0100 	mov.w	r1, #0
 8006118:	0159      	lsls	r1, r3, #5
 800611a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800611e:	0150      	lsls	r0, r2, #5
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4641      	mov	r1, r8
 8006126:	ebb2 0a01 	subs.w	sl, r2, r1
 800612a:	4649      	mov	r1, r9
 800612c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800613c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006140:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006144:	ebb2 040a 	subs.w	r4, r2, sl
 8006148:	eb63 050b 	sbc.w	r5, r3, fp
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	00eb      	lsls	r3, r5, #3
 8006156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615a:	00e2      	lsls	r2, r4, #3
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	4643      	mov	r3, r8
 8006162:	18e3      	adds	r3, r4, r3
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	464b      	mov	r3, r9
 8006168:	eb45 0303 	adc.w	r3, r5, r3
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800617a:	4629      	mov	r1, r5
 800617c:	028b      	lsls	r3, r1, #10
 800617e:	4621      	mov	r1, r4
 8006180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006184:	4621      	mov	r1, r4
 8006186:	028a      	lsls	r2, r1, #10
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618e:	2200      	movs	r2, #0
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	61fa      	str	r2, [r7, #28]
 8006194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006198:	f7fa fd86 	bl	8000ca8 <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4613      	mov	r3, r2
 80061a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061a4:	4b0b      	ldr	r3, [pc, #44]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	3301      	adds	r3, #1
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80061b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061be:	e002      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061c0:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80061c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3750      	adds	r7, #80	@ 0x50
 80061cc:	46bd      	mov	sp, r7
 80061ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d2:	bf00      	nop
 80061d4:	40023800 	.word	0x40023800
 80061d8:	00f42400 	.word	0x00f42400
 80061dc:	007a1200 	.word	0x007a1200

080061e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e4:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061e6:	681b      	ldr	r3, [r3, #0]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000040 	.word	0x20000040

080061f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061fc:	f7ff fff0 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006200:	4602      	mov	r2, r0
 8006202:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	0a9b      	lsrs	r3, r3, #10
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	4903      	ldr	r1, [pc, #12]	@ (800621c <HAL_RCC_GetPCLK1Freq+0x24>)
 800620e:	5ccb      	ldrb	r3, [r1, r3]
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40023800 	.word	0x40023800
 800621c:	0800dfec 	.word	0x0800dfec

08006220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006224:	f7ff ffdc 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006228:	4602      	mov	r2, r0
 800622a:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	0b5b      	lsrs	r3, r3, #13
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4903      	ldr	r1, [pc, #12]	@ (8006244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006236:	5ccb      	ldrb	r3, [r1, r3]
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40023800 	.word	0x40023800
 8006244:	0800dfec 	.word	0x0800dfec

08006248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e07b      	b.n	8006352 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d108      	bne.n	8006274 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800626a:	d009      	beq.n	8006280 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	61da      	str	r2, [r3, #28]
 8006272:	e005      	b.n	8006280 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fd ffde 	bl	800425c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006304:	ea42 0103 	orr.w	r1, r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 0104 	and.w	r1, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	f003 0210 	and.w	r2, r3, #16
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006340:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b088      	sub	sp, #32
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_SPI_Transmit+0x22>
 8006378:	2302      	movs	r3, #2
 800637a:	e12d      	b.n	80065d8 <HAL_SPI_Transmit+0x27e>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006384:	f7fe ff26 	bl	80051d4 <HAL_GetTick>
 8006388:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800639a:	2302      	movs	r3, #2
 800639c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800639e:	e116      	b.n	80065ce <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_Transmit+0x52>
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063b0:	e10d      	b.n	80065ce <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2203      	movs	r2, #3
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063f8:	d10f      	bne.n	800641a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b40      	cmp	r3, #64	@ 0x40
 8006426:	d007      	beq.n	8006438 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006440:	d14f      	bne.n	80064e2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_SPI_Transmit+0xf6>
 800644a:	8afb      	ldrh	r3, [r7, #22]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d142      	bne.n	80064d6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	881a      	ldrh	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006474:	e02f      	b.n	80064d6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d112      	bne.n	80064aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006488:	881a      	ldrh	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064a8:	e015      	b.n	80064d6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064aa:	f7fe fe93 	bl	80051d4 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d803      	bhi.n	80064c2 <HAL_SPI_Transmit+0x168>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c0:	d102      	bne.n	80064c8 <HAL_SPI_Transmit+0x16e>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064d4:	e07b      	b.n	80065ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ca      	bne.n	8006476 <HAL_SPI_Transmit+0x11c>
 80064e0:	e050      	b.n	8006584 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_SPI_Transmit+0x196>
 80064ea:	8afb      	ldrh	r3, [r7, #22]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d144      	bne.n	800657a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006516:	e030      	b.n	800657a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d113      	bne.n	800654e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	7812      	ldrb	r2, [r2, #0]
 8006532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800654c:	e015      	b.n	800657a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654e:	f7fe fe41 	bl	80051d4 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d803      	bhi.n	8006566 <HAL_SPI_Transmit+0x20c>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006564:	d102      	bne.n	800656c <HAL_SPI_Transmit+0x212>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006578:	e029      	b.n	80065ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1c9      	bne.n	8006518 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fbdf 	bl	8006d4c <SPI_EndRxTxTransaction>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e003      	b.n	80065ce <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006600:	2302      	movs	r3, #2
 8006602:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006604:	e0fb      	b.n	80067fe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800660e:	d112      	bne.n	8006636 <HAL_SPI_Receive+0x56>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10e      	bne.n	8006636 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2204      	movs	r2, #4
 800661c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f8ef 	bl	8006810 <HAL_SPI_TransmitReceive>
 8006632:	4603      	mov	r3, r0
 8006634:	e0e8      	b.n	8006808 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_SPI_Receive+0x64>
 8006640:	2302      	movs	r3, #2
 8006642:	e0e1      	b.n	8006808 <HAL_SPI_Receive+0x228>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800664c:	f7fe fdc2 	bl	80051d4 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <HAL_SPI_Receive+0x7e>
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d102      	bne.n	8006664 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006662:	e0cc      	b.n	80067fe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2204      	movs	r2, #4
 8006668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	88fa      	ldrh	r2, [r7, #6]
 8006682:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066aa:	d10f      	bne.n	80066cc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d6:	2b40      	cmp	r3, #64	@ 0x40
 80066d8:	d007      	beq.n	80066ea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d16a      	bne.n	80067c8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066f2:	e032      	b.n	800675a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d115      	bne.n	800672e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f103 020c 	add.w	r2, r3, #12
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800672c:	e015      	b.n	800675a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800672e:	f7fe fd51 	bl	80051d4 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d803      	bhi.n	8006746 <HAL_SPI_Receive+0x166>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006744:	d102      	bne.n	800674c <HAL_SPI_Receive+0x16c>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006758:	e051      	b.n	80067fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1c7      	bne.n	80066f4 <HAL_SPI_Receive+0x114>
 8006764:	e035      	b.n	80067d2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d113      	bne.n	800679c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677e:	b292      	uxth	r2, r2
 8006780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006786:	1c9a      	adds	r2, r3, #2
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800679a:	e015      	b.n	80067c8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800679c:	f7fe fd1a 	bl	80051d4 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d803      	bhi.n	80067b4 <HAL_SPI_Receive+0x1d4>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067b2:	d102      	bne.n	80067ba <HAL_SPI_Receive+0x1da>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80067c6:	e01a      	b.n	80067fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1c9      	bne.n	8006766 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa52 	bl	8006c80 <SPI_EndRxTransaction>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	75fb      	strb	r3, [r7, #23]
 80067f4:	e003      	b.n	80067fe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006806:	7dfb      	ldrb	r3, [r7, #23]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	@ 0x30
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800681e:	2301      	movs	r3, #1
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x26>
 8006832:	2302      	movs	r3, #2
 8006834:	e198      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x358>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683e:	f7fe fcc9 	bl	80051d4 <HAL_GetTick>
 8006842:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006854:	887b      	ldrh	r3, [r7, #2]
 8006856:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800685c:	2b01      	cmp	r3, #1
 800685e:	d00f      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x70>
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006866:	d107      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d103      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x68>
 8006870:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006874:	2b04      	cmp	r3, #4
 8006876:	d003      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006878:	2302      	movs	r3, #2
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800687e:	e16d      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x82>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x82>
 800688c:	887b      	ldrh	r3, [r7, #2]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006898:	e160      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d003      	beq.n	80068ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2205      	movs	r2, #5
 80068aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	887a      	ldrh	r2, [r7, #2]
 80068be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	887a      	ldrh	r2, [r7, #2]
 80068c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	887a      	ldrh	r2, [r7, #2]
 80068d6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ee:	2b40      	cmp	r3, #64	@ 0x40
 80068f0:	d007      	beq.n	8006902 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006900:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800690a:	d17c      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_SPI_TransmitReceive+0x10a>
 8006914:	8b7b      	ldrh	r3, [r7, #26]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d16a      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691e:	881a      	ldrh	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692a:	1c9a      	adds	r2, r3, #2
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800693e:	e057      	b.n	80069f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b02      	cmp	r3, #2
 800694c:	d11b      	bne.n	8006986 <HAL_SPI_TransmitReceive+0x176>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d016      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x176>
 8006958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d113      	bne.n	8006986 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	1c9a      	adds	r2, r3, #2
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d119      	bne.n	80069c8 <HAL_SPI_TransmitReceive+0x1b8>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d014      	beq.n	80069c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a8:	b292      	uxth	r2, r2
 80069aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069c4:	2301      	movs	r3, #1
 80069c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069c8:	f7fe fc04 	bl	80051d4 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d80b      	bhi.n	80069f0 <HAL_SPI_TransmitReceive+0x1e0>
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069de:	d007      	beq.n	80069f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80069ee:	e0b5      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1a2      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x130>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d19d      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x130>
 8006a04:	e080      	b.n	8006b08 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x204>
 8006a0e:	8b7b      	ldrh	r3, [r7, #26]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d16f      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	7812      	ldrb	r2, [r2, #0]
 8006a20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a3a:	e05b      	b.n	8006af4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d11c      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x274>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d017      	beq.n	8006a84 <HAL_SPI_TransmitReceive+0x274>
 8006a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d114      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	330c      	adds	r3, #12
 8006a64:	7812      	ldrb	r2, [r2, #0]
 8006a66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d119      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x2b6>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d014      	beq.n	8006ac6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ac6:	f7fe fb85 	bl	80051d4 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d803      	bhi.n	8006ade <HAL_SPI_TransmitReceive+0x2ce>
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006adc:	d102      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x2d4>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d107      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006af2:	e033      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d19e      	bne.n	8006a3c <HAL_SPI_TransmitReceive+0x22c>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d199      	bne.n	8006a3c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f91d 	bl	8006d4c <SPI_EndRxTxTransaction>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006b24:	e01a      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b52:	e003      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3730      	adds	r7, #48	@ 0x30
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b80:	f7fe fb28 	bl	80051d4 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b90:	f7fe fb20 	bl	80051d4 <HAL_GetTick>
 8006b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b96:	4b39      	ldr	r3, [pc, #228]	@ (8006c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	015b      	lsls	r3, r3, #5
 8006b9c:	0d1b      	lsrs	r3, r3, #20
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	fb02 f303 	mul.w	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ba6:	e054      	b.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bae:	d050      	beq.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bb0:	f7fe fb10 	bl	80051d4 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d902      	bls.n	8006bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d13d      	bne.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bde:	d111      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006be8:	d004      	beq.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf2:	d107      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0c:	d10f      	bne.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e017      	b.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d19b      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000040 	.word	0x20000040

08006c80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c94:	d111      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9e:	d004      	beq.n	8006caa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca8:	d107      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc2:	d12a      	bne.n	8006d1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ccc:	d012      	beq.n	8006cf4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2180      	movs	r1, #128	@ 0x80
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff ff49 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d02d      	beq.n	8006d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e026      	b.n	8006d42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff ff36 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01a      	beq.n	8006d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0e:	f043 0220 	orr.w	r2, r3, #32
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e013      	b.n	8006d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	2101      	movs	r1, #1
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff ff23 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d34:	f043 0220 	orr.w	r2, r3, #32
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e000      	b.n	8006d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	2102      	movs	r1, #2
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f7ff ff04 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e032      	b.n	8006de4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006dec <SPI_EndRxTxTransaction+0xa0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1b      	ldr	r2, [pc, #108]	@ (8006df0 <SPI_EndRxTxTransaction+0xa4>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	0d5b      	lsrs	r3, r3, #21
 8006d8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d9c:	d112      	bne.n	8006dc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	2180      	movs	r1, #128	@ 0x80
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff fee1 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d016      	beq.n	8006de2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e00f      	b.n	8006de4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dda:	2b80      	cmp	r3, #128	@ 0x80
 8006ddc:	d0f2      	beq.n	8006dc4 <SPI_EndRxTxTransaction+0x78>
 8006dde:	e000      	b.n	8006de2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006de0:	bf00      	nop
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000040 	.word	0x20000040
 8006df0:	165e9f81 	.word	0x165e9f81

08006df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e041      	b.n	8006e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fd fa66 	bl	80042ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f000 fb42 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d001      	beq.n	8006eac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e046      	b.n	8006f3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a23      	ldr	r2, [pc, #140]	@ (8006f48 <HAL_TIM_Base_Start+0xb4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d022      	beq.n	8006f04 <HAL_TIM_Base_Start+0x70>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec6:	d01d      	beq.n	8006f04 <HAL_TIM_Base_Start+0x70>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f4c <HAL_TIM_Base_Start+0xb8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d018      	beq.n	8006f04 <HAL_TIM_Base_Start+0x70>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f50 <HAL_TIM_Base_Start+0xbc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <HAL_TIM_Base_Start+0x70>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f54 <HAL_TIM_Base_Start+0xc0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00e      	beq.n	8006f04 <HAL_TIM_Base_Start+0x70>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1b      	ldr	r2, [pc, #108]	@ (8006f58 <HAL_TIM_Base_Start+0xc4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d009      	beq.n	8006f04 <HAL_TIM_Base_Start+0x70>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a19      	ldr	r2, [pc, #100]	@ (8006f5c <HAL_TIM_Base_Start+0xc8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <HAL_TIM_Base_Start+0x70>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a18      	ldr	r2, [pc, #96]	@ (8006f60 <HAL_TIM_Base_Start+0xcc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d111      	bne.n	8006f28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b06      	cmp	r3, #6
 8006f14:	d010      	beq.n	8006f38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0201 	orr.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f26:	e007      	b.n	8006f38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40010400 	.word	0x40010400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40001800 	.word	0x40001800

08006f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e041      	b.n	8006ffa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f839 	bl	8007002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f000 fa8a 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_TIM_PWM_Start+0x24>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	e022      	b.n	8007082 <HAL_TIM_PWM_Start+0x6a>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d109      	bne.n	8007056 <HAL_TIM_PWM_Start+0x3e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	e015      	b.n	8007082 <HAL_TIM_PWM_Start+0x6a>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b08      	cmp	r3, #8
 800705a:	d109      	bne.n	8007070 <HAL_TIM_PWM_Start+0x58>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	bf14      	ite	ne
 8007068:	2301      	movne	r3, #1
 800706a:	2300      	moveq	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	e008      	b.n	8007082 <HAL_TIM_PWM_Start+0x6a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b01      	cmp	r3, #1
 800707a:	bf14      	ite	ne
 800707c:	2301      	movne	r3, #1
 800707e:	2300      	moveq	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e07c      	b.n	8007184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <HAL_TIM_PWM_Start+0x82>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007098:	e013      	b.n	80070c2 <HAL_TIM_PWM_Start+0xaa>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d104      	bne.n	80070aa <HAL_TIM_PWM_Start+0x92>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070a8:	e00b      	b.n	80070c2 <HAL_TIM_PWM_Start+0xaa>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_PWM_Start+0xa2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070b8:	e003      	b.n	80070c2 <HAL_TIM_PWM_Start+0xaa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fcec 	bl	8007aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2d      	ldr	r2, [pc, #180]	@ (800718c <HAL_TIM_PWM_Start+0x174>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_TIM_PWM_Start+0xcc>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a2c      	ldr	r2, [pc, #176]	@ (8007190 <HAL_TIM_PWM_Start+0x178>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d101      	bne.n	80070e8 <HAL_TIM_PWM_Start+0xd0>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <HAL_TIM_PWM_Start+0xd2>
 80070e8:	2300      	movs	r3, #0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a22      	ldr	r2, [pc, #136]	@ (800718c <HAL_TIM_PWM_Start+0x174>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d022      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007110:	d01d      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1f      	ldr	r2, [pc, #124]	@ (8007194 <HAL_TIM_PWM_Start+0x17c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d018      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1d      	ldr	r2, [pc, #116]	@ (8007198 <HAL_TIM_PWM_Start+0x180>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1c      	ldr	r2, [pc, #112]	@ (800719c <HAL_TIM_PWM_Start+0x184>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00e      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a16      	ldr	r2, [pc, #88]	@ (8007190 <HAL_TIM_PWM_Start+0x178>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d009      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <HAL_TIM_PWM_Start+0x188>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d004      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <HAL_TIM_PWM_Start+0x18c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d111      	bne.n	8007172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b06      	cmp	r3, #6
 800715e:	d010      	beq.n	8007182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007170:	e007      	b.n	8007182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40001800 	.word	0x40001800

080071a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e0ae      	b.n	8007324 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b0c      	cmp	r3, #12
 80071d2:	f200 809f 	bhi.w	8007314 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071d6:	a201      	add	r2, pc, #4	@ (adr r2, 80071dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007211 	.word	0x08007211
 80071e0:	08007315 	.word	0x08007315
 80071e4:	08007315 	.word	0x08007315
 80071e8:	08007315 	.word	0x08007315
 80071ec:	08007251 	.word	0x08007251
 80071f0:	08007315 	.word	0x08007315
 80071f4:	08007315 	.word	0x08007315
 80071f8:	08007315 	.word	0x08007315
 80071fc:	08007293 	.word	0x08007293
 8007200:	08007315 	.word	0x08007315
 8007204:	08007315 	.word	0x08007315
 8007208:	08007315 	.word	0x08007315
 800720c:	080072d3 	.word	0x080072d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f9fc 	bl	8007614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0208 	orr.w	r2, r2, #8
 800722a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0204 	bic.w	r2, r2, #4
 800723a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6999      	ldr	r1, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	619a      	str	r2, [r3, #24]
      break;
 800724e:	e064      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fa4c 	bl	80076f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800726a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800727a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6999      	ldr	r1, [r3, #24]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	619a      	str	r2, [r3, #24]
      break;
 8007290:	e043      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 faa1 	bl	80077e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0208 	orr.w	r2, r2, #8
 80072ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0204 	bic.w	r2, r2, #4
 80072bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69d9      	ldr	r1, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	61da      	str	r2, [r3, #28]
      break;
 80072d0:	e023      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 faf5 	bl	80078c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69d9      	ldr	r1, [r3, #28]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	021a      	lsls	r2, r3, #8
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	61da      	str	r2, [r3, #28]
      break;
 8007312:	e002      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_TIM_ConfigClockSource+0x1c>
 8007344:	2302      	movs	r3, #2
 8007346:	e0b4      	b.n	80074b2 <HAL_TIM_ConfigClockSource+0x186>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800736e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007380:	d03e      	beq.n	8007400 <HAL_TIM_ConfigClockSource+0xd4>
 8007382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007386:	f200 8087 	bhi.w	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 800738a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800738e:	f000 8086 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x172>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007396:	d87f      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b70      	cmp	r3, #112	@ 0x70
 800739a:	d01a      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0xa6>
 800739c:	2b70      	cmp	r3, #112	@ 0x70
 800739e:	d87b      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b60      	cmp	r3, #96	@ 0x60
 80073a2:	d050      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x11a>
 80073a4:	2b60      	cmp	r3, #96	@ 0x60
 80073a6:	d877      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b50      	cmp	r3, #80	@ 0x50
 80073aa:	d03c      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0xfa>
 80073ac:	2b50      	cmp	r3, #80	@ 0x50
 80073ae:	d873      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b40      	cmp	r3, #64	@ 0x40
 80073b2:	d058      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x13a>
 80073b4:	2b40      	cmp	r3, #64	@ 0x40
 80073b6:	d86f      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b30      	cmp	r3, #48	@ 0x30
 80073ba:	d064      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073bc:	2b30      	cmp	r3, #48	@ 0x30
 80073be:	d86b      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d060      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d867      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d05c      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d05a      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073d0:	e062      	b.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073e2:	f000 fb41 	bl	8007a68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
      break;
 80073fe:	e04f      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007410:	f000 fb2a 	bl	8007a68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007422:	609a      	str	r2, [r3, #8]
      break;
 8007424:	e03c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007432:	461a      	mov	r2, r3
 8007434:	f000 fa9e 	bl	8007974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2150      	movs	r1, #80	@ 0x50
 800743e:	4618      	mov	r0, r3
 8007440:	f000 faf7 	bl	8007a32 <TIM_ITRx_SetConfig>
      break;
 8007444:	e02c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007452:	461a      	mov	r2, r3
 8007454:	f000 fabd 	bl	80079d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2160      	movs	r1, #96	@ 0x60
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fae7 	bl	8007a32 <TIM_ITRx_SetConfig>
      break;
 8007464:	e01c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007472:	461a      	mov	r2, r3
 8007474:	f000 fa7e 	bl	8007974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2140      	movs	r1, #64	@ 0x40
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fad7 	bl	8007a32 <TIM_ITRx_SetConfig>
      break;
 8007484:	e00c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f000 face 	bl	8007a32 <TIM_ITRx_SetConfig>
      break;
 8007496:	e003      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
      break;
 800749c:	e000      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800749e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a46      	ldr	r2, [pc, #280]	@ (80075e8 <TIM_Base_SetConfig+0x12c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074da:	d00f      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a43      	ldr	r2, [pc, #268]	@ (80075ec <TIM_Base_SetConfig+0x130>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00b      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a42      	ldr	r2, [pc, #264]	@ (80075f0 <TIM_Base_SetConfig+0x134>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d007      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a41      	ldr	r2, [pc, #260]	@ (80075f4 <TIM_Base_SetConfig+0x138>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a40      	ldr	r2, [pc, #256]	@ (80075f8 <TIM_Base_SetConfig+0x13c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a35      	ldr	r2, [pc, #212]	@ (80075e8 <TIM_Base_SetConfig+0x12c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d02b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751c:	d027      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a32      	ldr	r2, [pc, #200]	@ (80075ec <TIM_Base_SetConfig+0x130>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d023      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a31      	ldr	r2, [pc, #196]	@ (80075f0 <TIM_Base_SetConfig+0x134>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d01f      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a30      	ldr	r2, [pc, #192]	@ (80075f4 <TIM_Base_SetConfig+0x138>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2f      	ldr	r2, [pc, #188]	@ (80075f8 <TIM_Base_SetConfig+0x13c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d017      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2e      	ldr	r2, [pc, #184]	@ (80075fc <TIM_Base_SetConfig+0x140>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2d      	ldr	r2, [pc, #180]	@ (8007600 <TIM_Base_SetConfig+0x144>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00f      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a2c      	ldr	r2, [pc, #176]	@ (8007604 <TIM_Base_SetConfig+0x148>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a2b      	ldr	r2, [pc, #172]	@ (8007608 <TIM_Base_SetConfig+0x14c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d007      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a2a      	ldr	r2, [pc, #168]	@ (800760c <TIM_Base_SetConfig+0x150>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a29      	ldr	r2, [pc, #164]	@ (8007610 <TIM_Base_SetConfig+0x154>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d108      	bne.n	8007580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a10      	ldr	r2, [pc, #64]	@ (80075e8 <TIM_Base_SetConfig+0x12c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0xf8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a12      	ldr	r2, [pc, #72]	@ (80075f8 <TIM_Base_SetConfig+0x13c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d103      	bne.n	80075bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d105      	bne.n	80075da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f023 0201 	bic.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	611a      	str	r2, [r3, #16]
  }
}
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40010000 	.word	0x40010000
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800
 80075f4:	40000c00 	.word	0x40000c00
 80075f8:	40010400 	.word	0x40010400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800
 8007608:	40001800 	.word	0x40001800
 800760c:	40001c00 	.word	0x40001c00
 8007610:	40002000 	.word	0x40002000

08007614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	f023 0201 	bic.w	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0302 	bic.w	r3, r3, #2
 800765c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a20      	ldr	r2, [pc, #128]	@ (80076ec <TIM_OC1_SetConfig+0xd8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC1_SetConfig+0x64>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1f      	ldr	r2, [pc, #124]	@ (80076f0 <TIM_OC1_SetConfig+0xdc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d10c      	bne.n	8007692 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0308 	bic.w	r3, r3, #8
 800767e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 0304 	bic.w	r3, r3, #4
 8007690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a15      	ldr	r2, [pc, #84]	@ (80076ec <TIM_OC1_SetConfig+0xd8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_OC1_SetConfig+0x8e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a14      	ldr	r2, [pc, #80]	@ (80076f0 <TIM_OC1_SetConfig+0xdc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d111      	bne.n	80076c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40010400 	.word	0x40010400

080076f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	f023 0210 	bic.w	r2, r3, #16
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800772a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f023 0320 	bic.w	r3, r3, #32
 800773e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a22      	ldr	r2, [pc, #136]	@ (80077d8 <TIM_OC2_SetConfig+0xe4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d003      	beq.n	800775c <TIM_OC2_SetConfig+0x68>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a21      	ldr	r2, [pc, #132]	@ (80077dc <TIM_OC2_SetConfig+0xe8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10d      	bne.n	8007778 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007776:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a17      	ldr	r2, [pc, #92]	@ (80077d8 <TIM_OC2_SetConfig+0xe4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC2_SetConfig+0x94>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a16      	ldr	r2, [pc, #88]	@ (80077dc <TIM_OC2_SetConfig+0xe8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d113      	bne.n	80077b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800778e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40010400 	.word	0x40010400

080077e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a21      	ldr	r2, [pc, #132]	@ (80078c0 <TIM_OC3_SetConfig+0xe0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d003      	beq.n	8007846 <TIM_OC3_SetConfig+0x66>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a20      	ldr	r2, [pc, #128]	@ (80078c4 <TIM_OC3_SetConfig+0xe4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d10d      	bne.n	8007862 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800784c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a16      	ldr	r2, [pc, #88]	@ (80078c0 <TIM_OC3_SetConfig+0xe0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d003      	beq.n	8007872 <TIM_OC3_SetConfig+0x92>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a15      	ldr	r2, [pc, #84]	@ (80078c4 <TIM_OC3_SetConfig+0xe4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d113      	bne.n	800789a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400

080078c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	031b      	lsls	r3, r3, #12
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a12      	ldr	r2, [pc, #72]	@ (800796c <TIM_OC4_SetConfig+0xa4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_OC4_SetConfig+0x68>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a11      	ldr	r2, [pc, #68]	@ (8007970 <TIM_OC4_SetConfig+0xa8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d109      	bne.n	8007944 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	019b      	lsls	r3, r3, #6
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40010000 	.word	0x40010000
 8007970:	40010400 	.word	0x40010400

08007974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	f023 0201 	bic.w	r2, r3, #1
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800799e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f023 030a 	bic.w	r3, r3, #10
 80079b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b087      	sub	sp, #28
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	f023 0210 	bic.w	r2, r3, #16
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	031b      	lsls	r3, r3, #12
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	621a      	str	r2, [r3, #32]
}
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f043 0307 	orr.w	r3, r3, #7
 8007a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	609a      	str	r2, [r3, #8]
}
 8007a5c:	bf00      	nop
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	021a      	lsls	r2, r3, #8
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	609a      	str	r2, [r3, #8]
}
 8007a9c:	bf00      	nop
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	2201      	movs	r2, #1
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	401a      	ands	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1a      	ldr	r2, [r3, #32]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	621a      	str	r2, [r3, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
	...

08007af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e05a      	b.n	8007bc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a21      	ldr	r2, [pc, #132]	@ (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d022      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b58:	d01d      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d018      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a1a      	ldr	r2, [pc, #104]	@ (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00e      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a18      	ldr	r2, [pc, #96]	@ (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d009      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a17      	ldr	r2, [pc, #92]	@ (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a15      	ldr	r2, [pc, #84]	@ (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d10c      	bne.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40000c00 	.word	0x40000c00
 8007be0:	40010400 	.word	0x40010400
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40001800 	.word	0x40001800

08007bec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e03d      	b.n	8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e042      	b.n	8007d28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fc fb74 	bl	80043a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2224      	movs	r2, #36	@ 0x24
 8007cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fdbd 	bl	8008854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695a      	ldr	r2, [r3, #20]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08a      	sub	sp, #40	@ 0x28
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d175      	bne.n	8007e3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_UART_Transmit+0x2c>
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e06e      	b.n	8007e3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2221      	movs	r2, #33	@ 0x21
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d6e:	f7fd fa31 	bl	80051d4 <HAL_GetTick>
 8007d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d88:	d108      	bne.n	8007d9c <HAL_UART_Transmit+0x6c>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	e003      	b.n	8007da4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007da4:	e02e      	b.n	8007e04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2200      	movs	r2, #0
 8007dae:	2180      	movs	r1, #128	@ 0x80
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fb1f 	bl	80083f4 <UART_WaitOnFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e03a      	b.n	8007e3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ddc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	3302      	adds	r3, #2
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	e007      	b.n	8007df6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	3301      	adds	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1cb      	bne.n	8007da6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2200      	movs	r2, #0
 8007e16:	2140      	movs	r1, #64	@ 0x40
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 faeb 	bl	80083f4 <UART_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e006      	b.n	8007e3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e000      	b.n	8007e3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007e3c:	2302      	movs	r3, #2
  }
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3720      	adds	r7, #32
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d112      	bne.n	8007e86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <HAL_UART_Receive_IT+0x26>
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e00b      	b.n	8007e88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fb12 	bl	80084a6 <UART_Start_Receive_IT>
 8007e82:	4603      	mov	r3, r0
 8007e84:	e000      	b.n	8007e88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007e86:	2302      	movs	r3, #2
  }
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b0ba      	sub	sp, #232	@ 0xe8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10f      	bne.n	8007ef6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d009      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x66>
 8007ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fbf2 	bl	80086d8 <UART_Receive_IT>
      return;
 8007ef4:	e25b      	b.n	80083ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80de 	beq.w	80080bc <HAL_UART_IRQHandler+0x22c>
 8007f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80d1 	beq.w	80080bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00b      	beq.n	8007f3e <HAL_UART_IRQHandler+0xae>
 8007f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f36:	f043 0201 	orr.w	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <HAL_UART_IRQHandler+0xd2>
 8007f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5a:	f043 0202 	orr.w	r2, r3, #2
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <HAL_UART_IRQHandler+0xf6>
 8007f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7e:	f043 0204 	orr.w	r2, r3, #4
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d011      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x126>
 8007f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d105      	bne.n	8007faa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fae:	f043 0208 	orr.w	r2, r3, #8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 81f2 	beq.w	80083a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d008      	beq.n	8007fde <HAL_UART_IRQHandler+0x14e>
 8007fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fb7d 	bl	80086d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe8:	2b40      	cmp	r3, #64	@ 0x40
 8007fea:	bf0c      	ite	eq
 8007fec:	2301      	moveq	r3, #1
 8007fee:	2300      	movne	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <HAL_UART_IRQHandler+0x17a>
 8008002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d04f      	beq.n	80080aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa85 	bl	800851a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801a:	2b40      	cmp	r3, #64	@ 0x40
 800801c:	d141      	bne.n	80080a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3314      	adds	r3, #20
 8008024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800803c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3314      	adds	r3, #20
 8008046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800804a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800804e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1d9      	bne.n	800801e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d013      	beq.n	800809a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008076:	4a7e      	ldr	r2, [pc, #504]	@ (8008270 <HAL_UART_IRQHandler+0x3e0>)
 8008078:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807e:	4618      	mov	r0, r3
 8008080:	f7fd fa59 	bl	8005536 <HAL_DMA_Abort_IT>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d016      	beq.n	80080b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008098:	e00e      	b.n	80080b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f994 	bl	80083c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a0:	e00a      	b.n	80080b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f990 	bl	80083c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a8:	e006      	b.n	80080b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f98c 	bl	80083c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80080b6:	e175      	b.n	80083a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	bf00      	nop
    return;
 80080ba:	e173      	b.n	80083a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	f040 814f 	bne.w	8008364 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8148 	beq.w	8008364 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8141 	beq.w	8008364 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080e2:	2300      	movs	r3, #0
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60bb      	str	r3, [r7, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	60bb      	str	r3, [r7, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008102:	2b40      	cmp	r3, #64	@ 0x40
 8008104:	f040 80b6 	bne.w	8008274 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8145 	beq.w	80083a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008126:	429a      	cmp	r2, r3
 8008128:	f080 813e 	bcs.w	80083a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008132:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800813e:	f000 8088 	beq.w	8008252 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800815c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800816e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800817a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1d9      	bne.n	8008142 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3314      	adds	r3, #20
 8008194:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800819e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3314      	adds	r3, #20
 80081ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80081b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80081ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e1      	bne.n	800818e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3314      	adds	r3, #20
 80081d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3314      	adds	r3, #20
 80081ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e3      	bne.n	80081ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	330c      	adds	r3, #12
 8008216:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800821a:	e853 3f00 	ldrex	r3, [r3]
 800821e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008222:	f023 0310 	bic.w	r3, r3, #16
 8008226:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008234:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008236:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800823a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e3      	bne.n	8008210 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800824c:	4618      	mov	r0, r3
 800824e:	f7fd f902 	bl	8005456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2202      	movs	r2, #2
 8008256:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008260:	b29b      	uxth	r3, r3
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	b29b      	uxth	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f8b7 	bl	80083dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800826e:	e09b      	b.n	80083a8 <HAL_UART_IRQHandler+0x518>
 8008270:	080085e1 	.word	0x080085e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800827c:	b29b      	uxth	r3, r3
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 808e 	beq.w	80083ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8089 	beq.w	80083ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	330c      	adds	r3, #12
 80082ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80082be:	647a      	str	r2, [r7, #68]	@ 0x44
 80082c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e3      	bne.n	800829a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3314      	adds	r3, #20
 80082d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	623b      	str	r3, [r7, #32]
   return(result);
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f023 0301 	bic.w	r3, r3, #1
 80082e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3314      	adds	r3, #20
 80082f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80082f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e3      	bne.n	80082d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	330c      	adds	r3, #12
 800831e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	60fb      	str	r3, [r7, #12]
   return(result);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0310 	bic.w	r3, r3, #16
 800832e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	330c      	adds	r3, #12
 8008338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800833c:	61fa      	str	r2, [r7, #28]
 800833e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	69b9      	ldr	r1, [r7, #24]
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	617b      	str	r3, [r7, #20]
   return(result);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e3      	bne.n	8008318 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f83d 	bl	80083dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008362:	e023      	b.n	80083ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <HAL_UART_IRQHandler+0x4f4>
 8008370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f943 	bl	8008608 <UART_Transmit_IT>
    return;
 8008382:	e014      	b.n	80083ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00e      	beq.n	80083ae <HAL_UART_IRQHandler+0x51e>
 8008390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f983 	bl	80086a8 <UART_EndTransmit_IT>
    return;
 80083a2:	e004      	b.n	80083ae <HAL_UART_IRQHandler+0x51e>
    return;
 80083a4:	bf00      	nop
 80083a6:	e002      	b.n	80083ae <HAL_UART_IRQHandler+0x51e>
      return;
 80083a8:	bf00      	nop
 80083aa:	e000      	b.n	80083ae <HAL_UART_IRQHandler+0x51e>
      return;
 80083ac:	bf00      	nop
  }
}
 80083ae:	37e8      	adds	r7, #232	@ 0xe8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008404:	e03b      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800840c:	d037      	beq.n	800847e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800840e:	f7fc fee1 	bl	80051d4 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	6a3a      	ldr	r2, [r7, #32]
 800841a:	429a      	cmp	r2, r3
 800841c:	d302      	bcc.n	8008424 <UART_WaitOnFlagUntilTimeout+0x30>
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e03a      	b.n	800849e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	d023      	beq.n	800847e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b80      	cmp	r3, #128	@ 0x80
 800843a:	d020      	beq.n	800847e <UART_WaitOnFlagUntilTimeout+0x8a>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b40      	cmp	r3, #64	@ 0x40
 8008440:	d01d      	beq.n	800847e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b08      	cmp	r3, #8
 800844e:	d116      	bne.n	800847e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f857 	bl	800851a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2208      	movs	r2, #8
 8008470:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e00f      	b.n	800849e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4013      	ands	r3, r2
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	429a      	cmp	r2, r3
 800848c:	bf0c      	ite	eq
 800848e:	2301      	moveq	r3, #1
 8008490:	2300      	movne	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	461a      	mov	r2, r3
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	429a      	cmp	r2, r3
 800849a:	d0b4      	beq.n	8008406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	4613      	mov	r3, r2
 80084b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	88fa      	ldrh	r2, [r7, #6]
 80084be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2222      	movs	r2, #34	@ 0x22
 80084d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d007      	beq.n	80084ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695a      	ldr	r2, [r3, #20]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0220 	orr.w	r2, r2, #32
 800850a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800851a:	b480      	push	{r7}
 800851c:	b095      	sub	sp, #84	@ 0x54
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	330c      	adds	r3, #12
 8008528:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	330c      	adds	r3, #12
 8008540:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008542:	643a      	str	r2, [r7, #64]	@ 0x40
 8008544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008548:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e5      	bne.n	8008522 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3314      	adds	r3, #20
 800855c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	61fb      	str	r3, [r7, #28]
   return(result);
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3314      	adds	r3, #20
 8008574:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008578:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800857c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e5      	bne.n	8008556 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858e:	2b01      	cmp	r3, #1
 8008590:	d119      	bne.n	80085c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	330c      	adds	r3, #12
 8008598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f023 0310 	bic.w	r3, r3, #16
 80085a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	330c      	adds	r3, #12
 80085b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085b2:	61ba      	str	r2, [r7, #24]
 80085b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6979      	ldr	r1, [r7, #20]
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	613b      	str	r3, [r7, #16]
   return(result);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80085d4:	bf00      	nop
 80085d6:	3754      	adds	r7, #84	@ 0x54
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff fee4 	bl	80083c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008600:	bf00      	nop
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b21      	cmp	r3, #33	@ 0x21
 800861a:	d13e      	bne.n	800869a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008624:	d114      	bne.n	8008650 <UART_Transmit_IT+0x48>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d110      	bne.n	8008650 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	1c9a      	adds	r2, r3, #2
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	621a      	str	r2, [r3, #32]
 800864e:	e008      	b.n	8008662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	1c59      	adds	r1, r3, #1
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6211      	str	r1, [r2, #32]
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008666:	b29b      	uxth	r3, r3
 8008668:	3b01      	subs	r3, #1
 800866a:	b29b      	uxth	r3, r3
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	4619      	mov	r1, r3
 8008670:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10f      	bne.n	8008696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	e000      	b.n	800869c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800869a:	2302      	movs	r3, #2
  }
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff fe73 	bl	80083b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08c      	sub	sp, #48	@ 0x30
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b22      	cmp	r3, #34	@ 0x22
 80086ea:	f040 80ae 	bne.w	800884a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f6:	d117      	bne.n	8008728 <UART_Receive_IT+0x50>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d113      	bne.n	8008728 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008700:	2300      	movs	r3, #0
 8008702:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008716:	b29a      	uxth	r2, r3
 8008718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	1c9a      	adds	r2, r3, #2
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	629a      	str	r2, [r3, #40]	@ 0x28
 8008726:	e026      	b.n	8008776 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800873a:	d007      	beq.n	800874c <UART_Receive_IT+0x74>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <UART_Receive_IT+0x82>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d106      	bne.n	800875a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	b2da      	uxtb	r2, r3
 8008754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	e008      	b.n	800876c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008766:	b2da      	uxtb	r2, r3
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29b      	uxth	r3, r3
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4619      	mov	r1, r3
 8008784:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008786:	2b00      	cmp	r3, #0
 8008788:	d15d      	bne.n	8008846 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0220 	bic.w	r2, r2, #32
 8008798:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695a      	ldr	r2, [r3, #20]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0201 	bic.w	r2, r2, #1
 80087b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d135      	bne.n	800883c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	330c      	adds	r3, #12
 80087dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	613b      	str	r3, [r7, #16]
   return(result);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f023 0310 	bic.w	r3, r3, #16
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f6:	623a      	str	r2, [r7, #32]
 80087f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	69f9      	ldr	r1, [r7, #28]
 80087fc:	6a3a      	ldr	r2, [r7, #32]
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	61bb      	str	r3, [r7, #24]
   return(result);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e5      	bne.n	80087d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b10      	cmp	r3, #16
 8008816:	d10a      	bne.n	800882e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff fdd1 	bl	80083dc <HAL_UARTEx_RxEventCallback>
 800883a:	e002      	b.n	8008842 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7fa fa7f 	bl	8002d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	e002      	b.n	800884c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	e000      	b.n	800884c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800884a:	2302      	movs	r3, #2
  }
}
 800884c:	4618      	mov	r0, r3
 800884e:	3730      	adds	r7, #48	@ 0x30
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008858:	b0c0      	sub	sp, #256	@ 0x100
 800885a:	af00      	add	r7, sp, #0
 800885c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008870:	68d9      	ldr	r1, [r3, #12]
 8008872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	ea40 0301 	orr.w	r3, r0, r1
 800887c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800887e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	431a      	orrs	r2, r3
 800888c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	431a      	orrs	r2, r3
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088ac:	f021 010c 	bic.w	r1, r1, #12
 80088b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088ba:	430b      	orrs	r3, r1
 80088bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ce:	6999      	ldr	r1, [r3, #24]
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	ea40 0301 	orr.w	r3, r0, r1
 80088da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b8f      	ldr	r3, [pc, #572]	@ (8008b20 <UART_SetConfig+0x2cc>)
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d005      	beq.n	80088f4 <UART_SetConfig+0xa0>
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008b24 <UART_SetConfig+0x2d0>)
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d104      	bne.n	80088fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088f4:	f7fd fc94 	bl	8006220 <HAL_RCC_GetPCLK2Freq>
 80088f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80088fc:	e003      	b.n	8008906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088fe:	f7fd fc7b 	bl	80061f8 <HAL_RCC_GetPCLK1Freq>
 8008902:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008910:	f040 810c 	bne.w	8008b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008918:	2200      	movs	r2, #0
 800891a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800891e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008926:	4622      	mov	r2, r4
 8008928:	462b      	mov	r3, r5
 800892a:	1891      	adds	r1, r2, r2
 800892c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800892e:	415b      	adcs	r3, r3
 8008930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008936:	4621      	mov	r1, r4
 8008938:	eb12 0801 	adds.w	r8, r2, r1
 800893c:	4629      	mov	r1, r5
 800893e:	eb43 0901 	adc.w	r9, r3, r1
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800894e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008956:	4690      	mov	r8, r2
 8008958:	4699      	mov	r9, r3
 800895a:	4623      	mov	r3, r4
 800895c:	eb18 0303 	adds.w	r3, r8, r3
 8008960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008964:	462b      	mov	r3, r5
 8008966:	eb49 0303 	adc.w	r3, r9, r3
 800896a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800897a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800897e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008982:	460b      	mov	r3, r1
 8008984:	18db      	adds	r3, r3, r3
 8008986:	653b      	str	r3, [r7, #80]	@ 0x50
 8008988:	4613      	mov	r3, r2
 800898a:	eb42 0303 	adc.w	r3, r2, r3
 800898e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008998:	f7f8 f986 	bl	8000ca8 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4b61      	ldr	r3, [pc, #388]	@ (8008b28 <UART_SetConfig+0x2d4>)
 80089a2:	fba3 2302 	umull	r2, r3, r3, r2
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	011c      	lsls	r4, r3, #4
 80089aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089bc:	4642      	mov	r2, r8
 80089be:	464b      	mov	r3, r9
 80089c0:	1891      	adds	r1, r2, r2
 80089c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089c4:	415b      	adcs	r3, r3
 80089c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089cc:	4641      	mov	r1, r8
 80089ce:	eb12 0a01 	adds.w	sl, r2, r1
 80089d2:	4649      	mov	r1, r9
 80089d4:	eb43 0b01 	adc.w	fp, r3, r1
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089ec:	4692      	mov	sl, r2
 80089ee:	469b      	mov	fp, r3
 80089f0:	4643      	mov	r3, r8
 80089f2:	eb1a 0303 	adds.w	r3, sl, r3
 80089f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089fa:	464b      	mov	r3, r9
 80089fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008a00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	18db      	adds	r3, r3, r3
 8008a1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a1e:	4613      	mov	r3, r2
 8008a20:	eb42 0303 	adc.w	r3, r2, r3
 8008a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a2e:	f7f8 f93b 	bl	8000ca8 <__aeabi_uldivmod>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	4b3b      	ldr	r3, [pc, #236]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	2264      	movs	r2, #100	@ 0x64
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	1acb      	subs	r3, r1, r3
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a4e:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008a50:	fba3 2302 	umull	r2, r3, r3, r2
 8008a54:	095b      	lsrs	r3, r3, #5
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a5c:	441c      	add	r4, r3
 8008a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a70:	4642      	mov	r2, r8
 8008a72:	464b      	mov	r3, r9
 8008a74:	1891      	adds	r1, r2, r2
 8008a76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a78:	415b      	adcs	r3, r3
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a80:	4641      	mov	r1, r8
 8008a82:	1851      	adds	r1, r2, r1
 8008a84:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a86:	4649      	mov	r1, r9
 8008a88:	414b      	adcs	r3, r1
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a98:	4659      	mov	r1, fp
 8008a9a:	00cb      	lsls	r3, r1, #3
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aa2:	4651      	mov	r1, sl
 8008aa4:	00ca      	lsls	r2, r1, #3
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4642      	mov	r2, r8
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ab4:	464b      	mov	r3, r9
 8008ab6:	460a      	mov	r2, r1
 8008ab8:	eb42 0303 	adc.w	r3, r2, r3
 8008abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008acc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	18db      	adds	r3, r3, r3
 8008ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ada:	4613      	mov	r3, r2
 8008adc:	eb42 0303 	adc.w	r3, r2, r3
 8008ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008aea:	f7f8 f8dd 	bl	8000ca8 <__aeabi_uldivmod>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008af4:	fba3 1302 	umull	r1, r3, r3, r2
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	2164      	movs	r1, #100	@ 0x64
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	3332      	adds	r3, #50	@ 0x32
 8008b06:	4a08      	ldr	r2, [pc, #32]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008b08:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	f003 0207 	and.w	r2, r3, #7
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4422      	add	r2, r4
 8008b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b1c:	e106      	b.n	8008d2c <UART_SetConfig+0x4d8>
 8008b1e:	bf00      	nop
 8008b20:	40011000 	.word	0x40011000
 8008b24:	40011400 	.word	0x40011400
 8008b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b30:	2200      	movs	r2, #0
 8008b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b3e:	4642      	mov	r2, r8
 8008b40:	464b      	mov	r3, r9
 8008b42:	1891      	adds	r1, r2, r2
 8008b44:	6239      	str	r1, [r7, #32]
 8008b46:	415b      	adcs	r3, r3
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b4e:	4641      	mov	r1, r8
 8008b50:	1854      	adds	r4, r2, r1
 8008b52:	4649      	mov	r1, r9
 8008b54:	eb43 0501 	adc.w	r5, r3, r1
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	00eb      	lsls	r3, r5, #3
 8008b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b66:	00e2      	lsls	r2, r4, #3
 8008b68:	4614      	mov	r4, r2
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	4643      	mov	r3, r8
 8008b6e:	18e3      	adds	r3, r4, r3
 8008b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b74:	464b      	mov	r3, r9
 8008b76:	eb45 0303 	adc.w	r3, r5, r3
 8008b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	008b      	lsls	r3, r1, #2
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	008a      	lsls	r2, r1, #2
 8008ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bac:	f7f8 f87c 	bl	8000ca8 <__aeabi_uldivmod>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4b60      	ldr	r3, [pc, #384]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bba:	095b      	lsrs	r3, r3, #5
 8008bbc:	011c      	lsls	r4, r3, #4
 8008bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	1891      	adds	r1, r2, r2
 8008bd6:	61b9      	str	r1, [r7, #24]
 8008bd8:	415b      	adcs	r3, r3
 8008bda:	61fb      	str	r3, [r7, #28]
 8008bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008be0:	4641      	mov	r1, r8
 8008be2:	1851      	adds	r1, r2, r1
 8008be4:	6139      	str	r1, [r7, #16]
 8008be6:	4649      	mov	r1, r9
 8008be8:	414b      	adcs	r3, r1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	00cb      	lsls	r3, r1, #3
 8008bfc:	4651      	mov	r1, sl
 8008bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c02:	4651      	mov	r1, sl
 8008c04:	00ca      	lsls	r2, r1, #3
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c14:	464b      	mov	r3, r9
 8008c16:	460a      	mov	r2, r1
 8008c18:	eb42 0303 	adc.w	r3, r2, r3
 8008c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c38:	4649      	mov	r1, r9
 8008c3a:	008b      	lsls	r3, r1, #2
 8008c3c:	4641      	mov	r1, r8
 8008c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c42:	4641      	mov	r1, r8
 8008c44:	008a      	lsls	r2, r1, #2
 8008c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c4a:	f7f8 f82d 	bl	8000ca8 <__aeabi_uldivmod>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	4b38      	ldr	r3, [pc, #224]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008c56:	fba3 2301 	umull	r2, r3, r3, r1
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	2264      	movs	r2, #100	@ 0x64
 8008c5e:	fb02 f303 	mul.w	r3, r2, r3
 8008c62:	1acb      	subs	r3, r1, r3
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	3332      	adds	r3, #50	@ 0x32
 8008c68:	4a33      	ldr	r2, [pc, #204]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c74:	441c      	add	r4, r3
 8008c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c84:	4642      	mov	r2, r8
 8008c86:	464b      	mov	r3, r9
 8008c88:	1891      	adds	r1, r2, r2
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	415b      	adcs	r3, r3
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c94:	4641      	mov	r1, r8
 8008c96:	1851      	adds	r1, r2, r1
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	414b      	adcs	r3, r1
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cac:	4659      	mov	r1, fp
 8008cae:	00cb      	lsls	r3, r1, #3
 8008cb0:	4651      	mov	r1, sl
 8008cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cb6:	4651      	mov	r1, sl
 8008cb8:	00ca      	lsls	r2, r1, #3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	460a      	mov	r2, r1
 8008cca:	eb42 0303 	adc.w	r3, r2, r3
 8008cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cda:	667a      	str	r2, [r7, #100]	@ 0x64
 8008cdc:	f04f 0200 	mov.w	r2, #0
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008ce8:	4649      	mov	r1, r9
 8008cea:	008b      	lsls	r3, r1, #2
 8008cec:	4641      	mov	r1, r8
 8008cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cf2:	4641      	mov	r1, r8
 8008cf4:	008a      	lsls	r2, r1, #2
 8008cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008cfa:	f7f7 ffd5 	bl	8000ca8 <__aeabi_uldivmod>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4b0d      	ldr	r3, [pc, #52]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008d04:	fba3 1302 	umull	r1, r3, r3, r2
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	2164      	movs	r1, #100	@ 0x64
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	3332      	adds	r3, #50	@ 0x32
 8008d16:	4a08      	ldr	r2, [pc, #32]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008d18:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1c:	095b      	lsrs	r3, r3, #5
 8008d1e:	f003 020f 	and.w	r2, r3, #15
 8008d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4422      	add	r2, r4
 8008d2a:	609a      	str	r2, [r3, #8]
}
 8008d2c:	bf00      	nop
 8008d2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d32:	46bd      	mov	sp, r7
 8008d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d38:	51eb851f 	.word	0x51eb851f

08008d3c <atoi>:
 8008d3c:	220a      	movs	r2, #10
 8008d3e:	2100      	movs	r1, #0
 8008d40:	f000 b87c 	b.w	8008e3c <strtol>

08008d44 <_strtol_l.constprop.0>:
 8008d44:	2b24      	cmp	r3, #36	@ 0x24
 8008d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4a:	4686      	mov	lr, r0
 8008d4c:	4690      	mov	r8, r2
 8008d4e:	d801      	bhi.n	8008d54 <_strtol_l.constprop.0+0x10>
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d106      	bne.n	8008d62 <_strtol_l.constprop.0+0x1e>
 8008d54:	f001 f8fa 	bl	8009f4c <__errno>
 8008d58:	2316      	movs	r3, #22
 8008d5a:	6003      	str	r3, [r0, #0]
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	4834      	ldr	r0, [pc, #208]	@ (8008e34 <_strtol_l.constprop.0+0xf0>)
 8008d64:	460d      	mov	r5, r1
 8008d66:	462a      	mov	r2, r5
 8008d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d6c:	5d06      	ldrb	r6, [r0, r4]
 8008d6e:	f016 0608 	ands.w	r6, r6, #8
 8008d72:	d1f8      	bne.n	8008d66 <_strtol_l.constprop.0+0x22>
 8008d74:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d76:	d12d      	bne.n	8008dd4 <_strtol_l.constprop.0+0x90>
 8008d78:	782c      	ldrb	r4, [r5, #0]
 8008d7a:	2601      	movs	r6, #1
 8008d7c:	1c95      	adds	r5, r2, #2
 8008d7e:	f033 0210 	bics.w	r2, r3, #16
 8008d82:	d109      	bne.n	8008d98 <_strtol_l.constprop.0+0x54>
 8008d84:	2c30      	cmp	r4, #48	@ 0x30
 8008d86:	d12a      	bne.n	8008dde <_strtol_l.constprop.0+0x9a>
 8008d88:	782a      	ldrb	r2, [r5, #0]
 8008d8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d8e:	2a58      	cmp	r2, #88	@ 0x58
 8008d90:	d125      	bne.n	8008dde <_strtol_l.constprop.0+0x9a>
 8008d92:	786c      	ldrb	r4, [r5, #1]
 8008d94:	2310      	movs	r3, #16
 8008d96:	3502      	adds	r5, #2
 8008d98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d9c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008da0:	2200      	movs	r2, #0
 8008da2:	fbbc f9f3 	udiv	r9, ip, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008dac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008db0:	2f09      	cmp	r7, #9
 8008db2:	d81b      	bhi.n	8008dec <_strtol_l.constprop.0+0xa8>
 8008db4:	463c      	mov	r4, r7
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	dd27      	ble.n	8008e0a <_strtol_l.constprop.0+0xc6>
 8008dba:	1c57      	adds	r7, r2, #1
 8008dbc:	d007      	beq.n	8008dce <_strtol_l.constprop.0+0x8a>
 8008dbe:	4581      	cmp	r9, r0
 8008dc0:	d320      	bcc.n	8008e04 <_strtol_l.constprop.0+0xc0>
 8008dc2:	d101      	bne.n	8008dc8 <_strtol_l.constprop.0+0x84>
 8008dc4:	45a2      	cmp	sl, r4
 8008dc6:	db1d      	blt.n	8008e04 <_strtol_l.constprop.0+0xc0>
 8008dc8:	fb00 4003 	mla	r0, r0, r3, r4
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dd2:	e7eb      	b.n	8008dac <_strtol_l.constprop.0+0x68>
 8008dd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8008dd6:	bf04      	itt	eq
 8008dd8:	782c      	ldrbeq	r4, [r5, #0]
 8008dda:	1c95      	addeq	r5, r2, #2
 8008ddc:	e7cf      	b.n	8008d7e <_strtol_l.constprop.0+0x3a>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1da      	bne.n	8008d98 <_strtol_l.constprop.0+0x54>
 8008de2:	2c30      	cmp	r4, #48	@ 0x30
 8008de4:	bf0c      	ite	eq
 8008de6:	2308      	moveq	r3, #8
 8008de8:	230a      	movne	r3, #10
 8008dea:	e7d5      	b.n	8008d98 <_strtol_l.constprop.0+0x54>
 8008dec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008df0:	2f19      	cmp	r7, #25
 8008df2:	d801      	bhi.n	8008df8 <_strtol_l.constprop.0+0xb4>
 8008df4:	3c37      	subs	r4, #55	@ 0x37
 8008df6:	e7de      	b.n	8008db6 <_strtol_l.constprop.0+0x72>
 8008df8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008dfc:	2f19      	cmp	r7, #25
 8008dfe:	d804      	bhi.n	8008e0a <_strtol_l.constprop.0+0xc6>
 8008e00:	3c57      	subs	r4, #87	@ 0x57
 8008e02:	e7d8      	b.n	8008db6 <_strtol_l.constprop.0+0x72>
 8008e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e08:	e7e1      	b.n	8008dce <_strtol_l.constprop.0+0x8a>
 8008e0a:	1c53      	adds	r3, r2, #1
 8008e0c:	d108      	bne.n	8008e20 <_strtol_l.constprop.0+0xdc>
 8008e0e:	2322      	movs	r3, #34	@ 0x22
 8008e10:	f8ce 3000 	str.w	r3, [lr]
 8008e14:	4660      	mov	r0, ip
 8008e16:	f1b8 0f00 	cmp.w	r8, #0
 8008e1a:	d0a0      	beq.n	8008d5e <_strtol_l.constprop.0+0x1a>
 8008e1c:	1e69      	subs	r1, r5, #1
 8008e1e:	e006      	b.n	8008e2e <_strtol_l.constprop.0+0xea>
 8008e20:	b106      	cbz	r6, 8008e24 <_strtol_l.constprop.0+0xe0>
 8008e22:	4240      	negs	r0, r0
 8008e24:	f1b8 0f00 	cmp.w	r8, #0
 8008e28:	d099      	beq.n	8008d5e <_strtol_l.constprop.0+0x1a>
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d1f6      	bne.n	8008e1c <_strtol_l.constprop.0+0xd8>
 8008e2e:	f8c8 1000 	str.w	r1, [r8]
 8008e32:	e794      	b.n	8008d5e <_strtol_l.constprop.0+0x1a>
 8008e34:	0800dff5 	.word	0x0800dff5

08008e38 <_strtol_r>:
 8008e38:	f7ff bf84 	b.w	8008d44 <_strtol_l.constprop.0>

08008e3c <strtol>:
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	460a      	mov	r2, r1
 8008e40:	4601      	mov	r1, r0
 8008e42:	4802      	ldr	r0, [pc, #8]	@ (8008e4c <strtol+0x10>)
 8008e44:	6800      	ldr	r0, [r0, #0]
 8008e46:	f7ff bf7d 	b.w	8008d44 <_strtol_l.constprop.0>
 8008e4a:	bf00      	nop
 8008e4c:	20000084 	.word	0x20000084

08008e50 <__cvt>:
 8008e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	ec57 6b10 	vmov	r6, r7, d0
 8008e58:	2f00      	cmp	r7, #0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	463b      	mov	r3, r7
 8008e60:	bfbb      	ittet	lt
 8008e62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008e66:	461f      	movlt	r7, r3
 8008e68:	2300      	movge	r3, #0
 8008e6a:	232d      	movlt	r3, #45	@ 0x2d
 8008e6c:	700b      	strb	r3, [r1, #0]
 8008e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008e74:	4691      	mov	r9, r2
 8008e76:	f023 0820 	bic.w	r8, r3, #32
 8008e7a:	bfbc      	itt	lt
 8008e7c:	4632      	movlt	r2, r6
 8008e7e:	4616      	movlt	r6, r2
 8008e80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e84:	d005      	beq.n	8008e92 <__cvt+0x42>
 8008e86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e8a:	d100      	bne.n	8008e8e <__cvt+0x3e>
 8008e8c:	3401      	adds	r4, #1
 8008e8e:	2102      	movs	r1, #2
 8008e90:	e000      	b.n	8008e94 <__cvt+0x44>
 8008e92:	2103      	movs	r1, #3
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	ab02      	add	r3, sp, #8
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	ec47 6b10 	vmov	d0, r6, r7
 8008ea0:	4653      	mov	r3, sl
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	f001 f92c 	bl	800a100 <_dtoa_r>
 8008ea8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008eac:	4605      	mov	r5, r0
 8008eae:	d119      	bne.n	8008ee4 <__cvt+0x94>
 8008eb0:	f019 0f01 	tst.w	r9, #1
 8008eb4:	d00e      	beq.n	8008ed4 <__cvt+0x84>
 8008eb6:	eb00 0904 	add.w	r9, r0, r4
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	f7f7 fe11 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ec6:	b108      	cbz	r0, 8008ecc <__cvt+0x7c>
 8008ec8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ecc:	2230      	movs	r2, #48	@ 0x30
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	454b      	cmp	r3, r9
 8008ed2:	d31e      	bcc.n	8008f12 <__cvt+0xc2>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ed8:	1b5b      	subs	r3, r3, r5
 8008eda:	4628      	mov	r0, r5
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	b004      	add	sp, #16
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ee8:	eb00 0904 	add.w	r9, r0, r4
 8008eec:	d1e5      	bne.n	8008eba <__cvt+0x6a>
 8008eee:	7803      	ldrb	r3, [r0, #0]
 8008ef0:	2b30      	cmp	r3, #48	@ 0x30
 8008ef2:	d10a      	bne.n	8008f0a <__cvt+0xba>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fdf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f00:	b918      	cbnz	r0, 8008f0a <__cvt+0xba>
 8008f02:	f1c4 0401 	rsb	r4, r4, #1
 8008f06:	f8ca 4000 	str.w	r4, [sl]
 8008f0a:	f8da 3000 	ldr.w	r3, [sl]
 8008f0e:	4499      	add	r9, r3
 8008f10:	e7d3      	b.n	8008eba <__cvt+0x6a>
 8008f12:	1c59      	adds	r1, r3, #1
 8008f14:	9103      	str	r1, [sp, #12]
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e7d9      	b.n	8008ece <__cvt+0x7e>

08008f1a <__exponent>:
 8008f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	bfba      	itte	lt
 8008f20:	4249      	neglt	r1, r1
 8008f22:	232d      	movlt	r3, #45	@ 0x2d
 8008f24:	232b      	movge	r3, #43	@ 0x2b
 8008f26:	2909      	cmp	r1, #9
 8008f28:	7002      	strb	r2, [r0, #0]
 8008f2a:	7043      	strb	r3, [r0, #1]
 8008f2c:	dd29      	ble.n	8008f82 <__exponent+0x68>
 8008f2e:	f10d 0307 	add.w	r3, sp, #7
 8008f32:	461d      	mov	r5, r3
 8008f34:	270a      	movs	r7, #10
 8008f36:	461a      	mov	r2, r3
 8008f38:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f3c:	fb07 1416 	mls	r4, r7, r6, r1
 8008f40:	3430      	adds	r4, #48	@ 0x30
 8008f42:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f46:	460c      	mov	r4, r1
 8008f48:	2c63      	cmp	r4, #99	@ 0x63
 8008f4a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008f4e:	4631      	mov	r1, r6
 8008f50:	dcf1      	bgt.n	8008f36 <__exponent+0x1c>
 8008f52:	3130      	adds	r1, #48	@ 0x30
 8008f54:	1e94      	subs	r4, r2, #2
 8008f56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f5a:	1c41      	adds	r1, r0, #1
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	d30a      	bcc.n	8008f78 <__exponent+0x5e>
 8008f62:	f10d 0309 	add.w	r3, sp, #9
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ac      	cmp	r4, r5
 8008f6a:	bf88      	it	hi
 8008f6c:	2300      	movhi	r3, #0
 8008f6e:	3302      	adds	r3, #2
 8008f70:	4403      	add	r3, r0
 8008f72:	1a18      	subs	r0, r3, r0
 8008f74:	b003      	add	sp, #12
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f80:	e7ed      	b.n	8008f5e <__exponent+0x44>
 8008f82:	2330      	movs	r3, #48	@ 0x30
 8008f84:	3130      	adds	r1, #48	@ 0x30
 8008f86:	7083      	strb	r3, [r0, #2]
 8008f88:	70c1      	strb	r1, [r0, #3]
 8008f8a:	1d03      	adds	r3, r0, #4
 8008f8c:	e7f1      	b.n	8008f72 <__exponent+0x58>
	...

08008f90 <_printf_float>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	b08d      	sub	sp, #52	@ 0x34
 8008f96:	460c      	mov	r4, r1
 8008f98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	461f      	mov	r7, r3
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	f000 ff89 	bl	8009eb8 <_localeconv_r>
 8008fa6:	6803      	ldr	r3, [r0, #0]
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f7 f970 	bl	8000290 <strlen>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	3307      	adds	r3, #7
 8008fbc:	f023 0307 	bic.w	r3, r3, #7
 8008fc0:	f103 0208 	add.w	r2, r3, #8
 8008fc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008fc8:	f8d4 b000 	ldr.w	fp, [r4]
 8008fcc:	f8c8 2000 	str.w	r2, [r8]
 8008fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fe6:	4b9c      	ldr	r3, [pc, #624]	@ (8009258 <_printf_float+0x2c8>)
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fec:	f7f7 fdae 	bl	8000b4c <__aeabi_dcmpun>
 8008ff0:	bb70      	cbnz	r0, 8009050 <_printf_float+0xc0>
 8008ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff6:	4b98      	ldr	r3, [pc, #608]	@ (8009258 <_printf_float+0x2c8>)
 8008ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ffc:	f7f7 fd88 	bl	8000b10 <__aeabi_dcmple>
 8009000:	bb30      	cbnz	r0, 8009050 <_printf_float+0xc0>
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fd77 	bl	8000afc <__aeabi_dcmplt>
 800900e:	b110      	cbz	r0, 8009016 <_printf_float+0x86>
 8009010:	232d      	movs	r3, #45	@ 0x2d
 8009012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009016:	4a91      	ldr	r2, [pc, #580]	@ (800925c <_printf_float+0x2cc>)
 8009018:	4b91      	ldr	r3, [pc, #580]	@ (8009260 <_printf_float+0x2d0>)
 800901a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800901e:	bf94      	ite	ls
 8009020:	4690      	movls	r8, r2
 8009022:	4698      	movhi	r8, r3
 8009024:	2303      	movs	r3, #3
 8009026:	6123      	str	r3, [r4, #16]
 8009028:	f02b 0304 	bic.w	r3, fp, #4
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	9700      	str	r7, [sp, #0]
 8009034:	4633      	mov	r3, r6
 8009036:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009038:	4621      	mov	r1, r4
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f9d2 	bl	80093e4 <_printf_common>
 8009040:	3001      	adds	r0, #1
 8009042:	f040 808d 	bne.w	8009160 <_printf_float+0x1d0>
 8009046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800904a:	b00d      	add	sp, #52	@ 0x34
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fd78 	bl	8000b4c <__aeabi_dcmpun>
 800905c:	b140      	cbz	r0, 8009070 <_printf_float+0xe0>
 800905e:	464b      	mov	r3, r9
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbc      	itt	lt
 8009064:	232d      	movlt	r3, #45	@ 0x2d
 8009066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800906a:	4a7e      	ldr	r2, [pc, #504]	@ (8009264 <_printf_float+0x2d4>)
 800906c:	4b7e      	ldr	r3, [pc, #504]	@ (8009268 <_printf_float+0x2d8>)
 800906e:	e7d4      	b.n	800901a <_printf_float+0x8a>
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009076:	9206      	str	r2, [sp, #24]
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	d13b      	bne.n	80090f4 <_printf_float+0x164>
 800907c:	2306      	movs	r3, #6
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009084:	2300      	movs	r3, #0
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	ab0a      	add	r3, sp, #40	@ 0x28
 800908c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009090:	ab09      	add	r3, sp, #36	@ 0x24
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	6861      	ldr	r1, [r4, #4]
 8009096:	ec49 8b10 	vmov	d0, r8, r9
 800909a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800909e:	4628      	mov	r0, r5
 80090a0:	f7ff fed6 	bl	8008e50 <__cvt>
 80090a4:	9b06      	ldr	r3, [sp, #24]
 80090a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090a8:	2b47      	cmp	r3, #71	@ 0x47
 80090aa:	4680      	mov	r8, r0
 80090ac:	d129      	bne.n	8009102 <_printf_float+0x172>
 80090ae:	1cc8      	adds	r0, r1, #3
 80090b0:	db02      	blt.n	80090b8 <_printf_float+0x128>
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	4299      	cmp	r1, r3
 80090b6:	dd41      	ble.n	800913c <_printf_float+0x1ac>
 80090b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80090bc:	fa5f fa8a 	uxtb.w	sl, sl
 80090c0:	3901      	subs	r1, #1
 80090c2:	4652      	mov	r2, sl
 80090c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80090ca:	f7ff ff26 	bl	8008f1a <__exponent>
 80090ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090d0:	1813      	adds	r3, r2, r0
 80090d2:	2a01      	cmp	r2, #1
 80090d4:	4681      	mov	r9, r0
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	dc02      	bgt.n	80090e0 <_printf_float+0x150>
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	07d2      	lsls	r2, r2, #31
 80090de:	d501      	bpl.n	80090e4 <_printf_float+0x154>
 80090e0:	3301      	adds	r3, #1
 80090e2:	6123      	str	r3, [r4, #16]
 80090e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0a2      	beq.n	8009032 <_printf_float+0xa2>
 80090ec:	232d      	movs	r3, #45	@ 0x2d
 80090ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f2:	e79e      	b.n	8009032 <_printf_float+0xa2>
 80090f4:	9a06      	ldr	r2, [sp, #24]
 80090f6:	2a47      	cmp	r2, #71	@ 0x47
 80090f8:	d1c2      	bne.n	8009080 <_printf_float+0xf0>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1c0      	bne.n	8009080 <_printf_float+0xf0>
 80090fe:	2301      	movs	r3, #1
 8009100:	e7bd      	b.n	800907e <_printf_float+0xee>
 8009102:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009106:	d9db      	bls.n	80090c0 <_printf_float+0x130>
 8009108:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800910c:	d118      	bne.n	8009140 <_printf_float+0x1b0>
 800910e:	2900      	cmp	r1, #0
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	dd0b      	ble.n	800912c <_printf_float+0x19c>
 8009114:	6121      	str	r1, [r4, #16]
 8009116:	b913      	cbnz	r3, 800911e <_printf_float+0x18e>
 8009118:	6822      	ldr	r2, [r4, #0]
 800911a:	07d0      	lsls	r0, r2, #31
 800911c:	d502      	bpl.n	8009124 <_printf_float+0x194>
 800911e:	3301      	adds	r3, #1
 8009120:	440b      	add	r3, r1
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009126:	f04f 0900 	mov.w	r9, #0
 800912a:	e7db      	b.n	80090e4 <_printf_float+0x154>
 800912c:	b913      	cbnz	r3, 8009134 <_printf_float+0x1a4>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	07d2      	lsls	r2, r2, #31
 8009132:	d501      	bpl.n	8009138 <_printf_float+0x1a8>
 8009134:	3302      	adds	r3, #2
 8009136:	e7f4      	b.n	8009122 <_printf_float+0x192>
 8009138:	2301      	movs	r3, #1
 800913a:	e7f2      	b.n	8009122 <_printf_float+0x192>
 800913c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009142:	4299      	cmp	r1, r3
 8009144:	db05      	blt.n	8009152 <_printf_float+0x1c2>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	6121      	str	r1, [r4, #16]
 800914a:	07d8      	lsls	r0, r3, #31
 800914c:	d5ea      	bpl.n	8009124 <_printf_float+0x194>
 800914e:	1c4b      	adds	r3, r1, #1
 8009150:	e7e7      	b.n	8009122 <_printf_float+0x192>
 8009152:	2900      	cmp	r1, #0
 8009154:	bfd4      	ite	le
 8009156:	f1c1 0202 	rsble	r2, r1, #2
 800915a:	2201      	movgt	r2, #1
 800915c:	4413      	add	r3, r2
 800915e:	e7e0      	b.n	8009122 <_printf_float+0x192>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	055a      	lsls	r2, r3, #21
 8009164:	d407      	bmi.n	8009176 <_printf_float+0x1e6>
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	4642      	mov	r2, r8
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	d12b      	bne.n	80091cc <_printf_float+0x23c>
 8009174:	e767      	b.n	8009046 <_printf_float+0xb6>
 8009176:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800917a:	f240 80dd 	bls.w	8009338 <_printf_float+0x3a8>
 800917e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009182:	2200      	movs	r2, #0
 8009184:	2300      	movs	r3, #0
 8009186:	f7f7 fcaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800918a:	2800      	cmp	r0, #0
 800918c:	d033      	beq.n	80091f6 <_printf_float+0x266>
 800918e:	4a37      	ldr	r2, [pc, #220]	@ (800926c <_printf_float+0x2dc>)
 8009190:	2301      	movs	r3, #1
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f af54 	beq.w	8009046 <_printf_float+0xb6>
 800919e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091a2:	4543      	cmp	r3, r8
 80091a4:	db02      	blt.n	80091ac <_printf_float+0x21c>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07d8      	lsls	r0, r3, #31
 80091aa:	d50f      	bpl.n	80091cc <_printf_float+0x23c>
 80091ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b0:	4631      	mov	r1, r6
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f af45 	beq.w	8009046 <_printf_float+0xb6>
 80091bc:	f04f 0900 	mov.w	r9, #0
 80091c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80091c4:	f104 0a1a 	add.w	sl, r4, #26
 80091c8:	45c8      	cmp	r8, r9
 80091ca:	dc09      	bgt.n	80091e0 <_printf_float+0x250>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	079b      	lsls	r3, r3, #30
 80091d0:	f100 8103 	bmi.w	80093da <_printf_float+0x44a>
 80091d4:	68e0      	ldr	r0, [r4, #12]
 80091d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091d8:	4298      	cmp	r0, r3
 80091da:	bfb8      	it	lt
 80091dc:	4618      	movlt	r0, r3
 80091de:	e734      	b.n	800904a <_printf_float+0xba>
 80091e0:	2301      	movs	r3, #1
 80091e2:	4652      	mov	r2, sl
 80091e4:	4631      	mov	r1, r6
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	f43f af2b 	beq.w	8009046 <_printf_float+0xb6>
 80091f0:	f109 0901 	add.w	r9, r9, #1
 80091f4:	e7e8      	b.n	80091c8 <_printf_float+0x238>
 80091f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dc39      	bgt.n	8009270 <_printf_float+0x2e0>
 80091fc:	4a1b      	ldr	r2, [pc, #108]	@ (800926c <_printf_float+0x2dc>)
 80091fe:	2301      	movs	r3, #1
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	f43f af1d 	beq.w	8009046 <_printf_float+0xb6>
 800920c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009210:	ea59 0303 	orrs.w	r3, r9, r3
 8009214:	d102      	bne.n	800921c <_printf_float+0x28c>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	07d9      	lsls	r1, r3, #31
 800921a:	d5d7      	bpl.n	80091cc <_printf_float+0x23c>
 800921c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009220:	4631      	mov	r1, r6
 8009222:	4628      	mov	r0, r5
 8009224:	47b8      	blx	r7
 8009226:	3001      	adds	r0, #1
 8009228:	f43f af0d 	beq.w	8009046 <_printf_float+0xb6>
 800922c:	f04f 0a00 	mov.w	sl, #0
 8009230:	f104 0b1a 	add.w	fp, r4, #26
 8009234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009236:	425b      	negs	r3, r3
 8009238:	4553      	cmp	r3, sl
 800923a:	dc01      	bgt.n	8009240 <_printf_float+0x2b0>
 800923c:	464b      	mov	r3, r9
 800923e:	e793      	b.n	8009168 <_printf_float+0x1d8>
 8009240:	2301      	movs	r3, #1
 8009242:	465a      	mov	r2, fp
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f aefb 	beq.w	8009046 <_printf_float+0xb6>
 8009250:	f10a 0a01 	add.w	sl, sl, #1
 8009254:	e7ee      	b.n	8009234 <_printf_float+0x2a4>
 8009256:	bf00      	nop
 8009258:	7fefffff 	.word	0x7fefffff
 800925c:	0800e0f5 	.word	0x0800e0f5
 8009260:	0800e0f9 	.word	0x0800e0f9
 8009264:	0800e0fd 	.word	0x0800e0fd
 8009268:	0800e101 	.word	0x0800e101
 800926c:	0800e427 	.word	0x0800e427
 8009270:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009272:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009276:	4553      	cmp	r3, sl
 8009278:	bfa8      	it	ge
 800927a:	4653      	movge	r3, sl
 800927c:	2b00      	cmp	r3, #0
 800927e:	4699      	mov	r9, r3
 8009280:	dc36      	bgt.n	80092f0 <_printf_float+0x360>
 8009282:	f04f 0b00 	mov.w	fp, #0
 8009286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800928a:	f104 021a 	add.w	r2, r4, #26
 800928e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009290:	9306      	str	r3, [sp, #24]
 8009292:	eba3 0309 	sub.w	r3, r3, r9
 8009296:	455b      	cmp	r3, fp
 8009298:	dc31      	bgt.n	80092fe <_printf_float+0x36e>
 800929a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929c:	459a      	cmp	sl, r3
 800929e:	dc3a      	bgt.n	8009316 <_printf_float+0x386>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	07da      	lsls	r2, r3, #31
 80092a4:	d437      	bmi.n	8009316 <_printf_float+0x386>
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	ebaa 0903 	sub.w	r9, sl, r3
 80092ac:	9b06      	ldr	r3, [sp, #24]
 80092ae:	ebaa 0303 	sub.w	r3, sl, r3
 80092b2:	4599      	cmp	r9, r3
 80092b4:	bfa8      	it	ge
 80092b6:	4699      	movge	r9, r3
 80092b8:	f1b9 0f00 	cmp.w	r9, #0
 80092bc:	dc33      	bgt.n	8009326 <_printf_float+0x396>
 80092be:	f04f 0800 	mov.w	r8, #0
 80092c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092c6:	f104 0b1a 	add.w	fp, r4, #26
 80092ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092cc:	ebaa 0303 	sub.w	r3, sl, r3
 80092d0:	eba3 0309 	sub.w	r3, r3, r9
 80092d4:	4543      	cmp	r3, r8
 80092d6:	f77f af79 	ble.w	80091cc <_printf_float+0x23c>
 80092da:	2301      	movs	r3, #1
 80092dc:	465a      	mov	r2, fp
 80092de:	4631      	mov	r1, r6
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	f43f aeae 	beq.w	8009046 <_printf_float+0xb6>
 80092ea:	f108 0801 	add.w	r8, r8, #1
 80092ee:	e7ec      	b.n	80092ca <_printf_float+0x33a>
 80092f0:	4642      	mov	r2, r8
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	d1c2      	bne.n	8009282 <_printf_float+0x2f2>
 80092fc:	e6a3      	b.n	8009046 <_printf_float+0xb6>
 80092fe:	2301      	movs	r3, #1
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	9206      	str	r2, [sp, #24]
 8009306:	47b8      	blx	r7
 8009308:	3001      	adds	r0, #1
 800930a:	f43f ae9c 	beq.w	8009046 <_printf_float+0xb6>
 800930e:	9a06      	ldr	r2, [sp, #24]
 8009310:	f10b 0b01 	add.w	fp, fp, #1
 8009314:	e7bb      	b.n	800928e <_printf_float+0x2fe>
 8009316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	47b8      	blx	r7
 8009320:	3001      	adds	r0, #1
 8009322:	d1c0      	bne.n	80092a6 <_printf_float+0x316>
 8009324:	e68f      	b.n	8009046 <_printf_float+0xb6>
 8009326:	9a06      	ldr	r2, [sp, #24]
 8009328:	464b      	mov	r3, r9
 800932a:	4442      	add	r2, r8
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	d1c3      	bne.n	80092be <_printf_float+0x32e>
 8009336:	e686      	b.n	8009046 <_printf_float+0xb6>
 8009338:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800933c:	f1ba 0f01 	cmp.w	sl, #1
 8009340:	dc01      	bgt.n	8009346 <_printf_float+0x3b6>
 8009342:	07db      	lsls	r3, r3, #31
 8009344:	d536      	bpl.n	80093b4 <_printf_float+0x424>
 8009346:	2301      	movs	r3, #1
 8009348:	4642      	mov	r2, r8
 800934a:	4631      	mov	r1, r6
 800934c:	4628      	mov	r0, r5
 800934e:	47b8      	blx	r7
 8009350:	3001      	adds	r0, #1
 8009352:	f43f ae78 	beq.w	8009046 <_printf_float+0xb6>
 8009356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	f43f ae70 	beq.w	8009046 <_printf_float+0xb6>
 8009366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800936a:	2200      	movs	r2, #0
 800936c:	2300      	movs	r3, #0
 800936e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009372:	f7f7 fbb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009376:	b9c0      	cbnz	r0, 80093aa <_printf_float+0x41a>
 8009378:	4653      	mov	r3, sl
 800937a:	f108 0201 	add.w	r2, r8, #1
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	d10c      	bne.n	80093a2 <_printf_float+0x412>
 8009388:	e65d      	b.n	8009046 <_printf_float+0xb6>
 800938a:	2301      	movs	r3, #1
 800938c:	465a      	mov	r2, fp
 800938e:	4631      	mov	r1, r6
 8009390:	4628      	mov	r0, r5
 8009392:	47b8      	blx	r7
 8009394:	3001      	adds	r0, #1
 8009396:	f43f ae56 	beq.w	8009046 <_printf_float+0xb6>
 800939a:	f108 0801 	add.w	r8, r8, #1
 800939e:	45d0      	cmp	r8, sl
 80093a0:	dbf3      	blt.n	800938a <_printf_float+0x3fa>
 80093a2:	464b      	mov	r3, r9
 80093a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093a8:	e6df      	b.n	800916a <_printf_float+0x1da>
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	f104 0b1a 	add.w	fp, r4, #26
 80093b2:	e7f4      	b.n	800939e <_printf_float+0x40e>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4642      	mov	r2, r8
 80093b8:	e7e1      	b.n	800937e <_printf_float+0x3ee>
 80093ba:	2301      	movs	r3, #1
 80093bc:	464a      	mov	r2, r9
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae3e 	beq.w	8009046 <_printf_float+0xb6>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093d2:	1a5b      	subs	r3, r3, r1
 80093d4:	4543      	cmp	r3, r8
 80093d6:	dcf0      	bgt.n	80093ba <_printf_float+0x42a>
 80093d8:	e6fc      	b.n	80091d4 <_printf_float+0x244>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	f104 0919 	add.w	r9, r4, #25
 80093e2:	e7f4      	b.n	80093ce <_printf_float+0x43e>

080093e4 <_printf_common>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	4616      	mov	r6, r2
 80093ea:	4698      	mov	r8, r3
 80093ec:	688a      	ldr	r2, [r1, #8]
 80093ee:	690b      	ldr	r3, [r1, #16]
 80093f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bfb8      	it	lt
 80093f8:	4613      	movlt	r3, r2
 80093fa:	6033      	str	r3, [r6, #0]
 80093fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009400:	4607      	mov	r7, r0
 8009402:	460c      	mov	r4, r1
 8009404:	b10a      	cbz	r2, 800940a <_printf_common+0x26>
 8009406:	3301      	adds	r3, #1
 8009408:	6033      	str	r3, [r6, #0]
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	0699      	lsls	r1, r3, #26
 800940e:	bf42      	ittt	mi
 8009410:	6833      	ldrmi	r3, [r6, #0]
 8009412:	3302      	addmi	r3, #2
 8009414:	6033      	strmi	r3, [r6, #0]
 8009416:	6825      	ldr	r5, [r4, #0]
 8009418:	f015 0506 	ands.w	r5, r5, #6
 800941c:	d106      	bne.n	800942c <_printf_common+0x48>
 800941e:	f104 0a19 	add.w	sl, r4, #25
 8009422:	68e3      	ldr	r3, [r4, #12]
 8009424:	6832      	ldr	r2, [r6, #0]
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	42ab      	cmp	r3, r5
 800942a:	dc26      	bgt.n	800947a <_printf_common+0x96>
 800942c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	3b00      	subs	r3, #0
 8009434:	bf18      	it	ne
 8009436:	2301      	movne	r3, #1
 8009438:	0692      	lsls	r2, r2, #26
 800943a:	d42b      	bmi.n	8009494 <_printf_common+0xb0>
 800943c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009440:	4641      	mov	r1, r8
 8009442:	4638      	mov	r0, r7
 8009444:	47c8      	blx	r9
 8009446:	3001      	adds	r0, #1
 8009448:	d01e      	beq.n	8009488 <_printf_common+0xa4>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	f003 0306 	and.w	r3, r3, #6
 8009452:	2b04      	cmp	r3, #4
 8009454:	bf02      	ittt	eq
 8009456:	68e5      	ldreq	r5, [r4, #12]
 8009458:	6833      	ldreq	r3, [r6, #0]
 800945a:	1aed      	subeq	r5, r5, r3
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	bf0c      	ite	eq
 8009460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009464:	2500      	movne	r5, #0
 8009466:	4293      	cmp	r3, r2
 8009468:	bfc4      	itt	gt
 800946a:	1a9b      	subgt	r3, r3, r2
 800946c:	18ed      	addgt	r5, r5, r3
 800946e:	2600      	movs	r6, #0
 8009470:	341a      	adds	r4, #26
 8009472:	42b5      	cmp	r5, r6
 8009474:	d11a      	bne.n	80094ac <_printf_common+0xc8>
 8009476:	2000      	movs	r0, #0
 8009478:	e008      	b.n	800948c <_printf_common+0xa8>
 800947a:	2301      	movs	r3, #1
 800947c:	4652      	mov	r2, sl
 800947e:	4641      	mov	r1, r8
 8009480:	4638      	mov	r0, r7
 8009482:	47c8      	blx	r9
 8009484:	3001      	adds	r0, #1
 8009486:	d103      	bne.n	8009490 <_printf_common+0xac>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009490:	3501      	adds	r5, #1
 8009492:	e7c6      	b.n	8009422 <_printf_common+0x3e>
 8009494:	18e1      	adds	r1, r4, r3
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	2030      	movs	r0, #48	@ 0x30
 800949a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800949e:	4422      	add	r2, r4
 80094a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094a8:	3302      	adds	r3, #2
 80094aa:	e7c7      	b.n	800943c <_printf_common+0x58>
 80094ac:	2301      	movs	r3, #1
 80094ae:	4622      	mov	r2, r4
 80094b0:	4641      	mov	r1, r8
 80094b2:	4638      	mov	r0, r7
 80094b4:	47c8      	blx	r9
 80094b6:	3001      	adds	r0, #1
 80094b8:	d0e6      	beq.n	8009488 <_printf_common+0xa4>
 80094ba:	3601      	adds	r6, #1
 80094bc:	e7d9      	b.n	8009472 <_printf_common+0x8e>
	...

080094c0 <_printf_i>:
 80094c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	7e0f      	ldrb	r7, [r1, #24]
 80094c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094c8:	2f78      	cmp	r7, #120	@ 0x78
 80094ca:	4691      	mov	r9, r2
 80094cc:	4680      	mov	r8, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	469a      	mov	sl, r3
 80094d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094d6:	d807      	bhi.n	80094e8 <_printf_i+0x28>
 80094d8:	2f62      	cmp	r7, #98	@ 0x62
 80094da:	d80a      	bhi.n	80094f2 <_printf_i+0x32>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	f000 80d2 	beq.w	8009686 <_printf_i+0x1c6>
 80094e2:	2f58      	cmp	r7, #88	@ 0x58
 80094e4:	f000 80b9 	beq.w	800965a <_printf_i+0x19a>
 80094e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094f0:	e03a      	b.n	8009568 <_printf_i+0xa8>
 80094f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094f6:	2b15      	cmp	r3, #21
 80094f8:	d8f6      	bhi.n	80094e8 <_printf_i+0x28>
 80094fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009500 <_printf_i+0x40>)
 80094fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009500:	08009559 	.word	0x08009559
 8009504:	0800956d 	.word	0x0800956d
 8009508:	080094e9 	.word	0x080094e9
 800950c:	080094e9 	.word	0x080094e9
 8009510:	080094e9 	.word	0x080094e9
 8009514:	080094e9 	.word	0x080094e9
 8009518:	0800956d 	.word	0x0800956d
 800951c:	080094e9 	.word	0x080094e9
 8009520:	080094e9 	.word	0x080094e9
 8009524:	080094e9 	.word	0x080094e9
 8009528:	080094e9 	.word	0x080094e9
 800952c:	0800966d 	.word	0x0800966d
 8009530:	08009597 	.word	0x08009597
 8009534:	08009627 	.word	0x08009627
 8009538:	080094e9 	.word	0x080094e9
 800953c:	080094e9 	.word	0x080094e9
 8009540:	0800968f 	.word	0x0800968f
 8009544:	080094e9 	.word	0x080094e9
 8009548:	08009597 	.word	0x08009597
 800954c:	080094e9 	.word	0x080094e9
 8009550:	080094e9 	.word	0x080094e9
 8009554:	0800962f 	.word	0x0800962f
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6032      	str	r2, [r6, #0]
 8009560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009568:	2301      	movs	r3, #1
 800956a:	e09d      	b.n	80096a8 <_printf_i+0x1e8>
 800956c:	6833      	ldr	r3, [r6, #0]
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	6031      	str	r1, [r6, #0]
 8009574:	0606      	lsls	r6, r0, #24
 8009576:	d501      	bpl.n	800957c <_printf_i+0xbc>
 8009578:	681d      	ldr	r5, [r3, #0]
 800957a:	e003      	b.n	8009584 <_printf_i+0xc4>
 800957c:	0645      	lsls	r5, r0, #25
 800957e:	d5fb      	bpl.n	8009578 <_printf_i+0xb8>
 8009580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009584:	2d00      	cmp	r5, #0
 8009586:	da03      	bge.n	8009590 <_printf_i+0xd0>
 8009588:	232d      	movs	r3, #45	@ 0x2d
 800958a:	426d      	negs	r5, r5
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009590:	4859      	ldr	r0, [pc, #356]	@ (80096f8 <_printf_i+0x238>)
 8009592:	230a      	movs	r3, #10
 8009594:	e011      	b.n	80095ba <_printf_i+0xfa>
 8009596:	6821      	ldr	r1, [r4, #0]
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	0608      	lsls	r0, r1, #24
 800959c:	f853 5b04 	ldr.w	r5, [r3], #4
 80095a0:	d402      	bmi.n	80095a8 <_printf_i+0xe8>
 80095a2:	0649      	lsls	r1, r1, #25
 80095a4:	bf48      	it	mi
 80095a6:	b2ad      	uxthmi	r5, r5
 80095a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095aa:	4853      	ldr	r0, [pc, #332]	@ (80096f8 <_printf_i+0x238>)
 80095ac:	6033      	str	r3, [r6, #0]
 80095ae:	bf14      	ite	ne
 80095b0:	230a      	movne	r3, #10
 80095b2:	2308      	moveq	r3, #8
 80095b4:	2100      	movs	r1, #0
 80095b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ba:	6866      	ldr	r6, [r4, #4]
 80095bc:	60a6      	str	r6, [r4, #8]
 80095be:	2e00      	cmp	r6, #0
 80095c0:	bfa2      	ittt	ge
 80095c2:	6821      	ldrge	r1, [r4, #0]
 80095c4:	f021 0104 	bicge.w	r1, r1, #4
 80095c8:	6021      	strge	r1, [r4, #0]
 80095ca:	b90d      	cbnz	r5, 80095d0 <_printf_i+0x110>
 80095cc:	2e00      	cmp	r6, #0
 80095ce:	d04b      	beq.n	8009668 <_printf_i+0x1a8>
 80095d0:	4616      	mov	r6, r2
 80095d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80095d6:	fb03 5711 	mls	r7, r3, r1, r5
 80095da:	5dc7      	ldrb	r7, [r0, r7]
 80095dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095e0:	462f      	mov	r7, r5
 80095e2:	42bb      	cmp	r3, r7
 80095e4:	460d      	mov	r5, r1
 80095e6:	d9f4      	bls.n	80095d2 <_printf_i+0x112>
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d10b      	bne.n	8009604 <_printf_i+0x144>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	07df      	lsls	r7, r3, #31
 80095f0:	d508      	bpl.n	8009604 <_printf_i+0x144>
 80095f2:	6923      	ldr	r3, [r4, #16]
 80095f4:	6861      	ldr	r1, [r4, #4]
 80095f6:	4299      	cmp	r1, r3
 80095f8:	bfde      	ittt	le
 80095fa:	2330      	movle	r3, #48	@ 0x30
 80095fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009600:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009604:	1b92      	subs	r2, r2, r6
 8009606:	6122      	str	r2, [r4, #16]
 8009608:	f8cd a000 	str.w	sl, [sp]
 800960c:	464b      	mov	r3, r9
 800960e:	aa03      	add	r2, sp, #12
 8009610:	4621      	mov	r1, r4
 8009612:	4640      	mov	r0, r8
 8009614:	f7ff fee6 	bl	80093e4 <_printf_common>
 8009618:	3001      	adds	r0, #1
 800961a:	d14a      	bne.n	80096b2 <_printf_i+0x1f2>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009620:	b004      	add	sp, #16
 8009622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	f043 0320 	orr.w	r3, r3, #32
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	4833      	ldr	r0, [pc, #204]	@ (80096fc <_printf_i+0x23c>)
 8009630:	2778      	movs	r7, #120	@ 0x78
 8009632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	6831      	ldr	r1, [r6, #0]
 800963a:	061f      	lsls	r7, r3, #24
 800963c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009640:	d402      	bmi.n	8009648 <_printf_i+0x188>
 8009642:	065f      	lsls	r7, r3, #25
 8009644:	bf48      	it	mi
 8009646:	b2ad      	uxthmi	r5, r5
 8009648:	6031      	str	r1, [r6, #0]
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	bf44      	itt	mi
 800964e:	f043 0320 	orrmi.w	r3, r3, #32
 8009652:	6023      	strmi	r3, [r4, #0]
 8009654:	b11d      	cbz	r5, 800965e <_printf_i+0x19e>
 8009656:	2310      	movs	r3, #16
 8009658:	e7ac      	b.n	80095b4 <_printf_i+0xf4>
 800965a:	4827      	ldr	r0, [pc, #156]	@ (80096f8 <_printf_i+0x238>)
 800965c:	e7e9      	b.n	8009632 <_printf_i+0x172>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	f023 0320 	bic.w	r3, r3, #32
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	e7f6      	b.n	8009656 <_printf_i+0x196>
 8009668:	4616      	mov	r6, r2
 800966a:	e7bd      	b.n	80095e8 <_printf_i+0x128>
 800966c:	6833      	ldr	r3, [r6, #0]
 800966e:	6825      	ldr	r5, [r4, #0]
 8009670:	6961      	ldr	r1, [r4, #20]
 8009672:	1d18      	adds	r0, r3, #4
 8009674:	6030      	str	r0, [r6, #0]
 8009676:	062e      	lsls	r6, r5, #24
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	d501      	bpl.n	8009680 <_printf_i+0x1c0>
 800967c:	6019      	str	r1, [r3, #0]
 800967e:	e002      	b.n	8009686 <_printf_i+0x1c6>
 8009680:	0668      	lsls	r0, r5, #25
 8009682:	d5fb      	bpl.n	800967c <_printf_i+0x1bc>
 8009684:	8019      	strh	r1, [r3, #0]
 8009686:	2300      	movs	r3, #0
 8009688:	6123      	str	r3, [r4, #16]
 800968a:	4616      	mov	r6, r2
 800968c:	e7bc      	b.n	8009608 <_printf_i+0x148>
 800968e:	6833      	ldr	r3, [r6, #0]
 8009690:	1d1a      	adds	r2, r3, #4
 8009692:	6032      	str	r2, [r6, #0]
 8009694:	681e      	ldr	r6, [r3, #0]
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	2100      	movs	r1, #0
 800969a:	4630      	mov	r0, r6
 800969c:	f7f6 fda8 	bl	80001f0 <memchr>
 80096a0:	b108      	cbz	r0, 80096a6 <_printf_i+0x1e6>
 80096a2:	1b80      	subs	r0, r0, r6
 80096a4:	6060      	str	r0, [r4, #4]
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	6123      	str	r3, [r4, #16]
 80096aa:	2300      	movs	r3, #0
 80096ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096b0:	e7aa      	b.n	8009608 <_printf_i+0x148>
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	4632      	mov	r2, r6
 80096b6:	4649      	mov	r1, r9
 80096b8:	4640      	mov	r0, r8
 80096ba:	47d0      	blx	sl
 80096bc:	3001      	adds	r0, #1
 80096be:	d0ad      	beq.n	800961c <_printf_i+0x15c>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	079b      	lsls	r3, r3, #30
 80096c4:	d413      	bmi.n	80096ee <_printf_i+0x22e>
 80096c6:	68e0      	ldr	r0, [r4, #12]
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	4298      	cmp	r0, r3
 80096cc:	bfb8      	it	lt
 80096ce:	4618      	movlt	r0, r3
 80096d0:	e7a6      	b.n	8009620 <_printf_i+0x160>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4632      	mov	r2, r6
 80096d6:	4649      	mov	r1, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	47d0      	blx	sl
 80096dc:	3001      	adds	r0, #1
 80096de:	d09d      	beq.n	800961c <_printf_i+0x15c>
 80096e0:	3501      	adds	r5, #1
 80096e2:	68e3      	ldr	r3, [r4, #12]
 80096e4:	9903      	ldr	r1, [sp, #12]
 80096e6:	1a5b      	subs	r3, r3, r1
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	dcf2      	bgt.n	80096d2 <_printf_i+0x212>
 80096ec:	e7eb      	b.n	80096c6 <_printf_i+0x206>
 80096ee:	2500      	movs	r5, #0
 80096f0:	f104 0619 	add.w	r6, r4, #25
 80096f4:	e7f5      	b.n	80096e2 <_printf_i+0x222>
 80096f6:	bf00      	nop
 80096f8:	0800e105 	.word	0x0800e105
 80096fc:	0800e116 	.word	0x0800e116

08009700 <_scanf_float>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	b087      	sub	sp, #28
 8009706:	4617      	mov	r7, r2
 8009708:	9303      	str	r3, [sp, #12]
 800970a:	688b      	ldr	r3, [r1, #8]
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009712:	bf81      	itttt	hi
 8009714:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009718:	eb03 0b05 	addhi.w	fp, r3, r5
 800971c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009720:	608b      	strhi	r3, [r1, #8]
 8009722:	680b      	ldr	r3, [r1, #0]
 8009724:	460a      	mov	r2, r1
 8009726:	f04f 0500 	mov.w	r5, #0
 800972a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800972e:	f842 3b1c 	str.w	r3, [r2], #28
 8009732:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009736:	4680      	mov	r8, r0
 8009738:	460c      	mov	r4, r1
 800973a:	bf98      	it	ls
 800973c:	f04f 0b00 	movls.w	fp, #0
 8009740:	9201      	str	r2, [sp, #4]
 8009742:	4616      	mov	r6, r2
 8009744:	46aa      	mov	sl, r5
 8009746:	46a9      	mov	r9, r5
 8009748:	9502      	str	r5, [sp, #8]
 800974a:	68a2      	ldr	r2, [r4, #8]
 800974c:	b152      	cbz	r2, 8009764 <_scanf_float+0x64>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b4e      	cmp	r3, #78	@ 0x4e
 8009754:	d864      	bhi.n	8009820 <_scanf_float+0x120>
 8009756:	2b40      	cmp	r3, #64	@ 0x40
 8009758:	d83c      	bhi.n	80097d4 <_scanf_float+0xd4>
 800975a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800975e:	b2c8      	uxtb	r0, r1
 8009760:	280e      	cmp	r0, #14
 8009762:	d93a      	bls.n	80097da <_scanf_float+0xda>
 8009764:	f1b9 0f00 	cmp.w	r9, #0
 8009768:	d003      	beq.n	8009772 <_scanf_float+0x72>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009776:	f1ba 0f01 	cmp.w	sl, #1
 800977a:	f200 8117 	bhi.w	80099ac <_scanf_float+0x2ac>
 800977e:	9b01      	ldr	r3, [sp, #4]
 8009780:	429e      	cmp	r6, r3
 8009782:	f200 8108 	bhi.w	8009996 <_scanf_float+0x296>
 8009786:	2001      	movs	r0, #1
 8009788:	b007      	add	sp, #28
 800978a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009792:	2a0d      	cmp	r2, #13
 8009794:	d8e6      	bhi.n	8009764 <_scanf_float+0x64>
 8009796:	a101      	add	r1, pc, #4	@ (adr r1, 800979c <_scanf_float+0x9c>)
 8009798:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800979c:	080098e3 	.word	0x080098e3
 80097a0:	08009765 	.word	0x08009765
 80097a4:	08009765 	.word	0x08009765
 80097a8:	08009765 	.word	0x08009765
 80097ac:	08009943 	.word	0x08009943
 80097b0:	0800991b 	.word	0x0800991b
 80097b4:	08009765 	.word	0x08009765
 80097b8:	08009765 	.word	0x08009765
 80097bc:	080098f1 	.word	0x080098f1
 80097c0:	08009765 	.word	0x08009765
 80097c4:	08009765 	.word	0x08009765
 80097c8:	08009765 	.word	0x08009765
 80097cc:	08009765 	.word	0x08009765
 80097d0:	080098a9 	.word	0x080098a9
 80097d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80097d8:	e7db      	b.n	8009792 <_scanf_float+0x92>
 80097da:	290e      	cmp	r1, #14
 80097dc:	d8c2      	bhi.n	8009764 <_scanf_float+0x64>
 80097de:	a001      	add	r0, pc, #4	@ (adr r0, 80097e4 <_scanf_float+0xe4>)
 80097e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80097e4:	08009899 	.word	0x08009899
 80097e8:	08009765 	.word	0x08009765
 80097ec:	08009899 	.word	0x08009899
 80097f0:	0800992f 	.word	0x0800992f
 80097f4:	08009765 	.word	0x08009765
 80097f8:	08009841 	.word	0x08009841
 80097fc:	0800987f 	.word	0x0800987f
 8009800:	0800987f 	.word	0x0800987f
 8009804:	0800987f 	.word	0x0800987f
 8009808:	0800987f 	.word	0x0800987f
 800980c:	0800987f 	.word	0x0800987f
 8009810:	0800987f 	.word	0x0800987f
 8009814:	0800987f 	.word	0x0800987f
 8009818:	0800987f 	.word	0x0800987f
 800981c:	0800987f 	.word	0x0800987f
 8009820:	2b6e      	cmp	r3, #110	@ 0x6e
 8009822:	d809      	bhi.n	8009838 <_scanf_float+0x138>
 8009824:	2b60      	cmp	r3, #96	@ 0x60
 8009826:	d8b2      	bhi.n	800978e <_scanf_float+0x8e>
 8009828:	2b54      	cmp	r3, #84	@ 0x54
 800982a:	d07b      	beq.n	8009924 <_scanf_float+0x224>
 800982c:	2b59      	cmp	r3, #89	@ 0x59
 800982e:	d199      	bne.n	8009764 <_scanf_float+0x64>
 8009830:	2d07      	cmp	r5, #7
 8009832:	d197      	bne.n	8009764 <_scanf_float+0x64>
 8009834:	2508      	movs	r5, #8
 8009836:	e02c      	b.n	8009892 <_scanf_float+0x192>
 8009838:	2b74      	cmp	r3, #116	@ 0x74
 800983a:	d073      	beq.n	8009924 <_scanf_float+0x224>
 800983c:	2b79      	cmp	r3, #121	@ 0x79
 800983e:	e7f6      	b.n	800982e <_scanf_float+0x12e>
 8009840:	6821      	ldr	r1, [r4, #0]
 8009842:	05c8      	lsls	r0, r1, #23
 8009844:	d51b      	bpl.n	800987e <_scanf_float+0x17e>
 8009846:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800984a:	6021      	str	r1, [r4, #0]
 800984c:	f109 0901 	add.w	r9, r9, #1
 8009850:	f1bb 0f00 	cmp.w	fp, #0
 8009854:	d003      	beq.n	800985e <_scanf_float+0x15e>
 8009856:	3201      	adds	r2, #1
 8009858:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800985c:	60a2      	str	r2, [r4, #8]
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	3b01      	subs	r3, #1
 8009862:	60a3      	str	r3, [r4, #8]
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	3301      	adds	r3, #1
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3b01      	subs	r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	607b      	str	r3, [r7, #4]
 8009872:	f340 8087 	ble.w	8009984 <_scanf_float+0x284>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	e765      	b.n	800974a <_scanf_float+0x4a>
 800987e:	eb1a 0105 	adds.w	r1, sl, r5
 8009882:	f47f af6f 	bne.w	8009764 <_scanf_float+0x64>
 8009886:	6822      	ldr	r2, [r4, #0]
 8009888:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800988c:	6022      	str	r2, [r4, #0]
 800988e:	460d      	mov	r5, r1
 8009890:	468a      	mov	sl, r1
 8009892:	f806 3b01 	strb.w	r3, [r6], #1
 8009896:	e7e2      	b.n	800985e <_scanf_float+0x15e>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	0610      	lsls	r0, r2, #24
 800989c:	f57f af62 	bpl.w	8009764 <_scanf_float+0x64>
 80098a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	e7f4      	b.n	8009892 <_scanf_float+0x192>
 80098a8:	f1ba 0f00 	cmp.w	sl, #0
 80098ac:	d10e      	bne.n	80098cc <_scanf_float+0x1cc>
 80098ae:	f1b9 0f00 	cmp.w	r9, #0
 80098b2:	d10e      	bne.n	80098d2 <_scanf_float+0x1d2>
 80098b4:	6822      	ldr	r2, [r4, #0]
 80098b6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80098ba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80098be:	d108      	bne.n	80098d2 <_scanf_float+0x1d2>
 80098c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098c4:	6022      	str	r2, [r4, #0]
 80098c6:	f04f 0a01 	mov.w	sl, #1
 80098ca:	e7e2      	b.n	8009892 <_scanf_float+0x192>
 80098cc:	f1ba 0f02 	cmp.w	sl, #2
 80098d0:	d055      	beq.n	800997e <_scanf_float+0x27e>
 80098d2:	2d01      	cmp	r5, #1
 80098d4:	d002      	beq.n	80098dc <_scanf_float+0x1dc>
 80098d6:	2d04      	cmp	r5, #4
 80098d8:	f47f af44 	bne.w	8009764 <_scanf_float+0x64>
 80098dc:	3501      	adds	r5, #1
 80098de:	b2ed      	uxtb	r5, r5
 80098e0:	e7d7      	b.n	8009892 <_scanf_float+0x192>
 80098e2:	f1ba 0f01 	cmp.w	sl, #1
 80098e6:	f47f af3d 	bne.w	8009764 <_scanf_float+0x64>
 80098ea:	f04f 0a02 	mov.w	sl, #2
 80098ee:	e7d0      	b.n	8009892 <_scanf_float+0x192>
 80098f0:	b97d      	cbnz	r5, 8009912 <_scanf_float+0x212>
 80098f2:	f1b9 0f00 	cmp.w	r9, #0
 80098f6:	f47f af38 	bne.w	800976a <_scanf_float+0x6a>
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009900:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009904:	f040 8108 	bne.w	8009b18 <_scanf_float+0x418>
 8009908:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800990c:	6022      	str	r2, [r4, #0]
 800990e:	2501      	movs	r5, #1
 8009910:	e7bf      	b.n	8009892 <_scanf_float+0x192>
 8009912:	2d03      	cmp	r5, #3
 8009914:	d0e2      	beq.n	80098dc <_scanf_float+0x1dc>
 8009916:	2d05      	cmp	r5, #5
 8009918:	e7de      	b.n	80098d8 <_scanf_float+0x1d8>
 800991a:	2d02      	cmp	r5, #2
 800991c:	f47f af22 	bne.w	8009764 <_scanf_float+0x64>
 8009920:	2503      	movs	r5, #3
 8009922:	e7b6      	b.n	8009892 <_scanf_float+0x192>
 8009924:	2d06      	cmp	r5, #6
 8009926:	f47f af1d 	bne.w	8009764 <_scanf_float+0x64>
 800992a:	2507      	movs	r5, #7
 800992c:	e7b1      	b.n	8009892 <_scanf_float+0x192>
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	0591      	lsls	r1, r2, #22
 8009932:	f57f af17 	bpl.w	8009764 <_scanf_float+0x64>
 8009936:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800993a:	6022      	str	r2, [r4, #0]
 800993c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009940:	e7a7      	b.n	8009892 <_scanf_float+0x192>
 8009942:	6822      	ldr	r2, [r4, #0]
 8009944:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009948:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800994c:	d006      	beq.n	800995c <_scanf_float+0x25c>
 800994e:	0550      	lsls	r0, r2, #21
 8009950:	f57f af08 	bpl.w	8009764 <_scanf_float+0x64>
 8009954:	f1b9 0f00 	cmp.w	r9, #0
 8009958:	f000 80de 	beq.w	8009b18 <_scanf_float+0x418>
 800995c:	0591      	lsls	r1, r2, #22
 800995e:	bf58      	it	pl
 8009960:	9902      	ldrpl	r1, [sp, #8]
 8009962:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009966:	bf58      	it	pl
 8009968:	eba9 0101 	subpl.w	r1, r9, r1
 800996c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009970:	bf58      	it	pl
 8009972:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	f04f 0900 	mov.w	r9, #0
 800997c:	e789      	b.n	8009892 <_scanf_float+0x192>
 800997e:	f04f 0a03 	mov.w	sl, #3
 8009982:	e786      	b.n	8009892 <_scanf_float+0x192>
 8009984:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009988:	4639      	mov	r1, r7
 800998a:	4640      	mov	r0, r8
 800998c:	4798      	blx	r3
 800998e:	2800      	cmp	r0, #0
 8009990:	f43f aedb 	beq.w	800974a <_scanf_float+0x4a>
 8009994:	e6e6      	b.n	8009764 <_scanf_float+0x64>
 8009996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800999a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800999e:	463a      	mov	r2, r7
 80099a0:	4640      	mov	r0, r8
 80099a2:	4798      	blx	r3
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	6123      	str	r3, [r4, #16]
 80099aa:	e6e8      	b.n	800977e <_scanf_float+0x7e>
 80099ac:	1e6b      	subs	r3, r5, #1
 80099ae:	2b06      	cmp	r3, #6
 80099b0:	d824      	bhi.n	80099fc <_scanf_float+0x2fc>
 80099b2:	2d02      	cmp	r5, #2
 80099b4:	d836      	bhi.n	8009a24 <_scanf_float+0x324>
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	429e      	cmp	r6, r3
 80099ba:	f67f aee4 	bls.w	8009786 <_scanf_float+0x86>
 80099be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099c6:	463a      	mov	r2, r7
 80099c8:	4640      	mov	r0, r8
 80099ca:	4798      	blx	r3
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	6123      	str	r3, [r4, #16]
 80099d2:	e7f0      	b.n	80099b6 <_scanf_float+0x2b6>
 80099d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80099dc:	463a      	mov	r2, r7
 80099de:	4640      	mov	r0, r8
 80099e0:	4798      	blx	r3
 80099e2:	6923      	ldr	r3, [r4, #16]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80099ec:	fa5f fa8a 	uxtb.w	sl, sl
 80099f0:	f1ba 0f02 	cmp.w	sl, #2
 80099f4:	d1ee      	bne.n	80099d4 <_scanf_float+0x2d4>
 80099f6:	3d03      	subs	r5, #3
 80099f8:	b2ed      	uxtb	r5, r5
 80099fa:	1b76      	subs	r6, r6, r5
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	05da      	lsls	r2, r3, #23
 8009a00:	d530      	bpl.n	8009a64 <_scanf_float+0x364>
 8009a02:	055b      	lsls	r3, r3, #21
 8009a04:	d511      	bpl.n	8009a2a <_scanf_float+0x32a>
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	429e      	cmp	r6, r3
 8009a0a:	f67f aebc 	bls.w	8009786 <_scanf_float+0x86>
 8009a0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a16:	463a      	mov	r2, r7
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4798      	blx	r3
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	6123      	str	r3, [r4, #16]
 8009a22:	e7f0      	b.n	8009a06 <_scanf_float+0x306>
 8009a24:	46aa      	mov	sl, r5
 8009a26:	46b3      	mov	fp, r6
 8009a28:	e7de      	b.n	80099e8 <_scanf_float+0x2e8>
 8009a2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a2e:	6923      	ldr	r3, [r4, #16]
 8009a30:	2965      	cmp	r1, #101	@ 0x65
 8009a32:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009a36:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	d00c      	beq.n	8009a58 <_scanf_float+0x358>
 8009a3e:	2945      	cmp	r1, #69	@ 0x45
 8009a40:	d00a      	beq.n	8009a58 <_scanf_float+0x358>
 8009a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a46:	463a      	mov	r2, r7
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4798      	blx	r3
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	1eb5      	subs	r5, r6, #2
 8009a56:	6123      	str	r3, [r4, #16]
 8009a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a5c:	463a      	mov	r2, r7
 8009a5e:	4640      	mov	r0, r8
 8009a60:	4798      	blx	r3
 8009a62:	462e      	mov	r6, r5
 8009a64:	6822      	ldr	r2, [r4, #0]
 8009a66:	f012 0210 	ands.w	r2, r2, #16
 8009a6a:	d001      	beq.n	8009a70 <_scanf_float+0x370>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e68b      	b.n	8009788 <_scanf_float+0x88>
 8009a70:	7032      	strb	r2, [r6, #0]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a7c:	d11c      	bne.n	8009ab8 <_scanf_float+0x3b8>
 8009a7e:	9b02      	ldr	r3, [sp, #8]
 8009a80:	454b      	cmp	r3, r9
 8009a82:	eba3 0209 	sub.w	r2, r3, r9
 8009a86:	d123      	bne.n	8009ad0 <_scanf_float+0x3d0>
 8009a88:	9901      	ldr	r1, [sp, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	f002 fcaf 	bl	800c3f0 <_strtod_r>
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	6821      	ldr	r1, [r4, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f011 0f02 	tst.w	r1, #2
 8009a9c:	ec57 6b10 	vmov	r6, r7, d0
 8009aa0:	f103 0204 	add.w	r2, r3, #4
 8009aa4:	d01f      	beq.n	8009ae6 <_scanf_float+0x3e6>
 8009aa6:	9903      	ldr	r1, [sp, #12]
 8009aa8:	600a      	str	r2, [r1, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	e9c3 6700 	strd	r6, r7, [r3]
 8009ab0:	68e3      	ldr	r3, [r4, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60e3      	str	r3, [r4, #12]
 8009ab6:	e7d9      	b.n	8009a6c <_scanf_float+0x36c>
 8009ab8:	9b04      	ldr	r3, [sp, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0e4      	beq.n	8009a88 <_scanf_float+0x388>
 8009abe:	9905      	ldr	r1, [sp, #20]
 8009ac0:	230a      	movs	r3, #10
 8009ac2:	3101      	adds	r1, #1
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	f7ff f9b7 	bl	8008e38 <_strtol_r>
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	9e05      	ldr	r6, [sp, #20]
 8009ace:	1ac2      	subs	r2, r0, r3
 8009ad0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009ad4:	429e      	cmp	r6, r3
 8009ad6:	bf28      	it	cs
 8009ad8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009adc:	4910      	ldr	r1, [pc, #64]	@ (8009b20 <_scanf_float+0x420>)
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f000 f8f6 	bl	8009cd0 <siprintf>
 8009ae4:	e7d0      	b.n	8009a88 <_scanf_float+0x388>
 8009ae6:	f011 0f04 	tst.w	r1, #4
 8009aea:	9903      	ldr	r1, [sp, #12]
 8009aec:	600a      	str	r2, [r1, #0]
 8009aee:	d1dc      	bne.n	8009aaa <_scanf_float+0x3aa>
 8009af0:	681d      	ldr	r5, [r3, #0]
 8009af2:	4632      	mov	r2, r6
 8009af4:	463b      	mov	r3, r7
 8009af6:	4630      	mov	r0, r6
 8009af8:	4639      	mov	r1, r7
 8009afa:	f7f7 f827 	bl	8000b4c <__aeabi_dcmpun>
 8009afe:	b128      	cbz	r0, 8009b0c <_scanf_float+0x40c>
 8009b00:	4808      	ldr	r0, [pc, #32]	@ (8009b24 <_scanf_float+0x424>)
 8009b02:	f000 fa51 	bl	8009fa8 <nanf>
 8009b06:	ed85 0a00 	vstr	s0, [r5]
 8009b0a:	e7d1      	b.n	8009ab0 <_scanf_float+0x3b0>
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	4639      	mov	r1, r7
 8009b10:	f7f7 f87a 	bl	8000c08 <__aeabi_d2f>
 8009b14:	6028      	str	r0, [r5, #0]
 8009b16:	e7cb      	b.n	8009ab0 <_scanf_float+0x3b0>
 8009b18:	f04f 0900 	mov.w	r9, #0
 8009b1c:	e629      	b.n	8009772 <_scanf_float+0x72>
 8009b1e:	bf00      	nop
 8009b20:	0800e127 	.word	0x0800e127
 8009b24:	0800e1d8 	.word	0x0800e1d8

08009b28 <std>:
 8009b28:	2300      	movs	r3, #0
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b36:	6083      	str	r3, [r0, #8]
 8009b38:	8181      	strh	r1, [r0, #12]
 8009b3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b3c:	81c2      	strh	r2, [r0, #14]
 8009b3e:	6183      	str	r3, [r0, #24]
 8009b40:	4619      	mov	r1, r3
 8009b42:	2208      	movs	r2, #8
 8009b44:	305c      	adds	r0, #92	@ 0x5c
 8009b46:	f000 f952 	bl	8009dee <memset>
 8009b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b80 <std+0x58>)
 8009b4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b84 <std+0x5c>)
 8009b50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b52:	4b0d      	ldr	r3, [pc, #52]	@ (8009b88 <std+0x60>)
 8009b54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b56:	4b0d      	ldr	r3, [pc, #52]	@ (8009b8c <std+0x64>)
 8009b58:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b90 <std+0x68>)
 8009b5c:	6224      	str	r4, [r4, #32]
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	d006      	beq.n	8009b70 <std+0x48>
 8009b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b66:	4294      	cmp	r4, r2
 8009b68:	d002      	beq.n	8009b70 <std+0x48>
 8009b6a:	33d0      	adds	r3, #208	@ 0xd0
 8009b6c:	429c      	cmp	r4, r3
 8009b6e:	d105      	bne.n	8009b7c <std+0x54>
 8009b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b78:	f000 ba12 	b.w	8009fa0 <__retarget_lock_init_recursive>
 8009b7c:	bd10      	pop	{r4, pc}
 8009b7e:	bf00      	nop
 8009b80:	08009d65 	.word	0x08009d65
 8009b84:	08009d8b 	.word	0x08009d8b
 8009b88:	08009dc3 	.word	0x08009dc3
 8009b8c:	08009de7 	.word	0x08009de7
 8009b90:	20000eb8 	.word	0x20000eb8

08009b94 <stdio_exit_handler>:
 8009b94:	4a02      	ldr	r2, [pc, #8]	@ (8009ba0 <stdio_exit_handler+0xc>)
 8009b96:	4903      	ldr	r1, [pc, #12]	@ (8009ba4 <stdio_exit_handler+0x10>)
 8009b98:	4803      	ldr	r0, [pc, #12]	@ (8009ba8 <stdio_exit_handler+0x14>)
 8009b9a:	f000 b869 	b.w	8009c70 <_fwalk_sglue>
 8009b9e:	bf00      	nop
 8009ba0:	20000078 	.word	0x20000078
 8009ba4:	0800d06d 	.word	0x0800d06d
 8009ba8:	20000088 	.word	0x20000088

08009bac <cleanup_stdio>:
 8009bac:	6841      	ldr	r1, [r0, #4]
 8009bae:	4b0c      	ldr	r3, [pc, #48]	@ (8009be0 <cleanup_stdio+0x34>)
 8009bb0:	4299      	cmp	r1, r3
 8009bb2:	b510      	push	{r4, lr}
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	d001      	beq.n	8009bbc <cleanup_stdio+0x10>
 8009bb8:	f003 fa58 	bl	800d06c <_fflush_r>
 8009bbc:	68a1      	ldr	r1, [r4, #8]
 8009bbe:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <cleanup_stdio+0x38>)
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d002      	beq.n	8009bca <cleanup_stdio+0x1e>
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f003 fa51 	bl	800d06c <_fflush_r>
 8009bca:	68e1      	ldr	r1, [r4, #12]
 8009bcc:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <cleanup_stdio+0x3c>)
 8009bce:	4299      	cmp	r1, r3
 8009bd0:	d004      	beq.n	8009bdc <cleanup_stdio+0x30>
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd8:	f003 ba48 	b.w	800d06c <_fflush_r>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	bf00      	nop
 8009be0:	20000eb8 	.word	0x20000eb8
 8009be4:	20000f20 	.word	0x20000f20
 8009be8:	20000f88 	.word	0x20000f88

08009bec <global_stdio_init.part.0>:
 8009bec:	b510      	push	{r4, lr}
 8009bee:	4b0b      	ldr	r3, [pc, #44]	@ (8009c1c <global_stdio_init.part.0+0x30>)
 8009bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8009c20 <global_stdio_init.part.0+0x34>)
 8009bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8009c24 <global_stdio_init.part.0+0x38>)
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2104      	movs	r1, #4
 8009bfc:	f7ff ff94 	bl	8009b28 <std>
 8009c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c04:	2201      	movs	r2, #1
 8009c06:	2109      	movs	r1, #9
 8009c08:	f7ff ff8e 	bl	8009b28 <std>
 8009c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c10:	2202      	movs	r2, #2
 8009c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c16:	2112      	movs	r1, #18
 8009c18:	f7ff bf86 	b.w	8009b28 <std>
 8009c1c:	20000ff0 	.word	0x20000ff0
 8009c20:	20000eb8 	.word	0x20000eb8
 8009c24:	08009b95 	.word	0x08009b95

08009c28 <__sfp_lock_acquire>:
 8009c28:	4801      	ldr	r0, [pc, #4]	@ (8009c30 <__sfp_lock_acquire+0x8>)
 8009c2a:	f000 b9ba 	b.w	8009fa2 <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	20000ff9 	.word	0x20000ff9

08009c34 <__sfp_lock_release>:
 8009c34:	4801      	ldr	r0, [pc, #4]	@ (8009c3c <__sfp_lock_release+0x8>)
 8009c36:	f000 b9b5 	b.w	8009fa4 <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	20000ff9 	.word	0x20000ff9

08009c40 <__sinit>:
 8009c40:	b510      	push	{r4, lr}
 8009c42:	4604      	mov	r4, r0
 8009c44:	f7ff fff0 	bl	8009c28 <__sfp_lock_acquire>
 8009c48:	6a23      	ldr	r3, [r4, #32]
 8009c4a:	b11b      	cbz	r3, 8009c54 <__sinit+0x14>
 8009c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c50:	f7ff bff0 	b.w	8009c34 <__sfp_lock_release>
 8009c54:	4b04      	ldr	r3, [pc, #16]	@ (8009c68 <__sinit+0x28>)
 8009c56:	6223      	str	r3, [r4, #32]
 8009c58:	4b04      	ldr	r3, [pc, #16]	@ (8009c6c <__sinit+0x2c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1f5      	bne.n	8009c4c <__sinit+0xc>
 8009c60:	f7ff ffc4 	bl	8009bec <global_stdio_init.part.0>
 8009c64:	e7f2      	b.n	8009c4c <__sinit+0xc>
 8009c66:	bf00      	nop
 8009c68:	08009bad 	.word	0x08009bad
 8009c6c:	20000ff0 	.word	0x20000ff0

08009c70 <_fwalk_sglue>:
 8009c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	4607      	mov	r7, r0
 8009c76:	4688      	mov	r8, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c80:	f1b9 0901 	subs.w	r9, r9, #1
 8009c84:	d505      	bpl.n	8009c92 <_fwalk_sglue+0x22>
 8009c86:	6824      	ldr	r4, [r4, #0]
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	d1f7      	bne.n	8009c7c <_fwalk_sglue+0xc>
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c92:	89ab      	ldrh	r3, [r5, #12]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d907      	bls.n	8009ca8 <_fwalk_sglue+0x38>
 8009c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	d003      	beq.n	8009ca8 <_fwalk_sglue+0x38>
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	47c0      	blx	r8
 8009ca6:	4306      	orrs	r6, r0
 8009ca8:	3568      	adds	r5, #104	@ 0x68
 8009caa:	e7e9      	b.n	8009c80 <_fwalk_sglue+0x10>

08009cac <iprintf>:
 8009cac:	b40f      	push	{r0, r1, r2, r3}
 8009cae:	b507      	push	{r0, r1, r2, lr}
 8009cb0:	4906      	ldr	r1, [pc, #24]	@ (8009ccc <iprintf+0x20>)
 8009cb2:	ab04      	add	r3, sp, #16
 8009cb4:	6808      	ldr	r0, [r1, #0]
 8009cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cba:	6881      	ldr	r1, [r0, #8]
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	f002 feeb 	bl	800ca98 <_vfiprintf_r>
 8009cc2:	b003      	add	sp, #12
 8009cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc8:	b004      	add	sp, #16
 8009cca:	4770      	bx	lr
 8009ccc:	20000084 	.word	0x20000084

08009cd0 <siprintf>:
 8009cd0:	b40e      	push	{r1, r2, r3}
 8009cd2:	b500      	push	{lr}
 8009cd4:	b09c      	sub	sp, #112	@ 0x70
 8009cd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009cd8:	9002      	str	r0, [sp, #8]
 8009cda:	9006      	str	r0, [sp, #24]
 8009cdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ce0:	4809      	ldr	r0, [pc, #36]	@ (8009d08 <siprintf+0x38>)
 8009ce2:	9107      	str	r1, [sp, #28]
 8009ce4:	9104      	str	r1, [sp, #16]
 8009ce6:	4909      	ldr	r1, [pc, #36]	@ (8009d0c <siprintf+0x3c>)
 8009ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cec:	9105      	str	r1, [sp, #20]
 8009cee:	6800      	ldr	r0, [r0, #0]
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	a902      	add	r1, sp, #8
 8009cf4:	f002 fbde 	bl	800c4b4 <_svfiprintf_r>
 8009cf8:	9b02      	ldr	r3, [sp, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	b01c      	add	sp, #112	@ 0x70
 8009d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d04:	b003      	add	sp, #12
 8009d06:	4770      	bx	lr
 8009d08:	20000084 	.word	0x20000084
 8009d0c:	ffff0208 	.word	0xffff0208

08009d10 <siscanf>:
 8009d10:	b40e      	push	{r1, r2, r3}
 8009d12:	b530      	push	{r4, r5, lr}
 8009d14:	b09c      	sub	sp, #112	@ 0x70
 8009d16:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009d18:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009d1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009d20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009d24:	9002      	str	r0, [sp, #8]
 8009d26:	9006      	str	r0, [sp, #24]
 8009d28:	f7f6 fab2 	bl	8000290 <strlen>
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d5c <siscanf+0x4c>)
 8009d2e:	9003      	str	r0, [sp, #12]
 8009d30:	9007      	str	r0, [sp, #28]
 8009d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d34:	480a      	ldr	r0, [pc, #40]	@ (8009d60 <siscanf+0x50>)
 8009d36:	9401      	str	r4, [sp, #4]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8009d3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d46:	462a      	mov	r2, r5
 8009d48:	4623      	mov	r3, r4
 8009d4a:	a902      	add	r1, sp, #8
 8009d4c:	6800      	ldr	r0, [r0, #0]
 8009d4e:	f002 fd05 	bl	800c75c <__ssvfiscanf_r>
 8009d52:	b01c      	add	sp, #112	@ 0x70
 8009d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	08009d87 	.word	0x08009d87
 8009d60:	20000084 	.word	0x20000084

08009d64 <__sread>:
 8009d64:	b510      	push	{r4, lr}
 8009d66:	460c      	mov	r4, r1
 8009d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6c:	f000 f8ca 	bl	8009f04 <_read_r>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	bfab      	itete	ge
 8009d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d76:	89a3      	ldrhlt	r3, [r4, #12]
 8009d78:	181b      	addge	r3, r3, r0
 8009d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d7e:	bfac      	ite	ge
 8009d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d82:	81a3      	strhlt	r3, [r4, #12]
 8009d84:	bd10      	pop	{r4, pc}

08009d86 <__seofread>:
 8009d86:	2000      	movs	r0, #0
 8009d88:	4770      	bx	lr

08009d8a <__swrite>:
 8009d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8e:	461f      	mov	r7, r3
 8009d90:	898b      	ldrh	r3, [r1, #12]
 8009d92:	05db      	lsls	r3, r3, #23
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	4616      	mov	r6, r2
 8009d9a:	d505      	bpl.n	8009da8 <__swrite+0x1e>
 8009d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da0:	2302      	movs	r3, #2
 8009da2:	2200      	movs	r2, #0
 8009da4:	f000 f89c 	bl	8009ee0 <_lseek_r>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	4632      	mov	r2, r6
 8009db6:	463b      	mov	r3, r7
 8009db8:	4628      	mov	r0, r5
 8009dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	f000 b8b3 	b.w	8009f28 <_write_r>

08009dc2 <__sseek>:
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dca:	f000 f889 	bl	8009ee0 <_lseek_r>
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	bf15      	itete	ne
 8009dd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dde:	81a3      	strheq	r3, [r4, #12]
 8009de0:	bf18      	it	ne
 8009de2:	81a3      	strhne	r3, [r4, #12]
 8009de4:	bd10      	pop	{r4, pc}

08009de6 <__sclose>:
 8009de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dea:	f000 b869 	b.w	8009ec0 <_close_r>

08009dee <memset>:
 8009dee:	4402      	add	r2, r0
 8009df0:	4603      	mov	r3, r0
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d100      	bne.n	8009df8 <memset+0xa>
 8009df6:	4770      	bx	lr
 8009df8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dfc:	e7f9      	b.n	8009df2 <memset+0x4>
	...

08009e00 <strtok>:
 8009e00:	4b16      	ldr	r3, [pc, #88]	@ (8009e5c <strtok+0x5c>)
 8009e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	681f      	ldr	r7, [r3, #0]
 8009e08:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	460e      	mov	r6, r1
 8009e0e:	b9ec      	cbnz	r4, 8009e4c <strtok+0x4c>
 8009e10:	2050      	movs	r0, #80	@ 0x50
 8009e12:	f000 ff83 	bl	800ad1c <malloc>
 8009e16:	4602      	mov	r2, r0
 8009e18:	6478      	str	r0, [r7, #68]	@ 0x44
 8009e1a:	b920      	cbnz	r0, 8009e26 <strtok+0x26>
 8009e1c:	4b10      	ldr	r3, [pc, #64]	@ (8009e60 <strtok+0x60>)
 8009e1e:	4811      	ldr	r0, [pc, #68]	@ (8009e64 <strtok+0x64>)
 8009e20:	215b      	movs	r1, #91	@ 0x5b
 8009e22:	f000 f8c7 	bl	8009fb4 <__assert_func>
 8009e26:	e9c0 4400 	strd	r4, r4, [r0]
 8009e2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e32:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009e36:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009e3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009e3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009e42:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009e46:	6184      	str	r4, [r0, #24]
 8009e48:	7704      	strb	r4, [r0, #28]
 8009e4a:	6244      	str	r4, [r0, #36]	@ 0x24
 8009e4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	2301      	movs	r3, #1
 8009e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e58:	f000 b806 	b.w	8009e68 <__strtok_r>
 8009e5c:	20000084 	.word	0x20000084
 8009e60:	0800e12c 	.word	0x0800e12c
 8009e64:	0800e143 	.word	0x0800e143

08009e68 <__strtok_r>:
 8009e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	b908      	cbnz	r0, 8009e72 <__strtok_r+0xa>
 8009e6e:	6814      	ldr	r4, [r2, #0]
 8009e70:	b144      	cbz	r4, 8009e84 <__strtok_r+0x1c>
 8009e72:	4620      	mov	r0, r4
 8009e74:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009e78:	460f      	mov	r7, r1
 8009e7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009e7e:	b91e      	cbnz	r6, 8009e88 <__strtok_r+0x20>
 8009e80:	b965      	cbnz	r5, 8009e9c <__strtok_r+0x34>
 8009e82:	6015      	str	r5, [r2, #0]
 8009e84:	2000      	movs	r0, #0
 8009e86:	e005      	b.n	8009e94 <__strtok_r+0x2c>
 8009e88:	42b5      	cmp	r5, r6
 8009e8a:	d1f6      	bne.n	8009e7a <__strtok_r+0x12>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1f0      	bne.n	8009e72 <__strtok_r+0xa>
 8009e90:	6014      	str	r4, [r2, #0]
 8009e92:	7003      	strb	r3, [r0, #0]
 8009e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e96:	461c      	mov	r4, r3
 8009e98:	e00c      	b.n	8009eb4 <__strtok_r+0x4c>
 8009e9a:	b915      	cbnz	r5, 8009ea2 <__strtok_r+0x3a>
 8009e9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ea0:	460e      	mov	r6, r1
 8009ea2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009ea6:	42ab      	cmp	r3, r5
 8009ea8:	d1f7      	bne.n	8009e9a <__strtok_r+0x32>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0f3      	beq.n	8009e96 <__strtok_r+0x2e>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009eb4:	6014      	str	r4, [r2, #0]
 8009eb6:	e7ed      	b.n	8009e94 <__strtok_r+0x2c>

08009eb8 <_localeconv_r>:
 8009eb8:	4800      	ldr	r0, [pc, #0]	@ (8009ebc <_localeconv_r+0x4>)
 8009eba:	4770      	bx	lr
 8009ebc:	200001c4 	.word	0x200001c4

08009ec0 <_close_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4d06      	ldr	r5, [pc, #24]	@ (8009edc <_close_r+0x1c>)
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	602b      	str	r3, [r5, #0]
 8009ecc:	f7fa fb56 	bl	800457c <_close>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	d102      	bne.n	8009eda <_close_r+0x1a>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b103      	cbz	r3, 8009eda <_close_r+0x1a>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	20000ff4 	.word	0x20000ff4

08009ee0 <_lseek_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d07      	ldr	r5, [pc, #28]	@ (8009f00 <_lseek_r+0x20>)
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4611      	mov	r1, r2
 8009eea:	2200      	movs	r2, #0
 8009eec:	602a      	str	r2, [r5, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f7fa fb6b 	bl	80045ca <_lseek>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d102      	bne.n	8009efe <_lseek_r+0x1e>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	b103      	cbz	r3, 8009efe <_lseek_r+0x1e>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	20000ff4 	.word	0x20000ff4

08009f04 <_read_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d07      	ldr	r5, [pc, #28]	@ (8009f24 <_read_r+0x20>)
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	602a      	str	r2, [r5, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f7fa faf9 	bl	800450a <_read>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_read_r+0x1e>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_read_r+0x1e>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20000ff4 	.word	0x20000ff4

08009f28 <_write_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	@ (8009f48 <_write_r+0x20>)
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	602a      	str	r2, [r5, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	f7fa fb04 	bl	8004544 <_write>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_write_r+0x1e>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_write_r+0x1e>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20000ff4 	.word	0x20000ff4

08009f4c <__errno>:
 8009f4c:	4b01      	ldr	r3, [pc, #4]	@ (8009f54 <__errno+0x8>)
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000084 	.word	0x20000084

08009f58 <__libc_init_array>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009f90 <__libc_init_array+0x38>)
 8009f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009f94 <__libc_init_array+0x3c>)
 8009f5e:	1b64      	subs	r4, r4, r5
 8009f60:	10a4      	asrs	r4, r4, #2
 8009f62:	2600      	movs	r6, #0
 8009f64:	42a6      	cmp	r6, r4
 8009f66:	d109      	bne.n	8009f7c <__libc_init_array+0x24>
 8009f68:	4d0b      	ldr	r5, [pc, #44]	@ (8009f98 <__libc_init_array+0x40>)
 8009f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009f9c <__libc_init_array+0x44>)
 8009f6c:	f003 fef6 	bl	800dd5c <_init>
 8009f70:	1b64      	subs	r4, r4, r5
 8009f72:	10a4      	asrs	r4, r4, #2
 8009f74:	2600      	movs	r6, #0
 8009f76:	42a6      	cmp	r6, r4
 8009f78:	d105      	bne.n	8009f86 <__libc_init_array+0x2e>
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f80:	4798      	blx	r3
 8009f82:	3601      	adds	r6, #1
 8009f84:	e7ee      	b.n	8009f64 <__libc_init_array+0xc>
 8009f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8a:	4798      	blx	r3
 8009f8c:	3601      	adds	r6, #1
 8009f8e:	e7f2      	b.n	8009f76 <__libc_init_array+0x1e>
 8009f90:	0800e49c 	.word	0x0800e49c
 8009f94:	0800e49c 	.word	0x0800e49c
 8009f98:	0800e49c 	.word	0x0800e49c
 8009f9c:	0800e4a0 	.word	0x0800e4a0

08009fa0 <__retarget_lock_init_recursive>:
 8009fa0:	4770      	bx	lr

08009fa2 <__retarget_lock_acquire_recursive>:
 8009fa2:	4770      	bx	lr

08009fa4 <__retarget_lock_release_recursive>:
 8009fa4:	4770      	bx	lr
	...

08009fa8 <nanf>:
 8009fa8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009fb0 <nanf+0x8>
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	7fc00000 	.word	0x7fc00000

08009fb4 <__assert_func>:
 8009fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4b09      	ldr	r3, [pc, #36]	@ (8009fe0 <__assert_func+0x2c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	68d8      	ldr	r0, [r3, #12]
 8009fc2:	b954      	cbnz	r4, 8009fda <__assert_func+0x26>
 8009fc4:	4b07      	ldr	r3, [pc, #28]	@ (8009fe4 <__assert_func+0x30>)
 8009fc6:	461c      	mov	r4, r3
 8009fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fcc:	9100      	str	r1, [sp, #0]
 8009fce:	462b      	mov	r3, r5
 8009fd0:	4905      	ldr	r1, [pc, #20]	@ (8009fe8 <__assert_func+0x34>)
 8009fd2:	f003 f873 	bl	800d0bc <fiprintf>
 8009fd6:	f003 f9df 	bl	800d398 <abort>
 8009fda:	4b04      	ldr	r3, [pc, #16]	@ (8009fec <__assert_func+0x38>)
 8009fdc:	e7f4      	b.n	8009fc8 <__assert_func+0x14>
 8009fde:	bf00      	nop
 8009fe0:	20000084 	.word	0x20000084
 8009fe4:	0800e1d8 	.word	0x0800e1d8
 8009fe8:	0800e1aa 	.word	0x0800e1aa
 8009fec:	0800e19d 	.word	0x0800e19d

08009ff0 <quorem>:
 8009ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	6903      	ldr	r3, [r0, #16]
 8009ff6:	690c      	ldr	r4, [r1, #16]
 8009ff8:	42a3      	cmp	r3, r4
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	db7e      	blt.n	800a0fc <quorem+0x10c>
 8009ffe:	3c01      	subs	r4, #1
 800a000:	f101 0814 	add.w	r8, r1, #20
 800a004:	00a3      	lsls	r3, r4, #2
 800a006:	f100 0514 	add.w	r5, r0, #20
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a01a:	3301      	adds	r3, #1
 800a01c:	429a      	cmp	r2, r3
 800a01e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a022:	fbb2 f6f3 	udiv	r6, r2, r3
 800a026:	d32e      	bcc.n	800a086 <quorem+0x96>
 800a028:	f04f 0a00 	mov.w	sl, #0
 800a02c:	46c4      	mov	ip, r8
 800a02e:	46ae      	mov	lr, r5
 800a030:	46d3      	mov	fp, sl
 800a032:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a036:	b298      	uxth	r0, r3
 800a038:	fb06 a000 	mla	r0, r6, r0, sl
 800a03c:	0c02      	lsrs	r2, r0, #16
 800a03e:	0c1b      	lsrs	r3, r3, #16
 800a040:	fb06 2303 	mla	r3, r6, r3, r2
 800a044:	f8de 2000 	ldr.w	r2, [lr]
 800a048:	b280      	uxth	r0, r0
 800a04a:	b292      	uxth	r2, r2
 800a04c:	1a12      	subs	r2, r2, r0
 800a04e:	445a      	add	r2, fp
 800a050:	f8de 0000 	ldr.w	r0, [lr]
 800a054:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a058:	b29b      	uxth	r3, r3
 800a05a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a05e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a062:	b292      	uxth	r2, r2
 800a064:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a068:	45e1      	cmp	r9, ip
 800a06a:	f84e 2b04 	str.w	r2, [lr], #4
 800a06e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a072:	d2de      	bcs.n	800a032 <quorem+0x42>
 800a074:	9b00      	ldr	r3, [sp, #0]
 800a076:	58eb      	ldr	r3, [r5, r3]
 800a078:	b92b      	cbnz	r3, 800a086 <quorem+0x96>
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	3b04      	subs	r3, #4
 800a07e:	429d      	cmp	r5, r3
 800a080:	461a      	mov	r2, r3
 800a082:	d32f      	bcc.n	800a0e4 <quorem+0xf4>
 800a084:	613c      	str	r4, [r7, #16]
 800a086:	4638      	mov	r0, r7
 800a088:	f001 f9c2 	bl	800b410 <__mcmp>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	db25      	blt.n	800a0dc <quorem+0xec>
 800a090:	4629      	mov	r1, r5
 800a092:	2000      	movs	r0, #0
 800a094:	f858 2b04 	ldr.w	r2, [r8], #4
 800a098:	f8d1 c000 	ldr.w	ip, [r1]
 800a09c:	fa1f fe82 	uxth.w	lr, r2
 800a0a0:	fa1f f38c 	uxth.w	r3, ip
 800a0a4:	eba3 030e 	sub.w	r3, r3, lr
 800a0a8:	4403      	add	r3, r0
 800a0aa:	0c12      	lsrs	r2, r2, #16
 800a0ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a0b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0ba:	45c1      	cmp	r9, r8
 800a0bc:	f841 3b04 	str.w	r3, [r1], #4
 800a0c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0c4:	d2e6      	bcs.n	800a094 <quorem+0xa4>
 800a0c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ce:	b922      	cbnz	r2, 800a0da <quorem+0xea>
 800a0d0:	3b04      	subs	r3, #4
 800a0d2:	429d      	cmp	r5, r3
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	d30b      	bcc.n	800a0f0 <quorem+0x100>
 800a0d8:	613c      	str	r4, [r7, #16]
 800a0da:	3601      	adds	r6, #1
 800a0dc:	4630      	mov	r0, r6
 800a0de:	b003      	add	sp, #12
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	6812      	ldr	r2, [r2, #0]
 800a0e6:	3b04      	subs	r3, #4
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	d1cb      	bne.n	800a084 <quorem+0x94>
 800a0ec:	3c01      	subs	r4, #1
 800a0ee:	e7c6      	b.n	800a07e <quorem+0x8e>
 800a0f0:	6812      	ldr	r2, [r2, #0]
 800a0f2:	3b04      	subs	r3, #4
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	d1ef      	bne.n	800a0d8 <quorem+0xe8>
 800a0f8:	3c01      	subs	r4, #1
 800a0fa:	e7ea      	b.n	800a0d2 <quorem+0xe2>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e7ee      	b.n	800a0de <quorem+0xee>

0800a100 <_dtoa_r>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	69c7      	ldr	r7, [r0, #28]
 800a106:	b099      	sub	sp, #100	@ 0x64
 800a108:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a10c:	ec55 4b10 	vmov	r4, r5, d0
 800a110:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a112:	9109      	str	r1, [sp, #36]	@ 0x24
 800a114:	4683      	mov	fp, r0
 800a116:	920e      	str	r2, [sp, #56]	@ 0x38
 800a118:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a11a:	b97f      	cbnz	r7, 800a13c <_dtoa_r+0x3c>
 800a11c:	2010      	movs	r0, #16
 800a11e:	f000 fdfd 	bl	800ad1c <malloc>
 800a122:	4602      	mov	r2, r0
 800a124:	f8cb 001c 	str.w	r0, [fp, #28]
 800a128:	b920      	cbnz	r0, 800a134 <_dtoa_r+0x34>
 800a12a:	4ba7      	ldr	r3, [pc, #668]	@ (800a3c8 <_dtoa_r+0x2c8>)
 800a12c:	21ef      	movs	r1, #239	@ 0xef
 800a12e:	48a7      	ldr	r0, [pc, #668]	@ (800a3cc <_dtoa_r+0x2cc>)
 800a130:	f7ff ff40 	bl	8009fb4 <__assert_func>
 800a134:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a138:	6007      	str	r7, [r0, #0]
 800a13a:	60c7      	str	r7, [r0, #12]
 800a13c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a140:	6819      	ldr	r1, [r3, #0]
 800a142:	b159      	cbz	r1, 800a15c <_dtoa_r+0x5c>
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	604a      	str	r2, [r1, #4]
 800a148:	2301      	movs	r3, #1
 800a14a:	4093      	lsls	r3, r2
 800a14c:	608b      	str	r3, [r1, #8]
 800a14e:	4658      	mov	r0, fp
 800a150:	f000 feda 	bl	800af08 <_Bfree>
 800a154:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	1e2b      	subs	r3, r5, #0
 800a15e:	bfb9      	ittee	lt
 800a160:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a164:	9303      	strlt	r3, [sp, #12]
 800a166:	2300      	movge	r3, #0
 800a168:	6033      	strge	r3, [r6, #0]
 800a16a:	9f03      	ldr	r7, [sp, #12]
 800a16c:	4b98      	ldr	r3, [pc, #608]	@ (800a3d0 <_dtoa_r+0x2d0>)
 800a16e:	bfbc      	itt	lt
 800a170:	2201      	movlt	r2, #1
 800a172:	6032      	strlt	r2, [r6, #0]
 800a174:	43bb      	bics	r3, r7
 800a176:	d112      	bne.n	800a19e <_dtoa_r+0x9e>
 800a178:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a17a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a184:	4323      	orrs	r3, r4
 800a186:	f000 854d 	beq.w	800ac24 <_dtoa_r+0xb24>
 800a18a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a18c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a3e4 <_dtoa_r+0x2e4>
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 854f 	beq.w	800ac34 <_dtoa_r+0xb34>
 800a196:	f10a 0303 	add.w	r3, sl, #3
 800a19a:	f000 bd49 	b.w	800ac30 <_dtoa_r+0xb30>
 800a19e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	ec51 0b17 	vmov	r0, r1, d7
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a1ae:	f7f6 fc9b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	b158      	cbz	r0, 800a1ce <_dtoa_r+0xce>
 800a1b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1be:	b113      	cbz	r3, 800a1c6 <_dtoa_r+0xc6>
 800a1c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1c2:	4b84      	ldr	r3, [pc, #528]	@ (800a3d4 <_dtoa_r+0x2d4>)
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a3e8 <_dtoa_r+0x2e8>
 800a1ca:	f000 bd33 	b.w	800ac34 <_dtoa_r+0xb34>
 800a1ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a1d2:	aa16      	add	r2, sp, #88	@ 0x58
 800a1d4:	a917      	add	r1, sp, #92	@ 0x5c
 800a1d6:	4658      	mov	r0, fp
 800a1d8:	f001 fa3a 	bl	800b650 <__d2b>
 800a1dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a1e0:	4681      	mov	r9, r0
 800a1e2:	2e00      	cmp	r6, #0
 800a1e4:	d077      	beq.n	800a2d6 <_dtoa_r+0x1d6>
 800a1e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a1ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a1f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a1fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a200:	4619      	mov	r1, r3
 800a202:	2200      	movs	r2, #0
 800a204:	4b74      	ldr	r3, [pc, #464]	@ (800a3d8 <_dtoa_r+0x2d8>)
 800a206:	f7f6 f84f 	bl	80002a8 <__aeabi_dsub>
 800a20a:	a369      	add	r3, pc, #420	@ (adr r3, 800a3b0 <_dtoa_r+0x2b0>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f6 fa02 	bl	8000618 <__aeabi_dmul>
 800a214:	a368      	add	r3, pc, #416	@ (adr r3, 800a3b8 <_dtoa_r+0x2b8>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f6 f847 	bl	80002ac <__adddf3>
 800a21e:	4604      	mov	r4, r0
 800a220:	4630      	mov	r0, r6
 800a222:	460d      	mov	r5, r1
 800a224:	f7f6 f98e 	bl	8000544 <__aeabi_i2d>
 800a228:	a365      	add	r3, pc, #404	@ (adr r3, 800a3c0 <_dtoa_r+0x2c0>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 f9f3 	bl	8000618 <__aeabi_dmul>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f6 f837 	bl	80002ac <__adddf3>
 800a23e:	4604      	mov	r4, r0
 800a240:	460d      	mov	r5, r1
 800a242:	f7f6 fc99 	bl	8000b78 <__aeabi_d2iz>
 800a246:	2200      	movs	r2, #0
 800a248:	4607      	mov	r7, r0
 800a24a:	2300      	movs	r3, #0
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f6 fc54 	bl	8000afc <__aeabi_dcmplt>
 800a254:	b140      	cbz	r0, 800a268 <_dtoa_r+0x168>
 800a256:	4638      	mov	r0, r7
 800a258:	f7f6 f974 	bl	8000544 <__aeabi_i2d>
 800a25c:	4622      	mov	r2, r4
 800a25e:	462b      	mov	r3, r5
 800a260:	f7f6 fc42 	bl	8000ae8 <__aeabi_dcmpeq>
 800a264:	b900      	cbnz	r0, 800a268 <_dtoa_r+0x168>
 800a266:	3f01      	subs	r7, #1
 800a268:	2f16      	cmp	r7, #22
 800a26a:	d851      	bhi.n	800a310 <_dtoa_r+0x210>
 800a26c:	4b5b      	ldr	r3, [pc, #364]	@ (800a3dc <_dtoa_r+0x2dc>)
 800a26e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a27a:	f7f6 fc3f 	bl	8000afc <__aeabi_dcmplt>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d048      	beq.n	800a314 <_dtoa_r+0x214>
 800a282:	3f01      	subs	r7, #1
 800a284:	2300      	movs	r3, #0
 800a286:	9312      	str	r3, [sp, #72]	@ 0x48
 800a288:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a28a:	1b9b      	subs	r3, r3, r6
 800a28c:	1e5a      	subs	r2, r3, #1
 800a28e:	bf44      	itt	mi
 800a290:	f1c3 0801 	rsbmi	r8, r3, #1
 800a294:	2300      	movmi	r3, #0
 800a296:	9208      	str	r2, [sp, #32]
 800a298:	bf54      	ite	pl
 800a29a:	f04f 0800 	movpl.w	r8, #0
 800a29e:	9308      	strmi	r3, [sp, #32]
 800a2a0:	2f00      	cmp	r7, #0
 800a2a2:	db39      	blt.n	800a318 <_dtoa_r+0x218>
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a2a8:	443b      	add	r3, r7
 800a2aa:	9308      	str	r3, [sp, #32]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b2:	2b09      	cmp	r3, #9
 800a2b4:	d864      	bhi.n	800a380 <_dtoa_r+0x280>
 800a2b6:	2b05      	cmp	r3, #5
 800a2b8:	bfc4      	itt	gt
 800a2ba:	3b04      	subgt	r3, #4
 800a2bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c0:	f1a3 0302 	sub.w	r3, r3, #2
 800a2c4:	bfcc      	ite	gt
 800a2c6:	2400      	movgt	r4, #0
 800a2c8:	2401      	movle	r4, #1
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d863      	bhi.n	800a396 <_dtoa_r+0x296>
 800a2ce:	e8df f003 	tbb	[pc, r3]
 800a2d2:	372a      	.short	0x372a
 800a2d4:	5535      	.short	0x5535
 800a2d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a2da:	441e      	add	r6, r3
 800a2dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	bfc1      	itttt	gt
 800a2e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a2e8:	409f      	lslgt	r7, r3
 800a2ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a2ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a2f2:	bfd6      	itet	le
 800a2f4:	f1c3 0320 	rsble	r3, r3, #32
 800a2f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a2fc:	fa04 f003 	lslle.w	r0, r4, r3
 800a300:	f7f6 f910 	bl	8000524 <__aeabi_ui2d>
 800a304:	2201      	movs	r2, #1
 800a306:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a30a:	3e01      	subs	r6, #1
 800a30c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a30e:	e777      	b.n	800a200 <_dtoa_r+0x100>
 800a310:	2301      	movs	r3, #1
 800a312:	e7b8      	b.n	800a286 <_dtoa_r+0x186>
 800a314:	9012      	str	r0, [sp, #72]	@ 0x48
 800a316:	e7b7      	b.n	800a288 <_dtoa_r+0x188>
 800a318:	427b      	negs	r3, r7
 800a31a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a31c:	2300      	movs	r3, #0
 800a31e:	eba8 0807 	sub.w	r8, r8, r7
 800a322:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a324:	e7c4      	b.n	800a2b0 <_dtoa_r+0x1b0>
 800a326:	2300      	movs	r3, #0
 800a328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dc35      	bgt.n	800a39c <_dtoa_r+0x29c>
 800a330:	2301      	movs	r3, #1
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	9307      	str	r3, [sp, #28]
 800a336:	461a      	mov	r2, r3
 800a338:	920e      	str	r2, [sp, #56]	@ 0x38
 800a33a:	e00b      	b.n	800a354 <_dtoa_r+0x254>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e7f3      	b.n	800a328 <_dtoa_r+0x228>
 800a340:	2300      	movs	r3, #0
 800a342:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a346:	18fb      	adds	r3, r7, r3
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	3301      	adds	r3, #1
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	9307      	str	r3, [sp, #28]
 800a350:	bfb8      	it	lt
 800a352:	2301      	movlt	r3, #1
 800a354:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a358:	2100      	movs	r1, #0
 800a35a:	2204      	movs	r2, #4
 800a35c:	f102 0514 	add.w	r5, r2, #20
 800a360:	429d      	cmp	r5, r3
 800a362:	d91f      	bls.n	800a3a4 <_dtoa_r+0x2a4>
 800a364:	6041      	str	r1, [r0, #4]
 800a366:	4658      	mov	r0, fp
 800a368:	f000 fd8e 	bl	800ae88 <_Balloc>
 800a36c:	4682      	mov	sl, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	d13c      	bne.n	800a3ec <_dtoa_r+0x2ec>
 800a372:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e0 <_dtoa_r+0x2e0>)
 800a374:	4602      	mov	r2, r0
 800a376:	f240 11af 	movw	r1, #431	@ 0x1af
 800a37a:	e6d8      	b.n	800a12e <_dtoa_r+0x2e>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e7e0      	b.n	800a342 <_dtoa_r+0x242>
 800a380:	2401      	movs	r4, #1
 800a382:	2300      	movs	r3, #0
 800a384:	9309      	str	r3, [sp, #36]	@ 0x24
 800a386:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	2200      	movs	r2, #0
 800a392:	2312      	movs	r3, #18
 800a394:	e7d0      	b.n	800a338 <_dtoa_r+0x238>
 800a396:	2301      	movs	r3, #1
 800a398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a39a:	e7f5      	b.n	800a388 <_dtoa_r+0x288>
 800a39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	9307      	str	r3, [sp, #28]
 800a3a2:	e7d7      	b.n	800a354 <_dtoa_r+0x254>
 800a3a4:	3101      	adds	r1, #1
 800a3a6:	0052      	lsls	r2, r2, #1
 800a3a8:	e7d8      	b.n	800a35c <_dtoa_r+0x25c>
 800a3aa:	bf00      	nop
 800a3ac:	f3af 8000 	nop.w
 800a3b0:	636f4361 	.word	0x636f4361
 800a3b4:	3fd287a7 	.word	0x3fd287a7
 800a3b8:	8b60c8b3 	.word	0x8b60c8b3
 800a3bc:	3fc68a28 	.word	0x3fc68a28
 800a3c0:	509f79fb 	.word	0x509f79fb
 800a3c4:	3fd34413 	.word	0x3fd34413
 800a3c8:	0800e12c 	.word	0x0800e12c
 800a3cc:	0800e1e6 	.word	0x0800e1e6
 800a3d0:	7ff00000 	.word	0x7ff00000
 800a3d4:	0800e428 	.word	0x0800e428
 800a3d8:	3ff80000 	.word	0x3ff80000
 800a3dc:	0800e2e0 	.word	0x0800e2e0
 800a3e0:	0800e23e 	.word	0x0800e23e
 800a3e4:	0800e1e2 	.word	0x0800e1e2
 800a3e8:	0800e427 	.word	0x0800e427
 800a3ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3f0:	6018      	str	r0, [r3, #0]
 800a3f2:	9b07      	ldr	r3, [sp, #28]
 800a3f4:	2b0e      	cmp	r3, #14
 800a3f6:	f200 80a4 	bhi.w	800a542 <_dtoa_r+0x442>
 800a3fa:	2c00      	cmp	r4, #0
 800a3fc:	f000 80a1 	beq.w	800a542 <_dtoa_r+0x442>
 800a400:	2f00      	cmp	r7, #0
 800a402:	dd33      	ble.n	800a46c <_dtoa_r+0x36c>
 800a404:	4bad      	ldr	r3, [pc, #692]	@ (800a6bc <_dtoa_r+0x5bc>)
 800a406:	f007 020f 	and.w	r2, r7, #15
 800a40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a40e:	ed93 7b00 	vldr	d7, [r3]
 800a412:	05f8      	lsls	r0, r7, #23
 800a414:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a418:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a41c:	d516      	bpl.n	800a44c <_dtoa_r+0x34c>
 800a41e:	4ba8      	ldr	r3, [pc, #672]	@ (800a6c0 <_dtoa_r+0x5c0>)
 800a420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a428:	f7f6 fa20 	bl	800086c <__aeabi_ddiv>
 800a42c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a430:	f004 040f 	and.w	r4, r4, #15
 800a434:	2603      	movs	r6, #3
 800a436:	4da2      	ldr	r5, [pc, #648]	@ (800a6c0 <_dtoa_r+0x5c0>)
 800a438:	b954      	cbnz	r4, 800a450 <_dtoa_r+0x350>
 800a43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a442:	f7f6 fa13 	bl	800086c <__aeabi_ddiv>
 800a446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a44a:	e028      	b.n	800a49e <_dtoa_r+0x39e>
 800a44c:	2602      	movs	r6, #2
 800a44e:	e7f2      	b.n	800a436 <_dtoa_r+0x336>
 800a450:	07e1      	lsls	r1, r4, #31
 800a452:	d508      	bpl.n	800a466 <_dtoa_r+0x366>
 800a454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a45c:	f7f6 f8dc 	bl	8000618 <__aeabi_dmul>
 800a460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a464:	3601      	adds	r6, #1
 800a466:	1064      	asrs	r4, r4, #1
 800a468:	3508      	adds	r5, #8
 800a46a:	e7e5      	b.n	800a438 <_dtoa_r+0x338>
 800a46c:	f000 80d2 	beq.w	800a614 <_dtoa_r+0x514>
 800a470:	427c      	negs	r4, r7
 800a472:	4b92      	ldr	r3, [pc, #584]	@ (800a6bc <_dtoa_r+0x5bc>)
 800a474:	4d92      	ldr	r5, [pc, #584]	@ (800a6c0 <_dtoa_r+0x5c0>)
 800a476:	f004 020f 	and.w	r2, r4, #15
 800a47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a486:	f7f6 f8c7 	bl	8000618 <__aeabi_dmul>
 800a48a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a48e:	1124      	asrs	r4, r4, #4
 800a490:	2300      	movs	r3, #0
 800a492:	2602      	movs	r6, #2
 800a494:	2c00      	cmp	r4, #0
 800a496:	f040 80b2 	bne.w	800a5fe <_dtoa_r+0x4fe>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1d3      	bne.n	800a446 <_dtoa_r+0x346>
 800a49e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80b7 	beq.w	800a618 <_dtoa_r+0x518>
 800a4aa:	4b86      	ldr	r3, [pc, #536]	@ (800a6c4 <_dtoa_r+0x5c4>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f6 fb23 	bl	8000afc <__aeabi_dcmplt>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f000 80ae 	beq.w	800a618 <_dtoa_r+0x518>
 800a4bc:	9b07      	ldr	r3, [sp, #28]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 80aa 	beq.w	800a618 <_dtoa_r+0x518>
 800a4c4:	9b00      	ldr	r3, [sp, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	dd37      	ble.n	800a53a <_dtoa_r+0x43a>
 800a4ca:	1e7b      	subs	r3, r7, #1
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4b7d      	ldr	r3, [pc, #500]	@ (800a6c8 <_dtoa_r+0x5c8>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f6 f89f 	bl	8000618 <__aeabi_dmul>
 800a4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4de:	9c00      	ldr	r4, [sp, #0]
 800a4e0:	3601      	adds	r6, #1
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7f6 f82e 	bl	8000544 <__aeabi_i2d>
 800a4e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ec:	f7f6 f894 	bl	8000618 <__aeabi_dmul>
 800a4f0:	4b76      	ldr	r3, [pc, #472]	@ (800a6cc <_dtoa_r+0x5cc>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f7f5 feda 	bl	80002ac <__adddf3>
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a4fe:	2c00      	cmp	r4, #0
 800a500:	f040 808d 	bne.w	800a61e <_dtoa_r+0x51e>
 800a504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a508:	4b71      	ldr	r3, [pc, #452]	@ (800a6d0 <_dtoa_r+0x5d0>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	f7f5 fecc 	bl	80002a8 <__aeabi_dsub>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a518:	462a      	mov	r2, r5
 800a51a:	4633      	mov	r3, r6
 800a51c:	f7f6 fb0c 	bl	8000b38 <__aeabi_dcmpgt>
 800a520:	2800      	cmp	r0, #0
 800a522:	f040 828b 	bne.w	800aa3c <_dtoa_r+0x93c>
 800a526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a52a:	462a      	mov	r2, r5
 800a52c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a530:	f7f6 fae4 	bl	8000afc <__aeabi_dcmplt>
 800a534:	2800      	cmp	r0, #0
 800a536:	f040 8128 	bne.w	800a78a <_dtoa_r+0x68a>
 800a53a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a53e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a542:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a544:	2b00      	cmp	r3, #0
 800a546:	f2c0 815a 	blt.w	800a7fe <_dtoa_r+0x6fe>
 800a54a:	2f0e      	cmp	r7, #14
 800a54c:	f300 8157 	bgt.w	800a7fe <_dtoa_r+0x6fe>
 800a550:	4b5a      	ldr	r3, [pc, #360]	@ (800a6bc <_dtoa_r+0x5bc>)
 800a552:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a556:	ed93 7b00 	vldr	d7, [r3]
 800a55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	ed8d 7b00 	vstr	d7, [sp]
 800a562:	da03      	bge.n	800a56c <_dtoa_r+0x46c>
 800a564:	9b07      	ldr	r3, [sp, #28]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f340 8101 	ble.w	800a76e <_dtoa_r+0x66e>
 800a56c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a570:	4656      	mov	r6, sl
 800a572:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a576:	4620      	mov	r0, r4
 800a578:	4629      	mov	r1, r5
 800a57a:	f7f6 f977 	bl	800086c <__aeabi_ddiv>
 800a57e:	f7f6 fafb 	bl	8000b78 <__aeabi_d2iz>
 800a582:	4680      	mov	r8, r0
 800a584:	f7f5 ffde 	bl	8000544 <__aeabi_i2d>
 800a588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a58c:	f7f6 f844 	bl	8000618 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4620      	mov	r0, r4
 800a596:	4629      	mov	r1, r5
 800a598:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a59c:	f7f5 fe84 	bl	80002a8 <__aeabi_dsub>
 800a5a0:	f806 4b01 	strb.w	r4, [r6], #1
 800a5a4:	9d07      	ldr	r5, [sp, #28]
 800a5a6:	eba6 040a 	sub.w	r4, r6, sl
 800a5aa:	42a5      	cmp	r5, r4
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	f040 8117 	bne.w	800a7e2 <_dtoa_r+0x6e2>
 800a5b4:	f7f5 fe7a 	bl	80002ac <__adddf3>
 800a5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5bc:	4604      	mov	r4, r0
 800a5be:	460d      	mov	r5, r1
 800a5c0:	f7f6 faba 	bl	8000b38 <__aeabi_dcmpgt>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f040 80f9 	bne.w	800a7bc <_dtoa_r+0x6bc>
 800a5ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f6 fa89 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5d6:	b118      	cbz	r0, 800a5e0 <_dtoa_r+0x4e0>
 800a5d8:	f018 0f01 	tst.w	r8, #1
 800a5dc:	f040 80ee 	bne.w	800a7bc <_dtoa_r+0x6bc>
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f000 fc90 	bl	800af08 <_Bfree>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	7033      	strb	r3, [r6, #0]
 800a5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5ee:	3701      	adds	r7, #1
 800a5f0:	601f      	str	r7, [r3, #0]
 800a5f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 831d 	beq.w	800ac34 <_dtoa_r+0xb34>
 800a5fa:	601e      	str	r6, [r3, #0]
 800a5fc:	e31a      	b.n	800ac34 <_dtoa_r+0xb34>
 800a5fe:	07e2      	lsls	r2, r4, #31
 800a600:	d505      	bpl.n	800a60e <_dtoa_r+0x50e>
 800a602:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a606:	f7f6 f807 	bl	8000618 <__aeabi_dmul>
 800a60a:	3601      	adds	r6, #1
 800a60c:	2301      	movs	r3, #1
 800a60e:	1064      	asrs	r4, r4, #1
 800a610:	3508      	adds	r5, #8
 800a612:	e73f      	b.n	800a494 <_dtoa_r+0x394>
 800a614:	2602      	movs	r6, #2
 800a616:	e742      	b.n	800a49e <_dtoa_r+0x39e>
 800a618:	9c07      	ldr	r4, [sp, #28]
 800a61a:	9704      	str	r7, [sp, #16]
 800a61c:	e761      	b.n	800a4e2 <_dtoa_r+0x3e2>
 800a61e:	4b27      	ldr	r3, [pc, #156]	@ (800a6bc <_dtoa_r+0x5bc>)
 800a620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a622:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a626:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a62a:	4454      	add	r4, sl
 800a62c:	2900      	cmp	r1, #0
 800a62e:	d053      	beq.n	800a6d8 <_dtoa_r+0x5d8>
 800a630:	4928      	ldr	r1, [pc, #160]	@ (800a6d4 <_dtoa_r+0x5d4>)
 800a632:	2000      	movs	r0, #0
 800a634:	f7f6 f91a 	bl	800086c <__aeabi_ddiv>
 800a638:	4633      	mov	r3, r6
 800a63a:	462a      	mov	r2, r5
 800a63c:	f7f5 fe34 	bl	80002a8 <__aeabi_dsub>
 800a640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a644:	4656      	mov	r6, sl
 800a646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a64a:	f7f6 fa95 	bl	8000b78 <__aeabi_d2iz>
 800a64e:	4605      	mov	r5, r0
 800a650:	f7f5 ff78 	bl	8000544 <__aeabi_i2d>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a65c:	f7f5 fe24 	bl	80002a8 <__aeabi_dsub>
 800a660:	3530      	adds	r5, #48	@ 0x30
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a66a:	f806 5b01 	strb.w	r5, [r6], #1
 800a66e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a672:	f7f6 fa43 	bl	8000afc <__aeabi_dcmplt>
 800a676:	2800      	cmp	r0, #0
 800a678:	d171      	bne.n	800a75e <_dtoa_r+0x65e>
 800a67a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a67e:	4911      	ldr	r1, [pc, #68]	@ (800a6c4 <_dtoa_r+0x5c4>)
 800a680:	2000      	movs	r0, #0
 800a682:	f7f5 fe11 	bl	80002a8 <__aeabi_dsub>
 800a686:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a68a:	f7f6 fa37 	bl	8000afc <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	f040 8095 	bne.w	800a7be <_dtoa_r+0x6be>
 800a694:	42a6      	cmp	r6, r4
 800a696:	f43f af50 	beq.w	800a53a <_dtoa_r+0x43a>
 800a69a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a69e:	4b0a      	ldr	r3, [pc, #40]	@ (800a6c8 <_dtoa_r+0x5c8>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f7f5 ffb9 	bl	8000618 <__aeabi_dmul>
 800a6a6:	4b08      	ldr	r3, [pc, #32]	@ (800a6c8 <_dtoa_r+0x5c8>)
 800a6a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b2:	f7f5 ffb1 	bl	8000618 <__aeabi_dmul>
 800a6b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ba:	e7c4      	b.n	800a646 <_dtoa_r+0x546>
 800a6bc:	0800e2e0 	.word	0x0800e2e0
 800a6c0:	0800e2b8 	.word	0x0800e2b8
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	40240000 	.word	0x40240000
 800a6cc:	401c0000 	.word	0x401c0000
 800a6d0:	40140000 	.word	0x40140000
 800a6d4:	3fe00000 	.word	0x3fe00000
 800a6d8:	4631      	mov	r1, r6
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f7f5 ff9c 	bl	8000618 <__aeabi_dmul>
 800a6e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a6e6:	4656      	mov	r6, sl
 800a6e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ec:	f7f6 fa44 	bl	8000b78 <__aeabi_d2iz>
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	f7f5 ff27 	bl	8000544 <__aeabi_i2d>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fe:	f7f5 fdd3 	bl	80002a8 <__aeabi_dsub>
 800a702:	3530      	adds	r5, #48	@ 0x30
 800a704:	f806 5b01 	strb.w	r5, [r6], #1
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	42a6      	cmp	r6, r4
 800a70e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a712:	f04f 0200 	mov.w	r2, #0
 800a716:	d124      	bne.n	800a762 <_dtoa_r+0x662>
 800a718:	4bac      	ldr	r3, [pc, #688]	@ (800a9cc <_dtoa_r+0x8cc>)
 800a71a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a71e:	f7f5 fdc5 	bl	80002ac <__adddf3>
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a72a:	f7f6 fa05 	bl	8000b38 <__aeabi_dcmpgt>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d145      	bne.n	800a7be <_dtoa_r+0x6be>
 800a732:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a736:	49a5      	ldr	r1, [pc, #660]	@ (800a9cc <_dtoa_r+0x8cc>)
 800a738:	2000      	movs	r0, #0
 800a73a:	f7f5 fdb5 	bl	80002a8 <__aeabi_dsub>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a746:	f7f6 f9d9 	bl	8000afc <__aeabi_dcmplt>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f43f aef5 	beq.w	800a53a <_dtoa_r+0x43a>
 800a750:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a752:	1e73      	subs	r3, r6, #1
 800a754:	9315      	str	r3, [sp, #84]	@ 0x54
 800a756:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a75a:	2b30      	cmp	r3, #48	@ 0x30
 800a75c:	d0f8      	beq.n	800a750 <_dtoa_r+0x650>
 800a75e:	9f04      	ldr	r7, [sp, #16]
 800a760:	e73e      	b.n	800a5e0 <_dtoa_r+0x4e0>
 800a762:	4b9b      	ldr	r3, [pc, #620]	@ (800a9d0 <_dtoa_r+0x8d0>)
 800a764:	f7f5 ff58 	bl	8000618 <__aeabi_dmul>
 800a768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a76c:	e7bc      	b.n	800a6e8 <_dtoa_r+0x5e8>
 800a76e:	d10c      	bne.n	800a78a <_dtoa_r+0x68a>
 800a770:	4b98      	ldr	r3, [pc, #608]	@ (800a9d4 <_dtoa_r+0x8d4>)
 800a772:	2200      	movs	r2, #0
 800a774:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a778:	f7f5 ff4e 	bl	8000618 <__aeabi_dmul>
 800a77c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a780:	f7f6 f9d0 	bl	8000b24 <__aeabi_dcmpge>
 800a784:	2800      	cmp	r0, #0
 800a786:	f000 8157 	beq.w	800aa38 <_dtoa_r+0x938>
 800a78a:	2400      	movs	r4, #0
 800a78c:	4625      	mov	r5, r4
 800a78e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a790:	43db      	mvns	r3, r3
 800a792:	9304      	str	r3, [sp, #16]
 800a794:	4656      	mov	r6, sl
 800a796:	2700      	movs	r7, #0
 800a798:	4621      	mov	r1, r4
 800a79a:	4658      	mov	r0, fp
 800a79c:	f000 fbb4 	bl	800af08 <_Bfree>
 800a7a0:	2d00      	cmp	r5, #0
 800a7a2:	d0dc      	beq.n	800a75e <_dtoa_r+0x65e>
 800a7a4:	b12f      	cbz	r7, 800a7b2 <_dtoa_r+0x6b2>
 800a7a6:	42af      	cmp	r7, r5
 800a7a8:	d003      	beq.n	800a7b2 <_dtoa_r+0x6b2>
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	4658      	mov	r0, fp
 800a7ae:	f000 fbab 	bl	800af08 <_Bfree>
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	4658      	mov	r0, fp
 800a7b6:	f000 fba7 	bl	800af08 <_Bfree>
 800a7ba:	e7d0      	b.n	800a75e <_dtoa_r+0x65e>
 800a7bc:	9704      	str	r7, [sp, #16]
 800a7be:	4633      	mov	r3, r6
 800a7c0:	461e      	mov	r6, r3
 800a7c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7c6:	2a39      	cmp	r2, #57	@ 0x39
 800a7c8:	d107      	bne.n	800a7da <_dtoa_r+0x6da>
 800a7ca:	459a      	cmp	sl, r3
 800a7cc:	d1f8      	bne.n	800a7c0 <_dtoa_r+0x6c0>
 800a7ce:	9a04      	ldr	r2, [sp, #16]
 800a7d0:	3201      	adds	r2, #1
 800a7d2:	9204      	str	r2, [sp, #16]
 800a7d4:	2230      	movs	r2, #48	@ 0x30
 800a7d6:	f88a 2000 	strb.w	r2, [sl]
 800a7da:	781a      	ldrb	r2, [r3, #0]
 800a7dc:	3201      	adds	r2, #1
 800a7de:	701a      	strb	r2, [r3, #0]
 800a7e0:	e7bd      	b.n	800a75e <_dtoa_r+0x65e>
 800a7e2:	4b7b      	ldr	r3, [pc, #492]	@ (800a9d0 <_dtoa_r+0x8d0>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f7f5 ff17 	bl	8000618 <__aeabi_dmul>
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	f7f6 f979 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	f43f aebb 	beq.w	800a572 <_dtoa_r+0x472>
 800a7fc:	e6f0      	b.n	800a5e0 <_dtoa_r+0x4e0>
 800a7fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a800:	2a00      	cmp	r2, #0
 800a802:	f000 80db 	beq.w	800a9bc <_dtoa_r+0x8bc>
 800a806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a808:	2a01      	cmp	r2, #1
 800a80a:	f300 80bf 	bgt.w	800a98c <_dtoa_r+0x88c>
 800a80e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a810:	2a00      	cmp	r2, #0
 800a812:	f000 80b7 	beq.w	800a984 <_dtoa_r+0x884>
 800a816:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a81a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a81c:	4646      	mov	r6, r8
 800a81e:	9a08      	ldr	r2, [sp, #32]
 800a820:	2101      	movs	r1, #1
 800a822:	441a      	add	r2, r3
 800a824:	4658      	mov	r0, fp
 800a826:	4498      	add	r8, r3
 800a828:	9208      	str	r2, [sp, #32]
 800a82a:	f000 fc6b 	bl	800b104 <__i2b>
 800a82e:	4605      	mov	r5, r0
 800a830:	b15e      	cbz	r6, 800a84a <_dtoa_r+0x74a>
 800a832:	9b08      	ldr	r3, [sp, #32]
 800a834:	2b00      	cmp	r3, #0
 800a836:	dd08      	ble.n	800a84a <_dtoa_r+0x74a>
 800a838:	42b3      	cmp	r3, r6
 800a83a:	9a08      	ldr	r2, [sp, #32]
 800a83c:	bfa8      	it	ge
 800a83e:	4633      	movge	r3, r6
 800a840:	eba8 0803 	sub.w	r8, r8, r3
 800a844:	1af6      	subs	r6, r6, r3
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	9308      	str	r3, [sp, #32]
 800a84a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a84c:	b1f3      	cbz	r3, 800a88c <_dtoa_r+0x78c>
 800a84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80b7 	beq.w	800a9c4 <_dtoa_r+0x8c4>
 800a856:	b18c      	cbz	r4, 800a87c <_dtoa_r+0x77c>
 800a858:	4629      	mov	r1, r5
 800a85a:	4622      	mov	r2, r4
 800a85c:	4658      	mov	r0, fp
 800a85e:	f000 fd11 	bl	800b284 <__pow5mult>
 800a862:	464a      	mov	r2, r9
 800a864:	4601      	mov	r1, r0
 800a866:	4605      	mov	r5, r0
 800a868:	4658      	mov	r0, fp
 800a86a:	f000 fc61 	bl	800b130 <__multiply>
 800a86e:	4649      	mov	r1, r9
 800a870:	9004      	str	r0, [sp, #16]
 800a872:	4658      	mov	r0, fp
 800a874:	f000 fb48 	bl	800af08 <_Bfree>
 800a878:	9b04      	ldr	r3, [sp, #16]
 800a87a:	4699      	mov	r9, r3
 800a87c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a87e:	1b1a      	subs	r2, r3, r4
 800a880:	d004      	beq.n	800a88c <_dtoa_r+0x78c>
 800a882:	4649      	mov	r1, r9
 800a884:	4658      	mov	r0, fp
 800a886:	f000 fcfd 	bl	800b284 <__pow5mult>
 800a88a:	4681      	mov	r9, r0
 800a88c:	2101      	movs	r1, #1
 800a88e:	4658      	mov	r0, fp
 800a890:	f000 fc38 	bl	800b104 <__i2b>
 800a894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a896:	4604      	mov	r4, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 81cf 	beq.w	800ac3c <_dtoa_r+0xb3c>
 800a89e:	461a      	mov	r2, r3
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4658      	mov	r0, fp
 800a8a4:	f000 fcee 	bl	800b284 <__pow5mult>
 800a8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	f300 8095 	bgt.w	800a9dc <_dtoa_r+0x8dc>
 800a8b2:	9b02      	ldr	r3, [sp, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f040 8087 	bne.w	800a9c8 <_dtoa_r+0x8c8>
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f040 8089 	bne.w	800a9d8 <_dtoa_r+0x8d8>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8cc:	0d1b      	lsrs	r3, r3, #20
 800a8ce:	051b      	lsls	r3, r3, #20
 800a8d0:	b12b      	cbz	r3, 800a8de <_dtoa_r+0x7de>
 800a8d2:	9b08      	ldr	r3, [sp, #32]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	9308      	str	r3, [sp, #32]
 800a8d8:	f108 0801 	add.w	r8, r8, #1
 800a8dc:	2301      	movs	r3, #1
 800a8de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 81b0 	beq.w	800ac48 <_dtoa_r+0xb48>
 800a8e8:	6923      	ldr	r3, [r4, #16]
 800a8ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8ee:	6918      	ldr	r0, [r3, #16]
 800a8f0:	f000 fbbc 	bl	800b06c <__hi0bits>
 800a8f4:	f1c0 0020 	rsb	r0, r0, #32
 800a8f8:	9b08      	ldr	r3, [sp, #32]
 800a8fa:	4418      	add	r0, r3
 800a8fc:	f010 001f 	ands.w	r0, r0, #31
 800a900:	d077      	beq.n	800a9f2 <_dtoa_r+0x8f2>
 800a902:	f1c0 0320 	rsb	r3, r0, #32
 800a906:	2b04      	cmp	r3, #4
 800a908:	dd6b      	ble.n	800a9e2 <_dtoa_r+0x8e2>
 800a90a:	9b08      	ldr	r3, [sp, #32]
 800a90c:	f1c0 001c 	rsb	r0, r0, #28
 800a910:	4403      	add	r3, r0
 800a912:	4480      	add	r8, r0
 800a914:	4406      	add	r6, r0
 800a916:	9308      	str	r3, [sp, #32]
 800a918:	f1b8 0f00 	cmp.w	r8, #0
 800a91c:	dd05      	ble.n	800a92a <_dtoa_r+0x82a>
 800a91e:	4649      	mov	r1, r9
 800a920:	4642      	mov	r2, r8
 800a922:	4658      	mov	r0, fp
 800a924:	f000 fd08 	bl	800b338 <__lshift>
 800a928:	4681      	mov	r9, r0
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	dd05      	ble.n	800a93c <_dtoa_r+0x83c>
 800a930:	4621      	mov	r1, r4
 800a932:	461a      	mov	r2, r3
 800a934:	4658      	mov	r0, fp
 800a936:	f000 fcff 	bl	800b338 <__lshift>
 800a93a:	4604      	mov	r4, r0
 800a93c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d059      	beq.n	800a9f6 <_dtoa_r+0x8f6>
 800a942:	4621      	mov	r1, r4
 800a944:	4648      	mov	r0, r9
 800a946:	f000 fd63 	bl	800b410 <__mcmp>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	da53      	bge.n	800a9f6 <_dtoa_r+0x8f6>
 800a94e:	1e7b      	subs	r3, r7, #1
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	4649      	mov	r1, r9
 800a954:	2300      	movs	r3, #0
 800a956:	220a      	movs	r2, #10
 800a958:	4658      	mov	r0, fp
 800a95a:	f000 faf7 	bl	800af4c <__multadd>
 800a95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a960:	4681      	mov	r9, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 8172 	beq.w	800ac4c <_dtoa_r+0xb4c>
 800a968:	2300      	movs	r3, #0
 800a96a:	4629      	mov	r1, r5
 800a96c:	220a      	movs	r2, #10
 800a96e:	4658      	mov	r0, fp
 800a970:	f000 faec 	bl	800af4c <__multadd>
 800a974:	9b00      	ldr	r3, [sp, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	4605      	mov	r5, r0
 800a97a:	dc67      	bgt.n	800aa4c <_dtoa_r+0x94c>
 800a97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97e:	2b02      	cmp	r3, #2
 800a980:	dc41      	bgt.n	800aa06 <_dtoa_r+0x906>
 800a982:	e063      	b.n	800aa4c <_dtoa_r+0x94c>
 800a984:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a986:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a98a:	e746      	b.n	800a81a <_dtoa_r+0x71a>
 800a98c:	9b07      	ldr	r3, [sp, #28]
 800a98e:	1e5c      	subs	r4, r3, #1
 800a990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a992:	42a3      	cmp	r3, r4
 800a994:	bfbf      	itttt	lt
 800a996:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a998:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a99a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a99c:	1ae3      	sublt	r3, r4, r3
 800a99e:	bfb4      	ite	lt
 800a9a0:	18d2      	addlt	r2, r2, r3
 800a9a2:	1b1c      	subge	r4, r3, r4
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	bfbc      	itt	lt
 800a9a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a9aa:	2400      	movlt	r4, #0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bfb5      	itete	lt
 800a9b0:	eba8 0603 	sublt.w	r6, r8, r3
 800a9b4:	9b07      	ldrge	r3, [sp, #28]
 800a9b6:	2300      	movlt	r3, #0
 800a9b8:	4646      	movge	r6, r8
 800a9ba:	e730      	b.n	800a81e <_dtoa_r+0x71e>
 800a9bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a9c0:	4646      	mov	r6, r8
 800a9c2:	e735      	b.n	800a830 <_dtoa_r+0x730>
 800a9c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9c6:	e75c      	b.n	800a882 <_dtoa_r+0x782>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e788      	b.n	800a8de <_dtoa_r+0x7de>
 800a9cc:	3fe00000 	.word	0x3fe00000
 800a9d0:	40240000 	.word	0x40240000
 800a9d4:	40140000 	.word	0x40140000
 800a9d8:	9b02      	ldr	r3, [sp, #8]
 800a9da:	e780      	b.n	800a8de <_dtoa_r+0x7de>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9e0:	e782      	b.n	800a8e8 <_dtoa_r+0x7e8>
 800a9e2:	d099      	beq.n	800a918 <_dtoa_r+0x818>
 800a9e4:	9a08      	ldr	r2, [sp, #32]
 800a9e6:	331c      	adds	r3, #28
 800a9e8:	441a      	add	r2, r3
 800a9ea:	4498      	add	r8, r3
 800a9ec:	441e      	add	r6, r3
 800a9ee:	9208      	str	r2, [sp, #32]
 800a9f0:	e792      	b.n	800a918 <_dtoa_r+0x818>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	e7f6      	b.n	800a9e4 <_dtoa_r+0x8e4>
 800a9f6:	9b07      	ldr	r3, [sp, #28]
 800a9f8:	9704      	str	r7, [sp, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	dc20      	bgt.n	800aa40 <_dtoa_r+0x940>
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	dd1e      	ble.n	800aa44 <_dtoa_r+0x944>
 800aa06:	9b00      	ldr	r3, [sp, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f47f aec0 	bne.w	800a78e <_dtoa_r+0x68e>
 800aa0e:	4621      	mov	r1, r4
 800aa10:	2205      	movs	r2, #5
 800aa12:	4658      	mov	r0, fp
 800aa14:	f000 fa9a 	bl	800af4c <__multadd>
 800aa18:	4601      	mov	r1, r0
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	4648      	mov	r0, r9
 800aa1e:	f000 fcf7 	bl	800b410 <__mcmp>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f77f aeb3 	ble.w	800a78e <_dtoa_r+0x68e>
 800aa28:	4656      	mov	r6, sl
 800aa2a:	2331      	movs	r3, #49	@ 0x31
 800aa2c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa30:	9b04      	ldr	r3, [sp, #16]
 800aa32:	3301      	adds	r3, #1
 800aa34:	9304      	str	r3, [sp, #16]
 800aa36:	e6ae      	b.n	800a796 <_dtoa_r+0x696>
 800aa38:	9c07      	ldr	r4, [sp, #28]
 800aa3a:	9704      	str	r7, [sp, #16]
 800aa3c:	4625      	mov	r5, r4
 800aa3e:	e7f3      	b.n	800aa28 <_dtoa_r+0x928>
 800aa40:	9b07      	ldr	r3, [sp, #28]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 8104 	beq.w	800ac54 <_dtoa_r+0xb54>
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	dd05      	ble.n	800aa5c <_dtoa_r+0x95c>
 800aa50:	4629      	mov	r1, r5
 800aa52:	4632      	mov	r2, r6
 800aa54:	4658      	mov	r0, fp
 800aa56:	f000 fc6f 	bl	800b338 <__lshift>
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d05a      	beq.n	800ab18 <_dtoa_r+0xa18>
 800aa62:	6869      	ldr	r1, [r5, #4]
 800aa64:	4658      	mov	r0, fp
 800aa66:	f000 fa0f 	bl	800ae88 <_Balloc>
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	b928      	cbnz	r0, 800aa7a <_dtoa_r+0x97a>
 800aa6e:	4b84      	ldr	r3, [pc, #528]	@ (800ac80 <_dtoa_r+0xb80>)
 800aa70:	4602      	mov	r2, r0
 800aa72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa76:	f7ff bb5a 	b.w	800a12e <_dtoa_r+0x2e>
 800aa7a:	692a      	ldr	r2, [r5, #16]
 800aa7c:	3202      	adds	r2, #2
 800aa7e:	0092      	lsls	r2, r2, #2
 800aa80:	f105 010c 	add.w	r1, r5, #12
 800aa84:	300c      	adds	r0, #12
 800aa86:	f002 fc6f 	bl	800d368 <memcpy>
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4658      	mov	r0, fp
 800aa90:	f000 fc52 	bl	800b338 <__lshift>
 800aa94:	f10a 0301 	add.w	r3, sl, #1
 800aa98:	9307      	str	r3, [sp, #28]
 800aa9a:	9b00      	ldr	r3, [sp, #0]
 800aa9c:	4453      	add	r3, sl
 800aa9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaa0:	9b02      	ldr	r3, [sp, #8]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	462f      	mov	r7, r5
 800aaa8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaaa:	4605      	mov	r5, r0
 800aaac:	9b07      	ldr	r3, [sp, #28]
 800aaae:	4621      	mov	r1, r4
 800aab0:	3b01      	subs	r3, #1
 800aab2:	4648      	mov	r0, r9
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	f7ff fa9b 	bl	8009ff0 <quorem>
 800aaba:	4639      	mov	r1, r7
 800aabc:	9002      	str	r0, [sp, #8]
 800aabe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aac2:	4648      	mov	r0, r9
 800aac4:	f000 fca4 	bl	800b410 <__mcmp>
 800aac8:	462a      	mov	r2, r5
 800aaca:	9008      	str	r0, [sp, #32]
 800aacc:	4621      	mov	r1, r4
 800aace:	4658      	mov	r0, fp
 800aad0:	f000 fcba 	bl	800b448 <__mdiff>
 800aad4:	68c2      	ldr	r2, [r0, #12]
 800aad6:	4606      	mov	r6, r0
 800aad8:	bb02      	cbnz	r2, 800ab1c <_dtoa_r+0xa1c>
 800aada:	4601      	mov	r1, r0
 800aadc:	4648      	mov	r0, r9
 800aade:	f000 fc97 	bl	800b410 <__mcmp>
 800aae2:	4602      	mov	r2, r0
 800aae4:	4631      	mov	r1, r6
 800aae6:	4658      	mov	r0, fp
 800aae8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aaea:	f000 fa0d 	bl	800af08 <_Bfree>
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaf2:	9e07      	ldr	r6, [sp, #28]
 800aaf4:	ea43 0102 	orr.w	r1, r3, r2
 800aaf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aafa:	4319      	orrs	r1, r3
 800aafc:	d110      	bne.n	800ab20 <_dtoa_r+0xa20>
 800aafe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab02:	d029      	beq.n	800ab58 <_dtoa_r+0xa58>
 800ab04:	9b08      	ldr	r3, [sp, #32]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dd02      	ble.n	800ab10 <_dtoa_r+0xa10>
 800ab0a:	9b02      	ldr	r3, [sp, #8]
 800ab0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab10:	9b00      	ldr	r3, [sp, #0]
 800ab12:	f883 8000 	strb.w	r8, [r3]
 800ab16:	e63f      	b.n	800a798 <_dtoa_r+0x698>
 800ab18:	4628      	mov	r0, r5
 800ab1a:	e7bb      	b.n	800aa94 <_dtoa_r+0x994>
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	e7e1      	b.n	800aae4 <_dtoa_r+0x9e4>
 800ab20:	9b08      	ldr	r3, [sp, #32]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	db04      	blt.n	800ab30 <_dtoa_r+0xa30>
 800ab26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab28:	430b      	orrs	r3, r1
 800ab2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab2c:	430b      	orrs	r3, r1
 800ab2e:	d120      	bne.n	800ab72 <_dtoa_r+0xa72>
 800ab30:	2a00      	cmp	r2, #0
 800ab32:	dded      	ble.n	800ab10 <_dtoa_r+0xa10>
 800ab34:	4649      	mov	r1, r9
 800ab36:	2201      	movs	r2, #1
 800ab38:	4658      	mov	r0, fp
 800ab3a:	f000 fbfd 	bl	800b338 <__lshift>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4681      	mov	r9, r0
 800ab42:	f000 fc65 	bl	800b410 <__mcmp>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	dc03      	bgt.n	800ab52 <_dtoa_r+0xa52>
 800ab4a:	d1e1      	bne.n	800ab10 <_dtoa_r+0xa10>
 800ab4c:	f018 0f01 	tst.w	r8, #1
 800ab50:	d0de      	beq.n	800ab10 <_dtoa_r+0xa10>
 800ab52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab56:	d1d8      	bne.n	800ab0a <_dtoa_r+0xa0a>
 800ab58:	9a00      	ldr	r2, [sp, #0]
 800ab5a:	2339      	movs	r3, #57	@ 0x39
 800ab5c:	7013      	strb	r3, [r2, #0]
 800ab5e:	4633      	mov	r3, r6
 800ab60:	461e      	mov	r6, r3
 800ab62:	3b01      	subs	r3, #1
 800ab64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab68:	2a39      	cmp	r2, #57	@ 0x39
 800ab6a:	d052      	beq.n	800ac12 <_dtoa_r+0xb12>
 800ab6c:	3201      	adds	r2, #1
 800ab6e:	701a      	strb	r2, [r3, #0]
 800ab70:	e612      	b.n	800a798 <_dtoa_r+0x698>
 800ab72:	2a00      	cmp	r2, #0
 800ab74:	dd07      	ble.n	800ab86 <_dtoa_r+0xa86>
 800ab76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab7a:	d0ed      	beq.n	800ab58 <_dtoa_r+0xa58>
 800ab7c:	9a00      	ldr	r2, [sp, #0]
 800ab7e:	f108 0301 	add.w	r3, r8, #1
 800ab82:	7013      	strb	r3, [r2, #0]
 800ab84:	e608      	b.n	800a798 <_dtoa_r+0x698>
 800ab86:	9b07      	ldr	r3, [sp, #28]
 800ab88:	9a07      	ldr	r2, [sp, #28]
 800ab8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ab8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d028      	beq.n	800abe6 <_dtoa_r+0xae6>
 800ab94:	4649      	mov	r1, r9
 800ab96:	2300      	movs	r3, #0
 800ab98:	220a      	movs	r2, #10
 800ab9a:	4658      	mov	r0, fp
 800ab9c:	f000 f9d6 	bl	800af4c <__multadd>
 800aba0:	42af      	cmp	r7, r5
 800aba2:	4681      	mov	r9, r0
 800aba4:	f04f 0300 	mov.w	r3, #0
 800aba8:	f04f 020a 	mov.w	r2, #10
 800abac:	4639      	mov	r1, r7
 800abae:	4658      	mov	r0, fp
 800abb0:	d107      	bne.n	800abc2 <_dtoa_r+0xac2>
 800abb2:	f000 f9cb 	bl	800af4c <__multadd>
 800abb6:	4607      	mov	r7, r0
 800abb8:	4605      	mov	r5, r0
 800abba:	9b07      	ldr	r3, [sp, #28]
 800abbc:	3301      	adds	r3, #1
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	e774      	b.n	800aaac <_dtoa_r+0x9ac>
 800abc2:	f000 f9c3 	bl	800af4c <__multadd>
 800abc6:	4629      	mov	r1, r5
 800abc8:	4607      	mov	r7, r0
 800abca:	2300      	movs	r3, #0
 800abcc:	220a      	movs	r2, #10
 800abce:	4658      	mov	r0, fp
 800abd0:	f000 f9bc 	bl	800af4c <__multadd>
 800abd4:	4605      	mov	r5, r0
 800abd6:	e7f0      	b.n	800abba <_dtoa_r+0xaba>
 800abd8:	9b00      	ldr	r3, [sp, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	bfcc      	ite	gt
 800abde:	461e      	movgt	r6, r3
 800abe0:	2601      	movle	r6, #1
 800abe2:	4456      	add	r6, sl
 800abe4:	2700      	movs	r7, #0
 800abe6:	4649      	mov	r1, r9
 800abe8:	2201      	movs	r2, #1
 800abea:	4658      	mov	r0, fp
 800abec:	f000 fba4 	bl	800b338 <__lshift>
 800abf0:	4621      	mov	r1, r4
 800abf2:	4681      	mov	r9, r0
 800abf4:	f000 fc0c 	bl	800b410 <__mcmp>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	dcb0      	bgt.n	800ab5e <_dtoa_r+0xa5e>
 800abfc:	d102      	bne.n	800ac04 <_dtoa_r+0xb04>
 800abfe:	f018 0f01 	tst.w	r8, #1
 800ac02:	d1ac      	bne.n	800ab5e <_dtoa_r+0xa5e>
 800ac04:	4633      	mov	r3, r6
 800ac06:	461e      	mov	r6, r3
 800ac08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac0c:	2a30      	cmp	r2, #48	@ 0x30
 800ac0e:	d0fa      	beq.n	800ac06 <_dtoa_r+0xb06>
 800ac10:	e5c2      	b.n	800a798 <_dtoa_r+0x698>
 800ac12:	459a      	cmp	sl, r3
 800ac14:	d1a4      	bne.n	800ab60 <_dtoa_r+0xa60>
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	2331      	movs	r3, #49	@ 0x31
 800ac1e:	f88a 3000 	strb.w	r3, [sl]
 800ac22:	e5b9      	b.n	800a798 <_dtoa_r+0x698>
 800ac24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ac84 <_dtoa_r+0xb84>
 800ac2a:	b11b      	cbz	r3, 800ac34 <_dtoa_r+0xb34>
 800ac2c:	f10a 0308 	add.w	r3, sl, #8
 800ac30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	4650      	mov	r0, sl
 800ac36:	b019      	add	sp, #100	@ 0x64
 800ac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	f77f ae37 	ble.w	800a8b2 <_dtoa_r+0x7b2>
 800ac44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac48:	2001      	movs	r0, #1
 800ac4a:	e655      	b.n	800a8f8 <_dtoa_r+0x7f8>
 800ac4c:	9b00      	ldr	r3, [sp, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f77f aed6 	ble.w	800aa00 <_dtoa_r+0x900>
 800ac54:	4656      	mov	r6, sl
 800ac56:	4621      	mov	r1, r4
 800ac58:	4648      	mov	r0, r9
 800ac5a:	f7ff f9c9 	bl	8009ff0 <quorem>
 800ac5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac62:	f806 8b01 	strb.w	r8, [r6], #1
 800ac66:	9b00      	ldr	r3, [sp, #0]
 800ac68:	eba6 020a 	sub.w	r2, r6, sl
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	ddb3      	ble.n	800abd8 <_dtoa_r+0xad8>
 800ac70:	4649      	mov	r1, r9
 800ac72:	2300      	movs	r3, #0
 800ac74:	220a      	movs	r2, #10
 800ac76:	4658      	mov	r0, fp
 800ac78:	f000 f968 	bl	800af4c <__multadd>
 800ac7c:	4681      	mov	r9, r0
 800ac7e:	e7ea      	b.n	800ac56 <_dtoa_r+0xb56>
 800ac80:	0800e23e 	.word	0x0800e23e
 800ac84:	0800e1d9 	.word	0x0800e1d9

0800ac88 <_free_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	d041      	beq.n	800ad14 <_free_r+0x8c>
 800ac90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac94:	1f0c      	subs	r4, r1, #4
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	bfb8      	it	lt
 800ac9a:	18e4      	addlt	r4, r4, r3
 800ac9c:	f000 f8e8 	bl	800ae70 <__malloc_lock>
 800aca0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad18 <_free_r+0x90>)
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	b933      	cbnz	r3, 800acb4 <_free_r+0x2c>
 800aca6:	6063      	str	r3, [r4, #4]
 800aca8:	6014      	str	r4, [r2, #0]
 800acaa:	4628      	mov	r0, r5
 800acac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acb0:	f000 b8e4 	b.w	800ae7c <__malloc_unlock>
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	d908      	bls.n	800acca <_free_r+0x42>
 800acb8:	6820      	ldr	r0, [r4, #0]
 800acba:	1821      	adds	r1, r4, r0
 800acbc:	428b      	cmp	r3, r1
 800acbe:	bf01      	itttt	eq
 800acc0:	6819      	ldreq	r1, [r3, #0]
 800acc2:	685b      	ldreq	r3, [r3, #4]
 800acc4:	1809      	addeq	r1, r1, r0
 800acc6:	6021      	streq	r1, [r4, #0]
 800acc8:	e7ed      	b.n	800aca6 <_free_r+0x1e>
 800acca:	461a      	mov	r2, r3
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	b10b      	cbz	r3, 800acd4 <_free_r+0x4c>
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	d9fa      	bls.n	800acca <_free_r+0x42>
 800acd4:	6811      	ldr	r1, [r2, #0]
 800acd6:	1850      	adds	r0, r2, r1
 800acd8:	42a0      	cmp	r0, r4
 800acda:	d10b      	bne.n	800acf4 <_free_r+0x6c>
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	4401      	add	r1, r0
 800ace0:	1850      	adds	r0, r2, r1
 800ace2:	4283      	cmp	r3, r0
 800ace4:	6011      	str	r1, [r2, #0]
 800ace6:	d1e0      	bne.n	800acaa <_free_r+0x22>
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	6053      	str	r3, [r2, #4]
 800acee:	4408      	add	r0, r1
 800acf0:	6010      	str	r0, [r2, #0]
 800acf2:	e7da      	b.n	800acaa <_free_r+0x22>
 800acf4:	d902      	bls.n	800acfc <_free_r+0x74>
 800acf6:	230c      	movs	r3, #12
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	e7d6      	b.n	800acaa <_free_r+0x22>
 800acfc:	6820      	ldr	r0, [r4, #0]
 800acfe:	1821      	adds	r1, r4, r0
 800ad00:	428b      	cmp	r3, r1
 800ad02:	bf04      	itt	eq
 800ad04:	6819      	ldreq	r1, [r3, #0]
 800ad06:	685b      	ldreq	r3, [r3, #4]
 800ad08:	6063      	str	r3, [r4, #4]
 800ad0a:	bf04      	itt	eq
 800ad0c:	1809      	addeq	r1, r1, r0
 800ad0e:	6021      	streq	r1, [r4, #0]
 800ad10:	6054      	str	r4, [r2, #4]
 800ad12:	e7ca      	b.n	800acaa <_free_r+0x22>
 800ad14:	bd38      	pop	{r3, r4, r5, pc}
 800ad16:	bf00      	nop
 800ad18:	20001000 	.word	0x20001000

0800ad1c <malloc>:
 800ad1c:	4b02      	ldr	r3, [pc, #8]	@ (800ad28 <malloc+0xc>)
 800ad1e:	4601      	mov	r1, r0
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	f000 b825 	b.w	800ad70 <_malloc_r>
 800ad26:	bf00      	nop
 800ad28:	20000084 	.word	0x20000084

0800ad2c <sbrk_aligned>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	4e0f      	ldr	r6, [pc, #60]	@ (800ad6c <sbrk_aligned+0x40>)
 800ad30:	460c      	mov	r4, r1
 800ad32:	6831      	ldr	r1, [r6, #0]
 800ad34:	4605      	mov	r5, r0
 800ad36:	b911      	cbnz	r1, 800ad3e <sbrk_aligned+0x12>
 800ad38:	f002 fb06 	bl	800d348 <_sbrk_r>
 800ad3c:	6030      	str	r0, [r6, #0]
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	f002 fb01 	bl	800d348 <_sbrk_r>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	d103      	bne.n	800ad52 <sbrk_aligned+0x26>
 800ad4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ad4e:	4620      	mov	r0, r4
 800ad50:	bd70      	pop	{r4, r5, r6, pc}
 800ad52:	1cc4      	adds	r4, r0, #3
 800ad54:	f024 0403 	bic.w	r4, r4, #3
 800ad58:	42a0      	cmp	r0, r4
 800ad5a:	d0f8      	beq.n	800ad4e <sbrk_aligned+0x22>
 800ad5c:	1a21      	subs	r1, r4, r0
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f002 faf2 	bl	800d348 <_sbrk_r>
 800ad64:	3001      	adds	r0, #1
 800ad66:	d1f2      	bne.n	800ad4e <sbrk_aligned+0x22>
 800ad68:	e7ef      	b.n	800ad4a <sbrk_aligned+0x1e>
 800ad6a:	bf00      	nop
 800ad6c:	20000ffc 	.word	0x20000ffc

0800ad70 <_malloc_r>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	1ccd      	adds	r5, r1, #3
 800ad76:	f025 0503 	bic.w	r5, r5, #3
 800ad7a:	3508      	adds	r5, #8
 800ad7c:	2d0c      	cmp	r5, #12
 800ad7e:	bf38      	it	cc
 800ad80:	250c      	movcc	r5, #12
 800ad82:	2d00      	cmp	r5, #0
 800ad84:	4606      	mov	r6, r0
 800ad86:	db01      	blt.n	800ad8c <_malloc_r+0x1c>
 800ad88:	42a9      	cmp	r1, r5
 800ad8a:	d904      	bls.n	800ad96 <_malloc_r+0x26>
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	6033      	str	r3, [r6, #0]
 800ad90:	2000      	movs	r0, #0
 800ad92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae6c <_malloc_r+0xfc>
 800ad9a:	f000 f869 	bl	800ae70 <__malloc_lock>
 800ad9e:	f8d8 3000 	ldr.w	r3, [r8]
 800ada2:	461c      	mov	r4, r3
 800ada4:	bb44      	cbnz	r4, 800adf8 <_malloc_r+0x88>
 800ada6:	4629      	mov	r1, r5
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ffbf 	bl	800ad2c <sbrk_aligned>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	4604      	mov	r4, r0
 800adb2:	d158      	bne.n	800ae66 <_malloc_r+0xf6>
 800adb4:	f8d8 4000 	ldr.w	r4, [r8]
 800adb8:	4627      	mov	r7, r4
 800adba:	2f00      	cmp	r7, #0
 800adbc:	d143      	bne.n	800ae46 <_malloc_r+0xd6>
 800adbe:	2c00      	cmp	r4, #0
 800adc0:	d04b      	beq.n	800ae5a <_malloc_r+0xea>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	4639      	mov	r1, r7
 800adc6:	4630      	mov	r0, r6
 800adc8:	eb04 0903 	add.w	r9, r4, r3
 800adcc:	f002 fabc 	bl	800d348 <_sbrk_r>
 800add0:	4581      	cmp	r9, r0
 800add2:	d142      	bne.n	800ae5a <_malloc_r+0xea>
 800add4:	6821      	ldr	r1, [r4, #0]
 800add6:	1a6d      	subs	r5, r5, r1
 800add8:	4629      	mov	r1, r5
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ffa6 	bl	800ad2c <sbrk_aligned>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d03a      	beq.n	800ae5a <_malloc_r+0xea>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	442b      	add	r3, r5
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	f8d8 3000 	ldr.w	r3, [r8]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	bb62      	cbnz	r2, 800ae4c <_malloc_r+0xdc>
 800adf2:	f8c8 7000 	str.w	r7, [r8]
 800adf6:	e00f      	b.n	800ae18 <_malloc_r+0xa8>
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	1b52      	subs	r2, r2, r5
 800adfc:	d420      	bmi.n	800ae40 <_malloc_r+0xd0>
 800adfe:	2a0b      	cmp	r2, #11
 800ae00:	d917      	bls.n	800ae32 <_malloc_r+0xc2>
 800ae02:	1961      	adds	r1, r4, r5
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	6025      	str	r5, [r4, #0]
 800ae08:	bf18      	it	ne
 800ae0a:	6059      	strne	r1, [r3, #4]
 800ae0c:	6863      	ldr	r3, [r4, #4]
 800ae0e:	bf08      	it	eq
 800ae10:	f8c8 1000 	streq.w	r1, [r8]
 800ae14:	5162      	str	r2, [r4, r5]
 800ae16:	604b      	str	r3, [r1, #4]
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f000 f82f 	bl	800ae7c <__malloc_unlock>
 800ae1e:	f104 000b 	add.w	r0, r4, #11
 800ae22:	1d23      	adds	r3, r4, #4
 800ae24:	f020 0007 	bic.w	r0, r0, #7
 800ae28:	1ac2      	subs	r2, r0, r3
 800ae2a:	bf1c      	itt	ne
 800ae2c:	1a1b      	subne	r3, r3, r0
 800ae2e:	50a3      	strne	r3, [r4, r2]
 800ae30:	e7af      	b.n	800ad92 <_malloc_r+0x22>
 800ae32:	6862      	ldr	r2, [r4, #4]
 800ae34:	42a3      	cmp	r3, r4
 800ae36:	bf0c      	ite	eq
 800ae38:	f8c8 2000 	streq.w	r2, [r8]
 800ae3c:	605a      	strne	r2, [r3, #4]
 800ae3e:	e7eb      	b.n	800ae18 <_malloc_r+0xa8>
 800ae40:	4623      	mov	r3, r4
 800ae42:	6864      	ldr	r4, [r4, #4]
 800ae44:	e7ae      	b.n	800ada4 <_malloc_r+0x34>
 800ae46:	463c      	mov	r4, r7
 800ae48:	687f      	ldr	r7, [r7, #4]
 800ae4a:	e7b6      	b.n	800adba <_malloc_r+0x4a>
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	d1fb      	bne.n	800ae4c <_malloc_r+0xdc>
 800ae54:	2300      	movs	r3, #0
 800ae56:	6053      	str	r3, [r2, #4]
 800ae58:	e7de      	b.n	800ae18 <_malloc_r+0xa8>
 800ae5a:	230c      	movs	r3, #12
 800ae5c:	6033      	str	r3, [r6, #0]
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f000 f80c 	bl	800ae7c <__malloc_unlock>
 800ae64:	e794      	b.n	800ad90 <_malloc_r+0x20>
 800ae66:	6005      	str	r5, [r0, #0]
 800ae68:	e7d6      	b.n	800ae18 <_malloc_r+0xa8>
 800ae6a:	bf00      	nop
 800ae6c:	20001000 	.word	0x20001000

0800ae70 <__malloc_lock>:
 800ae70:	4801      	ldr	r0, [pc, #4]	@ (800ae78 <__malloc_lock+0x8>)
 800ae72:	f7ff b896 	b.w	8009fa2 <__retarget_lock_acquire_recursive>
 800ae76:	bf00      	nop
 800ae78:	20000ff8 	.word	0x20000ff8

0800ae7c <__malloc_unlock>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	@ (800ae84 <__malloc_unlock+0x8>)
 800ae7e:	f7ff b891 	b.w	8009fa4 <__retarget_lock_release_recursive>
 800ae82:	bf00      	nop
 800ae84:	20000ff8 	.word	0x20000ff8

0800ae88 <_Balloc>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	69c6      	ldr	r6, [r0, #28]
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	b976      	cbnz	r6, 800aeb0 <_Balloc+0x28>
 800ae92:	2010      	movs	r0, #16
 800ae94:	f7ff ff42 	bl	800ad1c <malloc>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	61e0      	str	r0, [r4, #28]
 800ae9c:	b920      	cbnz	r0, 800aea8 <_Balloc+0x20>
 800ae9e:	4b18      	ldr	r3, [pc, #96]	@ (800af00 <_Balloc+0x78>)
 800aea0:	4818      	ldr	r0, [pc, #96]	@ (800af04 <_Balloc+0x7c>)
 800aea2:	216b      	movs	r1, #107	@ 0x6b
 800aea4:	f7ff f886 	bl	8009fb4 <__assert_func>
 800aea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeac:	6006      	str	r6, [r0, #0]
 800aeae:	60c6      	str	r6, [r0, #12]
 800aeb0:	69e6      	ldr	r6, [r4, #28]
 800aeb2:	68f3      	ldr	r3, [r6, #12]
 800aeb4:	b183      	cbz	r3, 800aed8 <_Balloc+0x50>
 800aeb6:	69e3      	ldr	r3, [r4, #28]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aebe:	b9b8      	cbnz	r0, 800aef0 <_Balloc+0x68>
 800aec0:	2101      	movs	r1, #1
 800aec2:	fa01 f605 	lsl.w	r6, r1, r5
 800aec6:	1d72      	adds	r2, r6, #5
 800aec8:	0092      	lsls	r2, r2, #2
 800aeca:	4620      	mov	r0, r4
 800aecc:	f002 fa6b 	bl	800d3a6 <_calloc_r>
 800aed0:	b160      	cbz	r0, 800aeec <_Balloc+0x64>
 800aed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aed6:	e00e      	b.n	800aef6 <_Balloc+0x6e>
 800aed8:	2221      	movs	r2, #33	@ 0x21
 800aeda:	2104      	movs	r1, #4
 800aedc:	4620      	mov	r0, r4
 800aede:	f002 fa62 	bl	800d3a6 <_calloc_r>
 800aee2:	69e3      	ldr	r3, [r4, #28]
 800aee4:	60f0      	str	r0, [r6, #12]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e4      	bne.n	800aeb6 <_Balloc+0x2e>
 800aeec:	2000      	movs	r0, #0
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	6802      	ldr	r2, [r0, #0]
 800aef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aef6:	2300      	movs	r3, #0
 800aef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aefc:	e7f7      	b.n	800aeee <_Balloc+0x66>
 800aefe:	bf00      	nop
 800af00:	0800e12c 	.word	0x0800e12c
 800af04:	0800e24f 	.word	0x0800e24f

0800af08 <_Bfree>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	69c6      	ldr	r6, [r0, #28]
 800af0c:	4605      	mov	r5, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	b976      	cbnz	r6, 800af30 <_Bfree+0x28>
 800af12:	2010      	movs	r0, #16
 800af14:	f7ff ff02 	bl	800ad1c <malloc>
 800af18:	4602      	mov	r2, r0
 800af1a:	61e8      	str	r0, [r5, #28]
 800af1c:	b920      	cbnz	r0, 800af28 <_Bfree+0x20>
 800af1e:	4b09      	ldr	r3, [pc, #36]	@ (800af44 <_Bfree+0x3c>)
 800af20:	4809      	ldr	r0, [pc, #36]	@ (800af48 <_Bfree+0x40>)
 800af22:	218f      	movs	r1, #143	@ 0x8f
 800af24:	f7ff f846 	bl	8009fb4 <__assert_func>
 800af28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af2c:	6006      	str	r6, [r0, #0]
 800af2e:	60c6      	str	r6, [r0, #12]
 800af30:	b13c      	cbz	r4, 800af42 <_Bfree+0x3a>
 800af32:	69eb      	ldr	r3, [r5, #28]
 800af34:	6862      	ldr	r2, [r4, #4]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af3c:	6021      	str	r1, [r4, #0]
 800af3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af42:	bd70      	pop	{r4, r5, r6, pc}
 800af44:	0800e12c 	.word	0x0800e12c
 800af48:	0800e24f 	.word	0x0800e24f

0800af4c <__multadd>:
 800af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af50:	690d      	ldr	r5, [r1, #16]
 800af52:	4607      	mov	r7, r0
 800af54:	460c      	mov	r4, r1
 800af56:	461e      	mov	r6, r3
 800af58:	f101 0c14 	add.w	ip, r1, #20
 800af5c:	2000      	movs	r0, #0
 800af5e:	f8dc 3000 	ldr.w	r3, [ip]
 800af62:	b299      	uxth	r1, r3
 800af64:	fb02 6101 	mla	r1, r2, r1, r6
 800af68:	0c1e      	lsrs	r6, r3, #16
 800af6a:	0c0b      	lsrs	r3, r1, #16
 800af6c:	fb02 3306 	mla	r3, r2, r6, r3
 800af70:	b289      	uxth	r1, r1
 800af72:	3001      	adds	r0, #1
 800af74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af78:	4285      	cmp	r5, r0
 800af7a:	f84c 1b04 	str.w	r1, [ip], #4
 800af7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af82:	dcec      	bgt.n	800af5e <__multadd+0x12>
 800af84:	b30e      	cbz	r6, 800afca <__multadd+0x7e>
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	42ab      	cmp	r3, r5
 800af8a:	dc19      	bgt.n	800afc0 <__multadd+0x74>
 800af8c:	6861      	ldr	r1, [r4, #4]
 800af8e:	4638      	mov	r0, r7
 800af90:	3101      	adds	r1, #1
 800af92:	f7ff ff79 	bl	800ae88 <_Balloc>
 800af96:	4680      	mov	r8, r0
 800af98:	b928      	cbnz	r0, 800afa6 <__multadd+0x5a>
 800af9a:	4602      	mov	r2, r0
 800af9c:	4b0c      	ldr	r3, [pc, #48]	@ (800afd0 <__multadd+0x84>)
 800af9e:	480d      	ldr	r0, [pc, #52]	@ (800afd4 <__multadd+0x88>)
 800afa0:	21ba      	movs	r1, #186	@ 0xba
 800afa2:	f7ff f807 	bl	8009fb4 <__assert_func>
 800afa6:	6922      	ldr	r2, [r4, #16]
 800afa8:	3202      	adds	r2, #2
 800afaa:	f104 010c 	add.w	r1, r4, #12
 800afae:	0092      	lsls	r2, r2, #2
 800afb0:	300c      	adds	r0, #12
 800afb2:	f002 f9d9 	bl	800d368 <memcpy>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ffa5 	bl	800af08 <_Bfree>
 800afbe:	4644      	mov	r4, r8
 800afc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afc4:	3501      	adds	r5, #1
 800afc6:	615e      	str	r6, [r3, #20]
 800afc8:	6125      	str	r5, [r4, #16]
 800afca:	4620      	mov	r0, r4
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	0800e23e 	.word	0x0800e23e
 800afd4:	0800e24f 	.word	0x0800e24f

0800afd8 <__s2b>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	460c      	mov	r4, r1
 800afde:	4615      	mov	r5, r2
 800afe0:	461f      	mov	r7, r3
 800afe2:	2209      	movs	r2, #9
 800afe4:	3308      	adds	r3, #8
 800afe6:	4606      	mov	r6, r0
 800afe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800afec:	2100      	movs	r1, #0
 800afee:	2201      	movs	r2, #1
 800aff0:	429a      	cmp	r2, r3
 800aff2:	db09      	blt.n	800b008 <__s2b+0x30>
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7ff ff47 	bl	800ae88 <_Balloc>
 800affa:	b940      	cbnz	r0, 800b00e <__s2b+0x36>
 800affc:	4602      	mov	r2, r0
 800affe:	4b19      	ldr	r3, [pc, #100]	@ (800b064 <__s2b+0x8c>)
 800b000:	4819      	ldr	r0, [pc, #100]	@ (800b068 <__s2b+0x90>)
 800b002:	21d3      	movs	r1, #211	@ 0xd3
 800b004:	f7fe ffd6 	bl	8009fb4 <__assert_func>
 800b008:	0052      	lsls	r2, r2, #1
 800b00a:	3101      	adds	r1, #1
 800b00c:	e7f0      	b.n	800aff0 <__s2b+0x18>
 800b00e:	9b08      	ldr	r3, [sp, #32]
 800b010:	6143      	str	r3, [r0, #20]
 800b012:	2d09      	cmp	r5, #9
 800b014:	f04f 0301 	mov.w	r3, #1
 800b018:	6103      	str	r3, [r0, #16]
 800b01a:	dd16      	ble.n	800b04a <__s2b+0x72>
 800b01c:	f104 0909 	add.w	r9, r4, #9
 800b020:	46c8      	mov	r8, r9
 800b022:	442c      	add	r4, r5
 800b024:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b028:	4601      	mov	r1, r0
 800b02a:	3b30      	subs	r3, #48	@ 0x30
 800b02c:	220a      	movs	r2, #10
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ff8c 	bl	800af4c <__multadd>
 800b034:	45a0      	cmp	r8, r4
 800b036:	d1f5      	bne.n	800b024 <__s2b+0x4c>
 800b038:	f1a5 0408 	sub.w	r4, r5, #8
 800b03c:	444c      	add	r4, r9
 800b03e:	1b2d      	subs	r5, r5, r4
 800b040:	1963      	adds	r3, r4, r5
 800b042:	42bb      	cmp	r3, r7
 800b044:	db04      	blt.n	800b050 <__s2b+0x78>
 800b046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b04a:	340a      	adds	r4, #10
 800b04c:	2509      	movs	r5, #9
 800b04e:	e7f6      	b.n	800b03e <__s2b+0x66>
 800b050:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b054:	4601      	mov	r1, r0
 800b056:	3b30      	subs	r3, #48	@ 0x30
 800b058:	220a      	movs	r2, #10
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ff76 	bl	800af4c <__multadd>
 800b060:	e7ee      	b.n	800b040 <__s2b+0x68>
 800b062:	bf00      	nop
 800b064:	0800e23e 	.word	0x0800e23e
 800b068:	0800e24f 	.word	0x0800e24f

0800b06c <__hi0bits>:
 800b06c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b070:	4603      	mov	r3, r0
 800b072:	bf36      	itet	cc
 800b074:	0403      	lslcc	r3, r0, #16
 800b076:	2000      	movcs	r0, #0
 800b078:	2010      	movcc	r0, #16
 800b07a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b07e:	bf3c      	itt	cc
 800b080:	021b      	lslcc	r3, r3, #8
 800b082:	3008      	addcc	r0, #8
 800b084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b088:	bf3c      	itt	cc
 800b08a:	011b      	lslcc	r3, r3, #4
 800b08c:	3004      	addcc	r0, #4
 800b08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b092:	bf3c      	itt	cc
 800b094:	009b      	lslcc	r3, r3, #2
 800b096:	3002      	addcc	r0, #2
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db05      	blt.n	800b0a8 <__hi0bits+0x3c>
 800b09c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0a0:	f100 0001 	add.w	r0, r0, #1
 800b0a4:	bf08      	it	eq
 800b0a6:	2020      	moveq	r0, #32
 800b0a8:	4770      	bx	lr

0800b0aa <__lo0bits>:
 800b0aa:	6803      	ldr	r3, [r0, #0]
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	f013 0007 	ands.w	r0, r3, #7
 800b0b2:	d00b      	beq.n	800b0cc <__lo0bits+0x22>
 800b0b4:	07d9      	lsls	r1, r3, #31
 800b0b6:	d421      	bmi.n	800b0fc <__lo0bits+0x52>
 800b0b8:	0798      	lsls	r0, r3, #30
 800b0ba:	bf49      	itett	mi
 800b0bc:	085b      	lsrmi	r3, r3, #1
 800b0be:	089b      	lsrpl	r3, r3, #2
 800b0c0:	2001      	movmi	r0, #1
 800b0c2:	6013      	strmi	r3, [r2, #0]
 800b0c4:	bf5c      	itt	pl
 800b0c6:	6013      	strpl	r3, [r2, #0]
 800b0c8:	2002      	movpl	r0, #2
 800b0ca:	4770      	bx	lr
 800b0cc:	b299      	uxth	r1, r3
 800b0ce:	b909      	cbnz	r1, 800b0d4 <__lo0bits+0x2a>
 800b0d0:	0c1b      	lsrs	r3, r3, #16
 800b0d2:	2010      	movs	r0, #16
 800b0d4:	b2d9      	uxtb	r1, r3
 800b0d6:	b909      	cbnz	r1, 800b0dc <__lo0bits+0x32>
 800b0d8:	3008      	adds	r0, #8
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	0719      	lsls	r1, r3, #28
 800b0de:	bf04      	itt	eq
 800b0e0:	091b      	lsreq	r3, r3, #4
 800b0e2:	3004      	addeq	r0, #4
 800b0e4:	0799      	lsls	r1, r3, #30
 800b0e6:	bf04      	itt	eq
 800b0e8:	089b      	lsreq	r3, r3, #2
 800b0ea:	3002      	addeq	r0, #2
 800b0ec:	07d9      	lsls	r1, r3, #31
 800b0ee:	d403      	bmi.n	800b0f8 <__lo0bits+0x4e>
 800b0f0:	085b      	lsrs	r3, r3, #1
 800b0f2:	f100 0001 	add.w	r0, r0, #1
 800b0f6:	d003      	beq.n	800b100 <__lo0bits+0x56>
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	4770      	bx	lr
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	4770      	bx	lr
 800b100:	2020      	movs	r0, #32
 800b102:	4770      	bx	lr

0800b104 <__i2b>:
 800b104:	b510      	push	{r4, lr}
 800b106:	460c      	mov	r4, r1
 800b108:	2101      	movs	r1, #1
 800b10a:	f7ff febd 	bl	800ae88 <_Balloc>
 800b10e:	4602      	mov	r2, r0
 800b110:	b928      	cbnz	r0, 800b11e <__i2b+0x1a>
 800b112:	4b05      	ldr	r3, [pc, #20]	@ (800b128 <__i2b+0x24>)
 800b114:	4805      	ldr	r0, [pc, #20]	@ (800b12c <__i2b+0x28>)
 800b116:	f240 1145 	movw	r1, #325	@ 0x145
 800b11a:	f7fe ff4b 	bl	8009fb4 <__assert_func>
 800b11e:	2301      	movs	r3, #1
 800b120:	6144      	str	r4, [r0, #20]
 800b122:	6103      	str	r3, [r0, #16]
 800b124:	bd10      	pop	{r4, pc}
 800b126:	bf00      	nop
 800b128:	0800e23e 	.word	0x0800e23e
 800b12c:	0800e24f 	.word	0x0800e24f

0800b130 <__multiply>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	4614      	mov	r4, r2
 800b136:	690a      	ldr	r2, [r1, #16]
 800b138:	6923      	ldr	r3, [r4, #16]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	bfa8      	it	ge
 800b13e:	4623      	movge	r3, r4
 800b140:	460f      	mov	r7, r1
 800b142:	bfa4      	itt	ge
 800b144:	460c      	movge	r4, r1
 800b146:	461f      	movge	r7, r3
 800b148:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b14c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b150:	68a3      	ldr	r3, [r4, #8]
 800b152:	6861      	ldr	r1, [r4, #4]
 800b154:	eb0a 0609 	add.w	r6, sl, r9
 800b158:	42b3      	cmp	r3, r6
 800b15a:	b085      	sub	sp, #20
 800b15c:	bfb8      	it	lt
 800b15e:	3101      	addlt	r1, #1
 800b160:	f7ff fe92 	bl	800ae88 <_Balloc>
 800b164:	b930      	cbnz	r0, 800b174 <__multiply+0x44>
 800b166:	4602      	mov	r2, r0
 800b168:	4b44      	ldr	r3, [pc, #272]	@ (800b27c <__multiply+0x14c>)
 800b16a:	4845      	ldr	r0, [pc, #276]	@ (800b280 <__multiply+0x150>)
 800b16c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b170:	f7fe ff20 	bl	8009fb4 <__assert_func>
 800b174:	f100 0514 	add.w	r5, r0, #20
 800b178:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b17c:	462b      	mov	r3, r5
 800b17e:	2200      	movs	r2, #0
 800b180:	4543      	cmp	r3, r8
 800b182:	d321      	bcc.n	800b1c8 <__multiply+0x98>
 800b184:	f107 0114 	add.w	r1, r7, #20
 800b188:	f104 0214 	add.w	r2, r4, #20
 800b18c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b190:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b194:	9302      	str	r3, [sp, #8]
 800b196:	1b13      	subs	r3, r2, r4
 800b198:	3b15      	subs	r3, #21
 800b19a:	f023 0303 	bic.w	r3, r3, #3
 800b19e:	3304      	adds	r3, #4
 800b1a0:	f104 0715 	add.w	r7, r4, #21
 800b1a4:	42ba      	cmp	r2, r7
 800b1a6:	bf38      	it	cc
 800b1a8:	2304      	movcc	r3, #4
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	9b02      	ldr	r3, [sp, #8]
 800b1ae:	9103      	str	r1, [sp, #12]
 800b1b0:	428b      	cmp	r3, r1
 800b1b2:	d80c      	bhi.n	800b1ce <__multiply+0x9e>
 800b1b4:	2e00      	cmp	r6, #0
 800b1b6:	dd03      	ble.n	800b1c0 <__multiply+0x90>
 800b1b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d05b      	beq.n	800b278 <__multiply+0x148>
 800b1c0:	6106      	str	r6, [r0, #16]
 800b1c2:	b005      	add	sp, #20
 800b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c8:	f843 2b04 	str.w	r2, [r3], #4
 800b1cc:	e7d8      	b.n	800b180 <__multiply+0x50>
 800b1ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1d2:	f1ba 0f00 	cmp.w	sl, #0
 800b1d6:	d024      	beq.n	800b222 <__multiply+0xf2>
 800b1d8:	f104 0e14 	add.w	lr, r4, #20
 800b1dc:	46a9      	mov	r9, r5
 800b1de:	f04f 0c00 	mov.w	ip, #0
 800b1e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1e6:	f8d9 3000 	ldr.w	r3, [r9]
 800b1ea:	fa1f fb87 	uxth.w	fp, r7
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b1f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b1f8:	f8d9 7000 	ldr.w	r7, [r9]
 800b1fc:	4463      	add	r3, ip
 800b1fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b202:	fb0a c70b 	mla	r7, sl, fp, ip
 800b206:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b210:	4572      	cmp	r2, lr
 800b212:	f849 3b04 	str.w	r3, [r9], #4
 800b216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b21a:	d8e2      	bhi.n	800b1e2 <__multiply+0xb2>
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	f845 c003 	str.w	ip, [r5, r3]
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b228:	3104      	adds	r1, #4
 800b22a:	f1b9 0f00 	cmp.w	r9, #0
 800b22e:	d021      	beq.n	800b274 <__multiply+0x144>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	f104 0c14 	add.w	ip, r4, #20
 800b236:	46ae      	mov	lr, r5
 800b238:	f04f 0a00 	mov.w	sl, #0
 800b23c:	f8bc b000 	ldrh.w	fp, [ip]
 800b240:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b244:	fb09 770b 	mla	r7, r9, fp, r7
 800b248:	4457      	add	r7, sl
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b250:	f84e 3b04 	str.w	r3, [lr], #4
 800b254:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b25c:	f8be 3000 	ldrh.w	r3, [lr]
 800b260:	fb09 330a 	mla	r3, r9, sl, r3
 800b264:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b268:	4562      	cmp	r2, ip
 800b26a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b26e:	d8e5      	bhi.n	800b23c <__multiply+0x10c>
 800b270:	9f01      	ldr	r7, [sp, #4]
 800b272:	51eb      	str	r3, [r5, r7]
 800b274:	3504      	adds	r5, #4
 800b276:	e799      	b.n	800b1ac <__multiply+0x7c>
 800b278:	3e01      	subs	r6, #1
 800b27a:	e79b      	b.n	800b1b4 <__multiply+0x84>
 800b27c:	0800e23e 	.word	0x0800e23e
 800b280:	0800e24f 	.word	0x0800e24f

0800b284 <__pow5mult>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	4615      	mov	r5, r2
 800b28a:	f012 0203 	ands.w	r2, r2, #3
 800b28e:	4607      	mov	r7, r0
 800b290:	460e      	mov	r6, r1
 800b292:	d007      	beq.n	800b2a4 <__pow5mult+0x20>
 800b294:	4c25      	ldr	r4, [pc, #148]	@ (800b32c <__pow5mult+0xa8>)
 800b296:	3a01      	subs	r2, #1
 800b298:	2300      	movs	r3, #0
 800b29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b29e:	f7ff fe55 	bl	800af4c <__multadd>
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	10ad      	asrs	r5, r5, #2
 800b2a6:	d03d      	beq.n	800b324 <__pow5mult+0xa0>
 800b2a8:	69fc      	ldr	r4, [r7, #28]
 800b2aa:	b97c      	cbnz	r4, 800b2cc <__pow5mult+0x48>
 800b2ac:	2010      	movs	r0, #16
 800b2ae:	f7ff fd35 	bl	800ad1c <malloc>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	61f8      	str	r0, [r7, #28]
 800b2b6:	b928      	cbnz	r0, 800b2c4 <__pow5mult+0x40>
 800b2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b330 <__pow5mult+0xac>)
 800b2ba:	481e      	ldr	r0, [pc, #120]	@ (800b334 <__pow5mult+0xb0>)
 800b2bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2c0:	f7fe fe78 	bl	8009fb4 <__assert_func>
 800b2c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2c8:	6004      	str	r4, [r0, #0]
 800b2ca:	60c4      	str	r4, [r0, #12]
 800b2cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2d4:	b94c      	cbnz	r4, 800b2ea <__pow5mult+0x66>
 800b2d6:	f240 2171 	movw	r1, #625	@ 0x271
 800b2da:	4638      	mov	r0, r7
 800b2dc:	f7ff ff12 	bl	800b104 <__i2b>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	6003      	str	r3, [r0, #0]
 800b2ea:	f04f 0900 	mov.w	r9, #0
 800b2ee:	07eb      	lsls	r3, r5, #31
 800b2f0:	d50a      	bpl.n	800b308 <__pow5mult+0x84>
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	f7ff ff1a 	bl	800b130 <__multiply>
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4680      	mov	r8, r0
 800b300:	4638      	mov	r0, r7
 800b302:	f7ff fe01 	bl	800af08 <_Bfree>
 800b306:	4646      	mov	r6, r8
 800b308:	106d      	asrs	r5, r5, #1
 800b30a:	d00b      	beq.n	800b324 <__pow5mult+0xa0>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	b938      	cbnz	r0, 800b320 <__pow5mult+0x9c>
 800b310:	4622      	mov	r2, r4
 800b312:	4621      	mov	r1, r4
 800b314:	4638      	mov	r0, r7
 800b316:	f7ff ff0b 	bl	800b130 <__multiply>
 800b31a:	6020      	str	r0, [r4, #0]
 800b31c:	f8c0 9000 	str.w	r9, [r0]
 800b320:	4604      	mov	r4, r0
 800b322:	e7e4      	b.n	800b2ee <__pow5mult+0x6a>
 800b324:	4630      	mov	r0, r6
 800b326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32a:	bf00      	nop
 800b32c:	0800e2a8 	.word	0x0800e2a8
 800b330:	0800e12c 	.word	0x0800e12c
 800b334:	0800e24f 	.word	0x0800e24f

0800b338 <__lshift>:
 800b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	460c      	mov	r4, r1
 800b33e:	6849      	ldr	r1, [r1, #4]
 800b340:	6923      	ldr	r3, [r4, #16]
 800b342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	4607      	mov	r7, r0
 800b34a:	4691      	mov	r9, r2
 800b34c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b350:	f108 0601 	add.w	r6, r8, #1
 800b354:	42b3      	cmp	r3, r6
 800b356:	db0b      	blt.n	800b370 <__lshift+0x38>
 800b358:	4638      	mov	r0, r7
 800b35a:	f7ff fd95 	bl	800ae88 <_Balloc>
 800b35e:	4605      	mov	r5, r0
 800b360:	b948      	cbnz	r0, 800b376 <__lshift+0x3e>
 800b362:	4602      	mov	r2, r0
 800b364:	4b28      	ldr	r3, [pc, #160]	@ (800b408 <__lshift+0xd0>)
 800b366:	4829      	ldr	r0, [pc, #164]	@ (800b40c <__lshift+0xd4>)
 800b368:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b36c:	f7fe fe22 	bl	8009fb4 <__assert_func>
 800b370:	3101      	adds	r1, #1
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	e7ee      	b.n	800b354 <__lshift+0x1c>
 800b376:	2300      	movs	r3, #0
 800b378:	f100 0114 	add.w	r1, r0, #20
 800b37c:	f100 0210 	add.w	r2, r0, #16
 800b380:	4618      	mov	r0, r3
 800b382:	4553      	cmp	r3, sl
 800b384:	db33      	blt.n	800b3ee <__lshift+0xb6>
 800b386:	6920      	ldr	r0, [r4, #16]
 800b388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b38c:	f104 0314 	add.w	r3, r4, #20
 800b390:	f019 091f 	ands.w	r9, r9, #31
 800b394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b39c:	d02b      	beq.n	800b3f6 <__lshift+0xbe>
 800b39e:	f1c9 0e20 	rsb	lr, r9, #32
 800b3a2:	468a      	mov	sl, r1
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	6818      	ldr	r0, [r3, #0]
 800b3a8:	fa00 f009 	lsl.w	r0, r0, r9
 800b3ac:	4310      	orrs	r0, r2
 800b3ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b6:	459c      	cmp	ip, r3
 800b3b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3bc:	d8f3      	bhi.n	800b3a6 <__lshift+0x6e>
 800b3be:	ebac 0304 	sub.w	r3, ip, r4
 800b3c2:	3b15      	subs	r3, #21
 800b3c4:	f023 0303 	bic.w	r3, r3, #3
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	f104 0015 	add.w	r0, r4, #21
 800b3ce:	4584      	cmp	ip, r0
 800b3d0:	bf38      	it	cc
 800b3d2:	2304      	movcc	r3, #4
 800b3d4:	50ca      	str	r2, [r1, r3]
 800b3d6:	b10a      	cbz	r2, 800b3dc <__lshift+0xa4>
 800b3d8:	f108 0602 	add.w	r6, r8, #2
 800b3dc:	3e01      	subs	r6, #1
 800b3de:	4638      	mov	r0, r7
 800b3e0:	612e      	str	r6, [r5, #16]
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	f7ff fd90 	bl	800af08 <_Bfree>
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	e7c5      	b.n	800b382 <__lshift+0x4a>
 800b3f6:	3904      	subs	r1, #4
 800b3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b400:	459c      	cmp	ip, r3
 800b402:	d8f9      	bhi.n	800b3f8 <__lshift+0xc0>
 800b404:	e7ea      	b.n	800b3dc <__lshift+0xa4>
 800b406:	bf00      	nop
 800b408:	0800e23e 	.word	0x0800e23e
 800b40c:	0800e24f 	.word	0x0800e24f

0800b410 <__mcmp>:
 800b410:	690a      	ldr	r2, [r1, #16]
 800b412:	4603      	mov	r3, r0
 800b414:	6900      	ldr	r0, [r0, #16]
 800b416:	1a80      	subs	r0, r0, r2
 800b418:	b530      	push	{r4, r5, lr}
 800b41a:	d10e      	bne.n	800b43a <__mcmp+0x2a>
 800b41c:	3314      	adds	r3, #20
 800b41e:	3114      	adds	r1, #20
 800b420:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b424:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b428:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b42c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b430:	4295      	cmp	r5, r2
 800b432:	d003      	beq.n	800b43c <__mcmp+0x2c>
 800b434:	d205      	bcs.n	800b442 <__mcmp+0x32>
 800b436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b43a:	bd30      	pop	{r4, r5, pc}
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d3f3      	bcc.n	800b428 <__mcmp+0x18>
 800b440:	e7fb      	b.n	800b43a <__mcmp+0x2a>
 800b442:	2001      	movs	r0, #1
 800b444:	e7f9      	b.n	800b43a <__mcmp+0x2a>
	...

0800b448 <__mdiff>:
 800b448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	4689      	mov	r9, r1
 800b44e:	4606      	mov	r6, r0
 800b450:	4611      	mov	r1, r2
 800b452:	4648      	mov	r0, r9
 800b454:	4614      	mov	r4, r2
 800b456:	f7ff ffdb 	bl	800b410 <__mcmp>
 800b45a:	1e05      	subs	r5, r0, #0
 800b45c:	d112      	bne.n	800b484 <__mdiff+0x3c>
 800b45e:	4629      	mov	r1, r5
 800b460:	4630      	mov	r0, r6
 800b462:	f7ff fd11 	bl	800ae88 <_Balloc>
 800b466:	4602      	mov	r2, r0
 800b468:	b928      	cbnz	r0, 800b476 <__mdiff+0x2e>
 800b46a:	4b3f      	ldr	r3, [pc, #252]	@ (800b568 <__mdiff+0x120>)
 800b46c:	f240 2137 	movw	r1, #567	@ 0x237
 800b470:	483e      	ldr	r0, [pc, #248]	@ (800b56c <__mdiff+0x124>)
 800b472:	f7fe fd9f 	bl	8009fb4 <__assert_func>
 800b476:	2301      	movs	r3, #1
 800b478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b47c:	4610      	mov	r0, r2
 800b47e:	b003      	add	sp, #12
 800b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b484:	bfbc      	itt	lt
 800b486:	464b      	movlt	r3, r9
 800b488:	46a1      	movlt	r9, r4
 800b48a:	4630      	mov	r0, r6
 800b48c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b490:	bfba      	itte	lt
 800b492:	461c      	movlt	r4, r3
 800b494:	2501      	movlt	r5, #1
 800b496:	2500      	movge	r5, #0
 800b498:	f7ff fcf6 	bl	800ae88 <_Balloc>
 800b49c:	4602      	mov	r2, r0
 800b49e:	b918      	cbnz	r0, 800b4a8 <__mdiff+0x60>
 800b4a0:	4b31      	ldr	r3, [pc, #196]	@ (800b568 <__mdiff+0x120>)
 800b4a2:	f240 2145 	movw	r1, #581	@ 0x245
 800b4a6:	e7e3      	b.n	800b470 <__mdiff+0x28>
 800b4a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4ac:	6926      	ldr	r6, [r4, #16]
 800b4ae:	60c5      	str	r5, [r0, #12]
 800b4b0:	f109 0310 	add.w	r3, r9, #16
 800b4b4:	f109 0514 	add.w	r5, r9, #20
 800b4b8:	f104 0e14 	add.w	lr, r4, #20
 800b4bc:	f100 0b14 	add.w	fp, r0, #20
 800b4c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	46d9      	mov	r9, fp
 800b4cc:	f04f 0c00 	mov.w	ip, #0
 800b4d0:	9b01      	ldr	r3, [sp, #4]
 800b4d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4da:	9301      	str	r3, [sp, #4]
 800b4dc:	fa1f f38a 	uxth.w	r3, sl
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	b283      	uxth	r3, r0
 800b4e4:	1acb      	subs	r3, r1, r3
 800b4e6:	0c00      	lsrs	r0, r0, #16
 800b4e8:	4463      	add	r3, ip
 800b4ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b4f8:	4576      	cmp	r6, lr
 800b4fa:	f849 3b04 	str.w	r3, [r9], #4
 800b4fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b502:	d8e5      	bhi.n	800b4d0 <__mdiff+0x88>
 800b504:	1b33      	subs	r3, r6, r4
 800b506:	3b15      	subs	r3, #21
 800b508:	f023 0303 	bic.w	r3, r3, #3
 800b50c:	3415      	adds	r4, #21
 800b50e:	3304      	adds	r3, #4
 800b510:	42a6      	cmp	r6, r4
 800b512:	bf38      	it	cc
 800b514:	2304      	movcc	r3, #4
 800b516:	441d      	add	r5, r3
 800b518:	445b      	add	r3, fp
 800b51a:	461e      	mov	r6, r3
 800b51c:	462c      	mov	r4, r5
 800b51e:	4544      	cmp	r4, r8
 800b520:	d30e      	bcc.n	800b540 <__mdiff+0xf8>
 800b522:	f108 0103 	add.w	r1, r8, #3
 800b526:	1b49      	subs	r1, r1, r5
 800b528:	f021 0103 	bic.w	r1, r1, #3
 800b52c:	3d03      	subs	r5, #3
 800b52e:	45a8      	cmp	r8, r5
 800b530:	bf38      	it	cc
 800b532:	2100      	movcc	r1, #0
 800b534:	440b      	add	r3, r1
 800b536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b53a:	b191      	cbz	r1, 800b562 <__mdiff+0x11a>
 800b53c:	6117      	str	r7, [r2, #16]
 800b53e:	e79d      	b.n	800b47c <__mdiff+0x34>
 800b540:	f854 1b04 	ldr.w	r1, [r4], #4
 800b544:	46e6      	mov	lr, ip
 800b546:	0c08      	lsrs	r0, r1, #16
 800b548:	fa1c fc81 	uxtah	ip, ip, r1
 800b54c:	4471      	add	r1, lr
 800b54e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b552:	b289      	uxth	r1, r1
 800b554:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b558:	f846 1b04 	str.w	r1, [r6], #4
 800b55c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b560:	e7dd      	b.n	800b51e <__mdiff+0xd6>
 800b562:	3f01      	subs	r7, #1
 800b564:	e7e7      	b.n	800b536 <__mdiff+0xee>
 800b566:	bf00      	nop
 800b568:	0800e23e 	.word	0x0800e23e
 800b56c:	0800e24f 	.word	0x0800e24f

0800b570 <__ulp>:
 800b570:	b082      	sub	sp, #8
 800b572:	ed8d 0b00 	vstr	d0, [sp]
 800b576:	9a01      	ldr	r2, [sp, #4]
 800b578:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b8 <__ulp+0x48>)
 800b57a:	4013      	ands	r3, r2
 800b57c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b580:	2b00      	cmp	r3, #0
 800b582:	dc08      	bgt.n	800b596 <__ulp+0x26>
 800b584:	425b      	negs	r3, r3
 800b586:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b58a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b58e:	da04      	bge.n	800b59a <__ulp+0x2a>
 800b590:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b594:	4113      	asrs	r3, r2
 800b596:	2200      	movs	r2, #0
 800b598:	e008      	b.n	800b5ac <__ulp+0x3c>
 800b59a:	f1a2 0314 	sub.w	r3, r2, #20
 800b59e:	2b1e      	cmp	r3, #30
 800b5a0:	bfda      	itte	le
 800b5a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b5a6:	40da      	lsrle	r2, r3
 800b5a8:	2201      	movgt	r2, #1
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	ec41 0b10 	vmov	d0, r0, r1
 800b5b4:	b002      	add	sp, #8
 800b5b6:	4770      	bx	lr
 800b5b8:	7ff00000 	.word	0x7ff00000

0800b5bc <__b2d>:
 800b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c0:	6906      	ldr	r6, [r0, #16]
 800b5c2:	f100 0814 	add.w	r8, r0, #20
 800b5c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5ca:	1f37      	subs	r7, r6, #4
 800b5cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	f7ff fd4b 	bl	800b06c <__hi0bits>
 800b5d6:	f1c0 0320 	rsb	r3, r0, #32
 800b5da:	280a      	cmp	r0, #10
 800b5dc:	600b      	str	r3, [r1, #0]
 800b5de:	491b      	ldr	r1, [pc, #108]	@ (800b64c <__b2d+0x90>)
 800b5e0:	dc15      	bgt.n	800b60e <__b2d+0x52>
 800b5e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b5ea:	45b8      	cmp	r8, r7
 800b5ec:	ea43 0501 	orr.w	r5, r3, r1
 800b5f0:	bf34      	ite	cc
 800b5f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b5f6:	2300      	movcs	r3, #0
 800b5f8:	3015      	adds	r0, #21
 800b5fa:	fa02 f000 	lsl.w	r0, r2, r0
 800b5fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800b602:	4303      	orrs	r3, r0
 800b604:	461c      	mov	r4, r3
 800b606:	ec45 4b10 	vmov	d0, r4, r5
 800b60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60e:	45b8      	cmp	r8, r7
 800b610:	bf3a      	itte	cc
 800b612:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b616:	f1a6 0708 	subcc.w	r7, r6, #8
 800b61a:	2300      	movcs	r3, #0
 800b61c:	380b      	subs	r0, #11
 800b61e:	d012      	beq.n	800b646 <__b2d+0x8a>
 800b620:	f1c0 0120 	rsb	r1, r0, #32
 800b624:	fa23 f401 	lsr.w	r4, r3, r1
 800b628:	4082      	lsls	r2, r0
 800b62a:	4322      	orrs	r2, r4
 800b62c:	4547      	cmp	r7, r8
 800b62e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b632:	bf8c      	ite	hi
 800b634:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b638:	2200      	movls	r2, #0
 800b63a:	4083      	lsls	r3, r0
 800b63c:	40ca      	lsrs	r2, r1
 800b63e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b642:	4313      	orrs	r3, r2
 800b644:	e7de      	b.n	800b604 <__b2d+0x48>
 800b646:	ea42 0501 	orr.w	r5, r2, r1
 800b64a:	e7db      	b.n	800b604 <__b2d+0x48>
 800b64c:	3ff00000 	.word	0x3ff00000

0800b650 <__d2b>:
 800b650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b654:	460f      	mov	r7, r1
 800b656:	2101      	movs	r1, #1
 800b658:	ec59 8b10 	vmov	r8, r9, d0
 800b65c:	4616      	mov	r6, r2
 800b65e:	f7ff fc13 	bl	800ae88 <_Balloc>
 800b662:	4604      	mov	r4, r0
 800b664:	b930      	cbnz	r0, 800b674 <__d2b+0x24>
 800b666:	4602      	mov	r2, r0
 800b668:	4b23      	ldr	r3, [pc, #140]	@ (800b6f8 <__d2b+0xa8>)
 800b66a:	4824      	ldr	r0, [pc, #144]	@ (800b6fc <__d2b+0xac>)
 800b66c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b670:	f7fe fca0 	bl	8009fb4 <__assert_func>
 800b674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b67c:	b10d      	cbz	r5, 800b682 <__d2b+0x32>
 800b67e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b682:	9301      	str	r3, [sp, #4]
 800b684:	f1b8 0300 	subs.w	r3, r8, #0
 800b688:	d023      	beq.n	800b6d2 <__d2b+0x82>
 800b68a:	4668      	mov	r0, sp
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	f7ff fd0c 	bl	800b0aa <__lo0bits>
 800b692:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b696:	b1d0      	cbz	r0, 800b6ce <__d2b+0x7e>
 800b698:	f1c0 0320 	rsb	r3, r0, #32
 800b69c:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a0:	430b      	orrs	r3, r1
 800b6a2:	40c2      	lsrs	r2, r0
 800b6a4:	6163      	str	r3, [r4, #20]
 800b6a6:	9201      	str	r2, [sp, #4]
 800b6a8:	9b01      	ldr	r3, [sp, #4]
 800b6aa:	61a3      	str	r3, [r4, #24]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bf0c      	ite	eq
 800b6b0:	2201      	moveq	r2, #1
 800b6b2:	2202      	movne	r2, #2
 800b6b4:	6122      	str	r2, [r4, #16]
 800b6b6:	b1a5      	cbz	r5, 800b6e2 <__d2b+0x92>
 800b6b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6bc:	4405      	add	r5, r0
 800b6be:	603d      	str	r5, [r7, #0]
 800b6c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6c4:	6030      	str	r0, [r6, #0]
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	b003      	add	sp, #12
 800b6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ce:	6161      	str	r1, [r4, #20]
 800b6d0:	e7ea      	b.n	800b6a8 <__d2b+0x58>
 800b6d2:	a801      	add	r0, sp, #4
 800b6d4:	f7ff fce9 	bl	800b0aa <__lo0bits>
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	6163      	str	r3, [r4, #20]
 800b6dc:	3020      	adds	r0, #32
 800b6de:	2201      	movs	r2, #1
 800b6e0:	e7e8      	b.n	800b6b4 <__d2b+0x64>
 800b6e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6ea:	6038      	str	r0, [r7, #0]
 800b6ec:	6918      	ldr	r0, [r3, #16]
 800b6ee:	f7ff fcbd 	bl	800b06c <__hi0bits>
 800b6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6f6:	e7e5      	b.n	800b6c4 <__d2b+0x74>
 800b6f8:	0800e23e 	.word	0x0800e23e
 800b6fc:	0800e24f 	.word	0x0800e24f

0800b700 <__ratio>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	b085      	sub	sp, #20
 800b706:	e9cd 1000 	strd	r1, r0, [sp]
 800b70a:	a902      	add	r1, sp, #8
 800b70c:	f7ff ff56 	bl	800b5bc <__b2d>
 800b710:	9800      	ldr	r0, [sp, #0]
 800b712:	a903      	add	r1, sp, #12
 800b714:	ec55 4b10 	vmov	r4, r5, d0
 800b718:	f7ff ff50 	bl	800b5bc <__b2d>
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	6919      	ldr	r1, [r3, #16]
 800b720:	9b00      	ldr	r3, [sp, #0]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	1ac9      	subs	r1, r1, r3
 800b726:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b72a:	1a9b      	subs	r3, r3, r2
 800b72c:	ec5b ab10 	vmov	sl, fp, d0
 800b730:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b734:	2b00      	cmp	r3, #0
 800b736:	bfce      	itee	gt
 800b738:	462a      	movgt	r2, r5
 800b73a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b73e:	465a      	movle	r2, fp
 800b740:	462f      	mov	r7, r5
 800b742:	46d9      	mov	r9, fp
 800b744:	bfcc      	ite	gt
 800b746:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b74a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b74e:	464b      	mov	r3, r9
 800b750:	4652      	mov	r2, sl
 800b752:	4620      	mov	r0, r4
 800b754:	4639      	mov	r1, r7
 800b756:	f7f5 f889 	bl	800086c <__aeabi_ddiv>
 800b75a:	ec41 0b10 	vmov	d0, r0, r1
 800b75e:	b005      	add	sp, #20
 800b760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b764 <__copybits>:
 800b764:	3901      	subs	r1, #1
 800b766:	b570      	push	{r4, r5, r6, lr}
 800b768:	1149      	asrs	r1, r1, #5
 800b76a:	6914      	ldr	r4, [r2, #16]
 800b76c:	3101      	adds	r1, #1
 800b76e:	f102 0314 	add.w	r3, r2, #20
 800b772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b77a:	1f05      	subs	r5, r0, #4
 800b77c:	42a3      	cmp	r3, r4
 800b77e:	d30c      	bcc.n	800b79a <__copybits+0x36>
 800b780:	1aa3      	subs	r3, r4, r2
 800b782:	3b11      	subs	r3, #17
 800b784:	f023 0303 	bic.w	r3, r3, #3
 800b788:	3211      	adds	r2, #17
 800b78a:	42a2      	cmp	r2, r4
 800b78c:	bf88      	it	hi
 800b78e:	2300      	movhi	r3, #0
 800b790:	4418      	add	r0, r3
 800b792:	2300      	movs	r3, #0
 800b794:	4288      	cmp	r0, r1
 800b796:	d305      	bcc.n	800b7a4 <__copybits+0x40>
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b79e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7a2:	e7eb      	b.n	800b77c <__copybits+0x18>
 800b7a4:	f840 3b04 	str.w	r3, [r0], #4
 800b7a8:	e7f4      	b.n	800b794 <__copybits+0x30>

0800b7aa <__any_on>:
 800b7aa:	f100 0214 	add.w	r2, r0, #20
 800b7ae:	6900      	ldr	r0, [r0, #16]
 800b7b0:	114b      	asrs	r3, r1, #5
 800b7b2:	4298      	cmp	r0, r3
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	db11      	blt.n	800b7dc <__any_on+0x32>
 800b7b8:	dd0a      	ble.n	800b7d0 <__any_on+0x26>
 800b7ba:	f011 011f 	ands.w	r1, r1, #31
 800b7be:	d007      	beq.n	800b7d0 <__any_on+0x26>
 800b7c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7c4:	fa24 f001 	lsr.w	r0, r4, r1
 800b7c8:	fa00 f101 	lsl.w	r1, r0, r1
 800b7cc:	428c      	cmp	r4, r1
 800b7ce:	d10b      	bne.n	800b7e8 <__any_on+0x3e>
 800b7d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d803      	bhi.n	800b7e0 <__any_on+0x36>
 800b7d8:	2000      	movs	r0, #0
 800b7da:	bd10      	pop	{r4, pc}
 800b7dc:	4603      	mov	r3, r0
 800b7de:	e7f7      	b.n	800b7d0 <__any_on+0x26>
 800b7e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7e4:	2900      	cmp	r1, #0
 800b7e6:	d0f5      	beq.n	800b7d4 <__any_on+0x2a>
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	e7f6      	b.n	800b7da <__any_on+0x30>

0800b7ec <sulp>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	460d      	mov	r5, r1
 800b7f2:	ec45 4b10 	vmov	d0, r4, r5
 800b7f6:	4616      	mov	r6, r2
 800b7f8:	f7ff feba 	bl	800b570 <__ulp>
 800b7fc:	ec51 0b10 	vmov	r0, r1, d0
 800b800:	b17e      	cbz	r6, 800b822 <sulp+0x36>
 800b802:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b806:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	dd09      	ble.n	800b822 <sulp+0x36>
 800b80e:	051b      	lsls	r3, r3, #20
 800b810:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b814:	2400      	movs	r4, #0
 800b816:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b81a:	4622      	mov	r2, r4
 800b81c:	462b      	mov	r3, r5
 800b81e:	f7f4 fefb 	bl	8000618 <__aeabi_dmul>
 800b822:	ec41 0b10 	vmov	d0, r0, r1
 800b826:	bd70      	pop	{r4, r5, r6, pc}

0800b828 <_strtod_l>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	b09f      	sub	sp, #124	@ 0x7c
 800b82e:	460c      	mov	r4, r1
 800b830:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b832:	2200      	movs	r2, #0
 800b834:	921a      	str	r2, [sp, #104]	@ 0x68
 800b836:	9005      	str	r0, [sp, #20]
 800b838:	f04f 0a00 	mov.w	sl, #0
 800b83c:	f04f 0b00 	mov.w	fp, #0
 800b840:	460a      	mov	r2, r1
 800b842:	9219      	str	r2, [sp, #100]	@ 0x64
 800b844:	7811      	ldrb	r1, [r2, #0]
 800b846:	292b      	cmp	r1, #43	@ 0x2b
 800b848:	d04a      	beq.n	800b8e0 <_strtod_l+0xb8>
 800b84a:	d838      	bhi.n	800b8be <_strtod_l+0x96>
 800b84c:	290d      	cmp	r1, #13
 800b84e:	d832      	bhi.n	800b8b6 <_strtod_l+0x8e>
 800b850:	2908      	cmp	r1, #8
 800b852:	d832      	bhi.n	800b8ba <_strtod_l+0x92>
 800b854:	2900      	cmp	r1, #0
 800b856:	d03b      	beq.n	800b8d0 <_strtod_l+0xa8>
 800b858:	2200      	movs	r2, #0
 800b85a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b85c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b85e:	782a      	ldrb	r2, [r5, #0]
 800b860:	2a30      	cmp	r2, #48	@ 0x30
 800b862:	f040 80b3 	bne.w	800b9cc <_strtod_l+0x1a4>
 800b866:	786a      	ldrb	r2, [r5, #1]
 800b868:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b86c:	2a58      	cmp	r2, #88	@ 0x58
 800b86e:	d16e      	bne.n	800b94e <_strtod_l+0x126>
 800b870:	9302      	str	r3, [sp, #8]
 800b872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	ab1a      	add	r3, sp, #104	@ 0x68
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	4a8e      	ldr	r2, [pc, #568]	@ (800bab4 <_strtod_l+0x28c>)
 800b87c:	9805      	ldr	r0, [sp, #20]
 800b87e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b880:	a919      	add	r1, sp, #100	@ 0x64
 800b882:	f001 fe0b 	bl	800d49c <__gethex>
 800b886:	f010 060f 	ands.w	r6, r0, #15
 800b88a:	4604      	mov	r4, r0
 800b88c:	d005      	beq.n	800b89a <_strtod_l+0x72>
 800b88e:	2e06      	cmp	r6, #6
 800b890:	d128      	bne.n	800b8e4 <_strtod_l+0xbc>
 800b892:	3501      	adds	r5, #1
 800b894:	2300      	movs	r3, #0
 800b896:	9519      	str	r5, [sp, #100]	@ 0x64
 800b898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b89a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f040 858e 	bne.w	800c3be <_strtod_l+0xb96>
 800b8a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a4:	b1cb      	cbz	r3, 800b8da <_strtod_l+0xb2>
 800b8a6:	4652      	mov	r2, sl
 800b8a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b8ac:	ec43 2b10 	vmov	d0, r2, r3
 800b8b0:	b01f      	add	sp, #124	@ 0x7c
 800b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b6:	2920      	cmp	r1, #32
 800b8b8:	d1ce      	bne.n	800b858 <_strtod_l+0x30>
 800b8ba:	3201      	adds	r2, #1
 800b8bc:	e7c1      	b.n	800b842 <_strtod_l+0x1a>
 800b8be:	292d      	cmp	r1, #45	@ 0x2d
 800b8c0:	d1ca      	bne.n	800b858 <_strtod_l+0x30>
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8c6:	1c51      	adds	r1, r2, #1
 800b8c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8ca:	7852      	ldrb	r2, [r2, #1]
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	d1c5      	bne.n	800b85c <_strtod_l+0x34>
 800b8d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 8570 	bne.w	800c3ba <_strtod_l+0xb92>
 800b8da:	4652      	mov	r2, sl
 800b8dc:	465b      	mov	r3, fp
 800b8de:	e7e5      	b.n	800b8ac <_strtod_l+0x84>
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	e7ef      	b.n	800b8c4 <_strtod_l+0x9c>
 800b8e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b8e6:	b13a      	cbz	r2, 800b8f8 <_strtod_l+0xd0>
 800b8e8:	2135      	movs	r1, #53	@ 0x35
 800b8ea:	a81c      	add	r0, sp, #112	@ 0x70
 800b8ec:	f7ff ff3a 	bl	800b764 <__copybits>
 800b8f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8f2:	9805      	ldr	r0, [sp, #20]
 800b8f4:	f7ff fb08 	bl	800af08 <_Bfree>
 800b8f8:	3e01      	subs	r6, #1
 800b8fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b8fc:	2e04      	cmp	r6, #4
 800b8fe:	d806      	bhi.n	800b90e <_strtod_l+0xe6>
 800b900:	e8df f006 	tbb	[pc, r6]
 800b904:	201d0314 	.word	0x201d0314
 800b908:	14          	.byte	0x14
 800b909:	00          	.byte	0x00
 800b90a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b90e:	05e1      	lsls	r1, r4, #23
 800b910:	bf48      	it	mi
 800b912:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b91a:	0d1b      	lsrs	r3, r3, #20
 800b91c:	051b      	lsls	r3, r3, #20
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1bb      	bne.n	800b89a <_strtod_l+0x72>
 800b922:	f7fe fb13 	bl	8009f4c <__errno>
 800b926:	2322      	movs	r3, #34	@ 0x22
 800b928:	6003      	str	r3, [r0, #0]
 800b92a:	e7b6      	b.n	800b89a <_strtod_l+0x72>
 800b92c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b930:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b934:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b938:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b93c:	e7e7      	b.n	800b90e <_strtod_l+0xe6>
 800b93e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800babc <_strtod_l+0x294>
 800b942:	e7e4      	b.n	800b90e <_strtod_l+0xe6>
 800b944:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b948:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b94c:	e7df      	b.n	800b90e <_strtod_l+0xe6>
 800b94e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	9219      	str	r2, [sp, #100]	@ 0x64
 800b954:	785b      	ldrb	r3, [r3, #1]
 800b956:	2b30      	cmp	r3, #48	@ 0x30
 800b958:	d0f9      	beq.n	800b94e <_strtod_l+0x126>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d09d      	beq.n	800b89a <_strtod_l+0x72>
 800b95e:	2301      	movs	r3, #1
 800b960:	9309      	str	r3, [sp, #36]	@ 0x24
 800b962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b964:	930c      	str	r3, [sp, #48]	@ 0x30
 800b966:	2300      	movs	r3, #0
 800b968:	9308      	str	r3, [sp, #32]
 800b96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b96c:	461f      	mov	r7, r3
 800b96e:	220a      	movs	r2, #10
 800b970:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b972:	7805      	ldrb	r5, [r0, #0]
 800b974:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b978:	b2d9      	uxtb	r1, r3
 800b97a:	2909      	cmp	r1, #9
 800b97c:	d928      	bls.n	800b9d0 <_strtod_l+0x1a8>
 800b97e:	494e      	ldr	r1, [pc, #312]	@ (800bab8 <_strtod_l+0x290>)
 800b980:	2201      	movs	r2, #1
 800b982:	f001 fccf 	bl	800d324 <strncmp>
 800b986:	2800      	cmp	r0, #0
 800b988:	d032      	beq.n	800b9f0 <_strtod_l+0x1c8>
 800b98a:	2000      	movs	r0, #0
 800b98c:	462a      	mov	r2, r5
 800b98e:	4681      	mov	r9, r0
 800b990:	463d      	mov	r5, r7
 800b992:	4603      	mov	r3, r0
 800b994:	2a65      	cmp	r2, #101	@ 0x65
 800b996:	d001      	beq.n	800b99c <_strtod_l+0x174>
 800b998:	2a45      	cmp	r2, #69	@ 0x45
 800b99a:	d114      	bne.n	800b9c6 <_strtod_l+0x19e>
 800b99c:	b91d      	cbnz	r5, 800b9a6 <_strtod_l+0x17e>
 800b99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9a0:	4302      	orrs	r2, r0
 800b9a2:	d095      	beq.n	800b8d0 <_strtod_l+0xa8>
 800b9a4:	2500      	movs	r5, #0
 800b9a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b9a8:	1c62      	adds	r2, r4, #1
 800b9aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9ac:	7862      	ldrb	r2, [r4, #1]
 800b9ae:	2a2b      	cmp	r2, #43	@ 0x2b
 800b9b0:	d077      	beq.n	800baa2 <_strtod_l+0x27a>
 800b9b2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b9b4:	d07b      	beq.n	800baae <_strtod_l+0x286>
 800b9b6:	f04f 0c00 	mov.w	ip, #0
 800b9ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b9be:	2909      	cmp	r1, #9
 800b9c0:	f240 8082 	bls.w	800bac8 <_strtod_l+0x2a0>
 800b9c4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9c6:	f04f 0800 	mov.w	r8, #0
 800b9ca:	e0a2      	b.n	800bb12 <_strtod_l+0x2ea>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e7c7      	b.n	800b960 <_strtod_l+0x138>
 800b9d0:	2f08      	cmp	r7, #8
 800b9d2:	bfd5      	itete	le
 800b9d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b9d6:	9908      	ldrgt	r1, [sp, #32]
 800b9d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b9dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b9e0:	f100 0001 	add.w	r0, r0, #1
 800b9e4:	bfd4      	ite	le
 800b9e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b9e8:	9308      	strgt	r3, [sp, #32]
 800b9ea:	3701      	adds	r7, #1
 800b9ec:	9019      	str	r0, [sp, #100]	@ 0x64
 800b9ee:	e7bf      	b.n	800b970 <_strtod_l+0x148>
 800b9f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9f6:	785a      	ldrb	r2, [r3, #1]
 800b9f8:	b37f      	cbz	r7, 800ba5a <_strtod_l+0x232>
 800b9fa:	4681      	mov	r9, r0
 800b9fc:	463d      	mov	r5, r7
 800b9fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ba02:	2b09      	cmp	r3, #9
 800ba04:	d912      	bls.n	800ba2c <_strtod_l+0x204>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e7c4      	b.n	800b994 <_strtod_l+0x16c>
 800ba0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba10:	785a      	ldrb	r2, [r3, #1]
 800ba12:	3001      	adds	r0, #1
 800ba14:	2a30      	cmp	r2, #48	@ 0x30
 800ba16:	d0f8      	beq.n	800ba0a <_strtod_l+0x1e2>
 800ba18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ba1c:	2b08      	cmp	r3, #8
 800ba1e:	f200 84d3 	bhi.w	800c3c8 <_strtod_l+0xba0>
 800ba22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba26:	4681      	mov	r9, r0
 800ba28:	2000      	movs	r0, #0
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	3a30      	subs	r2, #48	@ 0x30
 800ba2e:	f100 0301 	add.w	r3, r0, #1
 800ba32:	d02a      	beq.n	800ba8a <_strtod_l+0x262>
 800ba34:	4499      	add	r9, r3
 800ba36:	eb00 0c05 	add.w	ip, r0, r5
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	210a      	movs	r1, #10
 800ba3e:	4563      	cmp	r3, ip
 800ba40:	d10d      	bne.n	800ba5e <_strtod_l+0x236>
 800ba42:	1c69      	adds	r1, r5, #1
 800ba44:	4401      	add	r1, r0
 800ba46:	4428      	add	r0, r5
 800ba48:	2808      	cmp	r0, #8
 800ba4a:	dc16      	bgt.n	800ba7a <_strtod_l+0x252>
 800ba4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba4e:	230a      	movs	r3, #10
 800ba50:	fb03 2300 	mla	r3, r3, r0, r2
 800ba54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba56:	2300      	movs	r3, #0
 800ba58:	e018      	b.n	800ba8c <_strtod_l+0x264>
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	e7da      	b.n	800ba14 <_strtod_l+0x1ec>
 800ba5e:	2b08      	cmp	r3, #8
 800ba60:	f103 0301 	add.w	r3, r3, #1
 800ba64:	dc03      	bgt.n	800ba6e <_strtod_l+0x246>
 800ba66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ba68:	434e      	muls	r6, r1
 800ba6a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ba6c:	e7e7      	b.n	800ba3e <_strtod_l+0x216>
 800ba6e:	2b10      	cmp	r3, #16
 800ba70:	bfde      	ittt	le
 800ba72:	9e08      	ldrle	r6, [sp, #32]
 800ba74:	434e      	mulle	r6, r1
 800ba76:	9608      	strle	r6, [sp, #32]
 800ba78:	e7e1      	b.n	800ba3e <_strtod_l+0x216>
 800ba7a:	280f      	cmp	r0, #15
 800ba7c:	dceb      	bgt.n	800ba56 <_strtod_l+0x22e>
 800ba7e:	9808      	ldr	r0, [sp, #32]
 800ba80:	230a      	movs	r3, #10
 800ba82:	fb03 2300 	mla	r3, r3, r0, r2
 800ba86:	9308      	str	r3, [sp, #32]
 800ba88:	e7e5      	b.n	800ba56 <_strtod_l+0x22e>
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba8e:	1c50      	adds	r0, r2, #1
 800ba90:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba92:	7852      	ldrb	r2, [r2, #1]
 800ba94:	4618      	mov	r0, r3
 800ba96:	460d      	mov	r5, r1
 800ba98:	e7b1      	b.n	800b9fe <_strtod_l+0x1d6>
 800ba9a:	f04f 0900 	mov.w	r9, #0
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e77d      	b.n	800b99e <_strtod_l+0x176>
 800baa2:	f04f 0c00 	mov.w	ip, #0
 800baa6:	1ca2      	adds	r2, r4, #2
 800baa8:	9219      	str	r2, [sp, #100]	@ 0x64
 800baaa:	78a2      	ldrb	r2, [r4, #2]
 800baac:	e785      	b.n	800b9ba <_strtod_l+0x192>
 800baae:	f04f 0c01 	mov.w	ip, #1
 800bab2:	e7f8      	b.n	800baa6 <_strtod_l+0x27e>
 800bab4:	0800e3c0 	.word	0x0800e3c0
 800bab8:	0800e3a8 	.word	0x0800e3a8
 800babc:	7ff00000 	.word	0x7ff00000
 800bac0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bac2:	1c51      	adds	r1, r2, #1
 800bac4:	9119      	str	r1, [sp, #100]	@ 0x64
 800bac6:	7852      	ldrb	r2, [r2, #1]
 800bac8:	2a30      	cmp	r2, #48	@ 0x30
 800baca:	d0f9      	beq.n	800bac0 <_strtod_l+0x298>
 800bacc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bad0:	2908      	cmp	r1, #8
 800bad2:	f63f af78 	bhi.w	800b9c6 <_strtod_l+0x19e>
 800bad6:	3a30      	subs	r2, #48	@ 0x30
 800bad8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800badc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bade:	f04f 080a 	mov.w	r8, #10
 800bae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bae4:	1c56      	adds	r6, r2, #1
 800bae6:	9619      	str	r6, [sp, #100]	@ 0x64
 800bae8:	7852      	ldrb	r2, [r2, #1]
 800baea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800baee:	f1be 0f09 	cmp.w	lr, #9
 800baf2:	d939      	bls.n	800bb68 <_strtod_l+0x340>
 800baf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800baf6:	1a76      	subs	r6, r6, r1
 800baf8:	2e08      	cmp	r6, #8
 800bafa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bafe:	dc03      	bgt.n	800bb08 <_strtod_l+0x2e0>
 800bb00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb02:	4588      	cmp	r8, r1
 800bb04:	bfa8      	it	ge
 800bb06:	4688      	movge	r8, r1
 800bb08:	f1bc 0f00 	cmp.w	ip, #0
 800bb0c:	d001      	beq.n	800bb12 <_strtod_l+0x2ea>
 800bb0e:	f1c8 0800 	rsb	r8, r8, #0
 800bb12:	2d00      	cmp	r5, #0
 800bb14:	d14e      	bne.n	800bbb4 <_strtod_l+0x38c>
 800bb16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb18:	4308      	orrs	r0, r1
 800bb1a:	f47f aebe 	bne.w	800b89a <_strtod_l+0x72>
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f47f aed6 	bne.w	800b8d0 <_strtod_l+0xa8>
 800bb24:	2a69      	cmp	r2, #105	@ 0x69
 800bb26:	d028      	beq.n	800bb7a <_strtod_l+0x352>
 800bb28:	dc25      	bgt.n	800bb76 <_strtod_l+0x34e>
 800bb2a:	2a49      	cmp	r2, #73	@ 0x49
 800bb2c:	d025      	beq.n	800bb7a <_strtod_l+0x352>
 800bb2e:	2a4e      	cmp	r2, #78	@ 0x4e
 800bb30:	f47f aece 	bne.w	800b8d0 <_strtod_l+0xa8>
 800bb34:	499b      	ldr	r1, [pc, #620]	@ (800bda4 <_strtod_l+0x57c>)
 800bb36:	a819      	add	r0, sp, #100	@ 0x64
 800bb38:	f001 fed2 	bl	800d8e0 <__match>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f43f aec7 	beq.w	800b8d0 <_strtod_l+0xa8>
 800bb42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b28      	cmp	r3, #40	@ 0x28
 800bb48:	d12e      	bne.n	800bba8 <_strtod_l+0x380>
 800bb4a:	4997      	ldr	r1, [pc, #604]	@ (800bda8 <_strtod_l+0x580>)
 800bb4c:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb4e:	a819      	add	r0, sp, #100	@ 0x64
 800bb50:	f001 feda 	bl	800d908 <__hexnan>
 800bb54:	2805      	cmp	r0, #5
 800bb56:	d127      	bne.n	800bba8 <_strtod_l+0x380>
 800bb58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bb5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bb62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bb66:	e698      	b.n	800b89a <_strtod_l+0x72>
 800bb68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb6a:	fb08 2101 	mla	r1, r8, r1, r2
 800bb6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bb72:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb74:	e7b5      	b.n	800bae2 <_strtod_l+0x2ba>
 800bb76:	2a6e      	cmp	r2, #110	@ 0x6e
 800bb78:	e7da      	b.n	800bb30 <_strtod_l+0x308>
 800bb7a:	498c      	ldr	r1, [pc, #560]	@ (800bdac <_strtod_l+0x584>)
 800bb7c:	a819      	add	r0, sp, #100	@ 0x64
 800bb7e:	f001 feaf 	bl	800d8e0 <__match>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	f43f aea4 	beq.w	800b8d0 <_strtod_l+0xa8>
 800bb88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb8a:	4989      	ldr	r1, [pc, #548]	@ (800bdb0 <_strtod_l+0x588>)
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	a819      	add	r0, sp, #100	@ 0x64
 800bb90:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb92:	f001 fea5 	bl	800d8e0 <__match>
 800bb96:	b910      	cbnz	r0, 800bb9e <_strtod_l+0x376>
 800bb98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bdc0 <_strtod_l+0x598>
 800bba2:	f04f 0a00 	mov.w	sl, #0
 800bba6:	e678      	b.n	800b89a <_strtod_l+0x72>
 800bba8:	4882      	ldr	r0, [pc, #520]	@ (800bdb4 <_strtod_l+0x58c>)
 800bbaa:	f001 fbed 	bl	800d388 <nan>
 800bbae:	ec5b ab10 	vmov	sl, fp, d0
 800bbb2:	e672      	b.n	800b89a <_strtod_l+0x72>
 800bbb4:	eba8 0309 	sub.w	r3, r8, r9
 800bbb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	bf08      	it	eq
 800bbc0:	462f      	moveq	r7, r5
 800bbc2:	2d10      	cmp	r5, #16
 800bbc4:	462c      	mov	r4, r5
 800bbc6:	bfa8      	it	ge
 800bbc8:	2410      	movge	r4, #16
 800bbca:	f7f4 fcab 	bl	8000524 <__aeabi_ui2d>
 800bbce:	2d09      	cmp	r5, #9
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	468b      	mov	fp, r1
 800bbd4:	dc13      	bgt.n	800bbfe <_strtod_l+0x3d6>
 800bbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f43f ae5e 	beq.w	800b89a <_strtod_l+0x72>
 800bbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbe0:	dd78      	ble.n	800bcd4 <_strtod_l+0x4ac>
 800bbe2:	2b16      	cmp	r3, #22
 800bbe4:	dc5f      	bgt.n	800bca6 <_strtod_l+0x47e>
 800bbe6:	4974      	ldr	r1, [pc, #464]	@ (800bdb8 <_strtod_l+0x590>)
 800bbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbf0:	4652      	mov	r2, sl
 800bbf2:	465b      	mov	r3, fp
 800bbf4:	f7f4 fd10 	bl	8000618 <__aeabi_dmul>
 800bbf8:	4682      	mov	sl, r0
 800bbfa:	468b      	mov	fp, r1
 800bbfc:	e64d      	b.n	800b89a <_strtod_l+0x72>
 800bbfe:	4b6e      	ldr	r3, [pc, #440]	@ (800bdb8 <_strtod_l+0x590>)
 800bc00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bc08:	f7f4 fd06 	bl	8000618 <__aeabi_dmul>
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	9808      	ldr	r0, [sp, #32]
 800bc10:	468b      	mov	fp, r1
 800bc12:	f7f4 fc87 	bl	8000524 <__aeabi_ui2d>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4650      	mov	r0, sl
 800bc1c:	4659      	mov	r1, fp
 800bc1e:	f7f4 fb45 	bl	80002ac <__adddf3>
 800bc22:	2d0f      	cmp	r5, #15
 800bc24:	4682      	mov	sl, r0
 800bc26:	468b      	mov	fp, r1
 800bc28:	ddd5      	ble.n	800bbd6 <_strtod_l+0x3ae>
 800bc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc2c:	1b2c      	subs	r4, r5, r4
 800bc2e:	441c      	add	r4, r3
 800bc30:	2c00      	cmp	r4, #0
 800bc32:	f340 8096 	ble.w	800bd62 <_strtod_l+0x53a>
 800bc36:	f014 030f 	ands.w	r3, r4, #15
 800bc3a:	d00a      	beq.n	800bc52 <_strtod_l+0x42a>
 800bc3c:	495e      	ldr	r1, [pc, #376]	@ (800bdb8 <_strtod_l+0x590>)
 800bc3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc42:	4652      	mov	r2, sl
 800bc44:	465b      	mov	r3, fp
 800bc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc4a:	f7f4 fce5 	bl	8000618 <__aeabi_dmul>
 800bc4e:	4682      	mov	sl, r0
 800bc50:	468b      	mov	fp, r1
 800bc52:	f034 040f 	bics.w	r4, r4, #15
 800bc56:	d073      	beq.n	800bd40 <_strtod_l+0x518>
 800bc58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bc5c:	dd48      	ble.n	800bcf0 <_strtod_l+0x4c8>
 800bc5e:	2400      	movs	r4, #0
 800bc60:	46a0      	mov	r8, r4
 800bc62:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc64:	46a1      	mov	r9, r4
 800bc66:	9a05      	ldr	r2, [sp, #20]
 800bc68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bdc0 <_strtod_l+0x598>
 800bc6c:	2322      	movs	r3, #34	@ 0x22
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	f04f 0a00 	mov.w	sl, #0
 800bc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f43f ae0f 	beq.w	800b89a <_strtod_l+0x72>
 800bc7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc7e:	9805      	ldr	r0, [sp, #20]
 800bc80:	f7ff f942 	bl	800af08 <_Bfree>
 800bc84:	9805      	ldr	r0, [sp, #20]
 800bc86:	4649      	mov	r1, r9
 800bc88:	f7ff f93e 	bl	800af08 <_Bfree>
 800bc8c:	9805      	ldr	r0, [sp, #20]
 800bc8e:	4641      	mov	r1, r8
 800bc90:	f7ff f93a 	bl	800af08 <_Bfree>
 800bc94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc96:	9805      	ldr	r0, [sp, #20]
 800bc98:	f7ff f936 	bl	800af08 <_Bfree>
 800bc9c:	9805      	ldr	r0, [sp, #20]
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f7ff f932 	bl	800af08 <_Bfree>
 800bca4:	e5f9      	b.n	800b89a <_strtod_l+0x72>
 800bca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bca8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bcac:	4293      	cmp	r3, r2
 800bcae:	dbbc      	blt.n	800bc2a <_strtod_l+0x402>
 800bcb0:	4c41      	ldr	r4, [pc, #260]	@ (800bdb8 <_strtod_l+0x590>)
 800bcb2:	f1c5 050f 	rsb	r5, r5, #15
 800bcb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bcba:	4652      	mov	r2, sl
 800bcbc:	465b      	mov	r3, fp
 800bcbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc2:	f7f4 fca9 	bl	8000618 <__aeabi_dmul>
 800bcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc8:	1b5d      	subs	r5, r3, r5
 800bcca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bcce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bcd2:	e78f      	b.n	800bbf4 <_strtod_l+0x3cc>
 800bcd4:	3316      	adds	r3, #22
 800bcd6:	dba8      	blt.n	800bc2a <_strtod_l+0x402>
 800bcd8:	4b37      	ldr	r3, [pc, #220]	@ (800bdb8 <_strtod_l+0x590>)
 800bcda:	eba9 0808 	sub.w	r8, r9, r8
 800bcde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bce2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bce6:	4650      	mov	r0, sl
 800bce8:	4659      	mov	r1, fp
 800bcea:	f7f4 fdbf 	bl	800086c <__aeabi_ddiv>
 800bcee:	e783      	b.n	800bbf8 <_strtod_l+0x3d0>
 800bcf0:	4b32      	ldr	r3, [pc, #200]	@ (800bdbc <_strtod_l+0x594>)
 800bcf2:	9308      	str	r3, [sp, #32]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	1124      	asrs	r4, r4, #4
 800bcf8:	4650      	mov	r0, sl
 800bcfa:	4659      	mov	r1, fp
 800bcfc:	461e      	mov	r6, r3
 800bcfe:	2c01      	cmp	r4, #1
 800bd00:	dc21      	bgt.n	800bd46 <_strtod_l+0x51e>
 800bd02:	b10b      	cbz	r3, 800bd08 <_strtod_l+0x4e0>
 800bd04:	4682      	mov	sl, r0
 800bd06:	468b      	mov	fp, r1
 800bd08:	492c      	ldr	r1, [pc, #176]	@ (800bdbc <_strtod_l+0x594>)
 800bd0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bd12:	4652      	mov	r2, sl
 800bd14:	465b      	mov	r3, fp
 800bd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd1a:	f7f4 fc7d 	bl	8000618 <__aeabi_dmul>
 800bd1e:	4b28      	ldr	r3, [pc, #160]	@ (800bdc0 <_strtod_l+0x598>)
 800bd20:	460a      	mov	r2, r1
 800bd22:	400b      	ands	r3, r1
 800bd24:	4927      	ldr	r1, [pc, #156]	@ (800bdc4 <_strtod_l+0x59c>)
 800bd26:	428b      	cmp	r3, r1
 800bd28:	4682      	mov	sl, r0
 800bd2a:	d898      	bhi.n	800bc5e <_strtod_l+0x436>
 800bd2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bd30:	428b      	cmp	r3, r1
 800bd32:	bf86      	itte	hi
 800bd34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bdc8 <_strtod_l+0x5a0>
 800bd38:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800bd3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bd40:	2300      	movs	r3, #0
 800bd42:	9308      	str	r3, [sp, #32]
 800bd44:	e07a      	b.n	800be3c <_strtod_l+0x614>
 800bd46:	07e2      	lsls	r2, r4, #31
 800bd48:	d505      	bpl.n	800bd56 <_strtod_l+0x52e>
 800bd4a:	9b08      	ldr	r3, [sp, #32]
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	f7f4 fc62 	bl	8000618 <__aeabi_dmul>
 800bd54:	2301      	movs	r3, #1
 800bd56:	9a08      	ldr	r2, [sp, #32]
 800bd58:	3208      	adds	r2, #8
 800bd5a:	3601      	adds	r6, #1
 800bd5c:	1064      	asrs	r4, r4, #1
 800bd5e:	9208      	str	r2, [sp, #32]
 800bd60:	e7cd      	b.n	800bcfe <_strtod_l+0x4d6>
 800bd62:	d0ed      	beq.n	800bd40 <_strtod_l+0x518>
 800bd64:	4264      	negs	r4, r4
 800bd66:	f014 020f 	ands.w	r2, r4, #15
 800bd6a:	d00a      	beq.n	800bd82 <_strtod_l+0x55a>
 800bd6c:	4b12      	ldr	r3, [pc, #72]	@ (800bdb8 <_strtod_l+0x590>)
 800bd6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd72:	4650      	mov	r0, sl
 800bd74:	4659      	mov	r1, fp
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 fd77 	bl	800086c <__aeabi_ddiv>
 800bd7e:	4682      	mov	sl, r0
 800bd80:	468b      	mov	fp, r1
 800bd82:	1124      	asrs	r4, r4, #4
 800bd84:	d0dc      	beq.n	800bd40 <_strtod_l+0x518>
 800bd86:	2c1f      	cmp	r4, #31
 800bd88:	dd20      	ble.n	800bdcc <_strtod_l+0x5a4>
 800bd8a:	2400      	movs	r4, #0
 800bd8c:	46a0      	mov	r8, r4
 800bd8e:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd90:	46a1      	mov	r9, r4
 800bd92:	9a05      	ldr	r2, [sp, #20]
 800bd94:	2322      	movs	r3, #34	@ 0x22
 800bd96:	f04f 0a00 	mov.w	sl, #0
 800bd9a:	f04f 0b00 	mov.w	fp, #0
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	e768      	b.n	800bc74 <_strtod_l+0x44c>
 800bda2:	bf00      	nop
 800bda4:	0800e102 	.word	0x0800e102
 800bda8:	0800e3ac 	.word	0x0800e3ac
 800bdac:	0800e0fa 	.word	0x0800e0fa
 800bdb0:	0800e1dc 	.word	0x0800e1dc
 800bdb4:	0800e1d8 	.word	0x0800e1d8
 800bdb8:	0800e2e0 	.word	0x0800e2e0
 800bdbc:	0800e2b8 	.word	0x0800e2b8
 800bdc0:	7ff00000 	.word	0x7ff00000
 800bdc4:	7ca00000 	.word	0x7ca00000
 800bdc8:	7fefffff 	.word	0x7fefffff
 800bdcc:	f014 0310 	ands.w	r3, r4, #16
 800bdd0:	bf18      	it	ne
 800bdd2:	236a      	movne	r3, #106	@ 0x6a
 800bdd4:	4ea9      	ldr	r6, [pc, #676]	@ (800c07c <_strtod_l+0x854>)
 800bdd6:	9308      	str	r3, [sp, #32]
 800bdd8:	4650      	mov	r0, sl
 800bdda:	4659      	mov	r1, fp
 800bddc:	2300      	movs	r3, #0
 800bdde:	07e2      	lsls	r2, r4, #31
 800bde0:	d504      	bpl.n	800bdec <_strtod_l+0x5c4>
 800bde2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bde6:	f7f4 fc17 	bl	8000618 <__aeabi_dmul>
 800bdea:	2301      	movs	r3, #1
 800bdec:	1064      	asrs	r4, r4, #1
 800bdee:	f106 0608 	add.w	r6, r6, #8
 800bdf2:	d1f4      	bne.n	800bdde <_strtod_l+0x5b6>
 800bdf4:	b10b      	cbz	r3, 800bdfa <_strtod_l+0x5d2>
 800bdf6:	4682      	mov	sl, r0
 800bdf8:	468b      	mov	fp, r1
 800bdfa:	9b08      	ldr	r3, [sp, #32]
 800bdfc:	b1b3      	cbz	r3, 800be2c <_strtod_l+0x604>
 800bdfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800be06:	2b00      	cmp	r3, #0
 800be08:	4659      	mov	r1, fp
 800be0a:	dd0f      	ble.n	800be2c <_strtod_l+0x604>
 800be0c:	2b1f      	cmp	r3, #31
 800be0e:	dd55      	ble.n	800bebc <_strtod_l+0x694>
 800be10:	2b34      	cmp	r3, #52	@ 0x34
 800be12:	bfde      	ittt	le
 800be14:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800be18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800be1c:	4093      	lslle	r3, r2
 800be1e:	f04f 0a00 	mov.w	sl, #0
 800be22:	bfcc      	ite	gt
 800be24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800be28:	ea03 0b01 	andle.w	fp, r3, r1
 800be2c:	2200      	movs	r2, #0
 800be2e:	2300      	movs	r3, #0
 800be30:	4650      	mov	r0, sl
 800be32:	4659      	mov	r1, fp
 800be34:	f7f4 fe58 	bl	8000ae8 <__aeabi_dcmpeq>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d1a6      	bne.n	800bd8a <_strtod_l+0x562>
 800be3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be42:	9805      	ldr	r0, [sp, #20]
 800be44:	462b      	mov	r3, r5
 800be46:	463a      	mov	r2, r7
 800be48:	f7ff f8c6 	bl	800afd8 <__s2b>
 800be4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800be4e:	2800      	cmp	r0, #0
 800be50:	f43f af05 	beq.w	800bc5e <_strtod_l+0x436>
 800be54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be56:	2a00      	cmp	r2, #0
 800be58:	eba9 0308 	sub.w	r3, r9, r8
 800be5c:	bfa8      	it	ge
 800be5e:	2300      	movge	r3, #0
 800be60:	9312      	str	r3, [sp, #72]	@ 0x48
 800be62:	2400      	movs	r4, #0
 800be64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be68:	9316      	str	r3, [sp, #88]	@ 0x58
 800be6a:	46a0      	mov	r8, r4
 800be6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be6e:	9805      	ldr	r0, [sp, #20]
 800be70:	6859      	ldr	r1, [r3, #4]
 800be72:	f7ff f809 	bl	800ae88 <_Balloc>
 800be76:	4681      	mov	r9, r0
 800be78:	2800      	cmp	r0, #0
 800be7a:	f43f aef4 	beq.w	800bc66 <_strtod_l+0x43e>
 800be7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be80:	691a      	ldr	r2, [r3, #16]
 800be82:	3202      	adds	r2, #2
 800be84:	f103 010c 	add.w	r1, r3, #12
 800be88:	0092      	lsls	r2, r2, #2
 800be8a:	300c      	adds	r0, #12
 800be8c:	f001 fa6c 	bl	800d368 <memcpy>
 800be90:	ec4b ab10 	vmov	d0, sl, fp
 800be94:	9805      	ldr	r0, [sp, #20]
 800be96:	aa1c      	add	r2, sp, #112	@ 0x70
 800be98:	a91b      	add	r1, sp, #108	@ 0x6c
 800be9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800be9e:	f7ff fbd7 	bl	800b650 <__d2b>
 800bea2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f43f aede 	beq.w	800bc66 <_strtod_l+0x43e>
 800beaa:	9805      	ldr	r0, [sp, #20]
 800beac:	2101      	movs	r1, #1
 800beae:	f7ff f929 	bl	800b104 <__i2b>
 800beb2:	4680      	mov	r8, r0
 800beb4:	b948      	cbnz	r0, 800beca <_strtod_l+0x6a2>
 800beb6:	f04f 0800 	mov.w	r8, #0
 800beba:	e6d4      	b.n	800bc66 <_strtod_l+0x43e>
 800bebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bec0:	fa02 f303 	lsl.w	r3, r2, r3
 800bec4:	ea03 0a0a 	and.w	sl, r3, sl
 800bec8:	e7b0      	b.n	800be2c <_strtod_l+0x604>
 800beca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800becc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bece:	2d00      	cmp	r5, #0
 800bed0:	bfab      	itete	ge
 800bed2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bed4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bed6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bed8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800beda:	bfac      	ite	ge
 800bedc:	18ef      	addge	r7, r5, r3
 800bede:	1b5e      	sublt	r6, r3, r5
 800bee0:	9b08      	ldr	r3, [sp, #32]
 800bee2:	1aed      	subs	r5, r5, r3
 800bee4:	4415      	add	r5, r2
 800bee6:	4b66      	ldr	r3, [pc, #408]	@ (800c080 <_strtod_l+0x858>)
 800bee8:	3d01      	subs	r5, #1
 800beea:	429d      	cmp	r5, r3
 800beec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bef0:	da50      	bge.n	800bf94 <_strtod_l+0x76c>
 800bef2:	1b5b      	subs	r3, r3, r5
 800bef4:	2b1f      	cmp	r3, #31
 800bef6:	eba2 0203 	sub.w	r2, r2, r3
 800befa:	f04f 0101 	mov.w	r1, #1
 800befe:	dc3d      	bgt.n	800bf7c <_strtod_l+0x754>
 800bf00:	fa01 f303 	lsl.w	r3, r1, r3
 800bf04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf06:	2300      	movs	r3, #0
 800bf08:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf0a:	18bd      	adds	r5, r7, r2
 800bf0c:	9b08      	ldr	r3, [sp, #32]
 800bf0e:	42af      	cmp	r7, r5
 800bf10:	4416      	add	r6, r2
 800bf12:	441e      	add	r6, r3
 800bf14:	463b      	mov	r3, r7
 800bf16:	bfa8      	it	ge
 800bf18:	462b      	movge	r3, r5
 800bf1a:	42b3      	cmp	r3, r6
 800bf1c:	bfa8      	it	ge
 800bf1e:	4633      	movge	r3, r6
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bfc2      	ittt	gt
 800bf24:	1aed      	subgt	r5, r5, r3
 800bf26:	1af6      	subgt	r6, r6, r3
 800bf28:	1aff      	subgt	r7, r7, r3
 800bf2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	dd16      	ble.n	800bf5e <_strtod_l+0x736>
 800bf30:	4641      	mov	r1, r8
 800bf32:	9805      	ldr	r0, [sp, #20]
 800bf34:	461a      	mov	r2, r3
 800bf36:	f7ff f9a5 	bl	800b284 <__pow5mult>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d0ba      	beq.n	800beb6 <_strtod_l+0x68e>
 800bf40:	4601      	mov	r1, r0
 800bf42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf44:	9805      	ldr	r0, [sp, #20]
 800bf46:	f7ff f8f3 	bl	800b130 <__multiply>
 800bf4a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	f43f ae8a 	beq.w	800bc66 <_strtod_l+0x43e>
 800bf52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf54:	9805      	ldr	r0, [sp, #20]
 800bf56:	f7fe ffd7 	bl	800af08 <_Bfree>
 800bf5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf5e:	2d00      	cmp	r5, #0
 800bf60:	dc1d      	bgt.n	800bf9e <_strtod_l+0x776>
 800bf62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd23      	ble.n	800bfb0 <_strtod_l+0x788>
 800bf68:	4649      	mov	r1, r9
 800bf6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bf6c:	9805      	ldr	r0, [sp, #20]
 800bf6e:	f7ff f989 	bl	800b284 <__pow5mult>
 800bf72:	4681      	mov	r9, r0
 800bf74:	b9e0      	cbnz	r0, 800bfb0 <_strtod_l+0x788>
 800bf76:	f04f 0900 	mov.w	r9, #0
 800bf7a:	e674      	b.n	800bc66 <_strtod_l+0x43e>
 800bf7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bf80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bf84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bf88:	35e2      	adds	r5, #226	@ 0xe2
 800bf8a:	fa01 f305 	lsl.w	r3, r1, r5
 800bf8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf90:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bf92:	e7ba      	b.n	800bf0a <_strtod_l+0x6e2>
 800bf94:	2300      	movs	r3, #0
 800bf96:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf98:	2301      	movs	r3, #1
 800bf9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf9c:	e7b5      	b.n	800bf0a <_strtod_l+0x6e2>
 800bf9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfa0:	9805      	ldr	r0, [sp, #20]
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	f7ff f9c8 	bl	800b338 <__lshift>
 800bfa8:	901a      	str	r0, [sp, #104]	@ 0x68
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d1d9      	bne.n	800bf62 <_strtod_l+0x73a>
 800bfae:	e65a      	b.n	800bc66 <_strtod_l+0x43e>
 800bfb0:	2e00      	cmp	r6, #0
 800bfb2:	dd07      	ble.n	800bfc4 <_strtod_l+0x79c>
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	9805      	ldr	r0, [sp, #20]
 800bfb8:	4632      	mov	r2, r6
 800bfba:	f7ff f9bd 	bl	800b338 <__lshift>
 800bfbe:	4681      	mov	r9, r0
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d0d8      	beq.n	800bf76 <_strtod_l+0x74e>
 800bfc4:	2f00      	cmp	r7, #0
 800bfc6:	dd08      	ble.n	800bfda <_strtod_l+0x7b2>
 800bfc8:	4641      	mov	r1, r8
 800bfca:	9805      	ldr	r0, [sp, #20]
 800bfcc:	463a      	mov	r2, r7
 800bfce:	f7ff f9b3 	bl	800b338 <__lshift>
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	f43f ae46 	beq.w	800bc66 <_strtod_l+0x43e>
 800bfda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfdc:	9805      	ldr	r0, [sp, #20]
 800bfde:	464a      	mov	r2, r9
 800bfe0:	f7ff fa32 	bl	800b448 <__mdiff>
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	f43f ae3d 	beq.w	800bc66 <_strtod_l+0x43e>
 800bfec:	68c3      	ldr	r3, [r0, #12]
 800bfee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bff0:	2300      	movs	r3, #0
 800bff2:	60c3      	str	r3, [r0, #12]
 800bff4:	4641      	mov	r1, r8
 800bff6:	f7ff fa0b 	bl	800b410 <__mcmp>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	da46      	bge.n	800c08c <_strtod_l+0x864>
 800bffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c000:	ea53 030a 	orrs.w	r3, r3, sl
 800c004:	d16c      	bne.n	800c0e0 <_strtod_l+0x8b8>
 800c006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d168      	bne.n	800c0e0 <_strtod_l+0x8b8>
 800c00e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c012:	0d1b      	lsrs	r3, r3, #20
 800c014:	051b      	lsls	r3, r3, #20
 800c016:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c01a:	d961      	bls.n	800c0e0 <_strtod_l+0x8b8>
 800c01c:	6963      	ldr	r3, [r4, #20]
 800c01e:	b913      	cbnz	r3, 800c026 <_strtod_l+0x7fe>
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	2b01      	cmp	r3, #1
 800c024:	dd5c      	ble.n	800c0e0 <_strtod_l+0x8b8>
 800c026:	4621      	mov	r1, r4
 800c028:	2201      	movs	r2, #1
 800c02a:	9805      	ldr	r0, [sp, #20]
 800c02c:	f7ff f984 	bl	800b338 <__lshift>
 800c030:	4641      	mov	r1, r8
 800c032:	4604      	mov	r4, r0
 800c034:	f7ff f9ec 	bl	800b410 <__mcmp>
 800c038:	2800      	cmp	r0, #0
 800c03a:	dd51      	ble.n	800c0e0 <_strtod_l+0x8b8>
 800c03c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c040:	9a08      	ldr	r2, [sp, #32]
 800c042:	0d1b      	lsrs	r3, r3, #20
 800c044:	051b      	lsls	r3, r3, #20
 800c046:	2a00      	cmp	r2, #0
 800c048:	d06b      	beq.n	800c122 <_strtod_l+0x8fa>
 800c04a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c04e:	d868      	bhi.n	800c122 <_strtod_l+0x8fa>
 800c050:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c054:	f67f ae9d 	bls.w	800bd92 <_strtod_l+0x56a>
 800c058:	4b0a      	ldr	r3, [pc, #40]	@ (800c084 <_strtod_l+0x85c>)
 800c05a:	4650      	mov	r0, sl
 800c05c:	4659      	mov	r1, fp
 800c05e:	2200      	movs	r2, #0
 800c060:	f7f4 fada 	bl	8000618 <__aeabi_dmul>
 800c064:	4b08      	ldr	r3, [pc, #32]	@ (800c088 <_strtod_l+0x860>)
 800c066:	400b      	ands	r3, r1
 800c068:	4682      	mov	sl, r0
 800c06a:	468b      	mov	fp, r1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f47f ae05 	bne.w	800bc7c <_strtod_l+0x454>
 800c072:	9a05      	ldr	r2, [sp, #20]
 800c074:	2322      	movs	r3, #34	@ 0x22
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	e600      	b.n	800bc7c <_strtod_l+0x454>
 800c07a:	bf00      	nop
 800c07c:	0800e3d8 	.word	0x0800e3d8
 800c080:	fffffc02 	.word	0xfffffc02
 800c084:	39500000 	.word	0x39500000
 800c088:	7ff00000 	.word	0x7ff00000
 800c08c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c090:	d165      	bne.n	800c15e <_strtod_l+0x936>
 800c092:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c098:	b35a      	cbz	r2, 800c0f2 <_strtod_l+0x8ca>
 800c09a:	4a9f      	ldr	r2, [pc, #636]	@ (800c318 <_strtod_l+0xaf0>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d12b      	bne.n	800c0f8 <_strtod_l+0x8d0>
 800c0a0:	9b08      	ldr	r3, [sp, #32]
 800c0a2:	4651      	mov	r1, sl
 800c0a4:	b303      	cbz	r3, 800c0e8 <_strtod_l+0x8c0>
 800c0a6:	4b9d      	ldr	r3, [pc, #628]	@ (800c31c <_strtod_l+0xaf4>)
 800c0a8:	465a      	mov	r2, fp
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0b4:	d81b      	bhi.n	800c0ee <_strtod_l+0x8c6>
 800c0b6:	0d1b      	lsrs	r3, r3, #20
 800c0b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c0:	4299      	cmp	r1, r3
 800c0c2:	d119      	bne.n	800c0f8 <_strtod_l+0x8d0>
 800c0c4:	4b96      	ldr	r3, [pc, #600]	@ (800c320 <_strtod_l+0xaf8>)
 800c0c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d102      	bne.n	800c0d2 <_strtod_l+0x8aa>
 800c0cc:	3101      	adds	r1, #1
 800c0ce:	f43f adca 	beq.w	800bc66 <_strtod_l+0x43e>
 800c0d2:	4b92      	ldr	r3, [pc, #584]	@ (800c31c <_strtod_l+0xaf4>)
 800c0d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0d6:	401a      	ands	r2, r3
 800c0d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c0dc:	f04f 0a00 	mov.w	sl, #0
 800c0e0:	9b08      	ldr	r3, [sp, #32]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1b8      	bne.n	800c058 <_strtod_l+0x830>
 800c0e6:	e5c9      	b.n	800bc7c <_strtod_l+0x454>
 800c0e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0ec:	e7e8      	b.n	800c0c0 <_strtod_l+0x898>
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	e7e6      	b.n	800c0c0 <_strtod_l+0x898>
 800c0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c0f6:	d0a1      	beq.n	800c03c <_strtod_l+0x814>
 800c0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0fa:	b1db      	cbz	r3, 800c134 <_strtod_l+0x90c>
 800c0fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0fe:	4213      	tst	r3, r2
 800c100:	d0ee      	beq.n	800c0e0 <_strtod_l+0x8b8>
 800c102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c104:	9a08      	ldr	r2, [sp, #32]
 800c106:	4650      	mov	r0, sl
 800c108:	4659      	mov	r1, fp
 800c10a:	b1bb      	cbz	r3, 800c13c <_strtod_l+0x914>
 800c10c:	f7ff fb6e 	bl	800b7ec <sulp>
 800c110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c114:	ec53 2b10 	vmov	r2, r3, d0
 800c118:	f7f4 f8c8 	bl	80002ac <__adddf3>
 800c11c:	4682      	mov	sl, r0
 800c11e:	468b      	mov	fp, r1
 800c120:	e7de      	b.n	800c0e0 <_strtod_l+0x8b8>
 800c122:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c126:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c12a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c12e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c132:	e7d5      	b.n	800c0e0 <_strtod_l+0x8b8>
 800c134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c136:	ea13 0f0a 	tst.w	r3, sl
 800c13a:	e7e1      	b.n	800c100 <_strtod_l+0x8d8>
 800c13c:	f7ff fb56 	bl	800b7ec <sulp>
 800c140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c144:	ec53 2b10 	vmov	r2, r3, d0
 800c148:	f7f4 f8ae 	bl	80002a8 <__aeabi_dsub>
 800c14c:	2200      	movs	r2, #0
 800c14e:	2300      	movs	r3, #0
 800c150:	4682      	mov	sl, r0
 800c152:	468b      	mov	fp, r1
 800c154:	f7f4 fcc8 	bl	8000ae8 <__aeabi_dcmpeq>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d0c1      	beq.n	800c0e0 <_strtod_l+0x8b8>
 800c15c:	e619      	b.n	800bd92 <_strtod_l+0x56a>
 800c15e:	4641      	mov	r1, r8
 800c160:	4620      	mov	r0, r4
 800c162:	f7ff facd 	bl	800b700 <__ratio>
 800c166:	ec57 6b10 	vmov	r6, r7, d0
 800c16a:	2200      	movs	r2, #0
 800c16c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c170:	4630      	mov	r0, r6
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fccc 	bl	8000b10 <__aeabi_dcmple>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d06f      	beq.n	800c25c <_strtod_l+0xa34>
 800c17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d17a      	bne.n	800c278 <_strtod_l+0xa50>
 800c182:	f1ba 0f00 	cmp.w	sl, #0
 800c186:	d158      	bne.n	800c23a <_strtod_l+0xa12>
 800c188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c18a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d15a      	bne.n	800c248 <_strtod_l+0xa20>
 800c192:	4b64      	ldr	r3, [pc, #400]	@ (800c324 <_strtod_l+0xafc>)
 800c194:	2200      	movs	r2, #0
 800c196:	4630      	mov	r0, r6
 800c198:	4639      	mov	r1, r7
 800c19a:	f7f4 fcaf 	bl	8000afc <__aeabi_dcmplt>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d159      	bne.n	800c256 <_strtod_l+0xa2e>
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	4b60      	ldr	r3, [pc, #384]	@ (800c328 <_strtod_l+0xb00>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f7f4 fa35 	bl	8000618 <__aeabi_dmul>
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460f      	mov	r7, r1
 800c1b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c1b6:	9606      	str	r6, [sp, #24]
 800c1b8:	9307      	str	r3, [sp, #28]
 800c1ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1be:	4d57      	ldr	r5, [pc, #348]	@ (800c31c <_strtod_l+0xaf4>)
 800c1c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c6:	401d      	ands	r5, r3
 800c1c8:	4b58      	ldr	r3, [pc, #352]	@ (800c32c <_strtod_l+0xb04>)
 800c1ca:	429d      	cmp	r5, r3
 800c1cc:	f040 80b2 	bne.w	800c334 <_strtod_l+0xb0c>
 800c1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c1d6:	ec4b ab10 	vmov	d0, sl, fp
 800c1da:	f7ff f9c9 	bl	800b570 <__ulp>
 800c1de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1e2:	ec51 0b10 	vmov	r0, r1, d0
 800c1e6:	f7f4 fa17 	bl	8000618 <__aeabi_dmul>
 800c1ea:	4652      	mov	r2, sl
 800c1ec:	465b      	mov	r3, fp
 800c1ee:	f7f4 f85d 	bl	80002ac <__adddf3>
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4949      	ldr	r1, [pc, #292]	@ (800c31c <_strtod_l+0xaf4>)
 800c1f6:	4a4e      	ldr	r2, [pc, #312]	@ (800c330 <_strtod_l+0xb08>)
 800c1f8:	4019      	ands	r1, r3
 800c1fa:	4291      	cmp	r1, r2
 800c1fc:	4682      	mov	sl, r0
 800c1fe:	d942      	bls.n	800c286 <_strtod_l+0xa5e>
 800c200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c202:	4b47      	ldr	r3, [pc, #284]	@ (800c320 <_strtod_l+0xaf8>)
 800c204:	429a      	cmp	r2, r3
 800c206:	d103      	bne.n	800c210 <_strtod_l+0x9e8>
 800c208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c20a:	3301      	adds	r3, #1
 800c20c:	f43f ad2b 	beq.w	800bc66 <_strtod_l+0x43e>
 800c210:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c320 <_strtod_l+0xaf8>
 800c214:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c21a:	9805      	ldr	r0, [sp, #20]
 800c21c:	f7fe fe74 	bl	800af08 <_Bfree>
 800c220:	9805      	ldr	r0, [sp, #20]
 800c222:	4649      	mov	r1, r9
 800c224:	f7fe fe70 	bl	800af08 <_Bfree>
 800c228:	9805      	ldr	r0, [sp, #20]
 800c22a:	4641      	mov	r1, r8
 800c22c:	f7fe fe6c 	bl	800af08 <_Bfree>
 800c230:	9805      	ldr	r0, [sp, #20]
 800c232:	4621      	mov	r1, r4
 800c234:	f7fe fe68 	bl	800af08 <_Bfree>
 800c238:	e618      	b.n	800be6c <_strtod_l+0x644>
 800c23a:	f1ba 0f01 	cmp.w	sl, #1
 800c23e:	d103      	bne.n	800c248 <_strtod_l+0xa20>
 800c240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c242:	2b00      	cmp	r3, #0
 800c244:	f43f ada5 	beq.w	800bd92 <_strtod_l+0x56a>
 800c248:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c2f8 <_strtod_l+0xad0>
 800c24c:	4f35      	ldr	r7, [pc, #212]	@ (800c324 <_strtod_l+0xafc>)
 800c24e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c252:	2600      	movs	r6, #0
 800c254:	e7b1      	b.n	800c1ba <_strtod_l+0x992>
 800c256:	4f34      	ldr	r7, [pc, #208]	@ (800c328 <_strtod_l+0xb00>)
 800c258:	2600      	movs	r6, #0
 800c25a:	e7aa      	b.n	800c1b2 <_strtod_l+0x98a>
 800c25c:	4b32      	ldr	r3, [pc, #200]	@ (800c328 <_strtod_l+0xb00>)
 800c25e:	4630      	mov	r0, r6
 800c260:	4639      	mov	r1, r7
 800c262:	2200      	movs	r2, #0
 800c264:	f7f4 f9d8 	bl	8000618 <__aeabi_dmul>
 800c268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c26a:	4606      	mov	r6, r0
 800c26c:	460f      	mov	r7, r1
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d09f      	beq.n	800c1b2 <_strtod_l+0x98a>
 800c272:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c276:	e7a0      	b.n	800c1ba <_strtod_l+0x992>
 800c278:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c300 <_strtod_l+0xad8>
 800c27c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c280:	ec57 6b17 	vmov	r6, r7, d7
 800c284:	e799      	b.n	800c1ba <_strtod_l+0x992>
 800c286:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c28a:	9b08      	ldr	r3, [sp, #32]
 800c28c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1c1      	bne.n	800c218 <_strtod_l+0x9f0>
 800c294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c298:	0d1b      	lsrs	r3, r3, #20
 800c29a:	051b      	lsls	r3, r3, #20
 800c29c:	429d      	cmp	r5, r3
 800c29e:	d1bb      	bne.n	800c218 <_strtod_l+0x9f0>
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f4 fd18 	bl	8000cd8 <__aeabi_d2lz>
 800c2a8:	f7f4 f988 	bl	80005bc <__aeabi_l2d>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	f7f3 fff8 	bl	80002a8 <__aeabi_dsub>
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c2c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2c6:	ea46 060a 	orr.w	r6, r6, sl
 800c2ca:	431e      	orrs	r6, r3
 800c2cc:	d06f      	beq.n	800c3ae <_strtod_l+0xb86>
 800c2ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800c308 <_strtod_l+0xae0>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f7f4 fc12 	bl	8000afc <__aeabi_dcmplt>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	f47f accf 	bne.w	800bc7c <_strtod_l+0x454>
 800c2de:	a30c      	add	r3, pc, #48	@ (adr r3, 800c310 <_strtod_l+0xae8>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2e8:	f7f4 fc26 	bl	8000b38 <__aeabi_dcmpgt>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d093      	beq.n	800c218 <_strtod_l+0x9f0>
 800c2f0:	e4c4      	b.n	800bc7c <_strtod_l+0x454>
 800c2f2:	bf00      	nop
 800c2f4:	f3af 8000 	nop.w
 800c2f8:	00000000 	.word	0x00000000
 800c2fc:	bff00000 	.word	0xbff00000
 800c300:	00000000 	.word	0x00000000
 800c304:	3ff00000 	.word	0x3ff00000
 800c308:	94a03595 	.word	0x94a03595
 800c30c:	3fdfffff 	.word	0x3fdfffff
 800c310:	35afe535 	.word	0x35afe535
 800c314:	3fe00000 	.word	0x3fe00000
 800c318:	000fffff 	.word	0x000fffff
 800c31c:	7ff00000 	.word	0x7ff00000
 800c320:	7fefffff 	.word	0x7fefffff
 800c324:	3ff00000 	.word	0x3ff00000
 800c328:	3fe00000 	.word	0x3fe00000
 800c32c:	7fe00000 	.word	0x7fe00000
 800c330:	7c9fffff 	.word	0x7c9fffff
 800c334:	9b08      	ldr	r3, [sp, #32]
 800c336:	b323      	cbz	r3, 800c382 <_strtod_l+0xb5a>
 800c338:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c33c:	d821      	bhi.n	800c382 <_strtod_l+0xb5a>
 800c33e:	a328      	add	r3, pc, #160	@ (adr r3, 800c3e0 <_strtod_l+0xbb8>)
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f7f4 fbe2 	bl	8000b10 <__aeabi_dcmple>
 800c34c:	b1a0      	cbz	r0, 800c378 <_strtod_l+0xb50>
 800c34e:	4639      	mov	r1, r7
 800c350:	4630      	mov	r0, r6
 800c352:	f7f4 fc39 	bl	8000bc8 <__aeabi_d2uiz>
 800c356:	2801      	cmp	r0, #1
 800c358:	bf38      	it	cc
 800c35a:	2001      	movcc	r0, #1
 800c35c:	f7f4 f8e2 	bl	8000524 <__aeabi_ui2d>
 800c360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c362:	4606      	mov	r6, r0
 800c364:	460f      	mov	r7, r1
 800c366:	b9fb      	cbnz	r3, 800c3a8 <_strtod_l+0xb80>
 800c368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c36c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c36e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c370:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c374:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c37a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c37e:	1b5b      	subs	r3, r3, r5
 800c380:	9311      	str	r3, [sp, #68]	@ 0x44
 800c382:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c386:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c38a:	f7ff f8f1 	bl	800b570 <__ulp>
 800c38e:	4650      	mov	r0, sl
 800c390:	ec53 2b10 	vmov	r2, r3, d0
 800c394:	4659      	mov	r1, fp
 800c396:	f7f4 f93f 	bl	8000618 <__aeabi_dmul>
 800c39a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c39e:	f7f3 ff85 	bl	80002ac <__adddf3>
 800c3a2:	4682      	mov	sl, r0
 800c3a4:	468b      	mov	fp, r1
 800c3a6:	e770      	b.n	800c28a <_strtod_l+0xa62>
 800c3a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c3ac:	e7e0      	b.n	800c370 <_strtod_l+0xb48>
 800c3ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3e8 <_strtod_l+0xbc0>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	f7f4 fba2 	bl	8000afc <__aeabi_dcmplt>
 800c3b8:	e798      	b.n	800c2ec <_strtod_l+0xac4>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	f7ff ba6d 	b.w	800b8a2 <_strtod_l+0x7a>
 800c3c8:	2a65      	cmp	r2, #101	@ 0x65
 800c3ca:	f43f ab66 	beq.w	800ba9a <_strtod_l+0x272>
 800c3ce:	2a45      	cmp	r2, #69	@ 0x45
 800c3d0:	f43f ab63 	beq.w	800ba9a <_strtod_l+0x272>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	f7ff bb9e 	b.w	800bb16 <_strtod_l+0x2ee>
 800c3da:	bf00      	nop
 800c3dc:	f3af 8000 	nop.w
 800c3e0:	ffc00000 	.word	0xffc00000
 800c3e4:	41dfffff 	.word	0x41dfffff
 800c3e8:	94a03595 	.word	0x94a03595
 800c3ec:	3fcfffff 	.word	0x3fcfffff

0800c3f0 <_strtod_r>:
 800c3f0:	4b01      	ldr	r3, [pc, #4]	@ (800c3f8 <_strtod_r+0x8>)
 800c3f2:	f7ff ba19 	b.w	800b828 <_strtod_l>
 800c3f6:	bf00      	nop
 800c3f8:	200000d4 	.word	0x200000d4

0800c3fc <__ssputs_r>:
 800c3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	688e      	ldr	r6, [r1, #8]
 800c402:	461f      	mov	r7, r3
 800c404:	42be      	cmp	r6, r7
 800c406:	680b      	ldr	r3, [r1, #0]
 800c408:	4682      	mov	sl, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	4690      	mov	r8, r2
 800c40e:	d82d      	bhi.n	800c46c <__ssputs_r+0x70>
 800c410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c418:	d026      	beq.n	800c468 <__ssputs_r+0x6c>
 800c41a:	6965      	ldr	r5, [r4, #20]
 800c41c:	6909      	ldr	r1, [r1, #16]
 800c41e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c422:	eba3 0901 	sub.w	r9, r3, r1
 800c426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c42a:	1c7b      	adds	r3, r7, #1
 800c42c:	444b      	add	r3, r9
 800c42e:	106d      	asrs	r5, r5, #1
 800c430:	429d      	cmp	r5, r3
 800c432:	bf38      	it	cc
 800c434:	461d      	movcc	r5, r3
 800c436:	0553      	lsls	r3, r2, #21
 800c438:	d527      	bpl.n	800c48a <__ssputs_r+0x8e>
 800c43a:	4629      	mov	r1, r5
 800c43c:	f7fe fc98 	bl	800ad70 <_malloc_r>
 800c440:	4606      	mov	r6, r0
 800c442:	b360      	cbz	r0, 800c49e <__ssputs_r+0xa2>
 800c444:	6921      	ldr	r1, [r4, #16]
 800c446:	464a      	mov	r2, r9
 800c448:	f000 ff8e 	bl	800d368 <memcpy>
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	6126      	str	r6, [r4, #16]
 800c45a:	6165      	str	r5, [r4, #20]
 800c45c:	444e      	add	r6, r9
 800c45e:	eba5 0509 	sub.w	r5, r5, r9
 800c462:	6026      	str	r6, [r4, #0]
 800c464:	60a5      	str	r5, [r4, #8]
 800c466:	463e      	mov	r6, r7
 800c468:	42be      	cmp	r6, r7
 800c46a:	d900      	bls.n	800c46e <__ssputs_r+0x72>
 800c46c:	463e      	mov	r6, r7
 800c46e:	6820      	ldr	r0, [r4, #0]
 800c470:	4632      	mov	r2, r6
 800c472:	4641      	mov	r1, r8
 800c474:	f000 ff3c 	bl	800d2f0 <memmove>
 800c478:	68a3      	ldr	r3, [r4, #8]
 800c47a:	1b9b      	subs	r3, r3, r6
 800c47c:	60a3      	str	r3, [r4, #8]
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	4433      	add	r3, r6
 800c482:	6023      	str	r3, [r4, #0]
 800c484:	2000      	movs	r0, #0
 800c486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c48a:	462a      	mov	r2, r5
 800c48c:	f001 fae9 	bl	800da62 <_realloc_r>
 800c490:	4606      	mov	r6, r0
 800c492:	2800      	cmp	r0, #0
 800c494:	d1e0      	bne.n	800c458 <__ssputs_r+0x5c>
 800c496:	6921      	ldr	r1, [r4, #16]
 800c498:	4650      	mov	r0, sl
 800c49a:	f7fe fbf5 	bl	800ac88 <_free_r>
 800c49e:	230c      	movs	r3, #12
 800c4a0:	f8ca 3000 	str.w	r3, [sl]
 800c4a4:	89a3      	ldrh	r3, [r4, #12]
 800c4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4aa:	81a3      	strh	r3, [r4, #12]
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4b0:	e7e9      	b.n	800c486 <__ssputs_r+0x8a>
	...

0800c4b4 <_svfiprintf_r>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	4698      	mov	r8, r3
 800c4ba:	898b      	ldrh	r3, [r1, #12]
 800c4bc:	061b      	lsls	r3, r3, #24
 800c4be:	b09d      	sub	sp, #116	@ 0x74
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	460d      	mov	r5, r1
 800c4c4:	4614      	mov	r4, r2
 800c4c6:	d510      	bpl.n	800c4ea <_svfiprintf_r+0x36>
 800c4c8:	690b      	ldr	r3, [r1, #16]
 800c4ca:	b973      	cbnz	r3, 800c4ea <_svfiprintf_r+0x36>
 800c4cc:	2140      	movs	r1, #64	@ 0x40
 800c4ce:	f7fe fc4f 	bl	800ad70 <_malloc_r>
 800c4d2:	6028      	str	r0, [r5, #0]
 800c4d4:	6128      	str	r0, [r5, #16]
 800c4d6:	b930      	cbnz	r0, 800c4e6 <_svfiprintf_r+0x32>
 800c4d8:	230c      	movs	r3, #12
 800c4da:	603b      	str	r3, [r7, #0]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4e0:	b01d      	add	sp, #116	@ 0x74
 800c4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e6:	2340      	movs	r3, #64	@ 0x40
 800c4e8:	616b      	str	r3, [r5, #20]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ee:	2320      	movs	r3, #32
 800c4f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4f8:	2330      	movs	r3, #48	@ 0x30
 800c4fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c698 <_svfiprintf_r+0x1e4>
 800c4fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c502:	f04f 0901 	mov.w	r9, #1
 800c506:	4623      	mov	r3, r4
 800c508:	469a      	mov	sl, r3
 800c50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c50e:	b10a      	cbz	r2, 800c514 <_svfiprintf_r+0x60>
 800c510:	2a25      	cmp	r2, #37	@ 0x25
 800c512:	d1f9      	bne.n	800c508 <_svfiprintf_r+0x54>
 800c514:	ebba 0b04 	subs.w	fp, sl, r4
 800c518:	d00b      	beq.n	800c532 <_svfiprintf_r+0x7e>
 800c51a:	465b      	mov	r3, fp
 800c51c:	4622      	mov	r2, r4
 800c51e:	4629      	mov	r1, r5
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff ff6b 	bl	800c3fc <__ssputs_r>
 800c526:	3001      	adds	r0, #1
 800c528:	f000 80a7 	beq.w	800c67a <_svfiprintf_r+0x1c6>
 800c52c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c52e:	445a      	add	r2, fp
 800c530:	9209      	str	r2, [sp, #36]	@ 0x24
 800c532:	f89a 3000 	ldrb.w	r3, [sl]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 809f 	beq.w	800c67a <_svfiprintf_r+0x1c6>
 800c53c:	2300      	movs	r3, #0
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c546:	f10a 0a01 	add.w	sl, sl, #1
 800c54a:	9304      	str	r3, [sp, #16]
 800c54c:	9307      	str	r3, [sp, #28]
 800c54e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c552:	931a      	str	r3, [sp, #104]	@ 0x68
 800c554:	4654      	mov	r4, sl
 800c556:	2205      	movs	r2, #5
 800c558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55c:	484e      	ldr	r0, [pc, #312]	@ (800c698 <_svfiprintf_r+0x1e4>)
 800c55e:	f7f3 fe47 	bl	80001f0 <memchr>
 800c562:	9a04      	ldr	r2, [sp, #16]
 800c564:	b9d8      	cbnz	r0, 800c59e <_svfiprintf_r+0xea>
 800c566:	06d0      	lsls	r0, r2, #27
 800c568:	bf44      	itt	mi
 800c56a:	2320      	movmi	r3, #32
 800c56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c570:	0711      	lsls	r1, r2, #28
 800c572:	bf44      	itt	mi
 800c574:	232b      	movmi	r3, #43	@ 0x2b
 800c576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c57a:	f89a 3000 	ldrb.w	r3, [sl]
 800c57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c580:	d015      	beq.n	800c5ae <_svfiprintf_r+0xfa>
 800c582:	9a07      	ldr	r2, [sp, #28]
 800c584:	4654      	mov	r4, sl
 800c586:	2000      	movs	r0, #0
 800c588:	f04f 0c0a 	mov.w	ip, #10
 800c58c:	4621      	mov	r1, r4
 800c58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c592:	3b30      	subs	r3, #48	@ 0x30
 800c594:	2b09      	cmp	r3, #9
 800c596:	d94b      	bls.n	800c630 <_svfiprintf_r+0x17c>
 800c598:	b1b0      	cbz	r0, 800c5c8 <_svfiprintf_r+0x114>
 800c59a:	9207      	str	r2, [sp, #28]
 800c59c:	e014      	b.n	800c5c8 <_svfiprintf_r+0x114>
 800c59e:	eba0 0308 	sub.w	r3, r0, r8
 800c5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	9304      	str	r3, [sp, #16]
 800c5aa:	46a2      	mov	sl, r4
 800c5ac:	e7d2      	b.n	800c554 <_svfiprintf_r+0xa0>
 800c5ae:	9b03      	ldr	r3, [sp, #12]
 800c5b0:	1d19      	adds	r1, r3, #4
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	9103      	str	r1, [sp, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	bfbb      	ittet	lt
 800c5ba:	425b      	neglt	r3, r3
 800c5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c5c0:	9307      	strge	r3, [sp, #28]
 800c5c2:	9307      	strlt	r3, [sp, #28]
 800c5c4:	bfb8      	it	lt
 800c5c6:	9204      	strlt	r2, [sp, #16]
 800c5c8:	7823      	ldrb	r3, [r4, #0]
 800c5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5cc:	d10a      	bne.n	800c5e4 <_svfiprintf_r+0x130>
 800c5ce:	7863      	ldrb	r3, [r4, #1]
 800c5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5d2:	d132      	bne.n	800c63a <_svfiprintf_r+0x186>
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	1d1a      	adds	r2, r3, #4
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	9203      	str	r2, [sp, #12]
 800c5dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5e0:	3402      	adds	r4, #2
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6a8 <_svfiprintf_r+0x1f4>
 800c5e8:	7821      	ldrb	r1, [r4, #0]
 800c5ea:	2203      	movs	r2, #3
 800c5ec:	4650      	mov	r0, sl
 800c5ee:	f7f3 fdff 	bl	80001f0 <memchr>
 800c5f2:	b138      	cbz	r0, 800c604 <_svfiprintf_r+0x150>
 800c5f4:	9b04      	ldr	r3, [sp, #16]
 800c5f6:	eba0 000a 	sub.w	r0, r0, sl
 800c5fa:	2240      	movs	r2, #64	@ 0x40
 800c5fc:	4082      	lsls	r2, r0
 800c5fe:	4313      	orrs	r3, r2
 800c600:	3401      	adds	r4, #1
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c608:	4824      	ldr	r0, [pc, #144]	@ (800c69c <_svfiprintf_r+0x1e8>)
 800c60a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c60e:	2206      	movs	r2, #6
 800c610:	f7f3 fdee 	bl	80001f0 <memchr>
 800c614:	2800      	cmp	r0, #0
 800c616:	d036      	beq.n	800c686 <_svfiprintf_r+0x1d2>
 800c618:	4b21      	ldr	r3, [pc, #132]	@ (800c6a0 <_svfiprintf_r+0x1ec>)
 800c61a:	bb1b      	cbnz	r3, 800c664 <_svfiprintf_r+0x1b0>
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	3307      	adds	r3, #7
 800c620:	f023 0307 	bic.w	r3, r3, #7
 800c624:	3308      	adds	r3, #8
 800c626:	9303      	str	r3, [sp, #12]
 800c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62a:	4433      	add	r3, r6
 800c62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c62e:	e76a      	b.n	800c506 <_svfiprintf_r+0x52>
 800c630:	fb0c 3202 	mla	r2, ip, r2, r3
 800c634:	460c      	mov	r4, r1
 800c636:	2001      	movs	r0, #1
 800c638:	e7a8      	b.n	800c58c <_svfiprintf_r+0xd8>
 800c63a:	2300      	movs	r3, #0
 800c63c:	3401      	adds	r4, #1
 800c63e:	9305      	str	r3, [sp, #20]
 800c640:	4619      	mov	r1, r3
 800c642:	f04f 0c0a 	mov.w	ip, #10
 800c646:	4620      	mov	r0, r4
 800c648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c64c:	3a30      	subs	r2, #48	@ 0x30
 800c64e:	2a09      	cmp	r2, #9
 800c650:	d903      	bls.n	800c65a <_svfiprintf_r+0x1a6>
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0c6      	beq.n	800c5e4 <_svfiprintf_r+0x130>
 800c656:	9105      	str	r1, [sp, #20]
 800c658:	e7c4      	b.n	800c5e4 <_svfiprintf_r+0x130>
 800c65a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c65e:	4604      	mov	r4, r0
 800c660:	2301      	movs	r3, #1
 800c662:	e7f0      	b.n	800c646 <_svfiprintf_r+0x192>
 800c664:	ab03      	add	r3, sp, #12
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	462a      	mov	r2, r5
 800c66a:	4b0e      	ldr	r3, [pc, #56]	@ (800c6a4 <_svfiprintf_r+0x1f0>)
 800c66c:	a904      	add	r1, sp, #16
 800c66e:	4638      	mov	r0, r7
 800c670:	f7fc fc8e 	bl	8008f90 <_printf_float>
 800c674:	1c42      	adds	r2, r0, #1
 800c676:	4606      	mov	r6, r0
 800c678:	d1d6      	bne.n	800c628 <_svfiprintf_r+0x174>
 800c67a:	89ab      	ldrh	r3, [r5, #12]
 800c67c:	065b      	lsls	r3, r3, #25
 800c67e:	f53f af2d 	bmi.w	800c4dc <_svfiprintf_r+0x28>
 800c682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c684:	e72c      	b.n	800c4e0 <_svfiprintf_r+0x2c>
 800c686:	ab03      	add	r3, sp, #12
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	462a      	mov	r2, r5
 800c68c:	4b05      	ldr	r3, [pc, #20]	@ (800c6a4 <_svfiprintf_r+0x1f0>)
 800c68e:	a904      	add	r1, sp, #16
 800c690:	4638      	mov	r0, r7
 800c692:	f7fc ff15 	bl	80094c0 <_printf_i>
 800c696:	e7ed      	b.n	800c674 <_svfiprintf_r+0x1c0>
 800c698:	0800e400 	.word	0x0800e400
 800c69c:	0800e40a 	.word	0x0800e40a
 800c6a0:	08008f91 	.word	0x08008f91
 800c6a4:	0800c3fd 	.word	0x0800c3fd
 800c6a8:	0800e406 	.word	0x0800e406

0800c6ac <_sungetc_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	1c4b      	adds	r3, r1, #1
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	d103      	bne.n	800c6bc <_sungetc_r+0x10>
 800c6b4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	8993      	ldrh	r3, [r2, #12]
 800c6be:	f023 0320 	bic.w	r3, r3, #32
 800c6c2:	8193      	strh	r3, [r2, #12]
 800c6c4:	6853      	ldr	r3, [r2, #4]
 800c6c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c6c8:	b2cd      	uxtb	r5, r1
 800c6ca:	b18a      	cbz	r2, 800c6f0 <_sungetc_r+0x44>
 800c6cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	dd08      	ble.n	800c6e4 <_sungetc_r+0x38>
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	1e5a      	subs	r2, r3, #1
 800c6d6:	6022      	str	r2, [r4, #0]
 800c6d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	e7e9      	b.n	800c6b8 <_sungetc_r+0xc>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	f000 fd34 	bl	800d152 <__submore>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d0f1      	beq.n	800c6d2 <_sungetc_r+0x26>
 800c6ee:	e7e1      	b.n	800c6b4 <_sungetc_r+0x8>
 800c6f0:	6921      	ldr	r1, [r4, #16]
 800c6f2:	6822      	ldr	r2, [r4, #0]
 800c6f4:	b141      	cbz	r1, 800c708 <_sungetc_r+0x5c>
 800c6f6:	4291      	cmp	r1, r2
 800c6f8:	d206      	bcs.n	800c708 <_sungetc_r+0x5c>
 800c6fa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c6fe:	42a9      	cmp	r1, r5
 800c700:	d102      	bne.n	800c708 <_sungetc_r+0x5c>
 800c702:	3a01      	subs	r2, #1
 800c704:	6022      	str	r2, [r4, #0]
 800c706:	e7ea      	b.n	800c6de <_sungetc_r+0x32>
 800c708:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c70c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c710:	6363      	str	r3, [r4, #52]	@ 0x34
 800c712:	2303      	movs	r3, #3
 800c714:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c716:	4623      	mov	r3, r4
 800c718:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	2301      	movs	r3, #1
 800c720:	e7de      	b.n	800c6e0 <_sungetc_r+0x34>

0800c722 <__ssrefill_r>:
 800c722:	b510      	push	{r4, lr}
 800c724:	460c      	mov	r4, r1
 800c726:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c728:	b169      	cbz	r1, 800c746 <__ssrefill_r+0x24>
 800c72a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c72e:	4299      	cmp	r1, r3
 800c730:	d001      	beq.n	800c736 <__ssrefill_r+0x14>
 800c732:	f7fe faa9 	bl	800ac88 <_free_r>
 800c736:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c738:	6063      	str	r3, [r4, #4]
 800c73a:	2000      	movs	r0, #0
 800c73c:	6360      	str	r0, [r4, #52]	@ 0x34
 800c73e:	b113      	cbz	r3, 800c746 <__ssrefill_r+0x24>
 800c740:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c742:	6023      	str	r3, [r4, #0]
 800c744:	bd10      	pop	{r4, pc}
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	2300      	movs	r3, #0
 800c74c:	6063      	str	r3, [r4, #4]
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	f043 0320 	orr.w	r3, r3, #32
 800c754:	81a3      	strh	r3, [r4, #12]
 800c756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c75a:	e7f3      	b.n	800c744 <__ssrefill_r+0x22>

0800c75c <__ssvfiscanf_r>:
 800c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	460c      	mov	r4, r1
 800c762:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c766:	2100      	movs	r1, #0
 800c768:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c76c:	49a5      	ldr	r1, [pc, #660]	@ (800ca04 <__ssvfiscanf_r+0x2a8>)
 800c76e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c770:	f10d 0804 	add.w	r8, sp, #4
 800c774:	49a4      	ldr	r1, [pc, #656]	@ (800ca08 <__ssvfiscanf_r+0x2ac>)
 800c776:	4fa5      	ldr	r7, [pc, #660]	@ (800ca0c <__ssvfiscanf_r+0x2b0>)
 800c778:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c77c:	4606      	mov	r6, r0
 800c77e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	7813      	ldrb	r3, [r2, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 8158 	beq.w	800ca3a <__ssvfiscanf_r+0x2de>
 800c78a:	5cf9      	ldrb	r1, [r7, r3]
 800c78c:	f011 0108 	ands.w	r1, r1, #8
 800c790:	f102 0501 	add.w	r5, r2, #1
 800c794:	d019      	beq.n	800c7ca <__ssvfiscanf_r+0x6e>
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dd0f      	ble.n	800c7bc <__ssvfiscanf_r+0x60>
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	781a      	ldrb	r2, [r3, #0]
 800c7a0:	5cba      	ldrb	r2, [r7, r2]
 800c7a2:	0712      	lsls	r2, r2, #28
 800c7a4:	d401      	bmi.n	800c7aa <__ssvfiscanf_r+0x4e>
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	e7eb      	b.n	800c782 <__ssvfiscanf_r+0x26>
 800c7aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c7ac:	3201      	adds	r2, #1
 800c7ae:	9245      	str	r2, [sp, #276]	@ 0x114
 800c7b0:	6862      	ldr	r2, [r4, #4]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	3a01      	subs	r2, #1
 800c7b6:	6062      	str	r2, [r4, #4]
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	e7ec      	b.n	800c796 <__ssvfiscanf_r+0x3a>
 800c7bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4798      	blx	r3
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d0e9      	beq.n	800c79c <__ssvfiscanf_r+0x40>
 800c7c8:	e7ed      	b.n	800c7a6 <__ssvfiscanf_r+0x4a>
 800c7ca:	2b25      	cmp	r3, #37	@ 0x25
 800c7cc:	d012      	beq.n	800c7f4 <__ssvfiscanf_r+0x98>
 800c7ce:	4699      	mov	r9, r3
 800c7d0:	6863      	ldr	r3, [r4, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f340 8093 	ble.w	800c8fe <__ssvfiscanf_r+0x1a2>
 800c7d8:	6822      	ldr	r2, [r4, #0]
 800c7da:	7813      	ldrb	r3, [r2, #0]
 800c7dc:	454b      	cmp	r3, r9
 800c7de:	f040 812c 	bne.w	800ca3a <__ssvfiscanf_r+0x2de>
 800c7e2:	6863      	ldr	r3, [r4, #4]
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	6063      	str	r3, [r4, #4]
 800c7e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c7ea:	3201      	adds	r2, #1
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	6022      	str	r2, [r4, #0]
 800c7f0:	9345      	str	r3, [sp, #276]	@ 0x114
 800c7f2:	e7d8      	b.n	800c7a6 <__ssvfiscanf_r+0x4a>
 800c7f4:	9141      	str	r1, [sp, #260]	@ 0x104
 800c7f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c7f8:	7853      	ldrb	r3, [r2, #1]
 800c7fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7fc:	bf02      	ittt	eq
 800c7fe:	2310      	moveq	r3, #16
 800c800:	1c95      	addeq	r5, r2, #2
 800c802:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c804:	220a      	movs	r2, #10
 800c806:	46a9      	mov	r9, r5
 800c808:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c80c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c810:	2b09      	cmp	r3, #9
 800c812:	d91e      	bls.n	800c852 <__ssvfiscanf_r+0xf6>
 800c814:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ca10 <__ssvfiscanf_r+0x2b4>
 800c818:	2203      	movs	r2, #3
 800c81a:	4650      	mov	r0, sl
 800c81c:	f7f3 fce8 	bl	80001f0 <memchr>
 800c820:	b138      	cbz	r0, 800c832 <__ssvfiscanf_r+0xd6>
 800c822:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c824:	eba0 000a 	sub.w	r0, r0, sl
 800c828:	2301      	movs	r3, #1
 800c82a:	4083      	lsls	r3, r0
 800c82c:	4313      	orrs	r3, r2
 800c82e:	9341      	str	r3, [sp, #260]	@ 0x104
 800c830:	464d      	mov	r5, r9
 800c832:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c836:	2b78      	cmp	r3, #120	@ 0x78
 800c838:	d806      	bhi.n	800c848 <__ssvfiscanf_r+0xec>
 800c83a:	2b57      	cmp	r3, #87	@ 0x57
 800c83c:	d810      	bhi.n	800c860 <__ssvfiscanf_r+0x104>
 800c83e:	2b25      	cmp	r3, #37	@ 0x25
 800c840:	d0c5      	beq.n	800c7ce <__ssvfiscanf_r+0x72>
 800c842:	d857      	bhi.n	800c8f4 <__ssvfiscanf_r+0x198>
 800c844:	2b00      	cmp	r3, #0
 800c846:	d065      	beq.n	800c914 <__ssvfiscanf_r+0x1b8>
 800c848:	2303      	movs	r3, #3
 800c84a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c84c:	230a      	movs	r3, #10
 800c84e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c850:	e078      	b.n	800c944 <__ssvfiscanf_r+0x1e8>
 800c852:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c854:	fb02 1103 	mla	r1, r2, r3, r1
 800c858:	3930      	subs	r1, #48	@ 0x30
 800c85a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c85c:	464d      	mov	r5, r9
 800c85e:	e7d2      	b.n	800c806 <__ssvfiscanf_r+0xaa>
 800c860:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c864:	2a20      	cmp	r2, #32
 800c866:	d8ef      	bhi.n	800c848 <__ssvfiscanf_r+0xec>
 800c868:	a101      	add	r1, pc, #4	@ (adr r1, 800c870 <__ssvfiscanf_r+0x114>)
 800c86a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c86e:	bf00      	nop
 800c870:	0800c923 	.word	0x0800c923
 800c874:	0800c849 	.word	0x0800c849
 800c878:	0800c849 	.word	0x0800c849
 800c87c:	0800c97d 	.word	0x0800c97d
 800c880:	0800c849 	.word	0x0800c849
 800c884:	0800c849 	.word	0x0800c849
 800c888:	0800c849 	.word	0x0800c849
 800c88c:	0800c849 	.word	0x0800c849
 800c890:	0800c849 	.word	0x0800c849
 800c894:	0800c849 	.word	0x0800c849
 800c898:	0800c849 	.word	0x0800c849
 800c89c:	0800c993 	.word	0x0800c993
 800c8a0:	0800c979 	.word	0x0800c979
 800c8a4:	0800c8fb 	.word	0x0800c8fb
 800c8a8:	0800c8fb 	.word	0x0800c8fb
 800c8ac:	0800c8fb 	.word	0x0800c8fb
 800c8b0:	0800c849 	.word	0x0800c849
 800c8b4:	0800c935 	.word	0x0800c935
 800c8b8:	0800c849 	.word	0x0800c849
 800c8bc:	0800c849 	.word	0x0800c849
 800c8c0:	0800c849 	.word	0x0800c849
 800c8c4:	0800c849 	.word	0x0800c849
 800c8c8:	0800c9a3 	.word	0x0800c9a3
 800c8cc:	0800c93d 	.word	0x0800c93d
 800c8d0:	0800c91b 	.word	0x0800c91b
 800c8d4:	0800c849 	.word	0x0800c849
 800c8d8:	0800c849 	.word	0x0800c849
 800c8dc:	0800c99f 	.word	0x0800c99f
 800c8e0:	0800c849 	.word	0x0800c849
 800c8e4:	0800c979 	.word	0x0800c979
 800c8e8:	0800c849 	.word	0x0800c849
 800c8ec:	0800c849 	.word	0x0800c849
 800c8f0:	0800c923 	.word	0x0800c923
 800c8f4:	3b45      	subs	r3, #69	@ 0x45
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d8a6      	bhi.n	800c848 <__ssvfiscanf_r+0xec>
 800c8fa:	2305      	movs	r3, #5
 800c8fc:	e021      	b.n	800c942 <__ssvfiscanf_r+0x1e6>
 800c8fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c900:	4621      	mov	r1, r4
 800c902:	4630      	mov	r0, r6
 800c904:	4798      	blx	r3
 800c906:	2800      	cmp	r0, #0
 800c908:	f43f af66 	beq.w	800c7d8 <__ssvfiscanf_r+0x7c>
 800c90c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c90e:	2800      	cmp	r0, #0
 800c910:	f040 808b 	bne.w	800ca2a <__ssvfiscanf_r+0x2ce>
 800c914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c918:	e08b      	b.n	800ca32 <__ssvfiscanf_r+0x2d6>
 800c91a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c91c:	f042 0220 	orr.w	r2, r2, #32
 800c920:	9241      	str	r2, [sp, #260]	@ 0x104
 800c922:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c928:	9241      	str	r2, [sp, #260]	@ 0x104
 800c92a:	2210      	movs	r2, #16
 800c92c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c92e:	9242      	str	r2, [sp, #264]	@ 0x108
 800c930:	d902      	bls.n	800c938 <__ssvfiscanf_r+0x1dc>
 800c932:	e005      	b.n	800c940 <__ssvfiscanf_r+0x1e4>
 800c934:	2300      	movs	r3, #0
 800c936:	9342      	str	r3, [sp, #264]	@ 0x108
 800c938:	2303      	movs	r3, #3
 800c93a:	e002      	b.n	800c942 <__ssvfiscanf_r+0x1e6>
 800c93c:	2308      	movs	r3, #8
 800c93e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c940:	2304      	movs	r3, #4
 800c942:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c944:	6863      	ldr	r3, [r4, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	dd39      	ble.n	800c9be <__ssvfiscanf_r+0x262>
 800c94a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c94c:	0659      	lsls	r1, r3, #25
 800c94e:	d404      	bmi.n	800c95a <__ssvfiscanf_r+0x1fe>
 800c950:	6823      	ldr	r3, [r4, #0]
 800c952:	781a      	ldrb	r2, [r3, #0]
 800c954:	5cba      	ldrb	r2, [r7, r2]
 800c956:	0712      	lsls	r2, r2, #28
 800c958:	d438      	bmi.n	800c9cc <__ssvfiscanf_r+0x270>
 800c95a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	dc47      	bgt.n	800c9f0 <__ssvfiscanf_r+0x294>
 800c960:	466b      	mov	r3, sp
 800c962:	4622      	mov	r2, r4
 800c964:	a941      	add	r1, sp, #260	@ 0x104
 800c966:	4630      	mov	r0, r6
 800c968:	f000 f9ae 	bl	800ccc8 <_scanf_chars>
 800c96c:	2801      	cmp	r0, #1
 800c96e:	d064      	beq.n	800ca3a <__ssvfiscanf_r+0x2de>
 800c970:	2802      	cmp	r0, #2
 800c972:	f47f af18 	bne.w	800c7a6 <__ssvfiscanf_r+0x4a>
 800c976:	e7c9      	b.n	800c90c <__ssvfiscanf_r+0x1b0>
 800c978:	220a      	movs	r2, #10
 800c97a:	e7d7      	b.n	800c92c <__ssvfiscanf_r+0x1d0>
 800c97c:	4629      	mov	r1, r5
 800c97e:	4640      	mov	r0, r8
 800c980:	f000 fbae 	bl	800d0e0 <__sccl>
 800c984:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c98a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c98c:	4605      	mov	r5, r0
 800c98e:	2301      	movs	r3, #1
 800c990:	e7d7      	b.n	800c942 <__ssvfiscanf_r+0x1e6>
 800c992:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c998:	9341      	str	r3, [sp, #260]	@ 0x104
 800c99a:	2300      	movs	r3, #0
 800c99c:	e7d1      	b.n	800c942 <__ssvfiscanf_r+0x1e6>
 800c99e:	2302      	movs	r3, #2
 800c9a0:	e7cf      	b.n	800c942 <__ssvfiscanf_r+0x1e6>
 800c9a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c9a4:	06c3      	lsls	r3, r0, #27
 800c9a6:	f53f aefe 	bmi.w	800c7a6 <__ssvfiscanf_r+0x4a>
 800c9aa:	9b00      	ldr	r3, [sp, #0]
 800c9ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c9ae:	1d19      	adds	r1, r3, #4
 800c9b0:	9100      	str	r1, [sp, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	07c0      	lsls	r0, r0, #31
 800c9b6:	bf4c      	ite	mi
 800c9b8:	801a      	strhmi	r2, [r3, #0]
 800c9ba:	601a      	strpl	r2, [r3, #0]
 800c9bc:	e6f3      	b.n	800c7a6 <__ssvfiscanf_r+0x4a>
 800c9be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	4798      	blx	r3
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d0bf      	beq.n	800c94a <__ssvfiscanf_r+0x1ee>
 800c9ca:	e79f      	b.n	800c90c <__ssvfiscanf_r+0x1b0>
 800c9cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c9ce:	3201      	adds	r2, #1
 800c9d0:	9245      	str	r2, [sp, #276]	@ 0x114
 800c9d2:	6862      	ldr	r2, [r4, #4]
 800c9d4:	3a01      	subs	r2, #1
 800c9d6:	2a00      	cmp	r2, #0
 800c9d8:	6062      	str	r2, [r4, #4]
 800c9da:	dd02      	ble.n	800c9e2 <__ssvfiscanf_r+0x286>
 800c9dc:	3301      	adds	r3, #1
 800c9de:	6023      	str	r3, [r4, #0]
 800c9e0:	e7b6      	b.n	800c950 <__ssvfiscanf_r+0x1f4>
 800c9e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	4798      	blx	r3
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d0b0      	beq.n	800c950 <__ssvfiscanf_r+0x1f4>
 800c9ee:	e78d      	b.n	800c90c <__ssvfiscanf_r+0x1b0>
 800c9f0:	2b04      	cmp	r3, #4
 800c9f2:	dc0f      	bgt.n	800ca14 <__ssvfiscanf_r+0x2b8>
 800c9f4:	466b      	mov	r3, sp
 800c9f6:	4622      	mov	r2, r4
 800c9f8:	a941      	add	r1, sp, #260	@ 0x104
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f000 f9be 	bl	800cd7c <_scanf_i>
 800ca00:	e7b4      	b.n	800c96c <__ssvfiscanf_r+0x210>
 800ca02:	bf00      	nop
 800ca04:	0800c6ad 	.word	0x0800c6ad
 800ca08:	0800c723 	.word	0x0800c723
 800ca0c:	0800dff5 	.word	0x0800dff5
 800ca10:	0800e406 	.word	0x0800e406
 800ca14:	4b0a      	ldr	r3, [pc, #40]	@ (800ca40 <__ssvfiscanf_r+0x2e4>)
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f43f aec5 	beq.w	800c7a6 <__ssvfiscanf_r+0x4a>
 800ca1c:	466b      	mov	r3, sp
 800ca1e:	4622      	mov	r2, r4
 800ca20:	a941      	add	r1, sp, #260	@ 0x104
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7fc fe6c 	bl	8009700 <_scanf_float>
 800ca28:	e7a0      	b.n	800c96c <__ssvfiscanf_r+0x210>
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	065b      	lsls	r3, r3, #25
 800ca2e:	f53f af71 	bmi.w	800c914 <__ssvfiscanf_r+0x1b8>
 800ca32:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ca36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ca3c:	e7f9      	b.n	800ca32 <__ssvfiscanf_r+0x2d6>
 800ca3e:	bf00      	nop
 800ca40:	08009701 	.word	0x08009701

0800ca44 <__sfputc_r>:
 800ca44:	6893      	ldr	r3, [r2, #8]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	b410      	push	{r4}
 800ca4c:	6093      	str	r3, [r2, #8]
 800ca4e:	da08      	bge.n	800ca62 <__sfputc_r+0x1e>
 800ca50:	6994      	ldr	r4, [r2, #24]
 800ca52:	42a3      	cmp	r3, r4
 800ca54:	db01      	blt.n	800ca5a <__sfputc_r+0x16>
 800ca56:	290a      	cmp	r1, #10
 800ca58:	d103      	bne.n	800ca62 <__sfputc_r+0x1e>
 800ca5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca5e:	f000 bbb2 	b.w	800d1c6 <__swbuf_r>
 800ca62:	6813      	ldr	r3, [r2, #0]
 800ca64:	1c58      	adds	r0, r3, #1
 800ca66:	6010      	str	r0, [r2, #0]
 800ca68:	7019      	strb	r1, [r3, #0]
 800ca6a:	4608      	mov	r0, r1
 800ca6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <__sfputs_r>:
 800ca72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca74:	4606      	mov	r6, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	4614      	mov	r4, r2
 800ca7a:	18d5      	adds	r5, r2, r3
 800ca7c:	42ac      	cmp	r4, r5
 800ca7e:	d101      	bne.n	800ca84 <__sfputs_r+0x12>
 800ca80:	2000      	movs	r0, #0
 800ca82:	e007      	b.n	800ca94 <__sfputs_r+0x22>
 800ca84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca88:	463a      	mov	r2, r7
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7ff ffda 	bl	800ca44 <__sfputc_r>
 800ca90:	1c43      	adds	r3, r0, #1
 800ca92:	d1f3      	bne.n	800ca7c <__sfputs_r+0xa>
 800ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca98 <_vfiprintf_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	460d      	mov	r5, r1
 800ca9e:	b09d      	sub	sp, #116	@ 0x74
 800caa0:	4614      	mov	r4, r2
 800caa2:	4698      	mov	r8, r3
 800caa4:	4606      	mov	r6, r0
 800caa6:	b118      	cbz	r0, 800cab0 <_vfiprintf_r+0x18>
 800caa8:	6a03      	ldr	r3, [r0, #32]
 800caaa:	b90b      	cbnz	r3, 800cab0 <_vfiprintf_r+0x18>
 800caac:	f7fd f8c8 	bl	8009c40 <__sinit>
 800cab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cab2:	07d9      	lsls	r1, r3, #31
 800cab4:	d405      	bmi.n	800cac2 <_vfiprintf_r+0x2a>
 800cab6:	89ab      	ldrh	r3, [r5, #12]
 800cab8:	059a      	lsls	r2, r3, #22
 800caba:	d402      	bmi.n	800cac2 <_vfiprintf_r+0x2a>
 800cabc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cabe:	f7fd fa70 	bl	8009fa2 <__retarget_lock_acquire_recursive>
 800cac2:	89ab      	ldrh	r3, [r5, #12]
 800cac4:	071b      	lsls	r3, r3, #28
 800cac6:	d501      	bpl.n	800cacc <_vfiprintf_r+0x34>
 800cac8:	692b      	ldr	r3, [r5, #16]
 800caca:	b99b      	cbnz	r3, 800caf4 <_vfiprintf_r+0x5c>
 800cacc:	4629      	mov	r1, r5
 800cace:	4630      	mov	r0, r6
 800cad0:	f000 fbb8 	bl	800d244 <__swsetup_r>
 800cad4:	b170      	cbz	r0, 800caf4 <_vfiprintf_r+0x5c>
 800cad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cad8:	07dc      	lsls	r4, r3, #31
 800cada:	d504      	bpl.n	800cae6 <_vfiprintf_r+0x4e>
 800cadc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cae0:	b01d      	add	sp, #116	@ 0x74
 800cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	0598      	lsls	r0, r3, #22
 800caea:	d4f7      	bmi.n	800cadc <_vfiprintf_r+0x44>
 800caec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caee:	f7fd fa59 	bl	8009fa4 <__retarget_lock_release_recursive>
 800caf2:	e7f3      	b.n	800cadc <_vfiprintf_r+0x44>
 800caf4:	2300      	movs	r3, #0
 800caf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf8:	2320      	movs	r3, #32
 800cafa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb02:	2330      	movs	r3, #48	@ 0x30
 800cb04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ccb4 <_vfiprintf_r+0x21c>
 800cb08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb0c:	f04f 0901 	mov.w	r9, #1
 800cb10:	4623      	mov	r3, r4
 800cb12:	469a      	mov	sl, r3
 800cb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb18:	b10a      	cbz	r2, 800cb1e <_vfiprintf_r+0x86>
 800cb1a:	2a25      	cmp	r2, #37	@ 0x25
 800cb1c:	d1f9      	bne.n	800cb12 <_vfiprintf_r+0x7a>
 800cb1e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb22:	d00b      	beq.n	800cb3c <_vfiprintf_r+0xa4>
 800cb24:	465b      	mov	r3, fp
 800cb26:	4622      	mov	r2, r4
 800cb28:	4629      	mov	r1, r5
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7ff ffa1 	bl	800ca72 <__sfputs_r>
 800cb30:	3001      	adds	r0, #1
 800cb32:	f000 80a7 	beq.w	800cc84 <_vfiprintf_r+0x1ec>
 800cb36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb38:	445a      	add	r2, fp
 800cb3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 809f 	beq.w	800cc84 <_vfiprintf_r+0x1ec>
 800cb46:	2300      	movs	r3, #0
 800cb48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb50:	f10a 0a01 	add.w	sl, sl, #1
 800cb54:	9304      	str	r3, [sp, #16]
 800cb56:	9307      	str	r3, [sp, #28]
 800cb58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb5e:	4654      	mov	r4, sl
 800cb60:	2205      	movs	r2, #5
 800cb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb66:	4853      	ldr	r0, [pc, #332]	@ (800ccb4 <_vfiprintf_r+0x21c>)
 800cb68:	f7f3 fb42 	bl	80001f0 <memchr>
 800cb6c:	9a04      	ldr	r2, [sp, #16]
 800cb6e:	b9d8      	cbnz	r0, 800cba8 <_vfiprintf_r+0x110>
 800cb70:	06d1      	lsls	r1, r2, #27
 800cb72:	bf44      	itt	mi
 800cb74:	2320      	movmi	r3, #32
 800cb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb7a:	0713      	lsls	r3, r2, #28
 800cb7c:	bf44      	itt	mi
 800cb7e:	232b      	movmi	r3, #43	@ 0x2b
 800cb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb84:	f89a 3000 	ldrb.w	r3, [sl]
 800cb88:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb8a:	d015      	beq.n	800cbb8 <_vfiprintf_r+0x120>
 800cb8c:	9a07      	ldr	r2, [sp, #28]
 800cb8e:	4654      	mov	r4, sl
 800cb90:	2000      	movs	r0, #0
 800cb92:	f04f 0c0a 	mov.w	ip, #10
 800cb96:	4621      	mov	r1, r4
 800cb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb9c:	3b30      	subs	r3, #48	@ 0x30
 800cb9e:	2b09      	cmp	r3, #9
 800cba0:	d94b      	bls.n	800cc3a <_vfiprintf_r+0x1a2>
 800cba2:	b1b0      	cbz	r0, 800cbd2 <_vfiprintf_r+0x13a>
 800cba4:	9207      	str	r2, [sp, #28]
 800cba6:	e014      	b.n	800cbd2 <_vfiprintf_r+0x13a>
 800cba8:	eba0 0308 	sub.w	r3, r0, r8
 800cbac:	fa09 f303 	lsl.w	r3, r9, r3
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	46a2      	mov	sl, r4
 800cbb6:	e7d2      	b.n	800cb5e <_vfiprintf_r+0xc6>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	1d19      	adds	r1, r3, #4
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	9103      	str	r1, [sp, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	bfbb      	ittet	lt
 800cbc4:	425b      	neglt	r3, r3
 800cbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800cbca:	9307      	strge	r3, [sp, #28]
 800cbcc:	9307      	strlt	r3, [sp, #28]
 800cbce:	bfb8      	it	lt
 800cbd0:	9204      	strlt	r2, [sp, #16]
 800cbd2:	7823      	ldrb	r3, [r4, #0]
 800cbd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbd6:	d10a      	bne.n	800cbee <_vfiprintf_r+0x156>
 800cbd8:	7863      	ldrb	r3, [r4, #1]
 800cbda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbdc:	d132      	bne.n	800cc44 <_vfiprintf_r+0x1ac>
 800cbde:	9b03      	ldr	r3, [sp, #12]
 800cbe0:	1d1a      	adds	r2, r3, #4
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	9203      	str	r2, [sp, #12]
 800cbe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbea:	3402      	adds	r4, #2
 800cbec:	9305      	str	r3, [sp, #20]
 800cbee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ccc4 <_vfiprintf_r+0x22c>
 800cbf2:	7821      	ldrb	r1, [r4, #0]
 800cbf4:	2203      	movs	r2, #3
 800cbf6:	4650      	mov	r0, sl
 800cbf8:	f7f3 fafa 	bl	80001f0 <memchr>
 800cbfc:	b138      	cbz	r0, 800cc0e <_vfiprintf_r+0x176>
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	eba0 000a 	sub.w	r0, r0, sl
 800cc04:	2240      	movs	r2, #64	@ 0x40
 800cc06:	4082      	lsls	r2, r0
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	3401      	adds	r4, #1
 800cc0c:	9304      	str	r3, [sp, #16]
 800cc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc12:	4829      	ldr	r0, [pc, #164]	@ (800ccb8 <_vfiprintf_r+0x220>)
 800cc14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc18:	2206      	movs	r2, #6
 800cc1a:	f7f3 fae9 	bl	80001f0 <memchr>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d03f      	beq.n	800cca2 <_vfiprintf_r+0x20a>
 800cc22:	4b26      	ldr	r3, [pc, #152]	@ (800ccbc <_vfiprintf_r+0x224>)
 800cc24:	bb1b      	cbnz	r3, 800cc6e <_vfiprintf_r+0x1d6>
 800cc26:	9b03      	ldr	r3, [sp, #12]
 800cc28:	3307      	adds	r3, #7
 800cc2a:	f023 0307 	bic.w	r3, r3, #7
 800cc2e:	3308      	adds	r3, #8
 800cc30:	9303      	str	r3, [sp, #12]
 800cc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc34:	443b      	add	r3, r7
 800cc36:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc38:	e76a      	b.n	800cb10 <_vfiprintf_r+0x78>
 800cc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc3e:	460c      	mov	r4, r1
 800cc40:	2001      	movs	r0, #1
 800cc42:	e7a8      	b.n	800cb96 <_vfiprintf_r+0xfe>
 800cc44:	2300      	movs	r3, #0
 800cc46:	3401      	adds	r4, #1
 800cc48:	9305      	str	r3, [sp, #20]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	f04f 0c0a 	mov.w	ip, #10
 800cc50:	4620      	mov	r0, r4
 800cc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc56:	3a30      	subs	r2, #48	@ 0x30
 800cc58:	2a09      	cmp	r2, #9
 800cc5a:	d903      	bls.n	800cc64 <_vfiprintf_r+0x1cc>
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d0c6      	beq.n	800cbee <_vfiprintf_r+0x156>
 800cc60:	9105      	str	r1, [sp, #20]
 800cc62:	e7c4      	b.n	800cbee <_vfiprintf_r+0x156>
 800cc64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc68:	4604      	mov	r4, r0
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e7f0      	b.n	800cc50 <_vfiprintf_r+0x1b8>
 800cc6e:	ab03      	add	r3, sp, #12
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	462a      	mov	r2, r5
 800cc74:	4b12      	ldr	r3, [pc, #72]	@ (800ccc0 <_vfiprintf_r+0x228>)
 800cc76:	a904      	add	r1, sp, #16
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7fc f989 	bl	8008f90 <_printf_float>
 800cc7e:	4607      	mov	r7, r0
 800cc80:	1c78      	adds	r0, r7, #1
 800cc82:	d1d6      	bne.n	800cc32 <_vfiprintf_r+0x19a>
 800cc84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc86:	07d9      	lsls	r1, r3, #31
 800cc88:	d405      	bmi.n	800cc96 <_vfiprintf_r+0x1fe>
 800cc8a:	89ab      	ldrh	r3, [r5, #12]
 800cc8c:	059a      	lsls	r2, r3, #22
 800cc8e:	d402      	bmi.n	800cc96 <_vfiprintf_r+0x1fe>
 800cc90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc92:	f7fd f987 	bl	8009fa4 <__retarget_lock_release_recursive>
 800cc96:	89ab      	ldrh	r3, [r5, #12]
 800cc98:	065b      	lsls	r3, r3, #25
 800cc9a:	f53f af1f 	bmi.w	800cadc <_vfiprintf_r+0x44>
 800cc9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cca0:	e71e      	b.n	800cae0 <_vfiprintf_r+0x48>
 800cca2:	ab03      	add	r3, sp, #12
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	462a      	mov	r2, r5
 800cca8:	4b05      	ldr	r3, [pc, #20]	@ (800ccc0 <_vfiprintf_r+0x228>)
 800ccaa:	a904      	add	r1, sp, #16
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7fc fc07 	bl	80094c0 <_printf_i>
 800ccb2:	e7e4      	b.n	800cc7e <_vfiprintf_r+0x1e6>
 800ccb4:	0800e400 	.word	0x0800e400
 800ccb8:	0800e40a 	.word	0x0800e40a
 800ccbc:	08008f91 	.word	0x08008f91
 800ccc0:	0800ca73 	.word	0x0800ca73
 800ccc4:	0800e406 	.word	0x0800e406

0800ccc8 <_scanf_chars>:
 800ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cccc:	4615      	mov	r5, r2
 800ccce:	688a      	ldr	r2, [r1, #8]
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b932      	cbnz	r2, 800cce4 <_scanf_chars+0x1c>
 800ccd6:	698a      	ldr	r2, [r1, #24]
 800ccd8:	2a00      	cmp	r2, #0
 800ccda:	bf14      	ite	ne
 800ccdc:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800cce0:	2201      	moveq	r2, #1
 800cce2:	608a      	str	r2, [r1, #8]
 800cce4:	6822      	ldr	r2, [r4, #0]
 800cce6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800cd78 <_scanf_chars+0xb0>
 800ccea:	06d1      	lsls	r1, r2, #27
 800ccec:	bf5f      	itttt	pl
 800ccee:	681a      	ldrpl	r2, [r3, #0]
 800ccf0:	1d11      	addpl	r1, r2, #4
 800ccf2:	6019      	strpl	r1, [r3, #0]
 800ccf4:	6816      	ldrpl	r6, [r2, #0]
 800ccf6:	2700      	movs	r7, #0
 800ccf8:	69a0      	ldr	r0, [r4, #24]
 800ccfa:	b188      	cbz	r0, 800cd20 <_scanf_chars+0x58>
 800ccfc:	2801      	cmp	r0, #1
 800ccfe:	d107      	bne.n	800cd10 <_scanf_chars+0x48>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	781a      	ldrb	r2, [r3, #0]
 800cd04:	6963      	ldr	r3, [r4, #20]
 800cd06:	5c9b      	ldrb	r3, [r3, r2]
 800cd08:	b953      	cbnz	r3, 800cd20 <_scanf_chars+0x58>
 800cd0a:	2f00      	cmp	r7, #0
 800cd0c:	d031      	beq.n	800cd72 <_scanf_chars+0xaa>
 800cd0e:	e022      	b.n	800cd56 <_scanf_chars+0x8e>
 800cd10:	2802      	cmp	r0, #2
 800cd12:	d120      	bne.n	800cd56 <_scanf_chars+0x8e>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cd1c:	071b      	lsls	r3, r3, #28
 800cd1e:	d41a      	bmi.n	800cd56 <_scanf_chars+0x8e>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	06da      	lsls	r2, r3, #27
 800cd24:	bf5e      	ittt	pl
 800cd26:	682b      	ldrpl	r3, [r5, #0]
 800cd28:	781b      	ldrbpl	r3, [r3, #0]
 800cd2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cd2e:	682a      	ldr	r2, [r5, #0]
 800cd30:	686b      	ldr	r3, [r5, #4]
 800cd32:	3201      	adds	r2, #1
 800cd34:	602a      	str	r2, [r5, #0]
 800cd36:	68a2      	ldr	r2, [r4, #8]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	3a01      	subs	r2, #1
 800cd3c:	606b      	str	r3, [r5, #4]
 800cd3e:	3701      	adds	r7, #1
 800cd40:	60a2      	str	r2, [r4, #8]
 800cd42:	b142      	cbz	r2, 800cd56 <_scanf_chars+0x8e>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dcd7      	bgt.n	800ccf8 <_scanf_chars+0x30>
 800cd48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4640      	mov	r0, r8
 800cd50:	4798      	blx	r3
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d0d0      	beq.n	800ccf8 <_scanf_chars+0x30>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	f013 0310 	ands.w	r3, r3, #16
 800cd5c:	d105      	bne.n	800cd6a <_scanf_chars+0xa2>
 800cd5e:	68e2      	ldr	r2, [r4, #12]
 800cd60:	3201      	adds	r2, #1
 800cd62:	60e2      	str	r2, [r4, #12]
 800cd64:	69a2      	ldr	r2, [r4, #24]
 800cd66:	b102      	cbz	r2, 800cd6a <_scanf_chars+0xa2>
 800cd68:	7033      	strb	r3, [r6, #0]
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	443b      	add	r3, r7
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	2000      	movs	r0, #0
 800cd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd76:	bf00      	nop
 800cd78:	0800dff5 	.word	0x0800dff5

0800cd7c <_scanf_i>:
 800cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	4698      	mov	r8, r3
 800cd82:	4b74      	ldr	r3, [pc, #464]	@ (800cf54 <_scanf_i+0x1d8>)
 800cd84:	460c      	mov	r4, r1
 800cd86:	4682      	mov	sl, r0
 800cd88:	4616      	mov	r6, r2
 800cd8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd8e:	b087      	sub	sp, #28
 800cd90:	ab03      	add	r3, sp, #12
 800cd92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cd96:	4b70      	ldr	r3, [pc, #448]	@ (800cf58 <_scanf_i+0x1dc>)
 800cd98:	69a1      	ldr	r1, [r4, #24]
 800cd9a:	4a70      	ldr	r2, [pc, #448]	@ (800cf5c <_scanf_i+0x1e0>)
 800cd9c:	2903      	cmp	r1, #3
 800cd9e:	bf08      	it	eq
 800cda0:	461a      	moveq	r2, r3
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	9201      	str	r2, [sp, #4]
 800cda6:	1e5a      	subs	r2, r3, #1
 800cda8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cdac:	bf88      	it	hi
 800cdae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cdb2:	4627      	mov	r7, r4
 800cdb4:	bf82      	ittt	hi
 800cdb6:	eb03 0905 	addhi.w	r9, r3, r5
 800cdba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cdbe:	60a3      	strhi	r3, [r4, #8]
 800cdc0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cdc4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800cdc8:	bf98      	it	ls
 800cdca:	f04f 0900 	movls.w	r9, #0
 800cdce:	6023      	str	r3, [r4, #0]
 800cdd0:	463d      	mov	r5, r7
 800cdd2:	f04f 0b00 	mov.w	fp, #0
 800cdd6:	6831      	ldr	r1, [r6, #0]
 800cdd8:	ab03      	add	r3, sp, #12
 800cdda:	7809      	ldrb	r1, [r1, #0]
 800cddc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cde0:	2202      	movs	r2, #2
 800cde2:	f7f3 fa05 	bl	80001f0 <memchr>
 800cde6:	b328      	cbz	r0, 800ce34 <_scanf_i+0xb8>
 800cde8:	f1bb 0f01 	cmp.w	fp, #1
 800cdec:	d159      	bne.n	800cea2 <_scanf_i+0x126>
 800cdee:	6862      	ldr	r2, [r4, #4]
 800cdf0:	b92a      	cbnz	r2, 800cdfe <_scanf_i+0x82>
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	2108      	movs	r1, #8
 800cdf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cdfa:	6061      	str	r1, [r4, #4]
 800cdfc:	6022      	str	r2, [r4, #0]
 800cdfe:	6822      	ldr	r2, [r4, #0]
 800ce00:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ce04:	6022      	str	r2, [r4, #0]
 800ce06:	68a2      	ldr	r2, [r4, #8]
 800ce08:	1e51      	subs	r1, r2, #1
 800ce0a:	60a1      	str	r1, [r4, #8]
 800ce0c:	b192      	cbz	r2, 800ce34 <_scanf_i+0xb8>
 800ce0e:	6832      	ldr	r2, [r6, #0]
 800ce10:	1c51      	adds	r1, r2, #1
 800ce12:	6031      	str	r1, [r6, #0]
 800ce14:	7812      	ldrb	r2, [r2, #0]
 800ce16:	f805 2b01 	strb.w	r2, [r5], #1
 800ce1a:	6872      	ldr	r2, [r6, #4]
 800ce1c:	3a01      	subs	r2, #1
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	6072      	str	r2, [r6, #4]
 800ce22:	dc07      	bgt.n	800ce34 <_scanf_i+0xb8>
 800ce24:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4650      	mov	r0, sl
 800ce2c:	4790      	blx	r2
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f040 8085 	bne.w	800cf3e <_scanf_i+0x1c2>
 800ce34:	f10b 0b01 	add.w	fp, fp, #1
 800ce38:	f1bb 0f03 	cmp.w	fp, #3
 800ce3c:	d1cb      	bne.n	800cdd6 <_scanf_i+0x5a>
 800ce3e:	6863      	ldr	r3, [r4, #4]
 800ce40:	b90b      	cbnz	r3, 800ce46 <_scanf_i+0xca>
 800ce42:	230a      	movs	r3, #10
 800ce44:	6063      	str	r3, [r4, #4]
 800ce46:	6863      	ldr	r3, [r4, #4]
 800ce48:	4945      	ldr	r1, [pc, #276]	@ (800cf60 <_scanf_i+0x1e4>)
 800ce4a:	6960      	ldr	r0, [r4, #20]
 800ce4c:	1ac9      	subs	r1, r1, r3
 800ce4e:	f000 f947 	bl	800d0e0 <__sccl>
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	6822      	ldr	r2, [r4, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d03d      	beq.n	800ceda <_scanf_i+0x15e>
 800ce5e:	6831      	ldr	r1, [r6, #0]
 800ce60:	6960      	ldr	r0, [r4, #20]
 800ce62:	f891 c000 	ldrb.w	ip, [r1]
 800ce66:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d035      	beq.n	800ceda <_scanf_i+0x15e>
 800ce6e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ce72:	d124      	bne.n	800cebe <_scanf_i+0x142>
 800ce74:	0510      	lsls	r0, r2, #20
 800ce76:	d522      	bpl.n	800cebe <_scanf_i+0x142>
 800ce78:	f10b 0b01 	add.w	fp, fp, #1
 800ce7c:	f1b9 0f00 	cmp.w	r9, #0
 800ce80:	d003      	beq.n	800ce8a <_scanf_i+0x10e>
 800ce82:	3301      	adds	r3, #1
 800ce84:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ce88:	60a3      	str	r3, [r4, #8]
 800ce8a:	6873      	ldr	r3, [r6, #4]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	6073      	str	r3, [r6, #4]
 800ce92:	dd1b      	ble.n	800cecc <_scanf_i+0x150>
 800ce94:	6833      	ldr	r3, [r6, #0]
 800ce96:	3301      	adds	r3, #1
 800ce98:	6033      	str	r3, [r6, #0]
 800ce9a:	68a3      	ldr	r3, [r4, #8]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	60a3      	str	r3, [r4, #8]
 800cea0:	e7d9      	b.n	800ce56 <_scanf_i+0xda>
 800cea2:	f1bb 0f02 	cmp.w	fp, #2
 800cea6:	d1ae      	bne.n	800ce06 <_scanf_i+0x8a>
 800cea8:	6822      	ldr	r2, [r4, #0]
 800ceaa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ceae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ceb2:	d1bf      	bne.n	800ce34 <_scanf_i+0xb8>
 800ceb4:	2110      	movs	r1, #16
 800ceb6:	6061      	str	r1, [r4, #4]
 800ceb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cebc:	e7a2      	b.n	800ce04 <_scanf_i+0x88>
 800cebe:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	780b      	ldrb	r3, [r1, #0]
 800cec6:	f805 3b01 	strb.w	r3, [r5], #1
 800ceca:	e7de      	b.n	800ce8a <_scanf_i+0x10e>
 800cecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ced0:	4631      	mov	r1, r6
 800ced2:	4650      	mov	r0, sl
 800ced4:	4798      	blx	r3
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d0df      	beq.n	800ce9a <_scanf_i+0x11e>
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	05d9      	lsls	r1, r3, #23
 800cede:	d50d      	bpl.n	800cefc <_scanf_i+0x180>
 800cee0:	42bd      	cmp	r5, r7
 800cee2:	d909      	bls.n	800cef8 <_scanf_i+0x17c>
 800cee4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ceec:	4632      	mov	r2, r6
 800ceee:	4650      	mov	r0, sl
 800cef0:	4798      	blx	r3
 800cef2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800cef6:	464d      	mov	r5, r9
 800cef8:	42bd      	cmp	r5, r7
 800cefa:	d028      	beq.n	800cf4e <_scanf_i+0x1d2>
 800cefc:	6822      	ldr	r2, [r4, #0]
 800cefe:	f012 0210 	ands.w	r2, r2, #16
 800cf02:	d113      	bne.n	800cf2c <_scanf_i+0x1b0>
 800cf04:	702a      	strb	r2, [r5, #0]
 800cf06:	6863      	ldr	r3, [r4, #4]
 800cf08:	9e01      	ldr	r6, [sp, #4]
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	4650      	mov	r0, sl
 800cf0e:	47b0      	blx	r6
 800cf10:	f8d8 3000 	ldr.w	r3, [r8]
 800cf14:	6821      	ldr	r1, [r4, #0]
 800cf16:	1d1a      	adds	r2, r3, #4
 800cf18:	f8c8 2000 	str.w	r2, [r8]
 800cf1c:	f011 0f20 	tst.w	r1, #32
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	d00f      	beq.n	800cf44 <_scanf_i+0x1c8>
 800cf24:	6018      	str	r0, [r3, #0]
 800cf26:	68e3      	ldr	r3, [r4, #12]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	60e3      	str	r3, [r4, #12]
 800cf2c:	6923      	ldr	r3, [r4, #16]
 800cf2e:	1bed      	subs	r5, r5, r7
 800cf30:	445d      	add	r5, fp
 800cf32:	442b      	add	r3, r5
 800cf34:	6123      	str	r3, [r4, #16]
 800cf36:	2000      	movs	r0, #0
 800cf38:	b007      	add	sp, #28
 800cf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3e:	f04f 0b00 	mov.w	fp, #0
 800cf42:	e7ca      	b.n	800ceda <_scanf_i+0x15e>
 800cf44:	07ca      	lsls	r2, r1, #31
 800cf46:	bf4c      	ite	mi
 800cf48:	8018      	strhmi	r0, [r3, #0]
 800cf4a:	6018      	strpl	r0, [r3, #0]
 800cf4c:	e7eb      	b.n	800cf26 <_scanf_i+0x1aa>
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e7f2      	b.n	800cf38 <_scanf_i+0x1bc>
 800cf52:	bf00      	nop
 800cf54:	0800dfd0 	.word	0x0800dfd0
 800cf58:	08008e39 	.word	0x08008e39
 800cf5c:	0800db9d 	.word	0x0800db9d
 800cf60:	0800e421 	.word	0x0800e421

0800cf64 <__sflush_r>:
 800cf64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6c:	0716      	lsls	r6, r2, #28
 800cf6e:	4605      	mov	r5, r0
 800cf70:	460c      	mov	r4, r1
 800cf72:	d454      	bmi.n	800d01e <__sflush_r+0xba>
 800cf74:	684b      	ldr	r3, [r1, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	dc02      	bgt.n	800cf80 <__sflush_r+0x1c>
 800cf7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dd48      	ble.n	800d012 <__sflush_r+0xae>
 800cf80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf82:	2e00      	cmp	r6, #0
 800cf84:	d045      	beq.n	800d012 <__sflush_r+0xae>
 800cf86:	2300      	movs	r3, #0
 800cf88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf8c:	682f      	ldr	r7, [r5, #0]
 800cf8e:	6a21      	ldr	r1, [r4, #32]
 800cf90:	602b      	str	r3, [r5, #0]
 800cf92:	d030      	beq.n	800cff6 <__sflush_r+0x92>
 800cf94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	0759      	lsls	r1, r3, #29
 800cf9a:	d505      	bpl.n	800cfa8 <__sflush_r+0x44>
 800cf9c:	6863      	ldr	r3, [r4, #4]
 800cf9e:	1ad2      	subs	r2, r2, r3
 800cfa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfa2:	b10b      	cbz	r3, 800cfa8 <__sflush_r+0x44>
 800cfa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfa6:	1ad2      	subs	r2, r2, r3
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfac:	6a21      	ldr	r1, [r4, #32]
 800cfae:	4628      	mov	r0, r5
 800cfb0:	47b0      	blx	r6
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	89a3      	ldrh	r3, [r4, #12]
 800cfb6:	d106      	bne.n	800cfc6 <__sflush_r+0x62>
 800cfb8:	6829      	ldr	r1, [r5, #0]
 800cfba:	291d      	cmp	r1, #29
 800cfbc:	d82b      	bhi.n	800d016 <__sflush_r+0xb2>
 800cfbe:	4a2a      	ldr	r2, [pc, #168]	@ (800d068 <__sflush_r+0x104>)
 800cfc0:	410a      	asrs	r2, r1
 800cfc2:	07d6      	lsls	r6, r2, #31
 800cfc4:	d427      	bmi.n	800d016 <__sflush_r+0xb2>
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	6062      	str	r2, [r4, #4]
 800cfca:	04d9      	lsls	r1, r3, #19
 800cfcc:	6922      	ldr	r2, [r4, #16]
 800cfce:	6022      	str	r2, [r4, #0]
 800cfd0:	d504      	bpl.n	800cfdc <__sflush_r+0x78>
 800cfd2:	1c42      	adds	r2, r0, #1
 800cfd4:	d101      	bne.n	800cfda <__sflush_r+0x76>
 800cfd6:	682b      	ldr	r3, [r5, #0]
 800cfd8:	b903      	cbnz	r3, 800cfdc <__sflush_r+0x78>
 800cfda:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfde:	602f      	str	r7, [r5, #0]
 800cfe0:	b1b9      	cbz	r1, 800d012 <__sflush_r+0xae>
 800cfe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfe6:	4299      	cmp	r1, r3
 800cfe8:	d002      	beq.n	800cff0 <__sflush_r+0x8c>
 800cfea:	4628      	mov	r0, r5
 800cfec:	f7fd fe4c 	bl	800ac88 <_free_r>
 800cff0:	2300      	movs	r3, #0
 800cff2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cff4:	e00d      	b.n	800d012 <__sflush_r+0xae>
 800cff6:	2301      	movs	r3, #1
 800cff8:	4628      	mov	r0, r5
 800cffa:	47b0      	blx	r6
 800cffc:	4602      	mov	r2, r0
 800cffe:	1c50      	adds	r0, r2, #1
 800d000:	d1c9      	bne.n	800cf96 <__sflush_r+0x32>
 800d002:	682b      	ldr	r3, [r5, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d0c6      	beq.n	800cf96 <__sflush_r+0x32>
 800d008:	2b1d      	cmp	r3, #29
 800d00a:	d001      	beq.n	800d010 <__sflush_r+0xac>
 800d00c:	2b16      	cmp	r3, #22
 800d00e:	d11e      	bne.n	800d04e <__sflush_r+0xea>
 800d010:	602f      	str	r7, [r5, #0]
 800d012:	2000      	movs	r0, #0
 800d014:	e022      	b.n	800d05c <__sflush_r+0xf8>
 800d016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d01a:	b21b      	sxth	r3, r3
 800d01c:	e01b      	b.n	800d056 <__sflush_r+0xf2>
 800d01e:	690f      	ldr	r7, [r1, #16]
 800d020:	2f00      	cmp	r7, #0
 800d022:	d0f6      	beq.n	800d012 <__sflush_r+0xae>
 800d024:	0793      	lsls	r3, r2, #30
 800d026:	680e      	ldr	r6, [r1, #0]
 800d028:	bf08      	it	eq
 800d02a:	694b      	ldreq	r3, [r1, #20]
 800d02c:	600f      	str	r7, [r1, #0]
 800d02e:	bf18      	it	ne
 800d030:	2300      	movne	r3, #0
 800d032:	eba6 0807 	sub.w	r8, r6, r7
 800d036:	608b      	str	r3, [r1, #8]
 800d038:	f1b8 0f00 	cmp.w	r8, #0
 800d03c:	dde9      	ble.n	800d012 <__sflush_r+0xae>
 800d03e:	6a21      	ldr	r1, [r4, #32]
 800d040:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d042:	4643      	mov	r3, r8
 800d044:	463a      	mov	r2, r7
 800d046:	4628      	mov	r0, r5
 800d048:	47b0      	blx	r6
 800d04a:	2800      	cmp	r0, #0
 800d04c:	dc08      	bgt.n	800d060 <__sflush_r+0xfc>
 800d04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d056:	81a3      	strh	r3, [r4, #12]
 800d058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d060:	4407      	add	r7, r0
 800d062:	eba8 0800 	sub.w	r8, r8, r0
 800d066:	e7e7      	b.n	800d038 <__sflush_r+0xd4>
 800d068:	dfbffffe 	.word	0xdfbffffe

0800d06c <_fflush_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	690b      	ldr	r3, [r1, #16]
 800d070:	4605      	mov	r5, r0
 800d072:	460c      	mov	r4, r1
 800d074:	b913      	cbnz	r3, 800d07c <_fflush_r+0x10>
 800d076:	2500      	movs	r5, #0
 800d078:	4628      	mov	r0, r5
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	b118      	cbz	r0, 800d086 <_fflush_r+0x1a>
 800d07e:	6a03      	ldr	r3, [r0, #32]
 800d080:	b90b      	cbnz	r3, 800d086 <_fflush_r+0x1a>
 800d082:	f7fc fddd 	bl	8009c40 <__sinit>
 800d086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0f3      	beq.n	800d076 <_fflush_r+0xa>
 800d08e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d090:	07d0      	lsls	r0, r2, #31
 800d092:	d404      	bmi.n	800d09e <_fflush_r+0x32>
 800d094:	0599      	lsls	r1, r3, #22
 800d096:	d402      	bmi.n	800d09e <_fflush_r+0x32>
 800d098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d09a:	f7fc ff82 	bl	8009fa2 <__retarget_lock_acquire_recursive>
 800d09e:	4628      	mov	r0, r5
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	f7ff ff5f 	bl	800cf64 <__sflush_r>
 800d0a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0a8:	07da      	lsls	r2, r3, #31
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	d4e4      	bmi.n	800d078 <_fflush_r+0xc>
 800d0ae:	89a3      	ldrh	r3, [r4, #12]
 800d0b0:	059b      	lsls	r3, r3, #22
 800d0b2:	d4e1      	bmi.n	800d078 <_fflush_r+0xc>
 800d0b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0b6:	f7fc ff75 	bl	8009fa4 <__retarget_lock_release_recursive>
 800d0ba:	e7dd      	b.n	800d078 <_fflush_r+0xc>

0800d0bc <fiprintf>:
 800d0bc:	b40e      	push	{r1, r2, r3}
 800d0be:	b503      	push	{r0, r1, lr}
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	ab03      	add	r3, sp, #12
 800d0c4:	4805      	ldr	r0, [pc, #20]	@ (800d0dc <fiprintf+0x20>)
 800d0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ca:	6800      	ldr	r0, [r0, #0]
 800d0cc:	9301      	str	r3, [sp, #4]
 800d0ce:	f7ff fce3 	bl	800ca98 <_vfiprintf_r>
 800d0d2:	b002      	add	sp, #8
 800d0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0d8:	b003      	add	sp, #12
 800d0da:	4770      	bx	lr
 800d0dc:	20000084 	.word	0x20000084

0800d0e0 <__sccl>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	780b      	ldrb	r3, [r1, #0]
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	2b5e      	cmp	r3, #94	@ 0x5e
 800d0e8:	bf0b      	itete	eq
 800d0ea:	784b      	ldrbeq	r3, [r1, #1]
 800d0ec:	1c4a      	addne	r2, r1, #1
 800d0ee:	1c8a      	addeq	r2, r1, #2
 800d0f0:	2100      	movne	r1, #0
 800d0f2:	bf08      	it	eq
 800d0f4:	2101      	moveq	r1, #1
 800d0f6:	3801      	subs	r0, #1
 800d0f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d0fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d100:	42a8      	cmp	r0, r5
 800d102:	d1fb      	bne.n	800d0fc <__sccl+0x1c>
 800d104:	b90b      	cbnz	r3, 800d10a <__sccl+0x2a>
 800d106:	1e50      	subs	r0, r2, #1
 800d108:	bd70      	pop	{r4, r5, r6, pc}
 800d10a:	f081 0101 	eor.w	r1, r1, #1
 800d10e:	54e1      	strb	r1, [r4, r3]
 800d110:	4610      	mov	r0, r2
 800d112:	4602      	mov	r2, r0
 800d114:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d118:	2d2d      	cmp	r5, #45	@ 0x2d
 800d11a:	d005      	beq.n	800d128 <__sccl+0x48>
 800d11c:	2d5d      	cmp	r5, #93	@ 0x5d
 800d11e:	d016      	beq.n	800d14e <__sccl+0x6e>
 800d120:	2d00      	cmp	r5, #0
 800d122:	d0f1      	beq.n	800d108 <__sccl+0x28>
 800d124:	462b      	mov	r3, r5
 800d126:	e7f2      	b.n	800d10e <__sccl+0x2e>
 800d128:	7846      	ldrb	r6, [r0, #1]
 800d12a:	2e5d      	cmp	r6, #93	@ 0x5d
 800d12c:	d0fa      	beq.n	800d124 <__sccl+0x44>
 800d12e:	42b3      	cmp	r3, r6
 800d130:	dcf8      	bgt.n	800d124 <__sccl+0x44>
 800d132:	3002      	adds	r0, #2
 800d134:	461a      	mov	r2, r3
 800d136:	3201      	adds	r2, #1
 800d138:	4296      	cmp	r6, r2
 800d13a:	54a1      	strb	r1, [r4, r2]
 800d13c:	dcfb      	bgt.n	800d136 <__sccl+0x56>
 800d13e:	1af2      	subs	r2, r6, r3
 800d140:	3a01      	subs	r2, #1
 800d142:	1c5d      	adds	r5, r3, #1
 800d144:	42b3      	cmp	r3, r6
 800d146:	bfa8      	it	ge
 800d148:	2200      	movge	r2, #0
 800d14a:	18ab      	adds	r3, r5, r2
 800d14c:	e7e1      	b.n	800d112 <__sccl+0x32>
 800d14e:	4610      	mov	r0, r2
 800d150:	e7da      	b.n	800d108 <__sccl+0x28>

0800d152 <__submore>:
 800d152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d156:	460c      	mov	r4, r1
 800d158:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d15a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d15e:	4299      	cmp	r1, r3
 800d160:	d11d      	bne.n	800d19e <__submore+0x4c>
 800d162:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d166:	f7fd fe03 	bl	800ad70 <_malloc_r>
 800d16a:	b918      	cbnz	r0, 800d174 <__submore+0x22>
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d178:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d17a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d17e:	6360      	str	r0, [r4, #52]	@ 0x34
 800d180:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d184:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d188:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d18c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d190:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d194:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d198:	6020      	str	r0, [r4, #0]
 800d19a:	2000      	movs	r0, #0
 800d19c:	e7e8      	b.n	800d170 <__submore+0x1e>
 800d19e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d1a0:	0077      	lsls	r7, r6, #1
 800d1a2:	463a      	mov	r2, r7
 800d1a4:	f000 fc5d 	bl	800da62 <_realloc_r>
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d0de      	beq.n	800d16c <__submore+0x1a>
 800d1ae:	eb00 0806 	add.w	r8, r0, r6
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	f000 f8d6 	bl	800d368 <memcpy>
 800d1bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d1c0:	f8c4 8000 	str.w	r8, [r4]
 800d1c4:	e7e9      	b.n	800d19a <__submore+0x48>

0800d1c6 <__swbuf_r>:
 800d1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c8:	460e      	mov	r6, r1
 800d1ca:	4614      	mov	r4, r2
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	b118      	cbz	r0, 800d1d8 <__swbuf_r+0x12>
 800d1d0:	6a03      	ldr	r3, [r0, #32]
 800d1d2:	b90b      	cbnz	r3, 800d1d8 <__swbuf_r+0x12>
 800d1d4:	f7fc fd34 	bl	8009c40 <__sinit>
 800d1d8:	69a3      	ldr	r3, [r4, #24]
 800d1da:	60a3      	str	r3, [r4, #8]
 800d1dc:	89a3      	ldrh	r3, [r4, #12]
 800d1de:	071a      	lsls	r2, r3, #28
 800d1e0:	d501      	bpl.n	800d1e6 <__swbuf_r+0x20>
 800d1e2:	6923      	ldr	r3, [r4, #16]
 800d1e4:	b943      	cbnz	r3, 800d1f8 <__swbuf_r+0x32>
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	f000 f82b 	bl	800d244 <__swsetup_r>
 800d1ee:	b118      	cbz	r0, 800d1f8 <__swbuf_r+0x32>
 800d1f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d1f4:	4638      	mov	r0, r7
 800d1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	6922      	ldr	r2, [r4, #16]
 800d1fc:	1a98      	subs	r0, r3, r2
 800d1fe:	6963      	ldr	r3, [r4, #20]
 800d200:	b2f6      	uxtb	r6, r6
 800d202:	4283      	cmp	r3, r0
 800d204:	4637      	mov	r7, r6
 800d206:	dc05      	bgt.n	800d214 <__swbuf_r+0x4e>
 800d208:	4621      	mov	r1, r4
 800d20a:	4628      	mov	r0, r5
 800d20c:	f7ff ff2e 	bl	800d06c <_fflush_r>
 800d210:	2800      	cmp	r0, #0
 800d212:	d1ed      	bne.n	800d1f0 <__swbuf_r+0x2a>
 800d214:	68a3      	ldr	r3, [r4, #8]
 800d216:	3b01      	subs	r3, #1
 800d218:	60a3      	str	r3, [r4, #8]
 800d21a:	6823      	ldr	r3, [r4, #0]
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	6022      	str	r2, [r4, #0]
 800d220:	701e      	strb	r6, [r3, #0]
 800d222:	6962      	ldr	r2, [r4, #20]
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	429a      	cmp	r2, r3
 800d228:	d004      	beq.n	800d234 <__swbuf_r+0x6e>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	07db      	lsls	r3, r3, #31
 800d22e:	d5e1      	bpl.n	800d1f4 <__swbuf_r+0x2e>
 800d230:	2e0a      	cmp	r6, #10
 800d232:	d1df      	bne.n	800d1f4 <__swbuf_r+0x2e>
 800d234:	4621      	mov	r1, r4
 800d236:	4628      	mov	r0, r5
 800d238:	f7ff ff18 	bl	800d06c <_fflush_r>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	d0d9      	beq.n	800d1f4 <__swbuf_r+0x2e>
 800d240:	e7d6      	b.n	800d1f0 <__swbuf_r+0x2a>
	...

0800d244 <__swsetup_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4b29      	ldr	r3, [pc, #164]	@ (800d2ec <__swsetup_r+0xa8>)
 800d248:	4605      	mov	r5, r0
 800d24a:	6818      	ldr	r0, [r3, #0]
 800d24c:	460c      	mov	r4, r1
 800d24e:	b118      	cbz	r0, 800d258 <__swsetup_r+0x14>
 800d250:	6a03      	ldr	r3, [r0, #32]
 800d252:	b90b      	cbnz	r3, 800d258 <__swsetup_r+0x14>
 800d254:	f7fc fcf4 	bl	8009c40 <__sinit>
 800d258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d25c:	0719      	lsls	r1, r3, #28
 800d25e:	d422      	bmi.n	800d2a6 <__swsetup_r+0x62>
 800d260:	06da      	lsls	r2, r3, #27
 800d262:	d407      	bmi.n	800d274 <__swsetup_r+0x30>
 800d264:	2209      	movs	r2, #9
 800d266:	602a      	str	r2, [r5, #0]
 800d268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d26c:	81a3      	strh	r3, [r4, #12]
 800d26e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d272:	e033      	b.n	800d2dc <__swsetup_r+0x98>
 800d274:	0758      	lsls	r0, r3, #29
 800d276:	d512      	bpl.n	800d29e <__swsetup_r+0x5a>
 800d278:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d27a:	b141      	cbz	r1, 800d28e <__swsetup_r+0x4a>
 800d27c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d280:	4299      	cmp	r1, r3
 800d282:	d002      	beq.n	800d28a <__swsetup_r+0x46>
 800d284:	4628      	mov	r0, r5
 800d286:	f7fd fcff 	bl	800ac88 <_free_r>
 800d28a:	2300      	movs	r3, #0
 800d28c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	2300      	movs	r3, #0
 800d298:	6063      	str	r3, [r4, #4]
 800d29a:	6923      	ldr	r3, [r4, #16]
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	89a3      	ldrh	r3, [r4, #12]
 800d2a0:	f043 0308 	orr.w	r3, r3, #8
 800d2a4:	81a3      	strh	r3, [r4, #12]
 800d2a6:	6923      	ldr	r3, [r4, #16]
 800d2a8:	b94b      	cbnz	r3, 800d2be <__swsetup_r+0x7a>
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d2b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2b4:	d003      	beq.n	800d2be <__swsetup_r+0x7a>
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	f000 fca4 	bl	800dc06 <__smakebuf_r>
 800d2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2c2:	f013 0201 	ands.w	r2, r3, #1
 800d2c6:	d00a      	beq.n	800d2de <__swsetup_r+0x9a>
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	60a2      	str	r2, [r4, #8]
 800d2cc:	6962      	ldr	r2, [r4, #20]
 800d2ce:	4252      	negs	r2, r2
 800d2d0:	61a2      	str	r2, [r4, #24]
 800d2d2:	6922      	ldr	r2, [r4, #16]
 800d2d4:	b942      	cbnz	r2, 800d2e8 <__swsetup_r+0xa4>
 800d2d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d2da:	d1c5      	bne.n	800d268 <__swsetup_r+0x24>
 800d2dc:	bd38      	pop	{r3, r4, r5, pc}
 800d2de:	0799      	lsls	r1, r3, #30
 800d2e0:	bf58      	it	pl
 800d2e2:	6962      	ldrpl	r2, [r4, #20]
 800d2e4:	60a2      	str	r2, [r4, #8]
 800d2e6:	e7f4      	b.n	800d2d2 <__swsetup_r+0x8e>
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	e7f7      	b.n	800d2dc <__swsetup_r+0x98>
 800d2ec:	20000084 	.word	0x20000084

0800d2f0 <memmove>:
 800d2f0:	4288      	cmp	r0, r1
 800d2f2:	b510      	push	{r4, lr}
 800d2f4:	eb01 0402 	add.w	r4, r1, r2
 800d2f8:	d902      	bls.n	800d300 <memmove+0x10>
 800d2fa:	4284      	cmp	r4, r0
 800d2fc:	4623      	mov	r3, r4
 800d2fe:	d807      	bhi.n	800d310 <memmove+0x20>
 800d300:	1e43      	subs	r3, r0, #1
 800d302:	42a1      	cmp	r1, r4
 800d304:	d008      	beq.n	800d318 <memmove+0x28>
 800d306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d30a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d30e:	e7f8      	b.n	800d302 <memmove+0x12>
 800d310:	4402      	add	r2, r0
 800d312:	4601      	mov	r1, r0
 800d314:	428a      	cmp	r2, r1
 800d316:	d100      	bne.n	800d31a <memmove+0x2a>
 800d318:	bd10      	pop	{r4, pc}
 800d31a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d31e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d322:	e7f7      	b.n	800d314 <memmove+0x24>

0800d324 <strncmp>:
 800d324:	b510      	push	{r4, lr}
 800d326:	b16a      	cbz	r2, 800d344 <strncmp+0x20>
 800d328:	3901      	subs	r1, #1
 800d32a:	1884      	adds	r4, r0, r2
 800d32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d330:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d334:	429a      	cmp	r2, r3
 800d336:	d103      	bne.n	800d340 <strncmp+0x1c>
 800d338:	42a0      	cmp	r0, r4
 800d33a:	d001      	beq.n	800d340 <strncmp+0x1c>
 800d33c:	2a00      	cmp	r2, #0
 800d33e:	d1f5      	bne.n	800d32c <strncmp+0x8>
 800d340:	1ad0      	subs	r0, r2, r3
 800d342:	bd10      	pop	{r4, pc}
 800d344:	4610      	mov	r0, r2
 800d346:	e7fc      	b.n	800d342 <strncmp+0x1e>

0800d348 <_sbrk_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4d06      	ldr	r5, [pc, #24]	@ (800d364 <_sbrk_r+0x1c>)
 800d34c:	2300      	movs	r3, #0
 800d34e:	4604      	mov	r4, r0
 800d350:	4608      	mov	r0, r1
 800d352:	602b      	str	r3, [r5, #0]
 800d354:	f7f7 f946 	bl	80045e4 <_sbrk>
 800d358:	1c43      	adds	r3, r0, #1
 800d35a:	d102      	bne.n	800d362 <_sbrk_r+0x1a>
 800d35c:	682b      	ldr	r3, [r5, #0]
 800d35e:	b103      	cbz	r3, 800d362 <_sbrk_r+0x1a>
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	bd38      	pop	{r3, r4, r5, pc}
 800d364:	20000ff4 	.word	0x20000ff4

0800d368 <memcpy>:
 800d368:	440a      	add	r2, r1
 800d36a:	4291      	cmp	r1, r2
 800d36c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d370:	d100      	bne.n	800d374 <memcpy+0xc>
 800d372:	4770      	bx	lr
 800d374:	b510      	push	{r4, lr}
 800d376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d37a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d37e:	4291      	cmp	r1, r2
 800d380:	d1f9      	bne.n	800d376 <memcpy+0xe>
 800d382:	bd10      	pop	{r4, pc}
 800d384:	0000      	movs	r0, r0
	...

0800d388 <nan>:
 800d388:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d390 <nan+0x8>
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	00000000 	.word	0x00000000
 800d394:	7ff80000 	.word	0x7ff80000

0800d398 <abort>:
 800d398:	b508      	push	{r3, lr}
 800d39a:	2006      	movs	r0, #6
 800d39c:	f000 fc98 	bl	800dcd0 <raise>
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	f7f7 f8a7 	bl	80044f4 <_exit>

0800d3a6 <_calloc_r>:
 800d3a6:	b570      	push	{r4, r5, r6, lr}
 800d3a8:	fba1 5402 	umull	r5, r4, r1, r2
 800d3ac:	b93c      	cbnz	r4, 800d3be <_calloc_r+0x18>
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f7fd fcde 	bl	800ad70 <_malloc_r>
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	b928      	cbnz	r0, 800d3c4 <_calloc_r+0x1e>
 800d3b8:	2600      	movs	r6, #0
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	bd70      	pop	{r4, r5, r6, pc}
 800d3be:	220c      	movs	r2, #12
 800d3c0:	6002      	str	r2, [r0, #0]
 800d3c2:	e7f9      	b.n	800d3b8 <_calloc_r+0x12>
 800d3c4:	462a      	mov	r2, r5
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	f7fc fd11 	bl	8009dee <memset>
 800d3cc:	e7f5      	b.n	800d3ba <_calloc_r+0x14>

0800d3ce <rshift>:
 800d3ce:	6903      	ldr	r3, [r0, #16]
 800d3d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d3dc:	f100 0414 	add.w	r4, r0, #20
 800d3e0:	dd45      	ble.n	800d46e <rshift+0xa0>
 800d3e2:	f011 011f 	ands.w	r1, r1, #31
 800d3e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d3ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d3ee:	d10c      	bne.n	800d40a <rshift+0x3c>
 800d3f0:	f100 0710 	add.w	r7, r0, #16
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	42b1      	cmp	r1, r6
 800d3f8:	d334      	bcc.n	800d464 <rshift+0x96>
 800d3fa:	1a9b      	subs	r3, r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	1eea      	subs	r2, r5, #3
 800d400:	4296      	cmp	r6, r2
 800d402:	bf38      	it	cc
 800d404:	2300      	movcc	r3, #0
 800d406:	4423      	add	r3, r4
 800d408:	e015      	b.n	800d436 <rshift+0x68>
 800d40a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d40e:	f1c1 0820 	rsb	r8, r1, #32
 800d412:	40cf      	lsrs	r7, r1
 800d414:	f105 0e04 	add.w	lr, r5, #4
 800d418:	46a1      	mov	r9, r4
 800d41a:	4576      	cmp	r6, lr
 800d41c:	46f4      	mov	ip, lr
 800d41e:	d815      	bhi.n	800d44c <rshift+0x7e>
 800d420:	1a9a      	subs	r2, r3, r2
 800d422:	0092      	lsls	r2, r2, #2
 800d424:	3a04      	subs	r2, #4
 800d426:	3501      	adds	r5, #1
 800d428:	42ae      	cmp	r6, r5
 800d42a:	bf38      	it	cc
 800d42c:	2200      	movcc	r2, #0
 800d42e:	18a3      	adds	r3, r4, r2
 800d430:	50a7      	str	r7, [r4, r2]
 800d432:	b107      	cbz	r7, 800d436 <rshift+0x68>
 800d434:	3304      	adds	r3, #4
 800d436:	1b1a      	subs	r2, r3, r4
 800d438:	42a3      	cmp	r3, r4
 800d43a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d43e:	bf08      	it	eq
 800d440:	2300      	moveq	r3, #0
 800d442:	6102      	str	r2, [r0, #16]
 800d444:	bf08      	it	eq
 800d446:	6143      	streq	r3, [r0, #20]
 800d448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d44c:	f8dc c000 	ldr.w	ip, [ip]
 800d450:	fa0c fc08 	lsl.w	ip, ip, r8
 800d454:	ea4c 0707 	orr.w	r7, ip, r7
 800d458:	f849 7b04 	str.w	r7, [r9], #4
 800d45c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d460:	40cf      	lsrs	r7, r1
 800d462:	e7da      	b.n	800d41a <rshift+0x4c>
 800d464:	f851 cb04 	ldr.w	ip, [r1], #4
 800d468:	f847 cf04 	str.w	ip, [r7, #4]!
 800d46c:	e7c3      	b.n	800d3f6 <rshift+0x28>
 800d46e:	4623      	mov	r3, r4
 800d470:	e7e1      	b.n	800d436 <rshift+0x68>

0800d472 <__hexdig_fun>:
 800d472:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d476:	2b09      	cmp	r3, #9
 800d478:	d802      	bhi.n	800d480 <__hexdig_fun+0xe>
 800d47a:	3820      	subs	r0, #32
 800d47c:	b2c0      	uxtb	r0, r0
 800d47e:	4770      	bx	lr
 800d480:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d484:	2b05      	cmp	r3, #5
 800d486:	d801      	bhi.n	800d48c <__hexdig_fun+0x1a>
 800d488:	3847      	subs	r0, #71	@ 0x47
 800d48a:	e7f7      	b.n	800d47c <__hexdig_fun+0xa>
 800d48c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d490:	2b05      	cmp	r3, #5
 800d492:	d801      	bhi.n	800d498 <__hexdig_fun+0x26>
 800d494:	3827      	subs	r0, #39	@ 0x27
 800d496:	e7f1      	b.n	800d47c <__hexdig_fun+0xa>
 800d498:	2000      	movs	r0, #0
 800d49a:	4770      	bx	lr

0800d49c <__gethex>:
 800d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a0:	b085      	sub	sp, #20
 800d4a2:	468a      	mov	sl, r1
 800d4a4:	9302      	str	r3, [sp, #8]
 800d4a6:	680b      	ldr	r3, [r1, #0]
 800d4a8:	9001      	str	r0, [sp, #4]
 800d4aa:	4690      	mov	r8, r2
 800d4ac:	1c9c      	adds	r4, r3, #2
 800d4ae:	46a1      	mov	r9, r4
 800d4b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d4b4:	2830      	cmp	r0, #48	@ 0x30
 800d4b6:	d0fa      	beq.n	800d4ae <__gethex+0x12>
 800d4b8:	eba9 0303 	sub.w	r3, r9, r3
 800d4bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d4c0:	f7ff ffd7 	bl	800d472 <__hexdig_fun>
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d168      	bne.n	800d59c <__gethex+0x100>
 800d4ca:	49a0      	ldr	r1, [pc, #640]	@ (800d74c <__gethex+0x2b0>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	4648      	mov	r0, r9
 800d4d0:	f7ff ff28 	bl	800d324 <strncmp>
 800d4d4:	4607      	mov	r7, r0
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d167      	bne.n	800d5aa <__gethex+0x10e>
 800d4da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d4de:	4626      	mov	r6, r4
 800d4e0:	f7ff ffc7 	bl	800d472 <__hexdig_fun>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d062      	beq.n	800d5ae <__gethex+0x112>
 800d4e8:	4623      	mov	r3, r4
 800d4ea:	7818      	ldrb	r0, [r3, #0]
 800d4ec:	2830      	cmp	r0, #48	@ 0x30
 800d4ee:	4699      	mov	r9, r3
 800d4f0:	f103 0301 	add.w	r3, r3, #1
 800d4f4:	d0f9      	beq.n	800d4ea <__gethex+0x4e>
 800d4f6:	f7ff ffbc 	bl	800d472 <__hexdig_fun>
 800d4fa:	fab0 f580 	clz	r5, r0
 800d4fe:	096d      	lsrs	r5, r5, #5
 800d500:	f04f 0b01 	mov.w	fp, #1
 800d504:	464a      	mov	r2, r9
 800d506:	4616      	mov	r6, r2
 800d508:	3201      	adds	r2, #1
 800d50a:	7830      	ldrb	r0, [r6, #0]
 800d50c:	f7ff ffb1 	bl	800d472 <__hexdig_fun>
 800d510:	2800      	cmp	r0, #0
 800d512:	d1f8      	bne.n	800d506 <__gethex+0x6a>
 800d514:	498d      	ldr	r1, [pc, #564]	@ (800d74c <__gethex+0x2b0>)
 800d516:	2201      	movs	r2, #1
 800d518:	4630      	mov	r0, r6
 800d51a:	f7ff ff03 	bl	800d324 <strncmp>
 800d51e:	2800      	cmp	r0, #0
 800d520:	d13f      	bne.n	800d5a2 <__gethex+0x106>
 800d522:	b944      	cbnz	r4, 800d536 <__gethex+0x9a>
 800d524:	1c74      	adds	r4, r6, #1
 800d526:	4622      	mov	r2, r4
 800d528:	4616      	mov	r6, r2
 800d52a:	3201      	adds	r2, #1
 800d52c:	7830      	ldrb	r0, [r6, #0]
 800d52e:	f7ff ffa0 	bl	800d472 <__hexdig_fun>
 800d532:	2800      	cmp	r0, #0
 800d534:	d1f8      	bne.n	800d528 <__gethex+0x8c>
 800d536:	1ba4      	subs	r4, r4, r6
 800d538:	00a7      	lsls	r7, r4, #2
 800d53a:	7833      	ldrb	r3, [r6, #0]
 800d53c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d540:	2b50      	cmp	r3, #80	@ 0x50
 800d542:	d13e      	bne.n	800d5c2 <__gethex+0x126>
 800d544:	7873      	ldrb	r3, [r6, #1]
 800d546:	2b2b      	cmp	r3, #43	@ 0x2b
 800d548:	d033      	beq.n	800d5b2 <__gethex+0x116>
 800d54a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d54c:	d034      	beq.n	800d5b8 <__gethex+0x11c>
 800d54e:	1c71      	adds	r1, r6, #1
 800d550:	2400      	movs	r4, #0
 800d552:	7808      	ldrb	r0, [r1, #0]
 800d554:	f7ff ff8d 	bl	800d472 <__hexdig_fun>
 800d558:	1e43      	subs	r3, r0, #1
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	2b18      	cmp	r3, #24
 800d55e:	d830      	bhi.n	800d5c2 <__gethex+0x126>
 800d560:	f1a0 0210 	sub.w	r2, r0, #16
 800d564:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d568:	f7ff ff83 	bl	800d472 <__hexdig_fun>
 800d56c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d570:	fa5f fc8c 	uxtb.w	ip, ip
 800d574:	f1bc 0f18 	cmp.w	ip, #24
 800d578:	f04f 030a 	mov.w	r3, #10
 800d57c:	d91e      	bls.n	800d5bc <__gethex+0x120>
 800d57e:	b104      	cbz	r4, 800d582 <__gethex+0xe6>
 800d580:	4252      	negs	r2, r2
 800d582:	4417      	add	r7, r2
 800d584:	f8ca 1000 	str.w	r1, [sl]
 800d588:	b1ed      	cbz	r5, 800d5c6 <__gethex+0x12a>
 800d58a:	f1bb 0f00 	cmp.w	fp, #0
 800d58e:	bf0c      	ite	eq
 800d590:	2506      	moveq	r5, #6
 800d592:	2500      	movne	r5, #0
 800d594:	4628      	mov	r0, r5
 800d596:	b005      	add	sp, #20
 800d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59c:	2500      	movs	r5, #0
 800d59e:	462c      	mov	r4, r5
 800d5a0:	e7b0      	b.n	800d504 <__gethex+0x68>
 800d5a2:	2c00      	cmp	r4, #0
 800d5a4:	d1c7      	bne.n	800d536 <__gethex+0x9a>
 800d5a6:	4627      	mov	r7, r4
 800d5a8:	e7c7      	b.n	800d53a <__gethex+0x9e>
 800d5aa:	464e      	mov	r6, r9
 800d5ac:	462f      	mov	r7, r5
 800d5ae:	2501      	movs	r5, #1
 800d5b0:	e7c3      	b.n	800d53a <__gethex+0x9e>
 800d5b2:	2400      	movs	r4, #0
 800d5b4:	1cb1      	adds	r1, r6, #2
 800d5b6:	e7cc      	b.n	800d552 <__gethex+0xb6>
 800d5b8:	2401      	movs	r4, #1
 800d5ba:	e7fb      	b.n	800d5b4 <__gethex+0x118>
 800d5bc:	fb03 0002 	mla	r0, r3, r2, r0
 800d5c0:	e7ce      	b.n	800d560 <__gethex+0xc4>
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	e7de      	b.n	800d584 <__gethex+0xe8>
 800d5c6:	eba6 0309 	sub.w	r3, r6, r9
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	2b07      	cmp	r3, #7
 800d5d0:	dc0a      	bgt.n	800d5e8 <__gethex+0x14c>
 800d5d2:	9801      	ldr	r0, [sp, #4]
 800d5d4:	f7fd fc58 	bl	800ae88 <_Balloc>
 800d5d8:	4604      	mov	r4, r0
 800d5da:	b940      	cbnz	r0, 800d5ee <__gethex+0x152>
 800d5dc:	4b5c      	ldr	r3, [pc, #368]	@ (800d750 <__gethex+0x2b4>)
 800d5de:	4602      	mov	r2, r0
 800d5e0:	21e4      	movs	r1, #228	@ 0xe4
 800d5e2:	485c      	ldr	r0, [pc, #368]	@ (800d754 <__gethex+0x2b8>)
 800d5e4:	f7fc fce6 	bl	8009fb4 <__assert_func>
 800d5e8:	3101      	adds	r1, #1
 800d5ea:	105b      	asrs	r3, r3, #1
 800d5ec:	e7ef      	b.n	800d5ce <__gethex+0x132>
 800d5ee:	f100 0a14 	add.w	sl, r0, #20
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	4655      	mov	r5, sl
 800d5f6:	469b      	mov	fp, r3
 800d5f8:	45b1      	cmp	r9, r6
 800d5fa:	d337      	bcc.n	800d66c <__gethex+0x1d0>
 800d5fc:	f845 bb04 	str.w	fp, [r5], #4
 800d600:	eba5 050a 	sub.w	r5, r5, sl
 800d604:	10ad      	asrs	r5, r5, #2
 800d606:	6125      	str	r5, [r4, #16]
 800d608:	4658      	mov	r0, fp
 800d60a:	f7fd fd2f 	bl	800b06c <__hi0bits>
 800d60e:	016d      	lsls	r5, r5, #5
 800d610:	f8d8 6000 	ldr.w	r6, [r8]
 800d614:	1a2d      	subs	r5, r5, r0
 800d616:	42b5      	cmp	r5, r6
 800d618:	dd54      	ble.n	800d6c4 <__gethex+0x228>
 800d61a:	1bad      	subs	r5, r5, r6
 800d61c:	4629      	mov	r1, r5
 800d61e:	4620      	mov	r0, r4
 800d620:	f7fe f8c3 	bl	800b7aa <__any_on>
 800d624:	4681      	mov	r9, r0
 800d626:	b178      	cbz	r0, 800d648 <__gethex+0x1ac>
 800d628:	1e6b      	subs	r3, r5, #1
 800d62a:	1159      	asrs	r1, r3, #5
 800d62c:	f003 021f 	and.w	r2, r3, #31
 800d630:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d634:	f04f 0901 	mov.w	r9, #1
 800d638:	fa09 f202 	lsl.w	r2, r9, r2
 800d63c:	420a      	tst	r2, r1
 800d63e:	d003      	beq.n	800d648 <__gethex+0x1ac>
 800d640:	454b      	cmp	r3, r9
 800d642:	dc36      	bgt.n	800d6b2 <__gethex+0x216>
 800d644:	f04f 0902 	mov.w	r9, #2
 800d648:	4629      	mov	r1, r5
 800d64a:	4620      	mov	r0, r4
 800d64c:	f7ff febf 	bl	800d3ce <rshift>
 800d650:	442f      	add	r7, r5
 800d652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d656:	42bb      	cmp	r3, r7
 800d658:	da42      	bge.n	800d6e0 <__gethex+0x244>
 800d65a:	9801      	ldr	r0, [sp, #4]
 800d65c:	4621      	mov	r1, r4
 800d65e:	f7fd fc53 	bl	800af08 <_Bfree>
 800d662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d664:	2300      	movs	r3, #0
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	25a3      	movs	r5, #163	@ 0xa3
 800d66a:	e793      	b.n	800d594 <__gethex+0xf8>
 800d66c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d670:	2a2e      	cmp	r2, #46	@ 0x2e
 800d672:	d012      	beq.n	800d69a <__gethex+0x1fe>
 800d674:	2b20      	cmp	r3, #32
 800d676:	d104      	bne.n	800d682 <__gethex+0x1e6>
 800d678:	f845 bb04 	str.w	fp, [r5], #4
 800d67c:	f04f 0b00 	mov.w	fp, #0
 800d680:	465b      	mov	r3, fp
 800d682:	7830      	ldrb	r0, [r6, #0]
 800d684:	9303      	str	r3, [sp, #12]
 800d686:	f7ff fef4 	bl	800d472 <__hexdig_fun>
 800d68a:	9b03      	ldr	r3, [sp, #12]
 800d68c:	f000 000f 	and.w	r0, r0, #15
 800d690:	4098      	lsls	r0, r3
 800d692:	ea4b 0b00 	orr.w	fp, fp, r0
 800d696:	3304      	adds	r3, #4
 800d698:	e7ae      	b.n	800d5f8 <__gethex+0x15c>
 800d69a:	45b1      	cmp	r9, r6
 800d69c:	d8ea      	bhi.n	800d674 <__gethex+0x1d8>
 800d69e:	492b      	ldr	r1, [pc, #172]	@ (800d74c <__gethex+0x2b0>)
 800d6a0:	9303      	str	r3, [sp, #12]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f7ff fe3d 	bl	800d324 <strncmp>
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d1e1      	bne.n	800d674 <__gethex+0x1d8>
 800d6b0:	e7a2      	b.n	800d5f8 <__gethex+0x15c>
 800d6b2:	1ea9      	subs	r1, r5, #2
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f7fe f878 	bl	800b7aa <__any_on>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d0c2      	beq.n	800d644 <__gethex+0x1a8>
 800d6be:	f04f 0903 	mov.w	r9, #3
 800d6c2:	e7c1      	b.n	800d648 <__gethex+0x1ac>
 800d6c4:	da09      	bge.n	800d6da <__gethex+0x23e>
 800d6c6:	1b75      	subs	r5, r6, r5
 800d6c8:	4621      	mov	r1, r4
 800d6ca:	9801      	ldr	r0, [sp, #4]
 800d6cc:	462a      	mov	r2, r5
 800d6ce:	f7fd fe33 	bl	800b338 <__lshift>
 800d6d2:	1b7f      	subs	r7, r7, r5
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	f100 0a14 	add.w	sl, r0, #20
 800d6da:	f04f 0900 	mov.w	r9, #0
 800d6de:	e7b8      	b.n	800d652 <__gethex+0x1b6>
 800d6e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6e4:	42bd      	cmp	r5, r7
 800d6e6:	dd6f      	ble.n	800d7c8 <__gethex+0x32c>
 800d6e8:	1bed      	subs	r5, r5, r7
 800d6ea:	42ae      	cmp	r6, r5
 800d6ec:	dc34      	bgt.n	800d758 <__gethex+0x2bc>
 800d6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	d022      	beq.n	800d73c <__gethex+0x2a0>
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d024      	beq.n	800d744 <__gethex+0x2a8>
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d115      	bne.n	800d72a <__gethex+0x28e>
 800d6fe:	42ae      	cmp	r6, r5
 800d700:	d113      	bne.n	800d72a <__gethex+0x28e>
 800d702:	2e01      	cmp	r6, #1
 800d704:	d10b      	bne.n	800d71e <__gethex+0x282>
 800d706:	9a02      	ldr	r2, [sp, #8]
 800d708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	2301      	movs	r3, #1
 800d710:	6123      	str	r3, [r4, #16]
 800d712:	f8ca 3000 	str.w	r3, [sl]
 800d716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d718:	2562      	movs	r5, #98	@ 0x62
 800d71a:	601c      	str	r4, [r3, #0]
 800d71c:	e73a      	b.n	800d594 <__gethex+0xf8>
 800d71e:	1e71      	subs	r1, r6, #1
 800d720:	4620      	mov	r0, r4
 800d722:	f7fe f842 	bl	800b7aa <__any_on>
 800d726:	2800      	cmp	r0, #0
 800d728:	d1ed      	bne.n	800d706 <__gethex+0x26a>
 800d72a:	9801      	ldr	r0, [sp, #4]
 800d72c:	4621      	mov	r1, r4
 800d72e:	f7fd fbeb 	bl	800af08 <_Bfree>
 800d732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d734:	2300      	movs	r3, #0
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	2550      	movs	r5, #80	@ 0x50
 800d73a:	e72b      	b.n	800d594 <__gethex+0xf8>
 800d73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1f3      	bne.n	800d72a <__gethex+0x28e>
 800d742:	e7e0      	b.n	800d706 <__gethex+0x26a>
 800d744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1dd      	bne.n	800d706 <__gethex+0x26a>
 800d74a:	e7ee      	b.n	800d72a <__gethex+0x28e>
 800d74c:	0800e3a8 	.word	0x0800e3a8
 800d750:	0800e23e 	.word	0x0800e23e
 800d754:	0800e434 	.word	0x0800e434
 800d758:	1e6f      	subs	r7, r5, #1
 800d75a:	f1b9 0f00 	cmp.w	r9, #0
 800d75e:	d130      	bne.n	800d7c2 <__gethex+0x326>
 800d760:	b127      	cbz	r7, 800d76c <__gethex+0x2d0>
 800d762:	4639      	mov	r1, r7
 800d764:	4620      	mov	r0, r4
 800d766:	f7fe f820 	bl	800b7aa <__any_on>
 800d76a:	4681      	mov	r9, r0
 800d76c:	117a      	asrs	r2, r7, #5
 800d76e:	2301      	movs	r3, #1
 800d770:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d774:	f007 071f 	and.w	r7, r7, #31
 800d778:	40bb      	lsls	r3, r7
 800d77a:	4213      	tst	r3, r2
 800d77c:	4629      	mov	r1, r5
 800d77e:	4620      	mov	r0, r4
 800d780:	bf18      	it	ne
 800d782:	f049 0902 	orrne.w	r9, r9, #2
 800d786:	f7ff fe22 	bl	800d3ce <rshift>
 800d78a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d78e:	1b76      	subs	r6, r6, r5
 800d790:	2502      	movs	r5, #2
 800d792:	f1b9 0f00 	cmp.w	r9, #0
 800d796:	d047      	beq.n	800d828 <__gethex+0x38c>
 800d798:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d015      	beq.n	800d7cc <__gethex+0x330>
 800d7a0:	2b03      	cmp	r3, #3
 800d7a2:	d017      	beq.n	800d7d4 <__gethex+0x338>
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d109      	bne.n	800d7bc <__gethex+0x320>
 800d7a8:	f019 0f02 	tst.w	r9, #2
 800d7ac:	d006      	beq.n	800d7bc <__gethex+0x320>
 800d7ae:	f8da 3000 	ldr.w	r3, [sl]
 800d7b2:	ea49 0903 	orr.w	r9, r9, r3
 800d7b6:	f019 0f01 	tst.w	r9, #1
 800d7ba:	d10e      	bne.n	800d7da <__gethex+0x33e>
 800d7bc:	f045 0510 	orr.w	r5, r5, #16
 800d7c0:	e032      	b.n	800d828 <__gethex+0x38c>
 800d7c2:	f04f 0901 	mov.w	r9, #1
 800d7c6:	e7d1      	b.n	800d76c <__gethex+0x2d0>
 800d7c8:	2501      	movs	r5, #1
 800d7ca:	e7e2      	b.n	800d792 <__gethex+0x2f6>
 800d7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7ce:	f1c3 0301 	rsb	r3, r3, #1
 800d7d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0f0      	beq.n	800d7bc <__gethex+0x320>
 800d7da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d7de:	f104 0314 	add.w	r3, r4, #20
 800d7e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d7e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d7ea:	f04f 0c00 	mov.w	ip, #0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d7f8:	d01b      	beq.n	800d832 <__gethex+0x396>
 800d7fa:	3201      	adds	r2, #1
 800d7fc:	6002      	str	r2, [r0, #0]
 800d7fe:	2d02      	cmp	r5, #2
 800d800:	f104 0314 	add.w	r3, r4, #20
 800d804:	d13c      	bne.n	800d880 <__gethex+0x3e4>
 800d806:	f8d8 2000 	ldr.w	r2, [r8]
 800d80a:	3a01      	subs	r2, #1
 800d80c:	42b2      	cmp	r2, r6
 800d80e:	d109      	bne.n	800d824 <__gethex+0x388>
 800d810:	1171      	asrs	r1, r6, #5
 800d812:	2201      	movs	r2, #1
 800d814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d818:	f006 061f 	and.w	r6, r6, #31
 800d81c:	fa02 f606 	lsl.w	r6, r2, r6
 800d820:	421e      	tst	r6, r3
 800d822:	d13a      	bne.n	800d89a <__gethex+0x3fe>
 800d824:	f045 0520 	orr.w	r5, r5, #32
 800d828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d82a:	601c      	str	r4, [r3, #0]
 800d82c:	9b02      	ldr	r3, [sp, #8]
 800d82e:	601f      	str	r7, [r3, #0]
 800d830:	e6b0      	b.n	800d594 <__gethex+0xf8>
 800d832:	4299      	cmp	r1, r3
 800d834:	f843 cc04 	str.w	ip, [r3, #-4]
 800d838:	d8d9      	bhi.n	800d7ee <__gethex+0x352>
 800d83a:	68a3      	ldr	r3, [r4, #8]
 800d83c:	459b      	cmp	fp, r3
 800d83e:	db17      	blt.n	800d870 <__gethex+0x3d4>
 800d840:	6861      	ldr	r1, [r4, #4]
 800d842:	9801      	ldr	r0, [sp, #4]
 800d844:	3101      	adds	r1, #1
 800d846:	f7fd fb1f 	bl	800ae88 <_Balloc>
 800d84a:	4681      	mov	r9, r0
 800d84c:	b918      	cbnz	r0, 800d856 <__gethex+0x3ba>
 800d84e:	4b1a      	ldr	r3, [pc, #104]	@ (800d8b8 <__gethex+0x41c>)
 800d850:	4602      	mov	r2, r0
 800d852:	2184      	movs	r1, #132	@ 0x84
 800d854:	e6c5      	b.n	800d5e2 <__gethex+0x146>
 800d856:	6922      	ldr	r2, [r4, #16]
 800d858:	3202      	adds	r2, #2
 800d85a:	f104 010c 	add.w	r1, r4, #12
 800d85e:	0092      	lsls	r2, r2, #2
 800d860:	300c      	adds	r0, #12
 800d862:	f7ff fd81 	bl	800d368 <memcpy>
 800d866:	4621      	mov	r1, r4
 800d868:	9801      	ldr	r0, [sp, #4]
 800d86a:	f7fd fb4d 	bl	800af08 <_Bfree>
 800d86e:	464c      	mov	r4, r9
 800d870:	6923      	ldr	r3, [r4, #16]
 800d872:	1c5a      	adds	r2, r3, #1
 800d874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d878:	6122      	str	r2, [r4, #16]
 800d87a:	2201      	movs	r2, #1
 800d87c:	615a      	str	r2, [r3, #20]
 800d87e:	e7be      	b.n	800d7fe <__gethex+0x362>
 800d880:	6922      	ldr	r2, [r4, #16]
 800d882:	455a      	cmp	r2, fp
 800d884:	dd0b      	ble.n	800d89e <__gethex+0x402>
 800d886:	2101      	movs	r1, #1
 800d888:	4620      	mov	r0, r4
 800d88a:	f7ff fda0 	bl	800d3ce <rshift>
 800d88e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d892:	3701      	adds	r7, #1
 800d894:	42bb      	cmp	r3, r7
 800d896:	f6ff aee0 	blt.w	800d65a <__gethex+0x1be>
 800d89a:	2501      	movs	r5, #1
 800d89c:	e7c2      	b.n	800d824 <__gethex+0x388>
 800d89e:	f016 061f 	ands.w	r6, r6, #31
 800d8a2:	d0fa      	beq.n	800d89a <__gethex+0x3fe>
 800d8a4:	4453      	add	r3, sl
 800d8a6:	f1c6 0620 	rsb	r6, r6, #32
 800d8aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d8ae:	f7fd fbdd 	bl	800b06c <__hi0bits>
 800d8b2:	42b0      	cmp	r0, r6
 800d8b4:	dbe7      	blt.n	800d886 <__gethex+0x3ea>
 800d8b6:	e7f0      	b.n	800d89a <__gethex+0x3fe>
 800d8b8:	0800e23e 	.word	0x0800e23e

0800d8bc <L_shift>:
 800d8bc:	f1c2 0208 	rsb	r2, r2, #8
 800d8c0:	0092      	lsls	r2, r2, #2
 800d8c2:	b570      	push	{r4, r5, r6, lr}
 800d8c4:	f1c2 0620 	rsb	r6, r2, #32
 800d8c8:	6843      	ldr	r3, [r0, #4]
 800d8ca:	6804      	ldr	r4, [r0, #0]
 800d8cc:	fa03 f506 	lsl.w	r5, r3, r6
 800d8d0:	432c      	orrs	r4, r5
 800d8d2:	40d3      	lsrs	r3, r2
 800d8d4:	6004      	str	r4, [r0, #0]
 800d8d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d8da:	4288      	cmp	r0, r1
 800d8dc:	d3f4      	bcc.n	800d8c8 <L_shift+0xc>
 800d8de:	bd70      	pop	{r4, r5, r6, pc}

0800d8e0 <__match>:
 800d8e0:	b530      	push	{r4, r5, lr}
 800d8e2:	6803      	ldr	r3, [r0, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ea:	b914      	cbnz	r4, 800d8f2 <__match+0x12>
 800d8ec:	6003      	str	r3, [r0, #0]
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	bd30      	pop	{r4, r5, pc}
 800d8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d8fa:	2d19      	cmp	r5, #25
 800d8fc:	bf98      	it	ls
 800d8fe:	3220      	addls	r2, #32
 800d900:	42a2      	cmp	r2, r4
 800d902:	d0f0      	beq.n	800d8e6 <__match+0x6>
 800d904:	2000      	movs	r0, #0
 800d906:	e7f3      	b.n	800d8f0 <__match+0x10>

0800d908 <__hexnan>:
 800d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90c:	680b      	ldr	r3, [r1, #0]
 800d90e:	6801      	ldr	r1, [r0, #0]
 800d910:	115e      	asrs	r6, r3, #5
 800d912:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d916:	f013 031f 	ands.w	r3, r3, #31
 800d91a:	b087      	sub	sp, #28
 800d91c:	bf18      	it	ne
 800d91e:	3604      	addne	r6, #4
 800d920:	2500      	movs	r5, #0
 800d922:	1f37      	subs	r7, r6, #4
 800d924:	4682      	mov	sl, r0
 800d926:	4690      	mov	r8, r2
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d92e:	46b9      	mov	r9, r7
 800d930:	463c      	mov	r4, r7
 800d932:	9502      	str	r5, [sp, #8]
 800d934:	46ab      	mov	fp, r5
 800d936:	784a      	ldrb	r2, [r1, #1]
 800d938:	1c4b      	adds	r3, r1, #1
 800d93a:	9303      	str	r3, [sp, #12]
 800d93c:	b342      	cbz	r2, 800d990 <__hexnan+0x88>
 800d93e:	4610      	mov	r0, r2
 800d940:	9105      	str	r1, [sp, #20]
 800d942:	9204      	str	r2, [sp, #16]
 800d944:	f7ff fd95 	bl	800d472 <__hexdig_fun>
 800d948:	2800      	cmp	r0, #0
 800d94a:	d151      	bne.n	800d9f0 <__hexnan+0xe8>
 800d94c:	9a04      	ldr	r2, [sp, #16]
 800d94e:	9905      	ldr	r1, [sp, #20]
 800d950:	2a20      	cmp	r2, #32
 800d952:	d818      	bhi.n	800d986 <__hexnan+0x7e>
 800d954:	9b02      	ldr	r3, [sp, #8]
 800d956:	459b      	cmp	fp, r3
 800d958:	dd13      	ble.n	800d982 <__hexnan+0x7a>
 800d95a:	454c      	cmp	r4, r9
 800d95c:	d206      	bcs.n	800d96c <__hexnan+0x64>
 800d95e:	2d07      	cmp	r5, #7
 800d960:	dc04      	bgt.n	800d96c <__hexnan+0x64>
 800d962:	462a      	mov	r2, r5
 800d964:	4649      	mov	r1, r9
 800d966:	4620      	mov	r0, r4
 800d968:	f7ff ffa8 	bl	800d8bc <L_shift>
 800d96c:	4544      	cmp	r4, r8
 800d96e:	d952      	bls.n	800da16 <__hexnan+0x10e>
 800d970:	2300      	movs	r3, #0
 800d972:	f1a4 0904 	sub.w	r9, r4, #4
 800d976:	f844 3c04 	str.w	r3, [r4, #-4]
 800d97a:	f8cd b008 	str.w	fp, [sp, #8]
 800d97e:	464c      	mov	r4, r9
 800d980:	461d      	mov	r5, r3
 800d982:	9903      	ldr	r1, [sp, #12]
 800d984:	e7d7      	b.n	800d936 <__hexnan+0x2e>
 800d986:	2a29      	cmp	r2, #41	@ 0x29
 800d988:	d157      	bne.n	800da3a <__hexnan+0x132>
 800d98a:	3102      	adds	r1, #2
 800d98c:	f8ca 1000 	str.w	r1, [sl]
 800d990:	f1bb 0f00 	cmp.w	fp, #0
 800d994:	d051      	beq.n	800da3a <__hexnan+0x132>
 800d996:	454c      	cmp	r4, r9
 800d998:	d206      	bcs.n	800d9a8 <__hexnan+0xa0>
 800d99a:	2d07      	cmp	r5, #7
 800d99c:	dc04      	bgt.n	800d9a8 <__hexnan+0xa0>
 800d99e:	462a      	mov	r2, r5
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f7ff ff8a 	bl	800d8bc <L_shift>
 800d9a8:	4544      	cmp	r4, r8
 800d9aa:	d936      	bls.n	800da1a <__hexnan+0x112>
 800d9ac:	f1a8 0204 	sub.w	r2, r8, #4
 800d9b0:	4623      	mov	r3, r4
 800d9b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d9ba:	429f      	cmp	r7, r3
 800d9bc:	d2f9      	bcs.n	800d9b2 <__hexnan+0xaa>
 800d9be:	1b3b      	subs	r3, r7, r4
 800d9c0:	f023 0303 	bic.w	r3, r3, #3
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	3401      	adds	r4, #1
 800d9c8:	3e03      	subs	r6, #3
 800d9ca:	42b4      	cmp	r4, r6
 800d9cc:	bf88      	it	hi
 800d9ce:	2304      	movhi	r3, #4
 800d9d0:	4443      	add	r3, r8
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f843 2b04 	str.w	r2, [r3], #4
 800d9d8:	429f      	cmp	r7, r3
 800d9da:	d2fb      	bcs.n	800d9d4 <__hexnan+0xcc>
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	b91b      	cbnz	r3, 800d9e8 <__hexnan+0xe0>
 800d9e0:	4547      	cmp	r7, r8
 800d9e2:	d128      	bne.n	800da36 <__hexnan+0x12e>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	603b      	str	r3, [r7, #0]
 800d9e8:	2005      	movs	r0, #5
 800d9ea:	b007      	add	sp, #28
 800d9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f0:	3501      	adds	r5, #1
 800d9f2:	2d08      	cmp	r5, #8
 800d9f4:	f10b 0b01 	add.w	fp, fp, #1
 800d9f8:	dd06      	ble.n	800da08 <__hexnan+0x100>
 800d9fa:	4544      	cmp	r4, r8
 800d9fc:	d9c1      	bls.n	800d982 <__hexnan+0x7a>
 800d9fe:	2300      	movs	r3, #0
 800da00:	f844 3c04 	str.w	r3, [r4, #-4]
 800da04:	2501      	movs	r5, #1
 800da06:	3c04      	subs	r4, #4
 800da08:	6822      	ldr	r2, [r4, #0]
 800da0a:	f000 000f 	and.w	r0, r0, #15
 800da0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da12:	6020      	str	r0, [r4, #0]
 800da14:	e7b5      	b.n	800d982 <__hexnan+0x7a>
 800da16:	2508      	movs	r5, #8
 800da18:	e7b3      	b.n	800d982 <__hexnan+0x7a>
 800da1a:	9b01      	ldr	r3, [sp, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0dd      	beq.n	800d9dc <__hexnan+0xd4>
 800da20:	f1c3 0320 	rsb	r3, r3, #32
 800da24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da28:	40da      	lsrs	r2, r3
 800da2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da2e:	4013      	ands	r3, r2
 800da30:	f846 3c04 	str.w	r3, [r6, #-4]
 800da34:	e7d2      	b.n	800d9dc <__hexnan+0xd4>
 800da36:	3f04      	subs	r7, #4
 800da38:	e7d0      	b.n	800d9dc <__hexnan+0xd4>
 800da3a:	2004      	movs	r0, #4
 800da3c:	e7d5      	b.n	800d9ea <__hexnan+0xe2>

0800da3e <__ascii_mbtowc>:
 800da3e:	b082      	sub	sp, #8
 800da40:	b901      	cbnz	r1, 800da44 <__ascii_mbtowc+0x6>
 800da42:	a901      	add	r1, sp, #4
 800da44:	b142      	cbz	r2, 800da58 <__ascii_mbtowc+0x1a>
 800da46:	b14b      	cbz	r3, 800da5c <__ascii_mbtowc+0x1e>
 800da48:	7813      	ldrb	r3, [r2, #0]
 800da4a:	600b      	str	r3, [r1, #0]
 800da4c:	7812      	ldrb	r2, [r2, #0]
 800da4e:	1e10      	subs	r0, r2, #0
 800da50:	bf18      	it	ne
 800da52:	2001      	movne	r0, #1
 800da54:	b002      	add	sp, #8
 800da56:	4770      	bx	lr
 800da58:	4610      	mov	r0, r2
 800da5a:	e7fb      	b.n	800da54 <__ascii_mbtowc+0x16>
 800da5c:	f06f 0001 	mvn.w	r0, #1
 800da60:	e7f8      	b.n	800da54 <__ascii_mbtowc+0x16>

0800da62 <_realloc_r>:
 800da62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da66:	4680      	mov	r8, r0
 800da68:	4615      	mov	r5, r2
 800da6a:	460c      	mov	r4, r1
 800da6c:	b921      	cbnz	r1, 800da78 <_realloc_r+0x16>
 800da6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da72:	4611      	mov	r1, r2
 800da74:	f7fd b97c 	b.w	800ad70 <_malloc_r>
 800da78:	b92a      	cbnz	r2, 800da86 <_realloc_r+0x24>
 800da7a:	f7fd f905 	bl	800ac88 <_free_r>
 800da7e:	2400      	movs	r4, #0
 800da80:	4620      	mov	r0, r4
 800da82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da86:	f000 f961 	bl	800dd4c <_malloc_usable_size_r>
 800da8a:	4285      	cmp	r5, r0
 800da8c:	4606      	mov	r6, r0
 800da8e:	d802      	bhi.n	800da96 <_realloc_r+0x34>
 800da90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da94:	d8f4      	bhi.n	800da80 <_realloc_r+0x1e>
 800da96:	4629      	mov	r1, r5
 800da98:	4640      	mov	r0, r8
 800da9a:	f7fd f969 	bl	800ad70 <_malloc_r>
 800da9e:	4607      	mov	r7, r0
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d0ec      	beq.n	800da7e <_realloc_r+0x1c>
 800daa4:	42b5      	cmp	r5, r6
 800daa6:	462a      	mov	r2, r5
 800daa8:	4621      	mov	r1, r4
 800daaa:	bf28      	it	cs
 800daac:	4632      	movcs	r2, r6
 800daae:	f7ff fc5b 	bl	800d368 <memcpy>
 800dab2:	4621      	mov	r1, r4
 800dab4:	4640      	mov	r0, r8
 800dab6:	f7fd f8e7 	bl	800ac88 <_free_r>
 800daba:	463c      	mov	r4, r7
 800dabc:	e7e0      	b.n	800da80 <_realloc_r+0x1e>
	...

0800dac0 <_strtoul_l.constprop.0>:
 800dac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dac4:	4e34      	ldr	r6, [pc, #208]	@ (800db98 <_strtoul_l.constprop.0+0xd8>)
 800dac6:	4686      	mov	lr, r0
 800dac8:	460d      	mov	r5, r1
 800daca:	4628      	mov	r0, r5
 800dacc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dad0:	5d37      	ldrb	r7, [r6, r4]
 800dad2:	f017 0708 	ands.w	r7, r7, #8
 800dad6:	d1f8      	bne.n	800daca <_strtoul_l.constprop.0+0xa>
 800dad8:	2c2d      	cmp	r4, #45	@ 0x2d
 800dada:	d12f      	bne.n	800db3c <_strtoul_l.constprop.0+0x7c>
 800dadc:	782c      	ldrb	r4, [r5, #0]
 800dade:	2701      	movs	r7, #1
 800dae0:	1c85      	adds	r5, r0, #2
 800dae2:	f033 0010 	bics.w	r0, r3, #16
 800dae6:	d109      	bne.n	800dafc <_strtoul_l.constprop.0+0x3c>
 800dae8:	2c30      	cmp	r4, #48	@ 0x30
 800daea:	d12c      	bne.n	800db46 <_strtoul_l.constprop.0+0x86>
 800daec:	7828      	ldrb	r0, [r5, #0]
 800daee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800daf2:	2858      	cmp	r0, #88	@ 0x58
 800daf4:	d127      	bne.n	800db46 <_strtoul_l.constprop.0+0x86>
 800daf6:	786c      	ldrb	r4, [r5, #1]
 800daf8:	2310      	movs	r3, #16
 800dafa:	3502      	adds	r5, #2
 800dafc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800db00:	2600      	movs	r6, #0
 800db02:	fbb8 f8f3 	udiv	r8, r8, r3
 800db06:	fb03 f908 	mul.w	r9, r3, r8
 800db0a:	ea6f 0909 	mvn.w	r9, r9
 800db0e:	4630      	mov	r0, r6
 800db10:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800db14:	f1bc 0f09 	cmp.w	ip, #9
 800db18:	d81c      	bhi.n	800db54 <_strtoul_l.constprop.0+0x94>
 800db1a:	4664      	mov	r4, ip
 800db1c:	42a3      	cmp	r3, r4
 800db1e:	dd2a      	ble.n	800db76 <_strtoul_l.constprop.0+0xb6>
 800db20:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800db24:	d007      	beq.n	800db36 <_strtoul_l.constprop.0+0x76>
 800db26:	4580      	cmp	r8, r0
 800db28:	d322      	bcc.n	800db70 <_strtoul_l.constprop.0+0xb0>
 800db2a:	d101      	bne.n	800db30 <_strtoul_l.constprop.0+0x70>
 800db2c:	45a1      	cmp	r9, r4
 800db2e:	db1f      	blt.n	800db70 <_strtoul_l.constprop.0+0xb0>
 800db30:	fb00 4003 	mla	r0, r0, r3, r4
 800db34:	2601      	movs	r6, #1
 800db36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db3a:	e7e9      	b.n	800db10 <_strtoul_l.constprop.0+0x50>
 800db3c:	2c2b      	cmp	r4, #43	@ 0x2b
 800db3e:	bf04      	itt	eq
 800db40:	782c      	ldrbeq	r4, [r5, #0]
 800db42:	1c85      	addeq	r5, r0, #2
 800db44:	e7cd      	b.n	800dae2 <_strtoul_l.constprop.0+0x22>
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1d8      	bne.n	800dafc <_strtoul_l.constprop.0+0x3c>
 800db4a:	2c30      	cmp	r4, #48	@ 0x30
 800db4c:	bf0c      	ite	eq
 800db4e:	2308      	moveq	r3, #8
 800db50:	230a      	movne	r3, #10
 800db52:	e7d3      	b.n	800dafc <_strtoul_l.constprop.0+0x3c>
 800db54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800db58:	f1bc 0f19 	cmp.w	ip, #25
 800db5c:	d801      	bhi.n	800db62 <_strtoul_l.constprop.0+0xa2>
 800db5e:	3c37      	subs	r4, #55	@ 0x37
 800db60:	e7dc      	b.n	800db1c <_strtoul_l.constprop.0+0x5c>
 800db62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800db66:	f1bc 0f19 	cmp.w	ip, #25
 800db6a:	d804      	bhi.n	800db76 <_strtoul_l.constprop.0+0xb6>
 800db6c:	3c57      	subs	r4, #87	@ 0x57
 800db6e:	e7d5      	b.n	800db1c <_strtoul_l.constprop.0+0x5c>
 800db70:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800db74:	e7df      	b.n	800db36 <_strtoul_l.constprop.0+0x76>
 800db76:	1c73      	adds	r3, r6, #1
 800db78:	d106      	bne.n	800db88 <_strtoul_l.constprop.0+0xc8>
 800db7a:	2322      	movs	r3, #34	@ 0x22
 800db7c:	f8ce 3000 	str.w	r3, [lr]
 800db80:	4630      	mov	r0, r6
 800db82:	b932      	cbnz	r2, 800db92 <_strtoul_l.constprop.0+0xd2>
 800db84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db88:	b107      	cbz	r7, 800db8c <_strtoul_l.constprop.0+0xcc>
 800db8a:	4240      	negs	r0, r0
 800db8c:	2a00      	cmp	r2, #0
 800db8e:	d0f9      	beq.n	800db84 <_strtoul_l.constprop.0+0xc4>
 800db90:	b106      	cbz	r6, 800db94 <_strtoul_l.constprop.0+0xd4>
 800db92:	1e69      	subs	r1, r5, #1
 800db94:	6011      	str	r1, [r2, #0]
 800db96:	e7f5      	b.n	800db84 <_strtoul_l.constprop.0+0xc4>
 800db98:	0800dff5 	.word	0x0800dff5

0800db9c <_strtoul_r>:
 800db9c:	f7ff bf90 	b.w	800dac0 <_strtoul_l.constprop.0>

0800dba0 <__ascii_wctomb>:
 800dba0:	4603      	mov	r3, r0
 800dba2:	4608      	mov	r0, r1
 800dba4:	b141      	cbz	r1, 800dbb8 <__ascii_wctomb+0x18>
 800dba6:	2aff      	cmp	r2, #255	@ 0xff
 800dba8:	d904      	bls.n	800dbb4 <__ascii_wctomb+0x14>
 800dbaa:	228a      	movs	r2, #138	@ 0x8a
 800dbac:	601a      	str	r2, [r3, #0]
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbb2:	4770      	bx	lr
 800dbb4:	700a      	strb	r2, [r1, #0]
 800dbb6:	2001      	movs	r0, #1
 800dbb8:	4770      	bx	lr

0800dbba <__swhatbuf_r>:
 800dbba:	b570      	push	{r4, r5, r6, lr}
 800dbbc:	460c      	mov	r4, r1
 800dbbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc2:	2900      	cmp	r1, #0
 800dbc4:	b096      	sub	sp, #88	@ 0x58
 800dbc6:	4615      	mov	r5, r2
 800dbc8:	461e      	mov	r6, r3
 800dbca:	da0d      	bge.n	800dbe8 <__swhatbuf_r+0x2e>
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dbd2:	f04f 0100 	mov.w	r1, #0
 800dbd6:	bf14      	ite	ne
 800dbd8:	2340      	movne	r3, #64	@ 0x40
 800dbda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dbde:	2000      	movs	r0, #0
 800dbe0:	6031      	str	r1, [r6, #0]
 800dbe2:	602b      	str	r3, [r5, #0]
 800dbe4:	b016      	add	sp, #88	@ 0x58
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	466a      	mov	r2, sp
 800dbea:	f000 f879 	bl	800dce0 <_fstat_r>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	dbec      	blt.n	800dbcc <__swhatbuf_r+0x12>
 800dbf2:	9901      	ldr	r1, [sp, #4]
 800dbf4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dbf8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dbfc:	4259      	negs	r1, r3
 800dbfe:	4159      	adcs	r1, r3
 800dc00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc04:	e7eb      	b.n	800dbde <__swhatbuf_r+0x24>

0800dc06 <__smakebuf_r>:
 800dc06:	898b      	ldrh	r3, [r1, #12]
 800dc08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc0a:	079d      	lsls	r5, r3, #30
 800dc0c:	4606      	mov	r6, r0
 800dc0e:	460c      	mov	r4, r1
 800dc10:	d507      	bpl.n	800dc22 <__smakebuf_r+0x1c>
 800dc12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc16:	6023      	str	r3, [r4, #0]
 800dc18:	6123      	str	r3, [r4, #16]
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	6163      	str	r3, [r4, #20]
 800dc1e:	b003      	add	sp, #12
 800dc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc22:	ab01      	add	r3, sp, #4
 800dc24:	466a      	mov	r2, sp
 800dc26:	f7ff ffc8 	bl	800dbba <__swhatbuf_r>
 800dc2a:	9f00      	ldr	r7, [sp, #0]
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	4639      	mov	r1, r7
 800dc30:	4630      	mov	r0, r6
 800dc32:	f7fd f89d 	bl	800ad70 <_malloc_r>
 800dc36:	b948      	cbnz	r0, 800dc4c <__smakebuf_r+0x46>
 800dc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc3c:	059a      	lsls	r2, r3, #22
 800dc3e:	d4ee      	bmi.n	800dc1e <__smakebuf_r+0x18>
 800dc40:	f023 0303 	bic.w	r3, r3, #3
 800dc44:	f043 0302 	orr.w	r3, r3, #2
 800dc48:	81a3      	strh	r3, [r4, #12]
 800dc4a:	e7e2      	b.n	800dc12 <__smakebuf_r+0xc>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	6020      	str	r0, [r4, #0]
 800dc50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc54:	81a3      	strh	r3, [r4, #12]
 800dc56:	9b01      	ldr	r3, [sp, #4]
 800dc58:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc5c:	b15b      	cbz	r3, 800dc76 <__smakebuf_r+0x70>
 800dc5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc62:	4630      	mov	r0, r6
 800dc64:	f000 f84e 	bl	800dd04 <_isatty_r>
 800dc68:	b128      	cbz	r0, 800dc76 <__smakebuf_r+0x70>
 800dc6a:	89a3      	ldrh	r3, [r4, #12]
 800dc6c:	f023 0303 	bic.w	r3, r3, #3
 800dc70:	f043 0301 	orr.w	r3, r3, #1
 800dc74:	81a3      	strh	r3, [r4, #12]
 800dc76:	89a3      	ldrh	r3, [r4, #12]
 800dc78:	431d      	orrs	r5, r3
 800dc7a:	81a5      	strh	r5, [r4, #12]
 800dc7c:	e7cf      	b.n	800dc1e <__smakebuf_r+0x18>

0800dc7e <_raise_r>:
 800dc7e:	291f      	cmp	r1, #31
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4605      	mov	r5, r0
 800dc84:	460c      	mov	r4, r1
 800dc86:	d904      	bls.n	800dc92 <_raise_r+0x14>
 800dc88:	2316      	movs	r3, #22
 800dc8a:	6003      	str	r3, [r0, #0]
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc90:	bd38      	pop	{r3, r4, r5, pc}
 800dc92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc94:	b112      	cbz	r2, 800dc9c <_raise_r+0x1e>
 800dc96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc9a:	b94b      	cbnz	r3, 800dcb0 <_raise_r+0x32>
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f000 f853 	bl	800dd48 <_getpid_r>
 800dca2:	4622      	mov	r2, r4
 800dca4:	4601      	mov	r1, r0
 800dca6:	4628      	mov	r0, r5
 800dca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcac:	f000 b83a 	b.w	800dd24 <_kill_r>
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d00a      	beq.n	800dcca <_raise_r+0x4c>
 800dcb4:	1c59      	adds	r1, r3, #1
 800dcb6:	d103      	bne.n	800dcc0 <_raise_r+0x42>
 800dcb8:	2316      	movs	r3, #22
 800dcba:	6003      	str	r3, [r0, #0]
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	e7e7      	b.n	800dc90 <_raise_r+0x12>
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	4798      	blx	r3
 800dcca:	2000      	movs	r0, #0
 800dccc:	e7e0      	b.n	800dc90 <_raise_r+0x12>
	...

0800dcd0 <raise>:
 800dcd0:	4b02      	ldr	r3, [pc, #8]	@ (800dcdc <raise+0xc>)
 800dcd2:	4601      	mov	r1, r0
 800dcd4:	6818      	ldr	r0, [r3, #0]
 800dcd6:	f7ff bfd2 	b.w	800dc7e <_raise_r>
 800dcda:	bf00      	nop
 800dcdc:	20000084 	.word	0x20000084

0800dce0 <_fstat_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d07      	ldr	r5, [pc, #28]	@ (800dd00 <_fstat_r+0x20>)
 800dce4:	2300      	movs	r3, #0
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	4611      	mov	r1, r2
 800dcec:	602b      	str	r3, [r5, #0]
 800dcee:	f7f6 fc51 	bl	8004594 <_fstat>
 800dcf2:	1c43      	adds	r3, r0, #1
 800dcf4:	d102      	bne.n	800dcfc <_fstat_r+0x1c>
 800dcf6:	682b      	ldr	r3, [r5, #0]
 800dcf8:	b103      	cbz	r3, 800dcfc <_fstat_r+0x1c>
 800dcfa:	6023      	str	r3, [r4, #0]
 800dcfc:	bd38      	pop	{r3, r4, r5, pc}
 800dcfe:	bf00      	nop
 800dd00:	20000ff4 	.word	0x20000ff4

0800dd04 <_isatty_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4d06      	ldr	r5, [pc, #24]	@ (800dd20 <_isatty_r+0x1c>)
 800dd08:	2300      	movs	r3, #0
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4608      	mov	r0, r1
 800dd0e:	602b      	str	r3, [r5, #0]
 800dd10:	f7f6 fc50 	bl	80045b4 <_isatty>
 800dd14:	1c43      	adds	r3, r0, #1
 800dd16:	d102      	bne.n	800dd1e <_isatty_r+0x1a>
 800dd18:	682b      	ldr	r3, [r5, #0]
 800dd1a:	b103      	cbz	r3, 800dd1e <_isatty_r+0x1a>
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}
 800dd20:	20000ff4 	.word	0x20000ff4

0800dd24 <_kill_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	@ (800dd44 <_kill_r+0x20>)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	4611      	mov	r1, r2
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	f7f6 fbcf 	bl	80044d4 <_kill>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d102      	bne.n	800dd40 <_kill_r+0x1c>
 800dd3a:	682b      	ldr	r3, [r5, #0]
 800dd3c:	b103      	cbz	r3, 800dd40 <_kill_r+0x1c>
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop
 800dd44:	20000ff4 	.word	0x20000ff4

0800dd48 <_getpid_r>:
 800dd48:	f7f6 bbbc 	b.w	80044c4 <_getpid>

0800dd4c <_malloc_usable_size_r>:
 800dd4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd50:	1f18      	subs	r0, r3, #4
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	bfbc      	itt	lt
 800dd56:	580b      	ldrlt	r3, [r1, r0]
 800dd58:	18c0      	addlt	r0, r0, r3
 800dd5a:	4770      	bx	lr

0800dd5c <_init>:
 800dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5e:	bf00      	nop
 800dd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd62:	bc08      	pop	{r3}
 800dd64:	469e      	mov	lr, r3
 800dd66:	4770      	bx	lr

0800dd68 <_fini>:
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	bf00      	nop
 800dd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6e:	bc08      	pop	{r3}
 800dd70:	469e      	mov	lr, r3
 800dd72:	4770      	bx	lr
